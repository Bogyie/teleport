// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: teleport/machineid/v1/workload_identity.proto

package machineidv1

import (
	v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WorkloadIdentity represents a single, or group of similar, workload
// identities and configures the structure of workload identity credentials and
// authoirzation rules. is a resource that represents the configuration of a trust
// domain federation.
type WorkloadIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The kind of resource represented.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Differentiates variations of the same kind. All resources should
	// contain one, even if it is never populated.
	SubKind string `protobuf:"bytes,2,opt,name=sub_kind,json=subKind,proto3" json:"sub_kind,omitempty"`
	// The version of the resource being represented.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Common metadata that all resources share.
	Metadata *v1.Metadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The configured properties of the WorkloadIdentity
	Spec *WorkloadIdentitySpec `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *WorkloadIdentity) Reset() {
	*x = WorkloadIdentity{}
	mi := &file_teleport_machineid_v1_workload_identity_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIdentity) ProtoMessage() {}

func (x *WorkloadIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_workload_identity_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIdentity.ProtoReflect.Descriptor instead.
func (*WorkloadIdentity) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_workload_identity_proto_rawDescGZIP(), []int{0}
}

func (x *WorkloadIdentity) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *WorkloadIdentity) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *WorkloadIdentity) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *WorkloadIdentity) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *WorkloadIdentity) GetSpec() *WorkloadIdentitySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// TODO
type WorkloadIdentityRuleCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute string `protobuf:"bytes,1,opt,name=attribute,proto3" json:"attribute,omitempty"`
	Equals    string `protobuf:"bytes,2,opt,name=equals,proto3" json:"equals,omitempty"`
}

func (x *WorkloadIdentityRuleCondition) Reset() {
	*x = WorkloadIdentityRuleCondition{}
	mi := &file_teleport_machineid_v1_workload_identity_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIdentityRuleCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIdentityRuleCondition) ProtoMessage() {}

func (x *WorkloadIdentityRuleCondition) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_workload_identity_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIdentityRuleCondition.ProtoReflect.Descriptor instead.
func (*WorkloadIdentityRuleCondition) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_workload_identity_proto_rawDescGZIP(), []int{1}
}

func (x *WorkloadIdentityRuleCondition) GetAttribute() string {
	if x != nil {
		return x.Attribute
	}
	return ""
}

func (x *WorkloadIdentityRuleCondition) GetEquals() string {
	if x != nil {
		return x.Equals
	}
	return ""
}

// WorkloadIdentityRule holds a key-value pair that must match for the rule to
// match.
type WorkloadIdentityRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions []*WorkloadIdentityRuleCondition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *WorkloadIdentityRule) Reset() {
	*x = WorkloadIdentityRule{}
	mi := &file_teleport_machineid_v1_workload_identity_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIdentityRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIdentityRule) ProtoMessage() {}

func (x *WorkloadIdentityRule) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_workload_identity_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIdentityRule.ProtoReflect.Descriptor instead.
func (*WorkloadIdentityRule) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_workload_identity_proto_rawDescGZIP(), []int{2}
}

func (x *WorkloadIdentityRule) GetConditions() []*WorkloadIdentityRuleCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

// WorkloadIdentityRules holds the allow and deny authorization rules for the
// WorkloadIdentitySpec.
//
// Deny rules take precedence over allow rules.
type WorkloadIdentityRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allow is a list of rules, each containing a set of attribute matchers.
	// For a rule to match, all matchers within the rule must match.
	// If rules are specified, then at least one rule must match for issuance to
	// be permitted.
	// If no rules are specified, issuance is permitted.
	Allow []*WorkloadIdentityRule `protobuf:"bytes,1,rep,name=allow,proto3" json:"allow,omitempty"`
	// Deny is a set of rules, each containing a set of attribute matchers.
	// For a rule to match, all matchers within the rule must match.
	// If rules are specified, then all rules must not match for issuance to be
	// permitted.
	// If no rules are specified, issuance is permitted.
	Deny []*WorkloadIdentityRule `protobuf:"bytes,2,rep,name=deny,proto3" json:"deny,omitempty"`
}

func (x *WorkloadIdentityRules) Reset() {
	*x = WorkloadIdentityRules{}
	mi := &file_teleport_machineid_v1_workload_identity_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIdentityRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIdentityRules) ProtoMessage() {}

func (x *WorkloadIdentityRules) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_workload_identity_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIdentityRules.ProtoReflect.Descriptor instead.
func (*WorkloadIdentityRules) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_workload_identity_proto_rawDescGZIP(), []int{3}
}

func (x *WorkloadIdentityRules) GetAllow() []*WorkloadIdentityRule {
	if x != nil {
		return x.Allow
	}
	return nil
}

func (x *WorkloadIdentityRules) GetDeny() []*WorkloadIdentityRule {
	if x != nil {
		return x.Deny
	}
	return nil
}

// WorkloadIdentitySPIFFE holds configuration for the issuance of
// SPIFFE-compatible workload identity credentials when this WorkloadIdentity
// is used.
type WorkloadIdentitySPIFFE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the path of the SPIFFE ID that will be issued in workload identity
	// credentials when this WorkloadIdentity is used. It can be templated using
	// attributes.
	//
	// Examples:
	// - `/no/templating/used` -> `spiffe://example.teleport.sh/no/templating/used`
	// - `/gitlab/{{ join.gitlab.project_path }}` -> `spiffe://example.teleport.sh/gitlab/org/project`
	Id  string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Jwt *SPIFFEJWT `protobuf:"bytes,2,opt,name=jwt,proto3" json:"jwt,omitempty"`
}

func (x *WorkloadIdentitySPIFFE) Reset() {
	*x = WorkloadIdentitySPIFFE{}
	mi := &file_teleport_machineid_v1_workload_identity_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIdentitySPIFFE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIdentitySPIFFE) ProtoMessage() {}

func (x *WorkloadIdentitySPIFFE) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_workload_identity_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIdentitySPIFFE.ProtoReflect.Descriptor instead.
func (*WorkloadIdentitySPIFFE) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_workload_identity_proto_rawDescGZIP(), []int{4}
}

func (x *WorkloadIdentitySPIFFE) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkloadIdentitySPIFFE) GetJwt() *SPIFFEJWT {
	if x != nil {
		return x.Jwt
	}
	return nil
}

// WorkloadIdentitySpec holds the configuration element of the WorkloadIdentity
// resource.
type WorkloadIdentitySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rules holds the authorization rules that must pass for this
	// WorkloadIdentity to be used. See [WorkloadIdentityRules] for further
	// documentation.
	Rules *WorkloadIdentityRules `protobuf:"bytes,1,opt,name=rules,proto3" json:"rules,omitempty"`
	// SPIFFE holds configuration for the structure of SPIFFE-compatible
	// workload identity credentials for this WorkloadIdentity. See
	// [WorkloadIdentitySPIFFE] for further documentation.
	Spiffe *WorkloadIdentitySPIFFE `protobuf:"bytes,2,opt,name=spiffe,proto3" json:"spiffe,omitempty"`
}

func (x *WorkloadIdentitySpec) Reset() {
	*x = WorkloadIdentitySpec{}
	mi := &file_teleport_machineid_v1_workload_identity_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIdentitySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIdentitySpec) ProtoMessage() {}

func (x *WorkloadIdentitySpec) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_workload_identity_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIdentitySpec.ProtoReflect.Descriptor instead.
func (*WorkloadIdentitySpec) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_workload_identity_proto_rawDescGZIP(), []int{5}
}

func (x *WorkloadIdentitySpec) GetRules() *WorkloadIdentityRules {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *WorkloadIdentitySpec) GetSpiffe() *WorkloadIdentitySPIFFE {
	if x != nil {
		return x.Spiffe
	}
	return nil
}

// SPIFFEJWT
type SPIFFEJWT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtraClaims map[string]string `protobuf:"bytes,3,rep,name=extra_claims,json=extraClaims,proto3" json:"extra_claims,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SPIFFEJWT) Reset() {
	*x = SPIFFEJWT{}
	mi := &file_teleport_machineid_v1_workload_identity_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SPIFFEJWT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPIFFEJWT) ProtoMessage() {}

func (x *SPIFFEJWT) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_workload_identity_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPIFFEJWT.ProtoReflect.Descriptor instead.
func (*SPIFFEJWT) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_workload_identity_proto_rawDescGZIP(), []int{6}
}

func (x *SPIFFEJWT) GetExtraClaims() map[string]string {
	if x != nil {
		return x.ExtraClaims
	}
	return nil
}

var File_teleport_machineid_v1_workload_identity_proto protoreflect.FileDescriptor

var file_teleport_machineid_v1_workload_identity_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x01, 0x0a, 0x10, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x3f, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x22, 0x55, 0x0a, 0x1d, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x22, 0x6c, 0x0a, 0x14, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x54, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x41, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x65, 0x6e, 0x79, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x04, 0x64, 0x65, 0x6e, 0x79, 0x22, 0x5c, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x50, 0x49, 0x46, 0x46, 0x45, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x32, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x69,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x50, 0x49, 0x46, 0x46, 0x45, 0x4a, 0x57, 0x54, 0x52, 0x03,
	0x6a, 0x77, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x42, 0x0a, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x69, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x45, 0x0a, 0x06, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x50, 0x49, 0x46, 0x46, 0x45, 0x52,
	0x06, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x09, 0x53, 0x50, 0x49, 0x46,
	0x46, 0x45, 0x4a, 0x57, 0x54, 0x12, 0x54, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x69, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x50, 0x49, 0x46, 0x46, 0x45, 0x4a, 0x57, 0x54, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x56, 0x5a, 0x54, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x69,
	0x64, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_teleport_machineid_v1_workload_identity_proto_rawDescOnce sync.Once
	file_teleport_machineid_v1_workload_identity_proto_rawDescData = file_teleport_machineid_v1_workload_identity_proto_rawDesc
)

func file_teleport_machineid_v1_workload_identity_proto_rawDescGZIP() []byte {
	file_teleport_machineid_v1_workload_identity_proto_rawDescOnce.Do(func() {
		file_teleport_machineid_v1_workload_identity_proto_rawDescData = protoimpl.X.CompressGZIP(file_teleport_machineid_v1_workload_identity_proto_rawDescData)
	})
	return file_teleport_machineid_v1_workload_identity_proto_rawDescData
}

var file_teleport_machineid_v1_workload_identity_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_teleport_machineid_v1_workload_identity_proto_goTypes = []any{
	(*WorkloadIdentity)(nil),              // 0: teleport.machineid.v1.WorkloadIdentity
	(*WorkloadIdentityRuleCondition)(nil), // 1: teleport.machineid.v1.WorkloadIdentityRuleCondition
	(*WorkloadIdentityRule)(nil),          // 2: teleport.machineid.v1.WorkloadIdentityRule
	(*WorkloadIdentityRules)(nil),         // 3: teleport.machineid.v1.WorkloadIdentityRules
	(*WorkloadIdentitySPIFFE)(nil),        // 4: teleport.machineid.v1.WorkloadIdentitySPIFFE
	(*WorkloadIdentitySpec)(nil),          // 5: teleport.machineid.v1.WorkloadIdentitySpec
	(*SPIFFEJWT)(nil),                     // 6: teleport.machineid.v1.SPIFFEJWT
	nil,                                   // 7: teleport.machineid.v1.SPIFFEJWT.ExtraClaimsEntry
	(*v1.Metadata)(nil),                   // 8: teleport.header.v1.Metadata
}
var file_teleport_machineid_v1_workload_identity_proto_depIdxs = []int32{
	8, // 0: teleport.machineid.v1.WorkloadIdentity.metadata:type_name -> teleport.header.v1.Metadata
	5, // 1: teleport.machineid.v1.WorkloadIdentity.spec:type_name -> teleport.machineid.v1.WorkloadIdentitySpec
	1, // 2: teleport.machineid.v1.WorkloadIdentityRule.conditions:type_name -> teleport.machineid.v1.WorkloadIdentityRuleCondition
	2, // 3: teleport.machineid.v1.WorkloadIdentityRules.allow:type_name -> teleport.machineid.v1.WorkloadIdentityRule
	2, // 4: teleport.machineid.v1.WorkloadIdentityRules.deny:type_name -> teleport.machineid.v1.WorkloadIdentityRule
	6, // 5: teleport.machineid.v1.WorkloadIdentitySPIFFE.jwt:type_name -> teleport.machineid.v1.SPIFFEJWT
	3, // 6: teleport.machineid.v1.WorkloadIdentitySpec.rules:type_name -> teleport.machineid.v1.WorkloadIdentityRules
	4, // 7: teleport.machineid.v1.WorkloadIdentitySpec.spiffe:type_name -> teleport.machineid.v1.WorkloadIdentitySPIFFE
	7, // 8: teleport.machineid.v1.SPIFFEJWT.extra_claims:type_name -> teleport.machineid.v1.SPIFFEJWT.ExtraClaimsEntry
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_teleport_machineid_v1_workload_identity_proto_init() }
func file_teleport_machineid_v1_workload_identity_proto_init() {
	if File_teleport_machineid_v1_workload_identity_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teleport_machineid_v1_workload_identity_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_machineid_v1_workload_identity_proto_goTypes,
		DependencyIndexes: file_teleport_machineid_v1_workload_identity_proto_depIdxs,
		MessageInfos:      file_teleport_machineid_v1_workload_identity_proto_msgTypes,
	}.Build()
	File_teleport_machineid_v1_workload_identity_proto = out.File
	file_teleport_machineid_v1_workload_identity_proto_rawDesc = nil
	file_teleport_machineid_v1_workload_identity_proto_goTypes = nil
	file_teleport_machineid_v1_workload_identity_proto_depIdxs = nil
}
