// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: teleport/authorization/v1/authorization_service.proto

package authorizationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AuthorizationService_Authorize_FullMethodName       = "/teleport.authorization.v1.AuthorizationService/Authorize"
	AuthorizationService_BatchAuthorize_FullMethodName  = "/teleport.authorization.v1.AuthorizationService/BatchAuthorize"
	AuthorizationService_Explain_FullMethodName         = "/teleport.authorization.v1.AuthorizationService/Explain"
	AuthorizationService_Enumerate_FullMethodName       = "/teleport.authorization.v1.AuthorizationService/Enumerate"
	AuthorizationService_BatchEnumerate_FullMethodName  = "/teleport.authorization.v1.AuthorizationService/BatchEnumerate"
	AuthorizationService_EnumerateChange_FullMethodName = "/teleport.authorization.v1.AuthorizationService/EnumerateChange"
)

// AuthorizationServiceClient is the client API for AuthorizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationServiceClient interface {
	// Authorize verifies if a Subject can perform a given Action against a
	// Resource. A successful Authorize call does not inherently grant any access,
	// it simply asks RBAC whether access _should_ be granted.
	//
	// Authorize responses are boolean in nature. Use Explain for a nuanced
	// response.
	//
	// Authorize may be called by Teleport services inquiring about user
	// permissions, or by users verifying their own permissions. Queries against
	// unknown or disallowed resources both return PermissionDenied.
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error)
	// Batched variant of Authorize.
	BatchAuthorize(ctx context.Context, in *BatchAuthorizeRequest, opts ...grpc.CallOption) (*BatchAuthorizeResponse, error)
	// Explain runs an Authorize operation and returns detailed data about the
	// factors that decided its outcome.
	Explain(ctx context.Context, in *ExplainRequest, opts ...grpc.CallOption) (*ExplainResponse, error)
	// Enumerate enumerates grants from a (subject, action, resource)
	// authorization tuple where one of the components is missing.
	//
	// Teleport services may enumerate arbitrary combinations. Users may enumerate
	// according to their own permissions ("read" on relevant RBAC entities or
	// "access_graph/read").
	//
	// Subject is considered to be in their most capable state unless a state is
	// explicitly supplied.
	Enumerate(ctx context.Context, in *EnumerateRequest, opts ...grpc.CallOption) (*EnumerateResponse, error)
	// Batched variant of Enumerate.
	BatchEnumerate(ctx context.Context, in *BatchEnumerateRequest, opts ...grpc.CallOption) (*BatchEnumerateResponse, error)
	// EnumerateChange enumerates Grant changes in face of a hypothetical RBAC
	// entity change.
	EnumerateChange(ctx context.Context, in *EnumerateChangeRequest, opts ...grpc.CallOption) (*EnumerateChangeResponse, error)
}

type authorizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationServiceClient(cc grpc.ClientConnInterface) AuthorizationServiceClient {
	return &authorizationServiceClient{cc}
}

func (c *authorizationServiceClient) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorizeResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_Authorize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) BatchAuthorize(ctx context.Context, in *BatchAuthorizeRequest, opts ...grpc.CallOption) (*BatchAuthorizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchAuthorizeResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_BatchAuthorize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) Explain(ctx context.Context, in *ExplainRequest, opts ...grpc.CallOption) (*ExplainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExplainResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_Explain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) Enumerate(ctx context.Context, in *EnumerateRequest, opts ...grpc.CallOption) (*EnumerateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnumerateResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_Enumerate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) BatchEnumerate(ctx context.Context, in *BatchEnumerateRequest, opts ...grpc.CallOption) (*BatchEnumerateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchEnumerateResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_BatchEnumerate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) EnumerateChange(ctx context.Context, in *EnumerateChangeRequest, opts ...grpc.CallOption) (*EnumerateChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnumerateChangeResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_EnumerateChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServiceServer is the server API for AuthorizationService service.
// All implementations must embed UnimplementedAuthorizationServiceServer
// for forward compatibility
type AuthorizationServiceServer interface {
	// Authorize verifies if a Subject can perform a given Action against a
	// Resource. A successful Authorize call does not inherently grant any access,
	// it simply asks RBAC whether access _should_ be granted.
	//
	// Authorize responses are boolean in nature. Use Explain for a nuanced
	// response.
	//
	// Authorize may be called by Teleport services inquiring about user
	// permissions, or by users verifying their own permissions. Queries against
	// unknown or disallowed resources both return PermissionDenied.
	Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error)
	// Batched variant of Authorize.
	BatchAuthorize(context.Context, *BatchAuthorizeRequest) (*BatchAuthorizeResponse, error)
	// Explain runs an Authorize operation and returns detailed data about the
	// factors that decided its outcome.
	Explain(context.Context, *ExplainRequest) (*ExplainResponse, error)
	// Enumerate enumerates grants from a (subject, action, resource)
	// authorization tuple where one of the components is missing.
	//
	// Teleport services may enumerate arbitrary combinations. Users may enumerate
	// according to their own permissions ("read" on relevant RBAC entities or
	// "access_graph/read").
	//
	// Subject is considered to be in their most capable state unless a state is
	// explicitly supplied.
	Enumerate(context.Context, *EnumerateRequest) (*EnumerateResponse, error)
	// Batched variant of Enumerate.
	BatchEnumerate(context.Context, *BatchEnumerateRequest) (*BatchEnumerateResponse, error)
	// EnumerateChange enumerates Grant changes in face of a hypothetical RBAC
	// entity change.
	EnumerateChange(context.Context, *EnumerateChangeRequest) (*EnumerateChangeResponse, error)
	mustEmbedUnimplementedAuthorizationServiceServer()
}

// UnimplementedAuthorizationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServiceServer struct {
}

func (UnimplementedAuthorizationServiceServer) Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedAuthorizationServiceServer) BatchAuthorize(context.Context, *BatchAuthorizeRequest) (*BatchAuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAuthorize not implemented")
}
func (UnimplementedAuthorizationServiceServer) Explain(context.Context, *ExplainRequest) (*ExplainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Explain not implemented")
}
func (UnimplementedAuthorizationServiceServer) Enumerate(context.Context, *EnumerateRequest) (*EnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (UnimplementedAuthorizationServiceServer) BatchEnumerate(context.Context, *BatchEnumerateRequest) (*BatchEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchEnumerate not implemented")
}
func (UnimplementedAuthorizationServiceServer) EnumerateChange(context.Context, *EnumerateChangeRequest) (*EnumerateChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnumerateChange not implemented")
}
func (UnimplementedAuthorizationServiceServer) mustEmbedUnimplementedAuthorizationServiceServer() {}

// UnsafeAuthorizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationServiceServer will
// result in compilation errors.
type UnsafeAuthorizationServiceServer interface {
	mustEmbedUnimplementedAuthorizationServiceServer()
}

func RegisterAuthorizationServiceServer(s grpc.ServiceRegistrar, srv AuthorizationServiceServer) {
	s.RegisterService(&AuthorizationService_ServiceDesc, srv)
}

func _AuthorizationService_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_Authorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).Authorize(ctx, req.(*AuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_BatchAuthorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).BatchAuthorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_BatchAuthorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).BatchAuthorize(ctx, req.(*BatchAuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_Explain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).Explain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_Explain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).Explain(ctx, req.(*ExplainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_Enumerate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).Enumerate(ctx, req.(*EnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_BatchEnumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).BatchEnumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_BatchEnumerate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).BatchEnumerate(ctx, req.(*BatchEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_EnumerateChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnumerateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).EnumerateChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_EnumerateChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).EnumerateChange(ctx, req.(*EnumerateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizationService_ServiceDesc is the grpc.ServiceDesc for AuthorizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.authorization.v1.AuthorizationService",
	HandlerType: (*AuthorizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _AuthorizationService_Authorize_Handler,
		},
		{
			MethodName: "BatchAuthorize",
			Handler:    _AuthorizationService_BatchAuthorize_Handler,
		},
		{
			MethodName: "Explain",
			Handler:    _AuthorizationService_Explain_Handler,
		},
		{
			MethodName: "Enumerate",
			Handler:    _AuthorizationService_Enumerate_Handler,
		},
		{
			MethodName: "BatchEnumerate",
			Handler:    _AuthorizationService_BatchEnumerate_Handler,
		},
		{
			MethodName: "EnumerateChange",
			Handler:    _AuthorizationService_EnumerateChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/authorization/v1/authorization_service.proto",
}
