// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.decision.v1alpha1;

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/decision/v1alpha1;decisionpb";

// Metadata for evaluation requests.
message RequestMetadata {
  // FeatureAssertions is a list of DecisionFeature that the PDP (Policy
  // Decision Point) *must* implement in order to correctly evaluate the
  // decision request. Note that changes that require new features in the PDP in
  // order for it to understand a decision request are rare and should be
  // avoided if possible.
  repeated DecisionFeature feature_assertions = 1;

  // PepVersionHint is the *likely* version of the PEP that will enforce the
  // decision. Not all decision requests can guarantee that the expected PEP
  // (Policy Enforcement Point) version will actually be the version that ends
  // up enforcing the decision. Hard compatibility requirements must be enforced
  // via feature assertions so that PEPs can correctly reject decisions that
  // they cannot enforce.
  string pep_version_hint = 2;

  // IdentityMode dictates how the request identity (tls_identity or
  // ssh_identity) is interpreted by the server.
  RequestIdentityMode identity_mode = 3;
}

// DecisionFeature represents supported PDP (Policy Decision Point) features.
enum DecisionFeature {
  // DECISION_FEATURE_UNSPECIFIED is the default/unspecified value for
  // DecisionFeature. Asserting this feature has no effect.
  DECISION_FEATURE_UNSPECIFIED = 0;
}

// RequestIdentityMode dictates how the request identity (either
// tls_identity or ssh_identity) is interpreted by the server.
enum RequestIdentityMode {
  // Unspecified identity mode.
  // Defaults to _EXPLICIT unless stated otherwise by the RPC.
  REQUEST_IDENTITY_MODE_UNSPECIFIED = 0;
  // The request identity is interpreted as-is, without any changes.
  REQUEST_IDENTITY_MODE_EXPLICIT = 1;
  // The request identity is interpreted as a partial definition, meaning the
  // identity will be augmented with storage queries. For example: the username
  // is supplied by the caller, but roles are queried from storage.
  // Useful for querying the access capabilities of a third-party whose identity
  // isn't fully known.
  REQUEST_IDENTITY_MODE_PARTIAL = 2;
  // The caller identity is used. The request identity is completely ignored.
  // Useful for querying the access capabilities of the current user.
  REQUEST_IDENTITY_MODE_CALLER_IDENTITY = 3;
}
