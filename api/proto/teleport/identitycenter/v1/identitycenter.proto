// Copyright 2024 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.identitycenter.v1;

import "teleport/header/v1/metadata.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/identitycenter/v1;identitycenterv1";

// PermissionSetInfo represents a permission set that is available on a given
// account. This is not intended to be a complete description of a PermissionSet,
// but just enough to identify it for cross-referencing when included in an
// Account record.
message PermissionSetInfo {
  // Arn is the unique ARN for this permission set
  string arn = 1;

  // Title is the human-readable name of the permission set
  string name = 2;

  // Role is an optional ARN indicating role provisioned to this account. May be
  // empty if the permission set is not provisioned or is not relevant in the
  string role = 3;
}

// AccountStatus represents holds any commonly-changing data about an Identity
// Center account.
message AccountStatus {}

// Account is an AWS account
message Account {
  string kind = 1;
  string sub_kind = 2;
  string version = 3;
  teleport.header.v1.Metadata metadata = 4;
  AccountSpec spec = 5;
  AccountStatus status = 6;
}

// AccountSpec holds non-changing data about an AWS Account
message AccountSpec {
  // Id is the AWS-assigned PermissionSet ID
  string id = 1;

  // Arn is the unique ARN for this permission set
  string arn = 2;

  // Name is the human-readable name of the permission set
  string name = 3;

  // Description is a heman-readable description of the AWS Permission Set
  string description = 4;

  // StartUrl is the address of the AWS start page
  string start_url = 5;

  // PermissionSets...
  repeated PermissionSetInfo permission_sets = 6;

  // IsOrganizationOwner indicates that this account is the organisation owner,
  // and may have restrictions about adding permission sets
  bool is_organization_owner = 7;
}

// PermissionSet identifies a single permission set by name and ARN
message PermissionSet {
  string kind = 1;
  string sub_kind = 2;
  string version = 3;
  teleport.header.v1.Metadata metadata = 4;
  PermissionSetSpec spec = 5;
}

// PermissionSetSpec holds rarely-changing information about ans AWS pwermission
// set
message PermissionSetSpec {
  // Arn is the unique ARN for this permission set
  string arn = 1;

  // Name is the human-readable name of the permission set
  string name = 2;

  // Description is a human-readable description of the AWS Permission Set
  string description = 3;
}

// AccountAssignment captures the relationship between a PermissionSet
// and an Identity Center Account. It represents two parts of a potential 3-part
// Identity Center Account Assignment. This is the primary requestable resource
// for a user and a user having access to an AccountAssignment resource implies
// that there is a corresponding Account Assignment in AWS Identity Center that
// granting that user the Permission Set specified in that resource, on the
// AWS Account specified in that resource.
message AccountAssignment {
  string kind = 1;
  string sub_kind = 2;
  string version = 3;
  teleport.header.v1.Metadata metadata = 4;
  AccountAssignmentSpec spec = 5;
}

// AccountAssignmentSpec...
message AccountAssignmentSpec {
  string display = 1;
  PermissionSetInfo permission_set = 2;
  string account_name = 3;
  string account_id = 4;
}

// PrincipalAssignment relates a collection of PermissionSets and Applications
// to a given principal
message PrincipalAssignment {
  string kind = 1;
  string sub_kind = 2;
  string version = 3;
  teleport.header.v1.Metadata metadata = 4;
  PrincipalAssignmentSpec spec = 5;
  PrincipalAssignmentStatus status = 6;
}

// PrincipalType indicates the type of principal represented by a PrincipalAssignment
enum PrincipalType {
  PRINCIPAL_TYPE_UNSPECIFIED = 0;
  PRINCIPAL_TYPE_USER = 1;
  PRINCIPAL_TYPE_ACCESS_LIST = 2;
}

// PrincipalAssignmentSpec
message PrincipalAssignmentSpec {
  // PrincipalId identifies what kind of principal this assignment applies to, either
  // a User or a Group (i.e. AccessList)
  PrincipalType principal_type = 1;

  // PrincipalId identifies the Teleport User or Access List that this assignment
  // applies to
  string principal_id = 2;

  // ExternalIdSource
  string external_id_source = 3;

  // ExternalID identifies the user or group within AWS
  string external_id = 4;
}

// State indicates the current stage of the provisioning pipeline a resource is
// in.
enum State {
  STATE_UNSPECIFIED = 0;
  STATE_STALE = 1;
  STATE_PROVISIONED = 2;
  STATE_DELETED = 3;
}

// AccountAssignmentRef is a minimal link between an AWS Account and a
// permission set. Optionally contains human-readable metadata describing the
// target AWS Account and Permission Set.
message AccountAssignmentRef {
  // AccountId holds the AWS account ID for the target AWS account. This will
  // always be set
  string account_id = 1;

  // AccountName optionally holds the heman-readable name of the target AwS
  // account
  string account_name = 2;

  // PermissionSetArn holds the target Permission Set ARN. This will always be
  // set.
  string permission_set_arn = 3;

  // PermissionSetName optionally holds the human-readable name of the target
  // AWS Permission Set.
  string permission_set_name = 4;
}

// PrincipalAssignmentAssignmentStatus
message PrincipalAssignmentStatus {
  State state = 1;
  repeated AccountAssignmentRef assignments = 2;
  repeated string applications = 3;
  string error = 4;
}
