// Code generated by goderive DO NOT EDIT.

package accesslist

import (
	header "github.com/gravitational/teleport/api/types/header"
)

// deriveTeleportEqualAccessListOwner returns whether this and that are equal.
func deriveTeleportEqualAccessListOwner(this, that *Owner) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Name == that.Name &&
			this.Description == that.Description
}

// deriveTeleportEqualAccessList returns whether this and that are equal.
func deriveTeleportEqualAccessList(this, that *AccessList) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveTeleportEqual(&this.ResourceHeader, &that.ResourceHeader) &&
			deriveTeleportEqual_(&this.Spec, &that.Spec)
}

// deriveTeleportEqualAccessListMember returns whether this and that are equal.
func deriveTeleportEqualAccessListMember(this, that *AccessListMember) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveTeleportEqual(&this.ResourceHeader, &that.ResourceHeader) &&
			deriveTeleportEqual_1(&this.Spec, &that.Spec)
}

// deriveTeleportEqualAccessListReview returns whether this and that are equal.
func deriveTeleportEqualAccessListReview(this, that *Review) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveTeleportEqual(&this.ResourceHeader, &that.ResourceHeader) &&
			deriveTeleportEqual_2(&this.Spec, &that.Spec)
}

// deriveTeleportEqualAccessListReviewChanges returns whether this and that are equal.
func deriveTeleportEqualAccessListReviewChanges(this, that *ReviewChanges) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.MembershipRequirementsChanged.Equal(that.MembershipRequirementsChanged) &&
			deriveTeleportEqual_3(this.RemovedMembers, that.RemovedMembers) &&
			this.ReviewFrequencyChanged == that.ReviewFrequencyChanged &&
			this.ReviewDayOfMonthChanged == that.ReviewDayOfMonthChanged
}

// deriveTeleportEqual returns whether this and that are equal.
func deriveTeleportEqual(this, that *header.ResourceHeader) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Kind == that.Kind &&
			this.SubKind == that.SubKind &&
			this.Version == that.Version &&
			deriveTeleportEqual_4(&this.Metadata, &that.Metadata)
}

// deriveTeleportEqual_ returns whether this and that are equal.
func deriveTeleportEqual_(this, that *Spec) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Title == that.Title &&
			this.Description == that.Description &&
			deriveTeleportEqual_5(this.Owners, that.Owners) &&
			deriveTeleportEqual_6(&this.Audit, &that.Audit) &&
			this.MembershipRequires.Equal(&that.MembershipRequires) &&
			this.OwnershipRequires.Equal(&that.OwnershipRequires) &&
			deriveTeleportEqual_7(&this.Grants, &that.Grants) &&
			deriveTeleportEqual_7(&this.OwnerGrants, &that.OwnerGrants)
}

// deriveTeleportEqual_1 returns whether this and that are equal.
func deriveTeleportEqual_1(this, that *AccessListMemberSpec) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.AccessList == that.AccessList &&
			this.Name == that.Name &&
			this.Joined.Equal(that.Joined) &&
			this.Expires.Equal(that.Expires) &&
			this.Reason == that.Reason &&
			this.AddedBy == that.AddedBy
}

// deriveTeleportEqual_2 returns whether this and that are equal.
func deriveTeleportEqual_2(this, that *ReviewSpec) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.AccessList == that.AccessList &&
			deriveTeleportEqual_3(this.Reviewers, that.Reviewers) &&
			this.ReviewDate.Equal(that.ReviewDate) &&
			this.Notes == that.Notes &&
			this.Changes.Equal(&that.Changes)
}

// deriveTeleportEqual_3 returns whether this and that are equal.
func deriveTeleportEqual_3(this, that []string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

// deriveTeleportEqual_4 returns whether this and that are equal.
func deriveTeleportEqual_4(this, that *header.Metadata) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Name == that.Name &&
			this.Description == that.Description &&
			deriveTeleportEqual_8(this.Labels, that.Labels) &&
			this.Expires.Equal(that.Expires)
}

// deriveTeleportEqual_5 returns whether this and that are equal.
func deriveTeleportEqual_5(this, that []Owner) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i].Equal(&that[i])) {
			return false
		}
	}
	return true
}

// deriveTeleportEqual_6 returns whether this and that are equal.
func deriveTeleportEqual_6(this, that *Audit) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.NextAuditDate.Equal(that.NextAuditDate) &&
			this.Recurrence == that.Recurrence &&
			this.Notifications == that.Notifications
}

// deriveTeleportEqual_7 returns whether this and that are equal.
func deriveTeleportEqual_7(this, that *Grants) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveTeleportEqual_3(this.Roles, that.Roles) &&
			deriveTeleportEqual_9(this.Traits, that.Traits)
}

// deriveTeleportEqual_8 returns whether this and that are equal.
func deriveTeleportEqual_8(this, that map[string]string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

// deriveTeleportEqual_9 returns whether this and that are equal.
func deriveTeleportEqual_9(this, that map[string][]string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(deriveTeleportEqual_3(v, thatv)) {
			return false
		}
	}
	return true
}
