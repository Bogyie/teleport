/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "web/v1/web.proto" (package "web.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * GreetRequest
 *
 * @generated from protobuf message web.v1.GreetRequest
 */
export interface GreetRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * GreetResponse
 *
 * @generated from protobuf message web.v1.GreetResponse
 */
export interface GreetResponse {
    /**
     * @generated from protobuf field: string greeting = 1;
     */
    greeting: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GreetRequest$Type extends MessageType<GreetRequest> {
    constructor() {
        super("web.v1.GreetRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GreetRequest>): GreetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<GreetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GreetRequest): GreetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GreetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message web.v1.GreetRequest
 */
export const GreetRequest = new GreetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GreetResponse$Type extends MessageType<GreetResponse> {
    constructor() {
        super("web.v1.GreetResponse", [
            { no: 1, name: "greeting", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GreetResponse>): GreetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.greeting = "";
        if (value !== undefined)
            reflectionMergePartial<GreetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GreetResponse): GreetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string greeting */ 1:
                    message.greeting = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GreetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string greeting = 1; */
        if (message.greeting !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.greeting);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message web.v1.GreetResponse
 */
export const GreetResponse = new GreetResponse$Type();
/**
 * @generated ServiceType for protobuf service web.v1.WebService
 */
export const WebService = new ServiceType("web.v1.WebService", [
    { name: "Greet", options: {}, I: GreetRequest, O: GreetResponse }
]);
