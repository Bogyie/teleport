// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: web/v1/web.proto

package webv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gravitational/teleport/gen/proto/go/web/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WebServiceName is the fully-qualified name of the WebService service.
	WebServiceName = "web.v1.WebService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WebServiceGreetProcedure is the fully-qualified name of the WebService's Greet RPC.
	WebServiceGreetProcedure = "/web.v1.WebService/Greet"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	webServiceServiceDescriptor     = v1.File_web_v1_web_proto.Services().ByName("WebService")
	webServiceGreetMethodDescriptor = webServiceServiceDescriptor.Methods().ByName("Greet")
)

// WebServiceClient is a client for the web.v1.WebService service.
type WebServiceClient interface {
	// Greet
	Greet(context.Context, *connect.Request[v1.GreetRequest]) (*connect.Response[v1.GreetResponse], error)
}

// NewWebServiceClient constructs a client for the web.v1.WebService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWebServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WebServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &webServiceClient{
		greet: connect.NewClient[v1.GreetRequest, v1.GreetResponse](
			httpClient,
			baseURL+WebServiceGreetProcedure,
			connect.WithSchema(webServiceGreetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// webServiceClient implements WebServiceClient.
type webServiceClient struct {
	greet *connect.Client[v1.GreetRequest, v1.GreetResponse]
}

// Greet calls web.v1.WebService.Greet.
func (c *webServiceClient) Greet(ctx context.Context, req *connect.Request[v1.GreetRequest]) (*connect.Response[v1.GreetResponse], error) {
	return c.greet.CallUnary(ctx, req)
}

// WebServiceHandler is an implementation of the web.v1.WebService service.
type WebServiceHandler interface {
	// Greet
	Greet(context.Context, *connect.Request[v1.GreetRequest]) (*connect.Response[v1.GreetResponse], error)
}

// NewWebServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWebServiceHandler(svc WebServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	webServiceGreetHandler := connect.NewUnaryHandler(
		WebServiceGreetProcedure,
		svc.Greet,
		connect.WithSchema(webServiceGreetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/web.v1.WebService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WebServiceGreetProcedure:
			webServiceGreetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWebServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWebServiceHandler struct{}

func (UnimplementedWebServiceHandler) Greet(context.Context, *connect.Request[v1.GreetRequest]) (*connect.Response[v1.GreetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("web.v1.WebService.Greet is not implemented"))
}
