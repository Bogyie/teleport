//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file prehog/v1/teleport.proto (package prehog.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * The kind of user a given username refers to. Usernames should always refer to
 * a valid cluster user (even if temporary, e.g. SSO), but may be Machine ID
 * bot users.
 *
 * @generated from enum prehog.v1.UserKind
 */
export enum UserKind {
  /**
   * Indicates a legacy cluster emitting events without a defined user kind.
   * Note that users (from PostHog's perspective) can be identified via future
   * events if the cluster is upgraded to specify this field.
   *
   * PostHog property value: ""
   *
   * @generated from enum value: USER_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Indicates the user associated with this event is human, either created
   * locally or via SSO.
   *
   * PostHog property value: "human"
   *
   * @generated from enum value: USER_KIND_HUMAN = 1;
   */
  HUMAN = 1,

  /**
   * Indicates the user associated with this event is a Machine ID bot user.
   *
   * PostHog property value: "bot"
   *
   * @generated from enum value: USER_KIND_BOT = 2;
   */
  BOT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(UserKind)
proto3.util.setEnumType(UserKind, "prehog.v1.UserKind", [
  { no: 0, name: "USER_KIND_UNSPECIFIED" },
  { no: 1, name: "USER_KIND_HUMAN" },
  { no: 2, name: "USER_KIND_BOT" },
]);

/**
 * the kind of a "resource" (e.g. a node, a database, a desktop, etc.)
 * Keep in sync with prehog/v1alpha/teleport.proto
 *
 * @generated from enum prehog.v1.ResourceKind
 */
export enum ResourceKind {
  /**
   * @generated from enum value: RESOURCE_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * PostHog property value: "node"
   *
   * @generated from enum value: RESOURCE_KIND_NODE = 1;
   */
  NODE = 1,

  /**
   * PostHog property value: "app_server"
   *
   * @generated from enum value: RESOURCE_KIND_APP_SERVER = 2;
   */
  APP_SERVER = 2,

  /**
   * PostHog property value: "kube_server"
   *
   * @generated from enum value: RESOURCE_KIND_KUBE_SERVER = 3;
   */
  KUBE_SERVER = 3,

  /**
   * PostHog property value: "db_server"
   *
   * @generated from enum value: RESOURCE_KIND_DB_SERVER = 4;
   */
  DB_SERVER = 4,

  /**
   * PostHog property value: "windows_desktop"
   *
   * @generated from enum value: RESOURCE_KIND_WINDOWS_DESKTOP = 5;
   */
  WINDOWS_DESKTOP = 5,

  /**
   * ServerV3 ("node") heartbeat with a subkind of "openssh" (as opposed to
   * empty or "teleport"); not used in keepalives
   *
   * PostHog property value: "node.openssh"
   *
   * @generated from enum value: RESOURCE_KIND_NODE_OPENSSH = 6;
   */
  NODE_OPENSSH = 6,

  /**
   * ServerV3 ("node") heartbeat with a subkind of "openssh-ec2-ice".
   * Nodes that map EC2 instances and are accessed using EC2 Instance Connect Endpoint.
   * Not used in keepalives.
   * This is the SubKind SubKindOpenSSHEICENode in teleport repo.
   *
   * PostHog property value: "node.openssh_ec2_ice"
   *
   * @generated from enum value: RESOURCE_KIND_NODE_OPENSSH_EICE = 7;
   */
  NODE_OPENSSH_EICE = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(ResourceKind)
proto3.util.setEnumType(ResourceKind, "prehog.v1.ResourceKind", [
  { no: 0, name: "RESOURCE_KIND_UNSPECIFIED" },
  { no: 1, name: "RESOURCE_KIND_NODE" },
  { no: 2, name: "RESOURCE_KIND_APP_SERVER" },
  { no: 3, name: "RESOURCE_KIND_KUBE_SERVER" },
  { no: 4, name: "RESOURCE_KIND_DB_SERVER" },
  { no: 5, name: "RESOURCE_KIND_WINDOWS_DESKTOP" },
  { no: 6, name: "RESOURCE_KIND_NODE_OPENSSH" },
  { no: 7, name: "RESOURCE_KIND_NODE_OPENSSH_EICE" },
]);

/**
 * counters for user activity coming from a specific auth server from a specific
 * cluster, for a time window of up to 15 minutes
 *
 * PostHog event: tp.user.activity
 *
 * @generated from message prehog.v1.UserActivityReport
 */
export class UserActivityReport extends Message<UserActivityReport> {
  /**
   * randomly generated UUID for this specific report, 16 bytes (in string order)
   *
   * PostHog property: tp.report_uuid (in 8-4-4-4-12 string form)
   *
   * @generated from field: bytes report_uuid = 1;
   */
  reportUuid = new Uint8Array(0);

  /**
   * cluster name, anonymized, 32 bytes (HMAC-SHA-256)
   *
   * PostHog property: tp.cluster_name (in base64)
   *
   * @generated from field: bytes cluster_name = 2;
   */
  clusterName = new Uint8Array(0);

  /**
   * hostid of the auth that collected this report, anonymized, 32 bytes (HMAC-SHA-256)
   *
   * PostHog property: tp.reporter_hostid (in base64)
   *
   * @generated from field: bytes reporter_hostid = 3;
   */
  reporterHostid = new Uint8Array(0);

  /**
   * beginning of the time window for this data; ending is not specified but is
   * intended to be at most 15 minutes
   *
   * PostHog timestamp (not a property, the ingest time is tp.report_time instead)
   *
   * @generated from field: google.protobuf.Timestamp start_time = 4;
   */
  startTime?: Timestamp;

  /**
   * one set of counters for each user
   *
   * PostHog property: tp.records (encoded as a map keyed by username, not as a list)
   *
   * @generated from field: repeated prehog.v1.UserActivityRecord records = 5;
   */
  records: UserActivityRecord[] = [];

  constructor(data?: PartialMessage<UserActivityReport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1.UserActivityReport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "report_uuid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "cluster_name", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "reporter_hostid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "start_time", kind: "message", T: Timestamp },
    { no: 5, name: "records", kind: "message", T: UserActivityRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserActivityReport {
    return new UserActivityReport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserActivityReport {
    return new UserActivityReport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserActivityReport {
    return new UserActivityReport().fromJsonString(jsonString, options);
  }

  static equals(a: UserActivityReport | PlainMessage<UserActivityReport> | undefined, b: UserActivityReport | PlainMessage<UserActivityReport> | undefined): boolean {
    return proto3.util.equals(UserActivityReport, a, b);
  }
}

/**
 * a set of activity counters for a single user; some old versions report
 * "ssh_port_sessions", counting both SSH port forwards and kubectl port-forward
 * connections in a single counter
 *
 * fields other than user_name are encoded as the same field name in PostHog
 *
 * @generated from message prehog.v1.UserActivityRecord
 */
export class UserActivityRecord extends Message<UserActivityRecord> {
  /**
   * anonymized, 32 bytes (HMAC-SHA-256)
   *
   * key of the tp.records map in tp.user.activity (in base64)
   *
   * @generated from field: bytes user_name = 1;
   */
  userName = new Uint8Array(0);

  /**
   * Indicates the type of user, e.g. bot or human, if known.
   *
   * @generated from field: prehog.v1.UserKind user_kind = 14;
   */
  userKind = UserKind.UNSPECIFIED;

  /**
   * counter of user.login events
   *
   * @generated from field: uint64 logins = 2;
   */
  logins = protoInt64.zero;

  /**
   * counter of session.start events (non-Kube)
   *
   * @generated from field: uint64 ssh_sessions = 3;
   */
  sshSessions = protoInt64.zero;

  /**
   * counter of app.session.start events (non-TCP)
   *
   * @generated from field: uint64 app_sessions = 4;
   */
  appSessions = protoInt64.zero;

  /**
   * counter of session.start events (only Kube)
   *
   * @generated from field: uint64 kube_sessions = 5;
   */
  kubeSessions = protoInt64.zero;

  /**
   * counter of db.session.start events
   *
   * @generated from field: uint64 db_sessions = 6;
   */
  dbSessions = protoInt64.zero;

  /**
   * counter of windows.desktop.session.start events
   *
   * @generated from field: uint64 desktop_sessions = 7;
   */
  desktopSessions = protoInt64.zero;

  /**
   * counter of app.session.start events (only TCP)
   *
   * @generated from field: uint64 app_tcp_sessions = 8;
   */
  appTcpSessions = protoInt64.zero;

  /**
   * counter of port events (both SSH and Kube)
   *
   * @generated from field: uint64 ssh_port_sessions = 9 [deprecated = true];
   * @deprecated
   */
  sshPortSessions = protoInt64.zero;

  /**
   * counter of kube.request events
   *
   * @generated from field: uint64 kube_requests = 10;
   */
  kubeRequests = protoInt64.zero;

  /**
   * counter of sftp events
   *
   * @generated from field: uint64 sftp_events = 11;
   */
  sftpEvents = protoInt64.zero;

  /**
   * counter of port events (only SSH)
   *
   * @generated from field: uint64 ssh_port_v2_sessions = 12;
   */
  sshPortV2Sessions = protoInt64.zero;

  /**
   * counter of port events (only Kube)
   *
   * @generated from field: uint64 kube_port_sessions = 13;
   */
  kubePortSessions = protoInt64.zero;

  /**
   * counter of SPIFFE SVIDs issued
   *
   * @generated from field: uint64 spiffe_svids_issued = 15;
   */
  spiffeSvidsIssued = protoInt64.zero;

  /**
   * counter of bot joins
   *
   * @generated from field: uint64 bot_joins = 16;
   */
  botJoins = protoInt64.zero;

  /**
   * counter of certificates issued for this user
   *
   * @generated from field: uint64 certificates_issued = 17;
   */
  certificatesIssued = protoInt64.zero;

  constructor(data?: PartialMessage<UserActivityRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1.UserActivityRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 14, name: "user_kind", kind: "enum", T: proto3.getEnumType(UserKind) },
    { no: 2, name: "logins", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "ssh_sessions", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "app_sessions", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "kube_sessions", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "db_sessions", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "desktop_sessions", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "app_tcp_sessions", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "ssh_port_sessions", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "kube_requests", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "sftp_events", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "ssh_port_v2_sessions", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "kube_port_sessions", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "spiffe_svids_issued", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "bot_joins", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "certificates_issued", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserActivityRecord {
    return new UserActivityRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserActivityRecord {
    return new UserActivityRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserActivityRecord {
    return new UserActivityRecord().fromJsonString(jsonString, options);
  }

  static equals(a: UserActivityRecord | PlainMessage<UserActivityRecord> | undefined, b: UserActivityRecord | PlainMessage<UserActivityRecord> | undefined): boolean {
    return proto3.util.equals(UserActivityRecord, a, b);
  }
}

/**
 * @generated from message prehog.v1.ResourcePresenceReport
 */
export class ResourcePresenceReport extends Message<ResourcePresenceReport> {
  /**
   * randomly generated UUID for this specific report, 16 bytes (in string order)
   *
   * @generated from field: bytes report_uuid = 1;
   */
  reportUuid = new Uint8Array(0);

  /**
   * anonymized, 32 bytes (HMAC-SHA-256)
   *
   * @generated from field: bytes cluster_name = 2;
   */
  clusterName = new Uint8Array(0);

  /**
   * anonymized, 32 bytes (HMAC-SHA-256)
   *
   * @generated from field: bytes reporter_hostid = 3;
   */
  reporterHostid = new Uint8Array(0);

  /**
   * beginning of the time window for this data; ending is not specified but is
   * intended to be at most one hour
   *
   * @generated from field: google.protobuf.Timestamp start_time = 4;
   */
  startTime?: Timestamp;

  /**
   * @generated from field: repeated prehog.v1.ResourceKindPresenceReport resource_kind_reports = 5;
   */
  resourceKindReports: ResourceKindPresenceReport[] = [];

  constructor(data?: PartialMessage<ResourcePresenceReport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1.ResourcePresenceReport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "report_uuid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "cluster_name", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "reporter_hostid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "start_time", kind: "message", T: Timestamp },
    { no: 5, name: "resource_kind_reports", kind: "message", T: ResourceKindPresenceReport, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourcePresenceReport {
    return new ResourcePresenceReport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourcePresenceReport {
    return new ResourcePresenceReport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourcePresenceReport {
    return new ResourcePresenceReport().fromJsonString(jsonString, options);
  }

  static equals(a: ResourcePresenceReport | PlainMessage<ResourcePresenceReport> | undefined, b: ResourcePresenceReport | PlainMessage<ResourcePresenceReport> | undefined): boolean {
    return proto3.util.equals(ResourcePresenceReport, a, b);
  }
}

/**
 * Counts all resources of one kind that were active during the time window
 * to track the number of active resources in a cluster over time.
 *
 * @generated from message prehog.v1.ResourceKindPresenceReport
 */
export class ResourceKindPresenceReport extends Message<ResourceKindPresenceReport> {
  /**
   * the kind of resource
   *
   * @generated from field: prehog.v1.ResourceKind resource_kind = 1;
   */
  resourceKind = ResourceKind.UNSPECIFIED;

  /**
   * first 8 bytes of anonymized resource name
   *
   * @generated from field: repeated fixed64 resource_ids = 2;
   */
  resourceIds: bigint[] = [];

  constructor(data?: PartialMessage<ResourceKindPresenceReport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1.ResourceKindPresenceReport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_kind", kind: "enum", T: proto3.getEnumType(ResourceKind) },
    { no: 2, name: "resource_ids", kind: "scalar", T: 6 /* ScalarType.FIXED64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceKindPresenceReport {
    return new ResourceKindPresenceReport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceKindPresenceReport {
    return new ResourceKindPresenceReport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceKindPresenceReport {
    return new ResourceKindPresenceReport().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceKindPresenceReport | PlainMessage<ResourceKindPresenceReport> | undefined, b: ResourceKindPresenceReport | PlainMessage<ResourceKindPresenceReport> | undefined): boolean {
    return proto3.util.equals(ResourceKindPresenceReport, a, b);
  }
}

/**
 * @generated from message prehog.v1.SubmitUsageReportsRequest
 */
export class SubmitUsageReportsRequest extends Message<SubmitUsageReportsRequest> {
  /**
   * at most 10 reports of all kinds in a single RPC, each shouldn't exceed 128KiB or so
   *
   * each report is encoded as a separate tp.user.activity PostHog event
   *
   * @generated from field: repeated prehog.v1.UserActivityReport user_activity = 1;
   */
  userActivity: UserActivityReport[] = [];

  /**
   * encoded as a separate tp.resource.counts PostHog event
   *
   * @generated from field: repeated prehog.v1.ResourcePresenceReport resource_presence = 2;
   */
  resourcePresence: ResourcePresenceReport[] = [];

  constructor(data?: PartialMessage<SubmitUsageReportsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1.SubmitUsageReportsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_activity", kind: "message", T: UserActivityReport, repeated: true },
    { no: 2, name: "resource_presence", kind: "message", T: ResourcePresenceReport, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitUsageReportsRequest {
    return new SubmitUsageReportsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitUsageReportsRequest {
    return new SubmitUsageReportsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitUsageReportsRequest {
    return new SubmitUsageReportsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitUsageReportsRequest | PlainMessage<SubmitUsageReportsRequest> | undefined, b: SubmitUsageReportsRequest | PlainMessage<SubmitUsageReportsRequest> | undefined): boolean {
    return proto3.util.equals(SubmitUsageReportsRequest, a, b);
  }
}

/**
 * @generated from message prehog.v1.SubmitUsageReportsResponse
 */
export class SubmitUsageReportsResponse extends Message<SubmitUsageReportsResponse> {
  /**
   * randomly generated UUID for this specific batch, 16 bytes (in string order)
   *
   * PostHog property: tp.batch_uuid (in each report of the batch)
   *
   * @generated from field: bytes batch_uuid = 1;
   */
  batchUuid = new Uint8Array(0);

  constructor(data?: PartialMessage<SubmitUsageReportsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1.SubmitUsageReportsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "batch_uuid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitUsageReportsResponse {
    return new SubmitUsageReportsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitUsageReportsResponse {
    return new SubmitUsageReportsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitUsageReportsResponse {
    return new SubmitUsageReportsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitUsageReportsResponse | PlainMessage<SubmitUsageReportsResponse> | undefined, b: SubmitUsageReportsResponse | PlainMessage<SubmitUsageReportsResponse> | undefined): boolean {
    return proto3.util.equals(SubmitUsageReportsResponse, a, b);
  }
}

