//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file prehog/v1alpha/tbot.proto (package prehog.v1alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * TbotStartEvent is triggered whenever tbot starts, regardless of whether tbot
 * was able to successfully connect to or authenticate with a Teleport cluster.
 *
 * @generated from message prehog.v1alpha.TbotStartEvent
 */
export class TbotStartEvent extends Message<TbotStartEvent> {
  /**
   * @generated from field: prehog.v1alpha.TbotStartEvent.RunMode run_mode = 1;
   */
  runMode = TbotStartEvent_RunMode.UNSPECIFIED;

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * @generated from field: string join_type = 3;
   */
  joinType = "";

  /**
   * @generated from field: string helper = 4;
   */
  helper = "";

  /**
   * @generated from field: string helper_version = 5;
   */
  helperVersion = "";

  /**
   * @generated from field: int32 destinations_other = 6;
   */
  destinationsOther = 0;

  /**
   * @generated from field: int32 destinations_database = 7;
   */
  destinationsDatabase = 0;

  /**
   * @generated from field: int32 destinations_kubernetes = 8;
   */
  destinationsKubernetes = 0;

  /**
   * @generated from field: int32 destinations_application = 9;
   */
  destinationsApplication = 0;

  constructor(data?: PartialMessage<TbotStartEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.TbotStartEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "run_mode", kind: "enum", T: proto3.getEnumType(TbotStartEvent_RunMode) },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "join_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "helper", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "helper_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "destinations_other", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "destinations_database", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "destinations_kubernetes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "destinations_application", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TbotStartEvent {
    return new TbotStartEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TbotStartEvent {
    return new TbotStartEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TbotStartEvent {
    return new TbotStartEvent().fromJsonString(jsonString, options);
  }

  static equals(a: TbotStartEvent | PlainMessage<TbotStartEvent> | undefined, b: TbotStartEvent | PlainMessage<TbotStartEvent> | undefined): boolean {
    return proto3.util.equals(TbotStartEvent, a, b);
  }
}

/**
 * RunMode specifies whether or not tbot has been configured to run once
 * and output certificates, or continually renew certificates in the
 * background.
 *
 * @generated from enum prehog.v1alpha.TbotStartEvent.RunMode
 */
export enum TbotStartEvent_RunMode {
  /**
   * @generated from enum value: RUN_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RUN_MODE_ONE_SHOT = 1;
   */
  ONE_SHOT = 1,

  /**
   * @generated from enum value: RUN_MODE_DAEMON = 2;
   */
  DAEMON = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(TbotStartEvent_RunMode)
proto3.util.setEnumType(TbotStartEvent_RunMode, "prehog.v1alpha.TbotStartEvent.RunMode", [
  { no: 0, name: "RUN_MODE_UNSPECIFIED" },
  { no: 1, name: "RUN_MODE_ONE_SHOT" },
  { no: 2, name: "RUN_MODE_DAEMON" },
]);

/**
 * @generated from message prehog.v1alpha.SubmitTbotEventRequest
 */
export class SubmitTbotEventRequest extends Message<SubmitTbotEventRequest> {
  /**
   * uuid identifying that tbot session. This is future-proofing for if we
   * decide to add multiple events in future, and need to tie them together.
   *
   * @generated from field: string distinct_id = 1;
   */
  distinctId = "";

  /**
   * optional, will default to the ingest time if unset
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  /**
   * @generated from oneof prehog.v1alpha.SubmitTbotEventRequest.event
   */
  event: {
    /**
     * @generated from field: prehog.v1alpha.TbotStartEvent start = 3;
     */
    value: TbotStartEvent;
    case: "start";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SubmitTbotEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.SubmitTbotEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "distinct_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
    { no: 3, name: "start", kind: "message", T: TbotStartEvent, oneof: "event" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitTbotEventRequest {
    return new SubmitTbotEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitTbotEventRequest {
    return new SubmitTbotEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitTbotEventRequest {
    return new SubmitTbotEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitTbotEventRequest | PlainMessage<SubmitTbotEventRequest> | undefined, b: SubmitTbotEventRequest | PlainMessage<SubmitTbotEventRequest> | undefined): boolean {
    return proto3.util.equals(SubmitTbotEventRequest, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.SubmitTbotEventResponse
 */
export class SubmitTbotEventResponse extends Message<SubmitTbotEventResponse> {
  constructor(data?: PartialMessage<SubmitTbotEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.SubmitTbotEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitTbotEventResponse {
    return new SubmitTbotEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitTbotEventResponse {
    return new SubmitTbotEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitTbotEventResponse {
    return new SubmitTbotEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitTbotEventResponse | PlainMessage<SubmitTbotEventResponse> | undefined, b: SubmitTbotEventResponse | PlainMessage<SubmitTbotEventResponse> | undefined): boolean {
    return proto3.util.equals(SubmitTbotEventResponse, a, b);
  }
}

