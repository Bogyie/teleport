//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file prehog/v1alpha/tbot.proto (package prehog.v1alpha, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file prehog/v1alpha/tbot.proto.
 */
export const file_prehog_v1alpha_tbot: GenFile = /*@__PURE__*/
  fileDesc("ChlwcmVob2cvdjFhbHBoYS90Ym90LnByb3RvEg5wcmVob2cudjFhbHBoYSLlAgoOVGJvdFN0YXJ0RXZlbnQSOAoIcnVuX21vZGUYASABKA4yJi5wcmVob2cudjFhbHBoYS5UYm90U3RhcnRFdmVudC5SdW5Nb2RlEg8KB3ZlcnNpb24YAiABKAkSEQoJam9pbl90eXBlGAMgASgJEg4KBmhlbHBlchgEIAEoCRIWCg5oZWxwZXJfdmVyc2lvbhgFIAEoCRIaChJkZXN0aW5hdGlvbnNfb3RoZXIYBiABKAUSHQoVZGVzdGluYXRpb25zX2RhdGFiYXNlGAcgASgFEh8KF2Rlc3RpbmF0aW9uc19rdWJlcm5ldGVzGAggASgFEiAKGGRlc3RpbmF0aW9uc19hcHBsaWNhdGlvbhgJIAEoBSJPCgdSdW5Nb2RlEhgKFFJVTl9NT0RFX1VOU1BFQ0lGSUVEEAASFQoRUlVOX01PREVfT05FX1NIT1QQARITCg9SVU5fTU9ERV9EQUVNT04QAiKWAQoWU3VibWl0VGJvdEV2ZW50UmVxdWVzdBITCgtkaXN0aW5jdF9pZBgBIAEoCRItCgl0aW1lc3RhbXAYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi8KBXN0YXJ0GAMgASgLMh4ucHJlaG9nLnYxYWxwaGEuVGJvdFN0YXJ0RXZlbnRIAEIHCgVldmVudCIZChdTdWJtaXRUYm90RXZlbnRSZXNwb25zZTJ8ChRUYm90UmVwb3J0aW5nU2VydmljZRJkCg9TdWJtaXRUYm90RXZlbnQSJi5wcmVob2cudjFhbHBoYS5TdWJtaXRUYm90RXZlbnRSZXF1ZXN0GicucHJlaG9nLnYxYWxwaGEuU3VibWl0VGJvdEV2ZW50UmVzcG9uc2UiAGIGcHJvdG8z", [file_google_protobuf_timestamp]);

/**
 * TbotStartEvent is triggered whenever tbot starts, regardless of whether tbot
 * was able to successfully connect to or authenticate with a Teleport cluster.
 *
 * @generated from message prehog.v1alpha.TbotStartEvent
 */
export type TbotStartEvent = Message<"prehog.v1alpha.TbotStartEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.TbotStartEvent.RunMode run_mode = 1;
   */
  runMode: TbotStartEvent_RunMode;

  /**
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * @generated from field: string join_type = 3;
   */
  joinType: string;

  /**
   * @generated from field: string helper = 4;
   */
  helper: string;

  /**
   * @generated from field: string helper_version = 5;
   */
  helperVersion: string;

  /**
   * @generated from field: int32 destinations_other = 6;
   */
  destinationsOther: number;

  /**
   * @generated from field: int32 destinations_database = 7;
   */
  destinationsDatabase: number;

  /**
   * @generated from field: int32 destinations_kubernetes = 8;
   */
  destinationsKubernetes: number;

  /**
   * @generated from field: int32 destinations_application = 9;
   */
  destinationsApplication: number;
};

/**
 * Describes the message prehog.v1alpha.TbotStartEvent.
 * Use `create(TbotStartEventSchema)` to create a new message.
 */
export const TbotStartEventSchema: GenMessage<TbotStartEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_tbot, 0);

/**
 * RunMode specifies whether or not tbot has been configured to run once
 * and output certificates, or continually renew certificates in the
 * background.
 *
 * @generated from enum prehog.v1alpha.TbotStartEvent.RunMode
 */
export enum TbotStartEvent_RunMode {
  /**
   * @generated from enum value: RUN_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RUN_MODE_ONE_SHOT = 1;
   */
  ONE_SHOT = 1,

  /**
   * @generated from enum value: RUN_MODE_DAEMON = 2;
   */
  DAEMON = 2,
}

/**
 * Describes the enum prehog.v1alpha.TbotStartEvent.RunMode.
 */
export const TbotStartEvent_RunModeSchema: GenEnum<TbotStartEvent_RunMode> = /*@__PURE__*/
  enumDesc(file_prehog_v1alpha_tbot, 0, 0);

/**
 * @generated from message prehog.v1alpha.SubmitTbotEventRequest
 */
export type SubmitTbotEventRequest = Message<"prehog.v1alpha.SubmitTbotEventRequest"> & {
  /**
   * uuid identifying that tbot session. This is future-proofing for if we
   * decide to add multiple events in future, and need to tie them together.
   *
   * @generated from field: string distinct_id = 1;
   */
  distinctId: string;

  /**
   * optional, will default to the ingest time if unset
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  /**
   * @generated from oneof prehog.v1alpha.SubmitTbotEventRequest.event
   */
  event: {
    /**
     * @generated from field: prehog.v1alpha.TbotStartEvent start = 3;
     */
    value: TbotStartEvent;
    case: "start";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message prehog.v1alpha.SubmitTbotEventRequest.
 * Use `create(SubmitTbotEventRequestSchema)` to create a new message.
 */
export const SubmitTbotEventRequestSchema: GenMessage<SubmitTbotEventRequest> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_tbot, 1);

/**
 * @generated from message prehog.v1alpha.SubmitTbotEventResponse
 */
export type SubmitTbotEventResponse = Message<"prehog.v1alpha.SubmitTbotEventResponse"> & {
};

/**
 * Describes the message prehog.v1alpha.SubmitTbotEventResponse.
 * Use `create(SubmitTbotEventResponseSchema)` to create a new message.
 */
export const SubmitTbotEventResponseSchema: GenMessage<SubmitTbotEventResponse> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_tbot, 2);

/**
 * @generated from service prehog.v1alpha.TbotReportingService
 */
export const TbotReportingService: GenService<{
  /**
   * @generated from rpc prehog.v1alpha.TbotReportingService.SubmitTbotEvent
   */
  submitTbotEvent: {
    methodKind: "unary";
    input: typeof SubmitTbotEventRequestSchema;
    output: typeof SubmitTbotEventResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_prehog_v1alpha_tbot, 0);

