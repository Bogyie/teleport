//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file prehog/v1alpha/teleport.proto (package prehog.v1alpha, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file prehog/v1alpha/teleport.proto.
 */
export const file_prehog_v1alpha_teleport: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_duration, file_google_protobuf_timestamp]);

/**
 * a successful user login
 *
 * PostHog event: tp.user.login
 *
 * @generated from message prehog.v1alpha.UserLoginEvent
 */
export type UserLoginEvent = Message<"prehog.v1alpha.UserLoginEvent"> & {
  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
   * should always be a real user as bots and service accounts with long-term
   * credentials don't ever login
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * type of the auth connector used in the login, should be
   * "local"/"github"/"saml"/"oidc"
   *
   * PostHog property: tp.connector_type
   *
   * @generated from field: string connector_type = 2;
   */
  connectorType: string;

  /**
   * anonymized device ID, empty or 32 bytes (HMAC-SHA-256) encoded in base64;
   * for logins where device trust is enabled
   *
   * PostHog property: tp.device_id
   *
   * @generated from field: string device_id = 3;
   */
  deviceId: string;

  /**
   * the required private key policy for this login.
   *
   * @generated from field: string required_private_key_policy = 4;
   */
  requiredPrivateKeyPolicy: string;
};

/**
 * Describes the message prehog.v1alpha.UserLoginEvent.
 * Use `create(UserLoginEventSchema)` to create a new message.
 */
export const UserLoginEventSchema: GenMessage<UserLoginEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 0);

/**
 * MFAAuthenticationEvent is emitted when a user performs MFA authentication.
 *
 * @generated from message prehog.v1alpha.MFAAuthenticationEvent
 */
export type MFAAuthenticationEvent = Message<"prehog.v1alpha.MFAAuthenticationEvent"> & {
  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
   * should always be a real user as bots and service accounts with long-term
   * credentials don't ever login
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * anonymized device ID, empty or 32 bytes (HMAC-SHA-256) encoded in base64;
   * for logins where device trust is enabled
   *
   * PostHog property: tp.device_id
   *
   * @generated from field: string device_id = 2;
   */
  deviceId: string;

  /**
   * device type is the type of MFA device used
   *
   * @generated from field: string device_type = 3;
   */
  deviceType: string;

  /**
   * the authorization scope the MFA authentication
   *
   * @generated from field: string mfa_challenge_scope = 4;
   */
  mfaChallengeScope: string;
};

/**
 * Describes the message prehog.v1alpha.MFAAuthenticationEvent.
 * Use `create(MFAAuthenticationEventSchema)` to create a new message.
 */
export const MFAAuthenticationEventSchema: GenMessage<MFAAuthenticationEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 1);

/**
 * @generated from message prehog.v1alpha.SSOCreateEvent
 */
export type SSOCreateEvent = Message<"prehog.v1alpha.SSOCreateEvent"> & {
  /**
   * github/saml/oidc
   *
   * @generated from field: string connector_type = 1;
   */
  connectorType: string;
};

/**
 * Describes the message prehog.v1alpha.SSOCreateEvent.
 * Use `create(SSOCreateEventSchema)` to create a new message.
 */
export const SSOCreateEventSchema: GenMessage<SSOCreateEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 2);

/**
 * ResourceCreateEvent is emitted when a resource is created.
 *
 * @generated from message prehog.v1alpha.ResourceCreateEvent
 */
export type ResourceCreateEvent = Message<"prehog.v1alpha.ResourceCreateEvent"> & {
  /**
   * resource_type is the type of resource ("node", "node.openssh", "db", "k8s", "app").
   *
   * @generated from field: string resource_type = 1;
   */
  resourceType: string;

  /**
   * resource_origin is the origin of the resource ("cloud", "kubernetes").
   *
   * @generated from field: string resource_origin = 2;
   */
  resourceOrigin: string;

  /**
   * cloud_provider is the cloud provider the resource came from ("AWS", "Azure", "GCP")
   * if resource_origin == "cloud".
   *
   * @generated from field: string cloud_provider = 3;
   */
  cloudProvider: string;

  /**
   * database contains additional database information if resource_type == "db".
   *
   * @generated from field: prehog.v1alpha.DiscoveredDatabaseMetadata database = 4;
   */
  database?: DiscoveredDatabaseMetadata;
};

/**
 * Describes the message prehog.v1alpha.ResourceCreateEvent.
 * Use `create(ResourceCreateEventSchema)` to create a new message.
 */
export const ResourceCreateEventSchema: GenMessage<ResourceCreateEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 3);

/**
 * DiscoveredDatabaseMetadata contains additional database information.
 *
 * @generated from message prehog.v1alpha.DiscoveredDatabaseMetadata
 */
export type DiscoveredDatabaseMetadata = Message<"prehog.v1alpha.DiscoveredDatabaseMetadata"> & {
  /**
   * database type.
   *
   * @generated from field: string db_type = 1;
   */
  dbType: string;

  /**
   * database protocol.
   *
   * @generated from field: string db_protocol = 2;
   */
  dbProtocol: string;
};

/**
 * Describes the message prehog.v1alpha.DiscoveredDatabaseMetadata.
 * Use `create(DiscoveredDatabaseMetadataSchema)` to create a new message.
 */
export const DiscoveredDatabaseMetadataSchema: GenMessage<DiscoveredDatabaseMetadata> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 4);

/**
 * a heartbeat for a resource served by a Teleport instance outside of the
 * control plane (i.e. not auth, not proxy)
 *
 * PostHog event: tp.resource.hb
 *
 * @generated from message prehog.v1alpha.ResourceHeartbeatEvent
 */
export type ResourceHeartbeatEvent = Message<"prehog.v1alpha.ResourceHeartbeatEvent"> & {
  /**
   * anonymized name of the resource, 32 bytes (HMAC-SHA-256); the name is the
   * host ID for nodes but the actual user-facing name for other resources, so
   * an app or a database served by multiple agents won't be counted multiple
   * times
   *
   * PreHog property: tp.resource_name (in base64)
   *
   * @generated from field: bytes resource_name = 1;
   */
  resourceName: Uint8Array;

  /**
   * kind of the resource (node, app, db)
   *
   * PostHog property: tp.resource_type (as a string, see ResourceKind)
   *
   * @generated from field: prehog.v1alpha.ResourceKind resource_kind = 2;
   */
  resourceKind: ResourceKind;

  /**
   * true if the heartbeat has no expiration
   *
   * PostHog property: tp.is_static
   *
   * @generated from field: bool static = 3;
   */
  static: boolean;
};

/**
 * Describes the message prehog.v1alpha.ResourceHeartbeatEvent.
 * Use `create(ResourceHeartbeatEventSchema)` to create a new message.
 */
export const ResourceHeartbeatEventSchema: GenMessage<ResourceHeartbeatEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 5);

/**
 * an event representing one of several audit events: session.start, port,
 * app.session.start, db.session.start, windows.desktop.session.start; i.e. a
 * SSH shell or port-forward, kubectl exec or kubectl port-forward, DB, App or
 * Desktop connection
 *
 * an earlier encoding (as "tp.session.start") mixed SSH sessions and kubectl
 * execs under a session type of "ssh"
 *
 * PostHog event: tp.session.start
 *
 * @generated from message prehog.v1alpha.SessionStartEvent
 */
export type SessionStartEvent = Message<"prehog.v1alpha.SessionStartEvent"> & {
  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * type of the session, should be "ssh"/"k8s"/"db"/"app"/"desktop" (matching
   * the values for api/types.SessionKind) or "app_tcp", "ssh_port_v2" or
   * "k8s_port" for TCP Application Access connections, SSH port forwards and
   * kubectl port-forward respectively; a type of "ssh_port" represents either a
   * SSH port forwarding connection or a kubectl port-forward (not used in new
   * events)
   *
   * PostHog property: tp.session_type
   *
   * @generated from field: string session_type = 2;
   */
  sessionType: string;

  /**
   * if session_type == "db" the database struct contains additional information
   * about database session.
   *
   * PostHog property: tp.database
   *
   * @generated from field: prehog.v1alpha.SessionStartDatabaseMetadata database = 3;
   */
  database?: SessionStartDatabaseMetadata;

  /**
   * if session_type == "desktop" the desktop struct contains additional
   * information about the desktop session
   *
   * @generated from field: prehog.v1alpha.SessionStartDesktopMetadata desktop = 4;
   */
  desktop?: SessionStartDesktopMetadata;

  /**
   * Indicates this event was generated by a Machine ID bot user.
   *
   * @generated from field: prehog.v1alpha.UserKind user_kind = 5;
   */
  userKind: UserKind;
};

/**
 * Describes the message prehog.v1alpha.SessionStartEvent.
 * Use `create(SessionStartEventSchema)` to create a new message.
 */
export const SessionStartEventSchema: GenMessage<SessionStartEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 6);

/**
 * SessionStartDatabaseMetadata contains additional information about database session.
 *
 * @generated from message prehog.v1alpha.SessionStartDatabaseMetadata
 */
export type SessionStartDatabaseMetadata = Message<"prehog.v1alpha.SessionStartDatabaseMetadata"> & {
  /**
   * database type.
   *
   * @generated from field: string db_type = 1;
   */
  dbType: string;

  /**
   * database protocol.
   *
   * @generated from field: string db_protocol = 2;
   */
  dbProtocol: string;

  /**
   * database origin source.
   *
   * @generated from field: string db_origin = 3;
   */
  dbOrigin: string;
};

/**
 * Describes the message prehog.v1alpha.SessionStartDatabaseMetadata.
 * Use `create(SessionStartDatabaseMetadataSchema)` to create a new message.
 */
export const SessionStartDatabaseMetadataSchema: GenMessage<SessionStartDatabaseMetadata> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 7);

/**
 * SessionStartDesktop Metadata contains additional information about
 * a desktop session.
 *
 * @generated from message prehog.v1alpha.SessionStartDesktopMetadata
 */
export type SessionStartDesktopMetadata = Message<"prehog.v1alpha.SessionStartDesktopMetadata"> & {
  /**
   * desktop type ("ad" or "non-ad")
   *
   * @generated from field: string desktop_type = 1;
   */
  desktopType: string;

  /**
   * Indicates how the desktop was enrolled in Teleport
   * ("config-file" for statically defined hosts, or "dynamic" for
   * hosts discovered via LDAP).
   *
   * @generated from field: string origin = 2;
   */
  origin: string;

  /**
   * If desktop type is "ad" this field contains the anonymized Active
   * Directory domain that the desktop belongs to.
   *
   * @generated from field: string windows_domain = 3;
   */
  windowsDomain: string;

  /**
   * If true, and desktop type is "non-ad" automatic user creation is
   * enabled for the session. (This does not mean that the user will
   * be created, as Teleport does not know whether the user already exists.)
   *
   * @generated from field: bool allow_user_creation = 4;
   */
  allowUserCreation: boolean;

  /**
   * Indicates whether network level authentication (NLA) was used to
   * establish this RDP session.
   *
   * @generated from field: bool nla = 5;
   */
  nla: boolean;
};

/**
 * Describes the message prehog.v1alpha.SessionStartDesktopMetadata.
 * Use `create(SessionStartDesktopMetadataSchema)` to create a new message.
 */
export const SessionStartDesktopMetadataSchema: GenMessage<SessionStartDesktopMetadata> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 8);

/**
 * the issuance of a user certificate from the user CA
 *
 * PostHog event: tp.certificate.issued
 *
 * @generated from message prehog.v1alpha.UserCertificateIssuedEvent
 */
export type UserCertificateIssuedEvent = Message<"prehog.v1alpha.UserCertificateIssuedEvent"> & {
  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64; it
   * can be the username of a bot user rather than of a regular user
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * the TTL of the issued certificate, typically 8 or 12 hours
   *
   * PostHog property: tp.ttl_minutes (in minutes, rounded up)
   *
   * @generated from field: google.protobuf.Duration ttl = 2;
   */
  ttl?: Duration;

  /**
   * If true, the certificate was requested by a bot (i.e. Machine ID) user.
   * PostHog property: tp.is_bot
   *
   * @generated from field: bool is_bot = 3;
   */
  isBot: boolean;

  /**
   * If true, the certificate usage is restricted to database access.
   * PostHog property: tp.usage_database
   *
   * @generated from field: bool usage_database = 4;
   */
  usageDatabase: boolean;

  /**
   * If true, the certificate usage is restricted to app access.
   * PostHog property: tp.usage_app
   *
   * @generated from field: bool usage_app = 5;
   */
  usageApp: boolean;

  /**
   * If true, the certificate usage is restricted to Kubernetes access.
   * PostHog property: tp.usage_kubernetes
   *
   * @generated from field: bool usage_kubernetes = 6;
   */
  usageKubernetes: boolean;

  /**
   * If true, the certificate usage is restricted to desktop access.
   * PostHog property: tp.usage_desktop
   *
   * @generated from field: bool usage_desktop = 7;
   */
  usageDesktop: boolean;

  /**
   * the private key policy associated with these user certificates.
   *
   * @generated from field: string private_key_policy = 8;
   */
  privateKeyPolicy: string;
};

/**
 * Describes the message prehog.v1alpha.UserCertificateIssuedEvent.
 * Use `create(UserCertificateIssuedEventSchema)` to create a new message.
 */
export const UserCertificateIssuedEventSchema: GenMessage<UserCertificateIssuedEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 9);

/**
 * the issuance of a SPIFFE SVID
 *
 * PostHog event: tp.spiffe.svid.issued
 *
 * @generated from message prehog.v1alpha.SPIFFESVIDIssuedEvent
 */
export type SPIFFESVIDIssuedEvent = Message<"prehog.v1alpha.SPIFFESVIDIssuedEvent"> & {
  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64; it
   * can be the username of a bot user rather than of a regular user
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * Indicates this event was generated by a Machine ID bot user.
   * PostHog property: tp.user_kind
   *
   * @generated from field: prehog.v1alpha.UserKind user_kind = 2;
   */
  userKind: UserKind;

  /**
   * anonymized SPIFFE ID, 32 bytes (HMAC-SHA-256) encoded in base64;
   *
   * PostHog property: tp.spiffe.id
   *
   * @generated from field: string spiffe_id = 3;
   */
  spiffeId: string;

  /**
   * Number of IP SANs included in the SVID
   * PostHog property: tp.spiffe.ip_sans_count
   *
   * @generated from field: int32 ip_sans_count = 4;
   */
  ipSansCount: number;

  /**
   * Number of DNS SANs included in the SVID
   * PostHog property: tp.spiffe.dns_sans_count
   *
   * @generated from field: int32 dns_sans_count = 5;
   */
  dnsSansCount: number;

  /**
   * Type of SVID issued. `x509` or `jwt`
   * PostHog property: tp.spiffe.svid_type
   *
   * @generated from field: string svid_type = 6;
   */
  svidType: string;
};

/**
 * Describes the message prehog.v1alpha.SPIFFESVIDIssuedEvent.
 * Use `create(SPIFFESVIDIssuedEventSchema)` to create a new message.
 */
export const SPIFFESVIDIssuedEventSchema: GenMessage<SPIFFESVIDIssuedEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 10);

/**
 * UIBannerClickEvent is a usage event sent by the UI when the upgrade
 * banner is clicked.
 *
 * @generated from message prehog.v1alpha.UIBannerClickEvent
 */
export type UIBannerClickEvent = Message<"prehog.v1alpha.UIBannerClickEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * cluster alert name
   *
   * @generated from field: string alert = 2;
   */
  alert: string;
};

/**
 * Describes the message prehog.v1alpha.UIBannerClickEvent.
 * Use `create(UIBannerClickEventSchema)` to create a new message.
 */
export const UIBannerClickEventSchema: GenMessage<UIBannerClickEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 11);

/**
 * UIOnboardCompleteGoToDashboardClickEvent is a UI event sent when initial
 * registration is complete.
 *
 * @generated from message prehog.v1alpha.UIOnboardCompleteGoToDashboardClickEvent
 */
export type UIOnboardCompleteGoToDashboardClickEvent = Message<"prehog.v1alpha.UIOnboardCompleteGoToDashboardClickEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;
};

/**
 * Describes the message prehog.v1alpha.UIOnboardCompleteGoToDashboardClickEvent.
 * Use `create(UIOnboardCompleteGoToDashboardClickEventSchema)` to create a new message.
 */
export const UIOnboardCompleteGoToDashboardClickEventSchema: GenMessage<UIOnboardCompleteGoToDashboardClickEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 12);

/**
 * UIOnboardAddFirstResourceClickEvent is a UI event sent when a user clicks the
 * "add first resource" button.
 *
 * @generated from message prehog.v1alpha.UIOnboardAddFirstResourceClickEvent
 */
export type UIOnboardAddFirstResourceClickEvent = Message<"prehog.v1alpha.UIOnboardAddFirstResourceClickEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;
};

/**
 * Describes the message prehog.v1alpha.UIOnboardAddFirstResourceClickEvent.
 * Use `create(UIOnboardAddFirstResourceClickEventSchema)` to create a new message.
 */
export const UIOnboardAddFirstResourceClickEventSchema: GenMessage<UIOnboardAddFirstResourceClickEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 13);

/**
 * UIOnboardAddFirstResourceLaterClickEvent is a UI event sent when a user
 * clicks the "add first resource later" button.
 *
 * @generated from message prehog.v1alpha.UIOnboardAddFirstResourceLaterClickEvent
 */
export type UIOnboardAddFirstResourceLaterClickEvent = Message<"prehog.v1alpha.UIOnboardAddFirstResourceLaterClickEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;
};

/**
 * Describes the message prehog.v1alpha.UIOnboardAddFirstResourceLaterClickEvent.
 * Use `create(UIOnboardAddFirstResourceLaterClickEventSchema)` to create a new message.
 */
export const UIOnboardAddFirstResourceLaterClickEventSchema: GenMessage<UIOnboardAddFirstResourceLaterClickEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 14);

/**
 * UIOnboardSetCredentialSubmitEvent is a UI event sent during registration when
 * users configure their credentials.
 *
 * @generated from message prehog.v1alpha.UIOnboardSetCredentialSubmitEvent
 */
export type UIOnboardSetCredentialSubmitEvent = Message<"prehog.v1alpha.UIOnboardSetCredentialSubmitEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;
};

/**
 * Describes the message prehog.v1alpha.UIOnboardSetCredentialSubmitEvent.
 * Use `create(UIOnboardSetCredentialSubmitEventSchema)` to create a new message.
 */
export const UIOnboardSetCredentialSubmitEventSchema: GenMessage<UIOnboardSetCredentialSubmitEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 15);

/**
 * UIOnboardRegisterChallengeSubmitEvent is a UI event sent during registration
 * when the MFA challenge is completed.
 *
 * @generated from message prehog.v1alpha.UIOnboardRegisterChallengeSubmitEvent
 */
export type UIOnboardRegisterChallengeSubmitEvent = Message<"prehog.v1alpha.UIOnboardRegisterChallengeSubmitEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * @generated from field: string mfa_type = 2;
   */
  mfaType: string;

  /**
   * @generated from field: string login_flow = 3;
   */
  loginFlow: string;
};

/**
 * Describes the message prehog.v1alpha.UIOnboardRegisterChallengeSubmitEvent.
 * Use `create(UIOnboardRegisterChallengeSubmitEventSchema)` to create a new message.
 */
export const UIOnboardRegisterChallengeSubmitEventSchema: GenMessage<UIOnboardRegisterChallengeSubmitEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 16);

/**
 * UIOnboardQuestionnaireSubmitEvent is a UI event sent during registration when
 * user submits their onboarding questionnaire.
 *
 * @generated from message prehog.v1alpha.UIOnboardQuestionnaireSubmitEvent
 */
export type UIOnboardQuestionnaireSubmitEvent = Message<"prehog.v1alpha.UIOnboardQuestionnaireSubmitEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;
};

/**
 * Describes the message prehog.v1alpha.UIOnboardQuestionnaireSubmitEvent.
 * Use `create(UIOnboardQuestionnaireSubmitEventSchema)` to create a new message.
 */
export const UIOnboardQuestionnaireSubmitEventSchema: GenMessage<UIOnboardQuestionnaireSubmitEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 17);

/**
 * UIRecoveryCodesContinueClickEvent is a UI event sent during
 * registration when the user configures cluster recovery codes.
 *
 * @generated from message prehog.v1alpha.UIRecoveryCodesContinueClickEvent
 */
export type UIRecoveryCodesContinueClickEvent = Message<"prehog.v1alpha.UIRecoveryCodesContinueClickEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;
};

/**
 * Describes the message prehog.v1alpha.UIRecoveryCodesContinueClickEvent.
 * Use `create(UIRecoveryCodesContinueClickEventSchema)` to create a new message.
 */
export const UIRecoveryCodesContinueClickEventSchema: GenMessage<UIRecoveryCodesContinueClickEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 18);

/**
 * UIRecoveryCodesCopyClickEvent is a UI event sent during
 * registration when the user copies recovery codes.
 *
 * @generated from message prehog.v1alpha.UIRecoveryCodesCopyClickEvent
 */
export type UIRecoveryCodesCopyClickEvent = Message<"prehog.v1alpha.UIRecoveryCodesCopyClickEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;
};

/**
 * Describes the message prehog.v1alpha.UIRecoveryCodesCopyClickEvent.
 * Use `create(UIRecoveryCodesCopyClickEventSchema)` to create a new message.
 */
export const UIRecoveryCodesCopyClickEventSchema: GenMessage<UIRecoveryCodesCopyClickEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 19);

/**
 * UIRecoveryCodesPrintClickEvent is a UI event sent during
 * registration when the user prints recovery codes.
 *
 * @generated from message prehog.v1alpha.UIRecoveryCodesPrintClickEvent
 */
export type UIRecoveryCodesPrintClickEvent = Message<"prehog.v1alpha.UIRecoveryCodesPrintClickEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;
};

/**
 * Describes the message prehog.v1alpha.UIRecoveryCodesPrintClickEvent.
 * Use `create(UIRecoveryCodesPrintClickEventSchema)` to create a new message.
 */
export const UIRecoveryCodesPrintClickEventSchema: GenMessage<UIRecoveryCodesPrintClickEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 20);

/**
 * DiscoverMetadata contains common metadata for Discover related events.
 *
 * @generated from message prehog.v1alpha.DiscoverMetadata
 */
export type DiscoverMetadata = Message<"prehog.v1alpha.DiscoverMetadata"> & {
  /**
   * Uniquely identifies Discover wizard "session". Will allow to correlate
   * events within the same Discover wizard run.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * anonymized
   *
   * @generated from field: string user_name = 2;
   */
  userName: string;

  /**
   * SSO indicates whether the user is from an SSO provider.
   *
   * @generated from field: bool sso = 3;
   */
  sso: boolean;
};

/**
 * Describes the message prehog.v1alpha.DiscoverMetadata.
 * Use `create(DiscoverMetadataSchema)` to create a new message.
 */
export const DiscoverMetadataSchema: GenMessage<DiscoverMetadata> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 21);

/**
 * DiscoverResourceMetadata contains common metadata identifying resource type being added.
 *
 * @generated from message prehog.v1alpha.DiscoverResourceMetadata
 */
export type DiscoverResourceMetadata = Message<"prehog.v1alpha.DiscoverResourceMetadata"> & {
  /**
   * Resource type that is being added.
   *
   * @generated from field: prehog.v1alpha.DiscoverResource resource = 1;
   */
  resource: DiscoverResource;
};

/**
 * Describes the message prehog.v1alpha.DiscoverResourceMetadata.
 * Use `create(DiscoverResourceMetadataSchema)` to create a new message.
 */
export const DiscoverResourceMetadataSchema: GenMessage<DiscoverResourceMetadata> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 22);

/**
 * DiscoverStepStatus contains fields that track a particular step outcome,
 * for example connection test failed or succeeded, or user aborted the step.
 *
 * @generated from message prehog.v1alpha.DiscoverStepStatus
 */
export type DiscoverStepStatus = Message<"prehog.v1alpha.DiscoverStepStatus"> & {
  /**
   * Indicates the step outcome.
   *
   * @generated from field: prehog.v1alpha.DiscoverStatus status = 1;
   */
  status: DiscoverStatus;

  /**
   * Contains error details in case of Error Status.
   * We have to be careful to not include any identifyable infomation like server addresses here.
   *
   * @generated from field: string error = 2;
   */
  error: string;
};

/**
 * Describes the message prehog.v1alpha.DiscoverStepStatus.
 * Use `create(DiscoverStepStatusSchema)` to create a new message.
 */
export const DiscoverStepStatusSchema: GenMessage<DiscoverStepStatus> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 23);

/**
 * UIDiscoverStartedEvent is emitted when the wizard opens.
 *
 * @generated from message prehog.v1alpha.UIDiscoverStartedEvent
 */
export type UIDiscoverStartedEvent = Message<"prehog.v1alpha.UIDiscoverStartedEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 2;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverStartedEvent.
 * Use `create(UIDiscoverStartedEventSchema)` to create a new message.
 */
export const UIDiscoverStartedEventSchema: GenMessage<UIDiscoverStartedEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 24);

/**
 * UIDiscoverResourceSelectionEvent is emitted when user selected resource type to add
 * and proceeded to the next step.
 *
 * @generated from message prehog.v1alpha.UIDiscoverResourceSelectionEvent
 */
export type UIDiscoverResourceSelectionEvent = Message<"prehog.v1alpha.UIDiscoverResourceSelectionEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverResourceSelectionEvent.
 * Use `create(UIDiscoverResourceSelectionEventSchema)` to create a new message.
 */
export const UIDiscoverResourceSelectionEventSchema: GenMessage<UIDiscoverResourceSelectionEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 25);

/**
 * UIDiscoverIntegrationAWSOIDCConnectEvent is emitted when a user is finished with the step
 * that asks user to setup aws integration or select from a list of existing
 * aws integrations.
 *
 * @generated from message prehog.v1alpha.UIDiscoverIntegrationAWSOIDCConnectEvent
 */
export type UIDiscoverIntegrationAWSOIDCConnectEvent = Message<"prehog.v1alpha.UIDiscoverIntegrationAWSOIDCConnectEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverIntegrationAWSOIDCConnectEvent.
 * Use `create(UIDiscoverIntegrationAWSOIDCConnectEventSchema)` to create a new message.
 */
export const UIDiscoverIntegrationAWSOIDCConnectEventSchema: GenMessage<UIDiscoverIntegrationAWSOIDCConnectEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 26);

/**
 * UIDiscoverDatabaseRDSEnrollEvent is emitted when a user is finished with
 * the step that asks user to select from a list of RDS databases.
 *
 * @generated from message prehog.v1alpha.UIDiscoverDatabaseRDSEnrollEvent
 */
export type UIDiscoverDatabaseRDSEnrollEvent = Message<"prehog.v1alpha.UIDiscoverDatabaseRDSEnrollEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  /**
   * @generated from field: int64 selected_resources_count = 4;
   */
  selectedResourcesCount: bigint;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverDatabaseRDSEnrollEvent.
 * Use `create(UIDiscoverDatabaseRDSEnrollEventSchema)` to create a new message.
 */
export const UIDiscoverDatabaseRDSEnrollEventSchema: GenMessage<UIDiscoverDatabaseRDSEnrollEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 27);

/**
 * UIDiscoverKubeEKSEnrollEvent is emitted when a user is finished with
 * the step that asks user to select from a list of EKS clusters.
 *
 * @generated from message prehog.v1alpha.UIDiscoverKubeEKSEnrollEvent
 */
export type UIDiscoverKubeEKSEnrollEvent = Message<"prehog.v1alpha.UIDiscoverKubeEKSEnrollEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverKubeEKSEnrollEvent.
 * Use `create(UIDiscoverKubeEKSEnrollEventSchema)` to create a new message.
 */
export const UIDiscoverKubeEKSEnrollEventSchema: GenMessage<UIDiscoverKubeEKSEnrollEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 28);

/**
 * UIDiscoverDeployServiceEvent is emitted after the user installs a Teleport Agent.
 * For SSH this is the Teleport 'install-node' script.
 *
 * For Kubernetes this is the teleport-agent helm chart installation.
 *
 * For Database Access this step is the installation of the teleport 'install-db' script.
 * It can be skipped if the cluster already has a Database Service capable of proxying the database.
 *
 * @generated from message prehog.v1alpha.UIDiscoverDeployServiceEvent
 */
export type UIDiscoverDeployServiceEvent = Message<"prehog.v1alpha.UIDiscoverDeployServiceEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  /**
   * @generated from field: prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployMethod deploy_method = 4;
   */
  deployMethod: UIDiscoverDeployServiceEvent_DeployMethod;

  /**
   * @generated from field: prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployType deploy_type = 5;
   */
  deployType: UIDiscoverDeployServiceEvent_DeployType;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverDeployServiceEvent.
 * Use `create(UIDiscoverDeployServiceEventSchema)` to create a new message.
 */
export const UIDiscoverDeployServiceEventSchema: GenMessage<UIDiscoverDeployServiceEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 29);

/**
 * DeployMethod describes the method used to deploy a service.
 *
 * @generated from enum prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployMethod
 */
export enum UIDiscoverDeployServiceEvent_DeployMethod {
  /**
   * DEPLOY_METHOD_UNSPECIFIED means there was an existing service
   * so deploying step got skipped.
   *
   * @generated from enum value: DEPLOY_METHOD_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * DEPLOY_METHOD_AUTO means Teleport deployed a service for the user.
   *
   * @generated from enum value: DEPLOY_METHOD_AUTO = 1;
   */
  AUTO = 1,

  /**
   * DEPLOY_METHOD_MANUAL means a user deployed a service by themselves.
   *
   * @generated from enum value: DEPLOY_METHOD_MANUAL = 2;
   */
  MANUAL = 2,
}

/**
 * Describes the enum prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployMethod.
 */
export const UIDiscoverDeployServiceEvent_DeployMethodSchema: GenEnum<UIDiscoverDeployServiceEvent_DeployMethod> = /*@__PURE__*/
  enumDesc(file_prehog_v1alpha_teleport, 29, 0);

/**
 * DeployType describes the type of deployment.
 *
 * @generated from enum prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployType
 */
export enum UIDiscoverDeployServiceEvent_DeployType {
  /**
   * DEPLOY_METHOD_UNSPECIFIED means there was an existing service
   * so deploying step got skipped.
   *
   * @generated from enum value: DEPLOY_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * DEPLOY_TYPE_INSTALL_SCRIPT means service was deployed using an
   * install script.
   *
   * @generated from enum value: DEPLOY_TYPE_INSTALL_SCRIPT = 1;
   */
  INSTALL_SCRIPT = 1,

  /**
   * DEPLOY_TYPE_AMAZON_ECS means service was deployed using amazon's
   * elastic container service.
   *
   * @generated from enum value: DEPLOY_TYPE_AMAZON_ECS = 2;
   */
  AMAZON_ECS = 2,
}

/**
 * Describes the enum prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployType.
 */
export const UIDiscoverDeployServiceEvent_DeployTypeSchema: GenEnum<UIDiscoverDeployServiceEvent_DeployType> = /*@__PURE__*/
  enumDesc(file_prehog_v1alpha_teleport, 29, 1);

/**
 * UIDiscoverCreateDiscoveryConfigEvent is emitted when a discovery config is successfully created.
 *
 * @generated from message prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent
 */
export type UIDiscoverCreateDiscoveryConfigEvent = Message<"prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  /**
   * @generated from field: prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod config_method = 4;
   */
  configMethod: UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent.
 * Use `create(UIDiscoverCreateDiscoveryConfigEventSchema)` to create a new message.
 */
export const UIDiscoverCreateDiscoveryConfigEventSchema: GenMessage<UIDiscoverCreateDiscoveryConfigEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 30);

/**
 * ConfigMethod describes how the discovery config is configured.
 *
 * @generated from enum prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod
 */
export enum UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod {
  /**
   * CONFIG_METHOD_UNSPECIFIED means config method unspecified/unset.
   *
   * @generated from enum value: CONFIG_METHOD_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * CONFIG_METHOD_SSM means EC2 auto discovery configured with ssm.
   *
   * @generated from enum value: CONFIG_METHOD_AWS_EC2_SSM = 1;
   */
  AWS_EC2_SSM = 1,

  /**
   * CONFIG_METHOD_SSM means auto discovery configured for EC2 using EICE.
   *
   * @generated from enum value: CONFIG_METHOD_AWS_EC2_EICE = 2;
   */
  AWS_EC2_EICE = 2,

  /**
   * CONFIG_METHOD_SSM means auto discovery configured for RDS using ECS.
   *
   * @generated from enum value: CONFIG_METHOD_AWS_RDS_ECS = 3;
   */
  AWS_RDS_ECS = 3,

  /**
   * CONFIG_METHOD_SSM means auto discovery configured for EKS.
   *
   * @generated from enum value: CONFIG_METHOD_AWS_EKS = 4;
   */
  AWS_EKS = 4,
}

/**
 * Describes the enum prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod.
 */
export const UIDiscoverCreateDiscoveryConfigEvent_ConfigMethodSchema: GenEnum<UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod> = /*@__PURE__*/
  enumDesc(file_prehog_v1alpha_teleport, 30, 0);

/**
 * UIDiscoverDatabaseRegisterEvent is emitted when a user is finished with the step that registers a database resource.
 *
 * @generated from message prehog.v1alpha.UIDiscoverDatabaseRegisterEvent
 */
export type UIDiscoverDatabaseRegisterEvent = Message<"prehog.v1alpha.UIDiscoverDatabaseRegisterEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverDatabaseRegisterEvent.
 * Use `create(UIDiscoverDatabaseRegisterEventSchema)` to create a new message.
 */
export const UIDiscoverDatabaseRegisterEventSchema: GenMessage<UIDiscoverDatabaseRegisterEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 31);

/**
 * UIDiscoverDatabaseConfigureMTLSEvent is emitted when a user is finished with the step that configures mutual TLS for a self-hosted database.
 *
 * @generated from message prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent
 */
export type UIDiscoverDatabaseConfigureMTLSEvent = Message<"prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent.
 * Use `create(UIDiscoverDatabaseConfigureMTLSEventSchema)` to create a new message.
 */
export const UIDiscoverDatabaseConfigureMTLSEventSchema: GenMessage<UIDiscoverDatabaseConfigureMTLSEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 32);

/**
 * UIDiscoverDesktopActiveDirectoryToolsInstallEvent is emitted when the user is finished with the step that asks user to run the install Active Directory tools script for the Desktop flow.
 *
 * @generated from message prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent
 */
export type UIDiscoverDesktopActiveDirectoryToolsInstallEvent = Message<"prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent.
 * Use `create(UIDiscoverDesktopActiveDirectoryToolsInstallEventSchema)` to create a new message.
 */
export const UIDiscoverDesktopActiveDirectoryToolsInstallEventSchema: GenMessage<UIDiscoverDesktopActiveDirectoryToolsInstallEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 33);

/**
 * UIDiscoverDesktopActiveDirectoryConfigureEvent is emitted when the user is finished with the step that asks user to run the Configure Active Directory script for the Desktop flow.
 *
 * @generated from message prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent
 */
export type UIDiscoverDesktopActiveDirectoryConfigureEvent = Message<"prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent.
 * Use `create(UIDiscoverDesktopActiveDirectoryConfigureEventSchema)` to create a new message.
 */
export const UIDiscoverDesktopActiveDirectoryConfigureEventSchema: GenMessage<UIDiscoverDesktopActiveDirectoryConfigureEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 34);

/**
 * UIDiscoverAutoDiscoveredResourcesEvent is emitted when the user is finished with the step that auto discovers resources (waiting until resources show up).
 * resources_count field must reflect the latest amount of discovered resources (get the number after user is finished with this step).
 *
 * @generated from message prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent
 */
export type UIDiscoverAutoDiscoveredResourcesEvent = Message<"prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  /**
   * @generated from field: int64 resources_count = 4;
   */
  resourcesCount: bigint;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent.
 * Use `create(UIDiscoverAutoDiscoveredResourcesEventSchema)` to create a new message.
 */
export const UIDiscoverAutoDiscoveredResourcesEventSchema: GenMessage<UIDiscoverAutoDiscoveredResourcesEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 35);

/**
 * UIDiscoverEC2InstanceSelectionEvent is emitted when the user is finished with the step that asks the user to select an EC2 Instance to enroll.
 *
 * @generated from message prehog.v1alpha.UIDiscoverEC2InstanceSelectionEvent
 */
export type UIDiscoverEC2InstanceSelectionEvent = Message<"prehog.v1alpha.UIDiscoverEC2InstanceSelectionEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverEC2InstanceSelectionEvent.
 * Use `create(UIDiscoverEC2InstanceSelectionEventSchema)` to create a new message.
 */
export const UIDiscoverEC2InstanceSelectionEventSchema: GenMessage<UIDiscoverEC2InstanceSelectionEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 36);

/**
 * UIDiscoverDeployEICEEvent is emitted when the user deploys an EC2 Instance Connect Endpoint.
 *
 * @generated from message prehog.v1alpha.UIDiscoverDeployEICEEvent
 */
export type UIDiscoverDeployEICEEvent = Message<"prehog.v1alpha.UIDiscoverDeployEICEEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverDeployEICEEvent.
 * Use `create(UIDiscoverDeployEICEEventSchema)` to create a new message.
 */
export const UIDiscoverDeployEICEEventSchema: GenMessage<UIDiscoverDeployEICEEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 37);

/**
 * UIDiscoverCreateNodeEvent is emitted when the node is created in Teleport.
 *
 * @generated from message prehog.v1alpha.UIDiscoverCreateNodeEvent
 */
export type UIDiscoverCreateNodeEvent = Message<"prehog.v1alpha.UIDiscoverCreateNodeEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverCreateNodeEvent.
 * Use `create(UIDiscoverCreateNodeEventSchema)` to create a new message.
 */
export const UIDiscoverCreateNodeEventSchema: GenMessage<UIDiscoverCreateNodeEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 38);

/**
 * UIDiscoverCreateAppServerEvent is emitted when an app server is created.
 *
 * @generated from message prehog.v1alpha.UIDiscoverCreateAppServerEvent
 */
export type UIDiscoverCreateAppServerEvent = Message<"prehog.v1alpha.UIDiscoverCreateAppServerEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverCreateAppServerEvent.
 * Use `create(UIDiscoverCreateAppServerEventSchema)` to create a new message.
 */
export const UIDiscoverCreateAppServerEventSchema: GenMessage<UIDiscoverCreateAppServerEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 39);

/**
 * UIDiscoverDatabaseConfigureIAMPolicyEvent is emitted when a user is finished with the step that configures IAM policy for an RDS database.
 *
 * @generated from message prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent
 */
export type UIDiscoverDatabaseConfigureIAMPolicyEvent = Message<"prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent.
 * Use `create(UIDiscoverDatabaseConfigureIAMPolicyEventSchema)` to create a new message.
 */
export const UIDiscoverDatabaseConfigureIAMPolicyEventSchema: GenMessage<UIDiscoverDatabaseConfigureIAMPolicyEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 40);

/**
 * UIDiscoverPrincipalsConfigureEvent is emitted when a user is finished with the step that allows user to update their principals (setting up access).
 *
 * @generated from message prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent
 */
export type UIDiscoverPrincipalsConfigureEvent = Message<"prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent.
 * Use `create(UIDiscoverPrincipalsConfigureEventSchema)` to create a new message.
 */
export const UIDiscoverPrincipalsConfigureEventSchema: GenMessage<UIDiscoverPrincipalsConfigureEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 41);

/**
 * UIDiscoverTestConnectionEvent emitted on the "Test Connection" screen
 * when the user clicked tested connection to their resource.
 *
 * @generated from message prehog.v1alpha.UIDiscoverTestConnectionEvent
 */
export type UIDiscoverTestConnectionEvent = Message<"prehog.v1alpha.UIDiscoverTestConnectionEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverTestConnectionEvent.
 * Use `create(UIDiscoverTestConnectionEventSchema)` to create a new message.
 */
export const UIDiscoverTestConnectionEventSchema: GenMessage<UIDiscoverTestConnectionEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 42);

/**
 * UIDiscoverCompletedEvent is emitted when user completes the Discover wizard.
 *
 * @generated from message prehog.v1alpha.UIDiscoverCompletedEvent
 */
export type UIDiscoverCompletedEvent = Message<"prehog.v1alpha.UIDiscoverCompletedEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message prehog.v1alpha.UIDiscoverCompletedEvent.
 * Use `create(UIDiscoverCompletedEventSchema)` to create a new message.
 */
export const UIDiscoverCompletedEventSchema: GenMessage<UIDiscoverCompletedEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 43);

/**
 * RoleCreateEvent is emitted when user creates a custom role.
 *
 * @generated from message prehog.v1alpha.RoleCreateEvent
 */
export type RoleCreateEvent = Message<"prehog.v1alpha.RoleCreateEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * anonymized
   *
   * @generated from field: string role_name = 2;
   */
  roleName: string;
};

/**
 * Describes the message prehog.v1alpha.RoleCreateEvent.
 * Use `create(RoleCreateEventSchema)` to create a new message.
 */
export const RoleCreateEventSchema: GenMessage<RoleCreateEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 44);

/**
 * BotCreateEvent is emitted when user creates a bot.
 *
 * @generated from message prehog.v1alpha.BotCreateEvent
 */
export type BotCreateEvent = Message<"prehog.v1alpha.BotCreateEvent"> & {
  /**
   * user_name is the anonymized name of the user who created the bot
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * anonymized
   *
   * @generated from field: string bot_user_name = 2;
   */
  botUserName: string;

  /**
   * role_name is the anonymized name of the bot role that was created.
   *
   * @generated from field: string role_name = 3;
   */
  roleName: string;

  /**
   * role_count is the number of roles that the bot role can impersonate on
   * creation.
   *
   * @generated from field: int64 role_count = 4;
   */
  roleCount: bigint;

  /**
   * join_method is the join method of the token associated with the bot on
   * creation.
   *
   * @generated from field: string join_method = 5;
   */
  joinMethod: string;

  /**
   * bot_name is the anonymised name of the bot.
   *
   * @generated from field: string bot_name = 6;
   */
  botName: string;
};

/**
 * Describes the message prehog.v1alpha.BotCreateEvent.
 * Use `create(BotCreateEventSchema)` to create a new message.
 */
export const BotCreateEventSchema: GenMessage<BotCreateEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 45);

/**
 * BotJoinEvent is emitted when a bot joins a Teleport cluster.
 *
 * @generated from message prehog.v1alpha.BotJoinEvent
 */
export type BotJoinEvent = Message<"prehog.v1alpha.BotJoinEvent"> & {
  /**
   * bot_name is the anonymised name of the bot.
   *
   * @generated from field: string bot_name = 1;
   */
  botName: string;

  /**
   * join_method is the join method of the token associated with the bot on
   * creation. This will be the string value of `api/types.JoinMethod`.
   *
   * @generated from field: string join_method = 2;
   */
  joinMethod: string;

  /**
   * join_token_name is the anonymised name of the token used to join
   * the cluster.
   *
   * @generated from field: string join_token_name = 3;
   */
  joinTokenName: string;

  /**
   * user_name is the anonymised name of the Bot user.
   *
   * @generated from field: string user_name = 4;
   */
  userName: string;
};

/**
 * Describes the message prehog.v1alpha.BotJoinEvent.
 * Use `create(BotJoinEventSchema)` to create a new message.
 */
export const BotJoinEventSchema: GenMessage<BotJoinEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 46);

/**
 * UICreateNewRoleClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from message prehog.v1alpha.UICreateNewRoleClickEvent
 */
export type UICreateNewRoleClickEvent = Message<"prehog.v1alpha.UICreateNewRoleClickEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;
};

/**
 * Describes the message prehog.v1alpha.UICreateNewRoleClickEvent.
 * Use `create(UICreateNewRoleClickEventSchema)` to create a new message.
 */
export const UICreateNewRoleClickEventSchema: GenMessage<UICreateNewRoleClickEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 47);

/**
 * UICreateNewRoleSaveClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from message prehog.v1alpha.UICreateNewRoleSaveClickEvent
 */
export type UICreateNewRoleSaveClickEvent = Message<"prehog.v1alpha.UICreateNewRoleSaveClickEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;
};

/**
 * Describes the message prehog.v1alpha.UICreateNewRoleSaveClickEvent.
 * Use `create(UICreateNewRoleSaveClickEventSchema)` to create a new message.
 */
export const UICreateNewRoleSaveClickEventSchema: GenMessage<UICreateNewRoleSaveClickEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 48);

/**
 * UICreateNewRoleCancelClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from message prehog.v1alpha.UICreateNewRoleCancelClickEvent
 */
export type UICreateNewRoleCancelClickEvent = Message<"prehog.v1alpha.UICreateNewRoleCancelClickEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;
};

/**
 * Describes the message prehog.v1alpha.UICreateNewRoleCancelClickEvent.
 * Use `create(UICreateNewRoleCancelClickEventSchema)` to create a new message.
 */
export const UICreateNewRoleCancelClickEventSchema: GenMessage<UICreateNewRoleCancelClickEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 49);

/**
 * UICreateNewRoleViewDocumentationClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from message prehog.v1alpha.UICreateNewRoleViewDocumentationClickEvent
 */
export type UICreateNewRoleViewDocumentationClickEvent = Message<"prehog.v1alpha.UICreateNewRoleViewDocumentationClickEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;
};

/**
 * Describes the message prehog.v1alpha.UICreateNewRoleViewDocumentationClickEvent.
 * Use `create(UICreateNewRoleViewDocumentationClickEventSchema)` to create a new message.
 */
export const UICreateNewRoleViewDocumentationClickEventSchema: GenMessage<UICreateNewRoleViewDocumentationClickEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 50);

/**
 * UICallToActionClickEvent is a click in a Teleport Web UI's CTA
 *
 * @generated from message prehog.v1alpha.UICallToActionClickEvent
 */
export type UICallToActionClickEvent = Message<"prehog.v1alpha.UICallToActionClickEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * @generated from field: prehog.v1alpha.CTA cta = 2;
   */
  cta: CTA;
};

/**
 * Describes the message prehog.v1alpha.UICallToActionClickEvent.
 * Use `create(UICallToActionClickEventSchema)` to create a new message.
 */
export const UICallToActionClickEventSchema: GenMessage<UICallToActionClickEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 51);

/**
 * a request forwarded to a kube cluster's API server (other than exec and
 * port-forward)
 *
 * PostHog event: tp.kube.request
 *
 * @generated from message prehog.v1alpha.KubeRequestEvent
 */
export type KubeRequestEvent = Message<"prehog.v1alpha.KubeRequestEvent"> & {
  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * Indicates the kind of user (e.g. bot or human), if known.
   *
   * @generated from field: prehog.v1alpha.UserKind user_kind = 2;
   */
  userKind: UserKind;
};

/**
 * Describes the message prehog.v1alpha.KubeRequestEvent.
 * Use `create(KubeRequestEventSchema)` to create a new message.
 */
export const KubeRequestEventSchema: GenMessage<KubeRequestEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 52);

/**
 * an sftp event, represents a single operation on a file
 *
 * PostHog event: tp.sftp
 *
 * @generated from message prehog.v1alpha.SFTPEvent
 */
export type SFTPEvent = Message<"prehog.v1alpha.SFTPEvent"> & {
  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * matching SFTPAction in teleport/api/types/events/events.proto
   *
   * @generated from field: int32 action = 2;
   */
  action: number;

  /**
   * Indicates the kind of user (bot or human), if known.
   *
   * @generated from field: prehog.v1alpha.UserKind user_kind = 3;
   */
  userKind: UserKind;
};

/**
 * Describes the message prehog.v1alpha.SFTPEvent.
 * Use `create(SFTPEventSchema)` to create a new message.
 */
export const SFTPEventSchema: GenMessage<SFTPEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 53);

/**
 * @generated from message prehog.v1alpha.AgentMetadataEvent
 */
export type AgentMetadataEvent = Message<"prehog.v1alpha.AgentMetadataEvent"> & {
  /**
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * @generated from field: string host_id = 2;
   */
  hostId: string;

  /**
   * @generated from field: repeated string services = 3;
   */
  services: string[];

  /**
   * @generated from field: string os = 4;
   */
  os: string;

  /**
   * @generated from field: string os_version = 5;
   */
  osVersion: string;

  /**
   * @generated from field: string host_architecture = 6;
   */
  hostArchitecture: string;

  /**
   * @generated from field: string glibc_version = 7;
   */
  glibcVersion: string;

  /**
   * @generated from field: repeated string install_methods = 8;
   */
  installMethods: string[];

  /**
   * @generated from field: string container_runtime = 9;
   */
  containerRuntime: string;

  /**
   * @generated from field: string container_orchestrator = 10;
   */
  containerOrchestrator: string;

  /**
   * @generated from field: string cloud_environment = 11;
   */
  cloudEnvironment: string;

  /**
   * external_upgrader is the name of the registered external upgrader. if non-empty, this field indicates
   * that the associated agent is enrolled in automatic upgrades.
   *
   * @generated from field: string external_upgrader = 12;
   */
  externalUpgrader: string;
};

/**
 * Describes the message prehog.v1alpha.AgentMetadataEvent.
 * Use `create(AgentMetadataEventSchema)` to create a new message.
 */
export const AgentMetadataEventSchema: GenMessage<AgentMetadataEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 54);

/**
 * AssistCompletionEvent is an event that is emitted
 * when a single completion occurs in the Teleport Assist,
 * i.e. a user submits a prompt, and receives an answer from the Assist
 *
 * @generated from message prehog.v1alpha.AssistCompletionEvent
 */
export type AssistCompletionEvent = Message<"prehog.v1alpha.AssistCompletionEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * ConversationId is the UUID that identifies a single Assist conversation
   *
   * @generated from field: string conversation_id = 2;
   */
  conversationId: string;

  /**
   * TotalTokens is the total amount of token used to satisfy this request
   *
   * @generated from field: int64 total_tokens = 3;
   */
  totalTokens: bigint;

  /**
   * PromptTokens is the amount of estimated tokens used by the prompt
   *
   * @generated from field: int64 prompt_tokens = 4;
   */
  promptTokens: bigint;

  /**
   * CompletionTokens is the amount of tokens that the completion response consists of
   *
   * @generated from field: int64 completion_tokens = 5;
   */
  completionTokens: bigint;
};

/**
 * Describes the message prehog.v1alpha.AssistCompletionEvent.
 * Use `create(AssistCompletionEventSchema)` to create a new message.
 */
export const AssistCompletionEventSchema: GenMessage<AssistCompletionEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 55);

/**
 * AssistExecutionEvent is an event that is emitted when an Assist command
 * execution is triggered by the user.
 *
 * @generated from message prehog.v1alpha.AssistExecutionEvent
 */
export type AssistExecutionEvent = Message<"prehog.v1alpha.AssistExecutionEvent"> & {
  /**
   * UserName is anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * ConversationId is the UUID that identifies a single Assist conversation
   *
   * @generated from field: string conversation_id = 2;
   */
  conversationId: string;

  /**
   * NodeCount is the number of nodes the command was executed on
   *
   * @generated from field: int64 node_count = 3;
   */
  nodeCount: bigint;

  /**
   * TotalTokens is the total amount of token used to generate the command summary
   *
   * @generated from field: int64 total_tokens = 4;
   */
  totalTokens: bigint;

  /**
   * PromptTokens is the amount of estimated tokens used by the prompt to generate the command summary
   *
   * @generated from field: int64 prompt_tokens = 5;
   */
  promptTokens: bigint;

  /**
   * CompletionTokens is the amount of tokens that the summary completion response consists of
   *
   * @generated from field: int64 completion_tokens = 6;
   */
  completionTokens: bigint;
};

/**
 * Describes the message prehog.v1alpha.AssistExecutionEvent.
 * Use `create(AssistExecutionEventSchema)` to create a new message.
 */
export const AssistExecutionEventSchema: GenMessage<AssistExecutionEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 56);

/**
 * AssistNewConversationEvent is an event that is emitted for each new Assist
 * conversation and contains the conversation category.
 *
 * @generated from message prehog.v1alpha.AssistNewConversationEvent
 */
export type AssistNewConversationEvent = Message<"prehog.v1alpha.AssistNewConversationEvent"> & {
  /**
   * UserName is anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * Category is the conversation category. This represents what kind of request
   * the user is asking Assist.
   *
   * @generated from field: string category = 2;
   */
  category: string;
};

/**
 * Describes the message prehog.v1alpha.AssistNewConversationEvent.
 * Use `create(AssistNewConversationEventSchema)` to create a new message.
 */
export const AssistNewConversationEventSchema: GenMessage<AssistNewConversationEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 57);

/**
 * AssistAccessRequest is an event that is emitted when a user requests access
 * to a resource via Assist.
 *
 * @generated from message prehog.v1alpha.AssistAccessRequestEvent
 */
export type AssistAccessRequestEvent = Message<"prehog.v1alpha.AssistAccessRequestEvent"> & {
  /**
   * UserName is anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * ResourceType describes the type of resource the user is requesting access to, e.g. "node", "db", "k8s" or "role".
   *
   * @generated from field: string resource_type = 2;
   */
  resourceType: string;

  /**
   * TotalTokens is the total amount of token used to generate the command summary
   *
   * @generated from field: int64 total_tokens = 4;
   */
  totalTokens: bigint;

  /**
   * PromptTokens is the amount of estimated tokens used by the prompt to generate the command summary
   *
   * @generated from field: int64 prompt_tokens = 5;
   */
  promptTokens: bigint;

  /**
   * CompletionTokens is the amount of tokens that the summary completion response consists of
   *
   * @generated from field: int64 completion_tokens = 6;
   */
  completionTokens: bigint;
};

/**
 * Describes the message prehog.v1alpha.AssistAccessRequestEvent.
 * Use `create(AssistAccessRequestEventSchema)` to create a new message.
 */
export const AssistAccessRequestEventSchema: GenMessage<AssistAccessRequestEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 58);

/**
 * AssistAction is an event that is emitted when a user triggers an action (SSH command generation, output explain, etc.)
 * via Assist.
 *
 * @generated from message prehog.v1alpha.AssistActionEvent
 */
export type AssistActionEvent = Message<"prehog.v1alpha.AssistActionEvent"> & {
  /**
   * UserName is anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * Action is the action that was triggered, e.g. "ssh-explain", "ssh-command-generate", etc.
   *
   * @generated from field: string action = 2;
   */
  action: string;

  /**
   * TotalTokens is the total amount of token used to generate the command summary
   *
   * @generated from field: int64 total_tokens = 4;
   */
  totalTokens: bigint;

  /**
   * PromptTokens is the amount of estimated tokens used by the prompt to generate the command summary
   *
   * @generated from field: int64 prompt_tokens = 5;
   */
  promptTokens: bigint;

  /**
   * CompletionTokens is the amount of tokens that the summary completion response consists of
   *
   * @generated from field: int64 completion_tokens = 6;
   */
  completionTokens: bigint;
};

/**
 * Describes the message prehog.v1alpha.AssistActionEvent.
 * Use `create(AssistActionEventSchema)` to create a new message.
 */
export const AssistActionEventSchema: GenMessage<AssistActionEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 59);

/**
 * AccessListMetadata contains common metadata for Access List related events.
 *
 * @generated from message prehog.v1alpha.AccessListMetadata
 */
export type AccessListMetadata = Message<"prehog.v1alpha.AccessListMetadata"> & {
  /**
   * id uniquely identifies an Access List. Will allow correlation of events within an access list.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message prehog.v1alpha.AccessListMetadata.
 * Use `create(AccessListMetadataSchema)` to create a new message.
 */
export const AccessListMetadataSchema: GenMessage<AccessListMetadata> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 60);

/**
 * AccessListCreate is an event that is emitted when an access list is created.
 *
 * @generated from message prehog.v1alpha.AccessListCreateEvent
 */
export type AccessListCreateEvent = Message<"prehog.v1alpha.AccessListCreateEvent"> & {
  /**
   * user_name is the anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * @generated from field: prehog.v1alpha.AccessListMetadata metadata = 2;
   */
  metadata?: AccessListMetadata;
};

/**
 * Describes the message prehog.v1alpha.AccessListCreateEvent.
 * Use `create(AccessListCreateEventSchema)` to create a new message.
 */
export const AccessListCreateEventSchema: GenMessage<AccessListCreateEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 61);

/**
 * AccessListUpdate is an event that is emitted when an access list is updated.
 *
 * @generated from message prehog.v1alpha.AccessListUpdateEvent
 */
export type AccessListUpdateEvent = Message<"prehog.v1alpha.AccessListUpdateEvent"> & {
  /**
   * user_name is the anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * @generated from field: prehog.v1alpha.AccessListMetadata metadata = 2;
   */
  metadata?: AccessListMetadata;
};

/**
 * Describes the message prehog.v1alpha.AccessListUpdateEvent.
 * Use `create(AccessListUpdateEventSchema)` to create a new message.
 */
export const AccessListUpdateEventSchema: GenMessage<AccessListUpdateEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 62);

/**
 * AccessListDelete is an event that is emitted when an access list is deleted.
 *
 * @generated from message prehog.v1alpha.AccessListDeleteEvent
 */
export type AccessListDeleteEvent = Message<"prehog.v1alpha.AccessListDeleteEvent"> & {
  /**
   * user_name is the anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * @generated from field: prehog.v1alpha.AccessListMetadata metadata = 2;
   */
  metadata?: AccessListMetadata;
};

/**
 * Describes the message prehog.v1alpha.AccessListDeleteEvent.
 * Use `create(AccessListDeleteEventSchema)` to create a new message.
 */
export const AccessListDeleteEventSchema: GenMessage<AccessListDeleteEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 63);

/**
 * AccessListMemberCreate is an event that is emitted when a member is added to an access list.
 *
 * @generated from message prehog.v1alpha.AccessListMemberCreateEvent
 */
export type AccessListMemberCreateEvent = Message<"prehog.v1alpha.AccessListMemberCreateEvent"> & {
  /**
   * user_name is the anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * @generated from field: prehog.v1alpha.AccessListMetadata metadata = 2;
   */
  metadata?: AccessListMetadata;
};

/**
 * Describes the message prehog.v1alpha.AccessListMemberCreateEvent.
 * Use `create(AccessListMemberCreateEventSchema)` to create a new message.
 */
export const AccessListMemberCreateEventSchema: GenMessage<AccessListMemberCreateEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 64);

/**
 * AccessListMemberUpdate is an event that is emitted when a member is updated in an access list.
 *
 * @generated from message prehog.v1alpha.AccessListMemberUpdateEvent
 */
export type AccessListMemberUpdateEvent = Message<"prehog.v1alpha.AccessListMemberUpdateEvent"> & {
  /**
   * user_name is the anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * @generated from field: prehog.v1alpha.AccessListMetadata metadata = 2;
   */
  metadata?: AccessListMetadata;
};

/**
 * Describes the message prehog.v1alpha.AccessListMemberUpdateEvent.
 * Use `create(AccessListMemberUpdateEventSchema)` to create a new message.
 */
export const AccessListMemberUpdateEventSchema: GenMessage<AccessListMemberUpdateEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 65);

/**
 * AccessListMemberDelete is an event that is emitted when a member is removed from an access list.
 *
 * @generated from message prehog.v1alpha.AccessListMemberDeleteEvent
 */
export type AccessListMemberDeleteEvent = Message<"prehog.v1alpha.AccessListMemberDeleteEvent"> & {
  /**
   * user_name is anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * @generated from field: prehog.v1alpha.AccessListMetadata metadata = 2;
   */
  metadata?: AccessListMetadata;
};

/**
 * Describes the message prehog.v1alpha.AccessListMemberDeleteEvent.
 * Use `create(AccessListMemberDeleteEventSchema)` to create a new message.
 */
export const AccessListMemberDeleteEventSchema: GenMessage<AccessListMemberDeleteEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 66);

/**
 * AccessListGrantsToUser is an event that is emitted when access list permissions are granted to a user
 * on login.
 *
 * @generated from message prehog.v1alpha.AccessListGrantsToUserEvent
 */
export type AccessListGrantsToUserEvent = Message<"prehog.v1alpha.AccessListGrantsToUserEvent"> & {
  /**
   * user_name is the anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * count_roles_granted is the number of roles granted to a user.
   *
   * @generated from field: int32 count_roles_granted = 2;
   */
  countRolesGranted: number;

  /**
   * count_traits_granted is the number of traits granted to a user.
   *
   * @generated from field: int32 count_traits_granted = 3;
   */
  countTraitsGranted: number;
};

/**
 * Describes the message prehog.v1alpha.AccessListGrantsToUserEvent.
 * Use `create(AccessListGrantsToUserEventSchema)` to create a new message.
 */
export const AccessListGrantsToUserEventSchema: GenMessage<AccessListGrantsToUserEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 67);

/**
 * AccessListReviewCreateEvent is an event that is emitted when an access list review is created.
 *
 * @generated from message prehog.v1alpha.AccessListReviewCreateEvent
 */
export type AccessListReviewCreateEvent = Message<"prehog.v1alpha.AccessListReviewCreateEvent"> & {
  /**
   * user_name is anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * @generated from field: prehog.v1alpha.AccessListMetadata metadata = 2;
   */
  metadata?: AccessListMetadata;

  /**
   * days_past_next_audit_date is how many days past the next audit date the review came in. Can be negative.
   *
   * @generated from field: int32 days_past_next_audit_date = 3;
   */
  daysPastNextAuditDate: number;

  /**
   * membership_requirements_changed indicates that the membership requirements were changed.
   *
   * @generated from field: bool membership_requirements_changed = 4;
   */
  membershipRequirementsChanged: boolean;

  /**
   * review_frequency_changed indicates that the review frequency was changed.
   *
   * @generated from field: bool review_frequency_changed = 5;
   */
  reviewFrequencyChanged: boolean;

  /**
   * review_day_of_month_changed indicates that the review day of month was changed.
   *
   * @generated from field: bool review_day_of_month_changed = 6;
   */
  reviewDayOfMonthChanged: boolean;

  /**
   * number_of_removed_members is how many members were removed as part of this review.
   *
   * @generated from field: int32 number_of_removed_members = 7;
   */
  numberOfRemovedMembers: number;
};

/**
 * Describes the message prehog.v1alpha.AccessListReviewCreateEvent.
 * Use `create(AccessListReviewCreateEventSchema)` to create a new message.
 */
export const AccessListReviewCreateEventSchema: GenMessage<AccessListReviewCreateEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 68);

/**
 * AccessListReviewDeleteEvent is an event that is emitted when an access list review is deleted.
 *
 * @generated from message prehog.v1alpha.AccessListReviewDeleteEvent
 */
export type AccessListReviewDeleteEvent = Message<"prehog.v1alpha.AccessListReviewDeleteEvent"> & {
  /**
   * user_name is anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * @generated from field: prehog.v1alpha.AccessListMetadata metadata = 2;
   */
  metadata?: AccessListMetadata;

  /**
   * access_list_review_id is the unique identifier for the access list review.
   *
   * @generated from field: string access_list_review_id = 3;
   */
  accessListReviewId: string;
};

/**
 * Describes the message prehog.v1alpha.AccessListReviewDeleteEvent.
 * Use `create(AccessListReviewDeleteEventSchema)` to create a new message.
 */
export const AccessListReviewDeleteEventSchema: GenMessage<AccessListReviewDeleteEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 69);

/**
 * AccessListReviewComplianceEvent is an event that is emitted periodically to indicate how many access
 * lists are past due for a review.
 *
 * @generated from message prehog.v1alpha.AccessListReviewComplianceEvent
 */
export type AccessListReviewComplianceEvent = Message<"prehog.v1alpha.AccessListReviewComplianceEvent"> & {
  /**
   * total_access_lists is the total number of access lists known to Teleport.
   *
   * @generated from field: int32 total_access_lists = 1;
   */
  totalAccessLists: number;

  /**
   * access_lists_need_review is the number of access lists that need a review.
   *
   * @generated from field: int32 access_lists_need_review = 2;
   */
  accessListsNeedReview: number;
};

/**
 * Describes the message prehog.v1alpha.AccessListReviewComplianceEvent.
 * Use `create(AccessListReviewComplianceEventSchema)` to create a new message.
 */
export const AccessListReviewComplianceEventSchema: GenMessage<AccessListReviewComplianceEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 70);

/**
 * IntegrationEnrollMetadata contains common metadata
 * for Integration Enroll related events.
 *
 * @generated from message prehog.v1alpha.IntegrationEnrollMetadata
 */
export type IntegrationEnrollMetadata = Message<"prehog.v1alpha.IntegrationEnrollMetadata"> & {
  /**
   * id is used as a unique identifier to correlate events within the
   * same enroll wizard run.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * kind identifies what type of integration the user clicked on to enroll.
   *
   * @generated from field: prehog.v1alpha.IntegrationEnrollKind kind = 2;
   */
  kind: IntegrationEnrollKind;

  /**
   * user_name is anonymized.
   *
   * @generated from field: string user_name = 3;
   */
  userName: string;
};

/**
 * Describes the message prehog.v1alpha.IntegrationEnrollMetadata.
 * Use `create(IntegrationEnrollMetadataSchema)` to create a new message.
 */
export const IntegrationEnrollMetadataSchema: GenMessage<IntegrationEnrollMetadata> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 71);

/**
 * UIIntegrationEnrollEvent is an event that is emitted when a user
 * clicks on a integration to enroll.
 *
 * @generated from message prehog.v1alpha.UIIntegrationEnrollStartEvent
 */
export type UIIntegrationEnrollStartEvent = Message<"prehog.v1alpha.UIIntegrationEnrollStartEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.IntegrationEnrollMetadata metadata = 1;
   */
  metadata?: IntegrationEnrollMetadata;
};

/**
 * Describes the message prehog.v1alpha.UIIntegrationEnrollStartEvent.
 * Use `create(UIIntegrationEnrollStartEventSchema)` to create a new message.
 */
export const UIIntegrationEnrollStartEventSchema: GenMessage<UIIntegrationEnrollStartEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 72);

/**
 * UIIntegrationEnrollEvent is an event that is emitted when a user
 * completed enrolling an integration.
 *
 * @generated from message prehog.v1alpha.UIIntegrationEnrollCompleteEvent
 */
export type UIIntegrationEnrollCompleteEvent = Message<"prehog.v1alpha.UIIntegrationEnrollCompleteEvent"> & {
  /**
   * @generated from field: prehog.v1alpha.IntegrationEnrollMetadata metadata = 1;
   */
  metadata?: IntegrationEnrollMetadata;
};

/**
 * Describes the message prehog.v1alpha.UIIntegrationEnrollCompleteEvent.
 * Use `create(UIIntegrationEnrollCompleteEventSchema)` to create a new message.
 */
export const UIIntegrationEnrollCompleteEventSchema: GenMessage<UIIntegrationEnrollCompleteEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 73);

/**
 * EditorChangeEvent is an event that is emitted when a user role set changes resulting in
 * a editor role being added on removed
 *
 * @generated from message prehog.v1alpha.EditorChangeEvent
 */
export type EditorChangeEvent = Message<"prehog.v1alpha.EditorChangeEvent"> & {
  /**
   * anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * @generated from field: prehog.v1alpha.EditorChangeStatus status = 2;
   */
  status: EditorChangeStatus;
};

/**
 * Describes the message prehog.v1alpha.EditorChangeEvent.
 * Use `create(EditorChangeEventSchema)` to create a new message.
 */
export const EditorChangeEventSchema: GenMessage<EditorChangeEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 74);

/**
 * Device authentication event
 *
 * @generated from message prehog.v1alpha.DeviceAuthenticateEvent
 */
export type DeviceAuthenticateEvent = Message<"prehog.v1alpha.DeviceAuthenticateEvent"> & {
  /**
   * anonymized device ID, 32 bytes (HMAC-SHA-256) encoded in base64
   *
   * PostHog property: tp.device_id
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  /**
   * anonymized username, 32 bytes (HMAC-SHA-256) encoded in base64
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 2;
   */
  userName: string;

  /**
   * device OS type
   *
   * PostHog property: tp.device_os_type
   *
   * @generated from field: string device_os_type = 3;
   */
  deviceOsType: string;
};

/**
 * Describes the message prehog.v1alpha.DeviceAuthenticateEvent.
 * Use `create(DeviceAuthenticateEventSchema)` to create a new message.
 */
export const DeviceAuthenticateEventSchema: GenMessage<DeviceAuthenticateEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 75);

/**
 * Device Enrollment event
 *
 * PostHost event: tp.device.enroll
 *
 * @generated from message prehog.v1alpha.DeviceEnrollEvent
 */
export type DeviceEnrollEvent = Message<"prehog.v1alpha.DeviceEnrollEvent"> & {
  /**
   * anonymized device ID, 32 bytes (HMAC-SHA-256) encoded in base64
   *
   * PostHog property: tp.device_id
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  /**
   * anonymized username, 32 bytes (HMAC-SHA-256) encoded in base64
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 2;
   */
  userName: string;

  /**
   * device OS type
   *
   * PostHog property: tp.device_os_type
   *
   * @generated from field: string device_os_type = 3;
   */
  deviceOsType: string;

  /**
   * device origin
   *
   * PostHog property: tp.device_origin
   *
   * @generated from field: string device_origin = 4;
   */
  deviceOrigin: string;
};

/**
 * Describes the message prehog.v1alpha.DeviceEnrollEvent.
 * Use `create(DeviceEnrollEventSchema)` to create a new message.
 */
export const DeviceEnrollEventSchema: GenMessage<DeviceEnrollEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 76);

/**
 * FeatureRecommendationEvent captures event emitted when a feature is recommended to user or
 * when user completes the desired CTA for the feature.
 *
 * PostHost event: tp.ui.feature.recommendation
 *
 * @generated from message prehog.v1alpha.FeatureRecommendationEvent
 */
export type FeatureRecommendationEvent = Message<"prehog.v1alpha.FeatureRecommendationEvent"> & {
  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * feature is name of the Teleport feature.
   *
   * PostHog property: tp.feature
   *
   * @generated from field: prehog.v1alpha.Feature feature = 2;
   */
  feature: Feature;

  /**
   * feature_recommendation_status records recommendation state, which can be 'NOTIFIED' (feature is recommended)
   * OR 'DONE' (user completes desired CTA)
   *
   * PostHost property: tp.feature_recommendation_status
   *
   * @generated from field: prehog.v1alpha.FeatureRecommendationStatus feature_recommendation_status = 3;
   */
  featureRecommendationStatus: FeatureRecommendationStatus;
};

/**
 * Describes the message prehog.v1alpha.FeatureRecommendationEvent.
 * Use `create(FeatureRecommendationEventSchema)` to create a new message.
 */
export const FeatureRecommendationEventSchema: GenMessage<FeatureRecommendationEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 77);

/**
 * LicenseLimitEvent is emitted when access to Teleport feature
 * is denied based on license limits
 *
 * PostHost event: tp.license.limit
 *
 * @generated from message prehog.v1alpha.LicenseLimitEvent
 */
export type LicenseLimitEvent = Message<"prehog.v1alpha.LicenseLimitEvent"> & {
  /**
   * PostHost property: tp.license_limit
   *
   * @generated from field: prehog.v1alpha.LicenseLimit license_limit = 1;
   */
  licenseLimit: LicenseLimit;
};

/**
 * Describes the message prehog.v1alpha.LicenseLimitEvent.
 * Use `create(LicenseLimitEventSchema)` to create a new message.
 */
export const LicenseLimitEventSchema: GenMessage<LicenseLimitEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 78);

/**
 * DesktopDirectoryShareEvent is emitted when directory sharing is used
 * in a Teleport desktop session.
 *
 * @generated from message prehog.v1alpha.DesktopDirectoryShareEvent
 */
export type DesktopDirectoryShareEvent = Message<"prehog.v1alpha.DesktopDirectoryShareEvent"> & {
  /**
   * anonymized desktop addr, used to uniquely idenfity the desktop
   *
   * PostHog property: tp.desktop
   *
   * @generated from field: string desktop = 1;
   */
  desktop: string;

  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 2;
   */
  userName: string;

  /**
   * anonymized directory name
   *
   * PostHog property: tp.directory_name
   *
   * @generated from field: string directory_name = 3;
   */
  directoryName: string;
};

/**
 * Describes the message prehog.v1alpha.DesktopDirectoryShareEvent.
 * Use `create(DesktopDirectoryShareEventSchema)` to create a new message.
 */
export const DesktopDirectoryShareEventSchema: GenMessage<DesktopDirectoryShareEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 79);

/**
 * DesktopClipboardEvent is emitted when data is transferred between a user's
 * local clipboard and a remote Windows clipboard.
 *
 * @generated from message prehog.v1alpha.DesktopClipboardEvent
 */
export type DesktopClipboardEvent = Message<"prehog.v1alpha.DesktopClipboardEvent"> & {
  /**
   * anonymized desktop addr, used to uniquely idenfity the desktop
   *
   * PostHog property: tp.desktop
   *
   * @generated from field: string desktop = 1;
   */
  desktop: string;

  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 2;
   */
  userName: string;
};

/**
 * Describes the message prehog.v1alpha.DesktopClipboardEvent.
 * Use `create(DesktopClipboardEventSchema)` to create a new message.
 */
export const DesktopClipboardEventSchema: GenMessage<DesktopClipboardEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 80);

/**
 * TAGExecuteQueryEvent is an event that is emitted
 * when a single query is executed in the Teleport Access Graph.
 * This event is emitted for both successful and failed queries. For
 * successful queries, the total number of nodes and edges is reported.
 *
 * @generated from message prehog.v1alpha.TAGExecuteQueryEvent
 */
export type TAGExecuteQueryEvent = Message<"prehog.v1alpha.TAGExecuteQueryEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * total_nodes is the total amount of nodes returned by the query.
   *
   * @generated from field: int64 total_nodes = 2;
   */
  totalNodes: bigint;

  /**
   * total_edges is the total amount of edges returned by the query.
   *
   * @generated from field: int64 total_edges = 3;
   */
  totalEdges: bigint;

  /**
   * is_success is true if the query was successful and false it if failed.
   *
   * @generated from field: bool is_success = 4;
   */
  isSuccess: boolean;
};

/**
 * Describes the message prehog.v1alpha.TAGExecuteQueryEvent.
 * Use `create(TAGExecuteQueryEventSchema)` to create a new message.
 */
export const TAGExecuteQueryEventSchema: GenMessage<TAGExecuteQueryEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 81);

/**
 * AccessGraphSecretsScanAuthorizedKeysEvent is emitted when the Access Graph
 * SSH authorized keys scan is performed.
 *
 * @generated from message prehog.v1alpha.AccessGraphSecretsScanAuthorizedKeysEvent
 */
export type AccessGraphSecretsScanAuthorizedKeysEvent = Message<"prehog.v1alpha.AccessGraphSecretsScanAuthorizedKeysEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string host_id = 1;
   */
  hostId: string;

  /**
   * total_keys is the total amount of keys found in the authorized keys file.
   *
   * @generated from field: uint64 total_keys = 2;
   */
  totalKeys: bigint;
};

/**
 * Describes the message prehog.v1alpha.AccessGraphSecretsScanAuthorizedKeysEvent.
 * Use `create(AccessGraphSecretsScanAuthorizedKeysEventSchema)` to create a new message.
 */
export const AccessGraphSecretsScanAuthorizedKeysEventSchema: GenMessage<AccessGraphSecretsScanAuthorizedKeysEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 82);

/**
 * AccessGraphSecretsScanSSHPrivateKeysEvent is emitted when the Access Graph
 * SSH private keys scan is performed.
 *
 * @generated from message prehog.v1alpha.AccessGraphSecretsScanSSHPrivateKeysEvent
 */
export type AccessGraphSecretsScanSSHPrivateKeysEvent = Message<"prehog.v1alpha.AccessGraphSecretsScanSSHPrivateKeysEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  /**
   * total_keys is the total amount of keys found in the private keys file.
   *
   * @generated from field: uint64 total_keys = 2;
   */
  totalKeys: bigint;

  /**
   * device OS type
   *
   * @generated from field: string device_os_type = 3;
   */
  deviceOsType: string;
};

/**
 * Describes the message prehog.v1alpha.AccessGraphSecretsScanSSHPrivateKeysEvent.
 * Use `create(AccessGraphSecretsScanSSHPrivateKeysEventSchema)` to create a new message.
 */
export const AccessGraphSecretsScanSSHPrivateKeysEventSchema: GenMessage<AccessGraphSecretsScanSSHPrivateKeysEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 83);

/**
 * AccessGraphGitlabScanEvent is emitted when the Access Graph
 * Gitlab scan is enabled.
 *
 * @generated from message prehog.v1alpha.AccessGraphGitlabScanEvent
 */
export type AccessGraphGitlabScanEvent = Message<"prehog.v1alpha.AccessGraphGitlabScanEvent"> & {
  /**
   * total_projects is the total amount of projects found in the Gitlab scan.
   *
   * @generated from field: uint64 total_projects = 1;
   */
  totalProjects: bigint;

  /**
   * total_users is the total amount of users found in the Gitlab scan.
   *
   * @generated from field: uint64 total_users = 2;
   */
  totalUsers: bigint;

  /**
   * total_groups is the total amount of groups found in the Gitlab scan.
   *
   * @generated from field: uint64 total_groups = 3;
   */
  totalGroups: bigint;
};

/**
 * Describes the message prehog.v1alpha.AccessGraphGitlabScanEvent.
 * Use `create(AccessGraphGitlabScanEventSchema)` to create a new message.
 */
export const AccessGraphGitlabScanEventSchema: GenMessage<AccessGraphGitlabScanEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 84);

/**
 * AccessGraphAWSScanEvent is emitted when the Access Graph
 * AWS scan is enabled.
 *
 * @generated from message prehog.v1alpha.AccessGraphAWSScanEvent
 */
export type AccessGraphAWSScanEvent = Message<"prehog.v1alpha.AccessGraphAWSScanEvent"> & {
  /**
   * total_ec2_instances is the total amount of EC2 instances found in the AWS scan.
   *
   * @generated from field: uint64 total_ec2_instances = 1;
   */
  totalEc2Instances: bigint;

  /**
   * total_users is the total amount of users found in the AWS scan.
   *
   * @generated from field: uint64 total_users = 2;
   */
  totalUsers: bigint;

  /**
   * total_groups is the total amount of groups found in the AWS scan.
   *
   * @generated from field: uint64 total_groups = 3;
   */
  totalGroups: bigint;

  /**
   * total_roles is the total amount of roles found in the AWS scan.
   *
   * @generated from field: uint64 total_roles = 4;
   */
  totalRoles: bigint;

  /**
   * total_policies is the total amount of policies found in the AWS scan.
   *
   * @generated from field: uint64 total_policies = 5;
   */
  totalPolicies: bigint;

  /**
   * total_eks_clusters is the total amount of EKS clusters found in the AWS scan.
   *
   * @generated from field: uint64 total_eks_clusters = 6;
   */
  totalEksClusters: bigint;

  /**
   * total_rds_instances is the total amount of RDS instances found in the AWS scan.
   *
   * @generated from field: uint64 total_rds_instances = 7;
   */
  totalRdsInstances: bigint;

  /**
   * total_s3_buckets is the total amount of S3 buckets found in the AWS scan.
   *
   * @generated from field: uint64 total_s3_buckets = 8;
   */
  totalS3Buckets: bigint;

  /**
   * total_saml_providers is the total amount of SAML providers found in the AWS scan.
   *
   * @generated from field: uint64 total_saml_providers = 9;
   */
  totalSamlProviders: bigint;

  /**
   * total_oidc_providers is the total amount of OIDC providers found in the AWS scan.
   *
   * @generated from field: uint64 total_oidc_providers = 10;
   */
  totalOidcProviders: bigint;

  /**
   * total_accounts is the total amount of accounts synchronized in the AWS scan.
   *
   * @generated from field: uint64 total_accounts = 11;
   */
  totalAccounts: bigint;
};

/**
 * Describes the message prehog.v1alpha.AccessGraphAWSScanEvent.
 * Use `create(AccessGraphAWSScanEventSchema)` to create a new message.
 */
export const AccessGraphAWSScanEventSchema: GenMessage<AccessGraphAWSScanEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 85);

/**
 * AccessGraphAccessPathChangedEvent is emitted when the Crown Jewel functionality
 * is enabled and the Access Graph access path is changed.
 *
 * @generated from message prehog.v1alpha.AccessGraphAccessPathChangedEvent
 */
export type AccessGraphAccessPathChangedEvent = Message<"prehog.v1alpha.AccessGraphAccessPathChangedEvent"> & {
  /**
   * affected_resource_source is the source of the affected resource.
   *
   * @generated from field: string affected_resource_source = 1;
   */
  affectedResourceSource: string;

  /**
   * affected_resource_type is the type of the affected resource.
   *
   * @generated from field: string affected_resource_type = 2;
   */
  affectedResourceType: string;
};

/**
 * Describes the message prehog.v1alpha.AccessGraphAccessPathChangedEvent.
 * Use `create(AccessGraphAccessPathChangedEventSchema)` to create a new message.
 */
export const AccessGraphAccessPathChangedEventSchema: GenMessage<AccessGraphAccessPathChangedEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 86);

/**
 * UIAccessGraphCrownJewelDiffViewEvent is emitted when a user reviews the output of a Crown Jewel access path dff.
 *
 * @generated from message prehog.v1alpha.UIAccessGraphCrownJewelDiffViewEvent
 */
export type UIAccessGraphCrownJewelDiffViewEvent = Message<"prehog.v1alpha.UIAccessGraphCrownJewelDiffViewEvent"> & {
  /**
   * affected_resource_source is the source of the affected resource.
   *
   * @generated from field: string affected_resource_source = 1;
   */
  affectedResourceSource: string;

  /**
   * affected_resource_type is the type of the affected resource.
   *
   * @generated from field: string affected_resource_type = 2;
   */
  affectedResourceType: string;
};

/**
 * Describes the message prehog.v1alpha.UIAccessGraphCrownJewelDiffViewEvent.
 * Use `create(UIAccessGraphCrownJewelDiffViewEventSchema)` to create a new message.
 */
export const UIAccessGraphCrownJewelDiffViewEventSchema: GenMessage<UIAccessGraphCrownJewelDiffViewEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 87);

/**
 * AccessGraphCrownJewelCreateEvent is emitted when a user creates an Access Graph's
 * Crown Jewel Resource.
 *
 * @generated from message prehog.v1alpha.AccessGraphCrownJewelCreateEvent
 */
export type AccessGraphCrownJewelCreateEvent = Message<"prehog.v1alpha.AccessGraphCrownJewelCreateEvent"> & {
};

/**
 * Describes the message prehog.v1alpha.AccessGraphCrownJewelCreateEvent.
 * Use `create(AccessGraphCrownJewelCreateEventSchema)` to create a new message.
 */
export const AccessGraphCrownJewelCreateEventSchema: GenMessage<AccessGraphCrownJewelCreateEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 88);

/**
 * ExternalAuditStorageAuthenticateEvent is emitted when the External Audit
 * Storage feature authenticates to the customer AWS account via OIDC connector.
 * The purpose is to have a regularly emitted event indicating that the External
 * Audit Storage feature is still in use.
 *
 * @generated from message prehog.v1alpha.ExternalAuditStorageAuthenticateEvent
 */
export type ExternalAuditStorageAuthenticateEvent = Message<"prehog.v1alpha.ExternalAuditStorageAuthenticateEvent"> & {
};

/**
 * Describes the message prehog.v1alpha.ExternalAuditStorageAuthenticateEvent.
 * Use `create(ExternalAuditStorageAuthenticateEventSchema)` to create a new message.
 */
export const ExternalAuditStorageAuthenticateEventSchema: GenMessage<ExternalAuditStorageAuthenticateEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 89);

/**
 * SecurityReportGetResultEvent is emitted when the user requests a security report.
 *
 * @generated from message prehog.v1alpha.SecurityReportGetResultEvent
 */
export type SecurityReportGetResultEvent = Message<"prehog.v1alpha.SecurityReportGetResultEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * name is the name of the security report.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * days is the time range of the security reports in days.
   *
   * @generated from field: int32 days = 3;
   */
  days: number;
};

/**
 * Describes the message prehog.v1alpha.SecurityReportGetResultEvent.
 * Use `create(SecurityReportGetResultEventSchema)` to create a new message.
 */
export const SecurityReportGetResultEventSchema: GenMessage<SecurityReportGetResultEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 90);

/**
 * AuditQueryRunEvent is emitted when the user runs an audit query.
 *
 * @generated from message prehog.v1alpha.AuditQueryRunEvent
 */
export type AuditQueryRunEvent = Message<"prehog.v1alpha.AuditQueryRunEvent"> & {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * days is the time range of the query in days.
   *
   * @generated from field: int32 days = 2;
   */
  days: number;

  /**
   * is_success is true if the query was successful false if execution failed.
   *
   * @generated from field: bool is_success = 3;
   */
  isSuccess: boolean;
};

/**
 * Describes the message prehog.v1alpha.AuditQueryRunEvent.
 * Use `create(AuditQueryRunEventSchema)` to create a new message.
 */
export const AuditQueryRunEventSchema: GenMessage<AuditQueryRunEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 91);

/**
 * DiscoveryFetchEvent is emitted when a DiscoveryService polls for new resources of a given type
 *
 * @generated from message prehog.v1alpha.DiscoveryFetchEvent
 */
export type DiscoveryFetchEvent = Message<"prehog.v1alpha.DiscoveryFetchEvent"> & {
  /**
   * cloud_provider is the cloud provider used to fetch resources
   * Eg, AWS, Azure, GCP, Kubernetes
   *
   * PostHog property: tp.cloud
   *
   * @generated from field: string cloud_provider = 1;
   */
  cloudProvider: string;

  /**
   * resource_type is the type of resource that this fetch is polling.
   * It depends on the Cloud Provider (defined above).
   * Eg, rds, ec2, vm, aks, gce, app
   *
   * PostHog property: tp.resource_type
   *
   * @generated from field: string resource_type = 2;
   */
  resourceType: string;
};

/**
 * Describes the message prehog.v1alpha.DiscoveryFetchEvent.
 * Use `create(DiscoveryFetchEventSchema)` to create a new message.
 */
export const DiscoveryFetchEventSchema: GenMessage<DiscoveryFetchEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 92);

/**
 * OktaAccessListSyncEvent is an event that is emitted after the Okta service synchronizes
 * access lists from Okta.
 *
 * @generated from message prehog.v1alpha.OktaAccessListSyncEvent
 */
export type OktaAccessListSyncEvent = Message<"prehog.v1alpha.OktaAccessListSyncEvent"> & {
  /**
   * NumAppFilters is the number of application filters used for this sync.
   *
   * @generated from field: int32 num_app_filters = 1;
   */
  numAppFilters: number;

  /**
   * NumGroupFilters is the number of group filters used for this sync.
   *
   * @generated from field: int32 num_group_filters = 2;
   */
  numGroupFilters: number;

  /**
   * NumApps is the number of apps that were synchronized from this sync event.
   *
   * @generated from field: int32 num_apps = 3;
   */
  numApps: number;

  /**
   * NumGroups is the number of groups that were synchronized from this sync event.
   *
   * @generated from field: int32 num_groups = 4;
   */
  numGroups: number;

  /**
   * NumRoles are the number of roles that were created/updated.
   *
   * @generated from field: int32 num_roles = 5;
   */
  numRoles: number;

  /**
   * NumAccessLists are the number of access lists that were created/updated.
   *
   * @generated from field: int32 num_access_lists = 6;
   */
  numAccessLists: number;

  /**
   * NumAccessListMembers are the number of access list members that were created/updated.
   *
   * @generated from field: int32 num_access_list_members = 7;
   */
  numAccessListMembers: number;
};

/**
 * Describes the message prehog.v1alpha.OktaAccessListSyncEvent.
 * Use `create(OktaAccessListSyncEventSchema)` to create a new message.
 */
export const OktaAccessListSyncEventSchema: GenMessage<OktaAccessListSyncEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 93);

/**
 * DatabaseUserCreatedEvent is an event that is emitted after database service performs automatic user provisioning.
 *
 * @generated from message prehog.v1alpha.DatabaseUserCreatedEvent
 */
export type DatabaseUserCreatedEvent = Message<"prehog.v1alpha.DatabaseUserCreatedEvent"> & {
  /**
   * Database metadata.
   *
   * @generated from field: prehog.v1alpha.SessionStartDatabaseMetadata database = 1;
   */
  database?: SessionStartDatabaseMetadata;

  /**
   * Teleport user name. Anonymized.
   *
   * @generated from field: string user_name = 2;
   */
  userName: string;

  /**
   * Number of database roles.
   *
   * @generated from field: int32 num_roles = 3;
   */
  numRoles: number;
};

/**
 * Describes the message prehog.v1alpha.DatabaseUserCreatedEvent.
 * Use `create(DatabaseUserCreatedEventSchema)` to create a new message.
 */
export const DatabaseUserCreatedEventSchema: GenMessage<DatabaseUserCreatedEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 94);

/**
 * DatabaseUserPermissionsUpdateEvent is an event that is emitted after database service updates the permissions for the database user.
 *
 * @generated from message prehog.v1alpha.DatabaseUserPermissionsUpdateEvent
 */
export type DatabaseUserPermissionsUpdateEvent = Message<"prehog.v1alpha.DatabaseUserPermissionsUpdateEvent"> & {
  /**
   * Database metadata.
   *
   * @generated from field: prehog.v1alpha.SessionStartDatabaseMetadata database = 1;
   */
  database?: SessionStartDatabaseMetadata;

  /**
   * Teleport user name. Anonymized.
   *
   * @generated from field: string user_name = 2;
   */
  userName: string;

  /**
   * How many tables were affected.
   *
   * @generated from field: int32 num_tables = 3;
   */
  numTables: number;

  /**
   * How many total table permissions were given to the user.
   * For example {SELECT,UPDATE} on ten tables gives a total of twenty.
   *
   * @generated from field: int32 num_tables_permissions = 4;
   */
  numTablesPermissions: number;
};

/**
 * Describes the message prehog.v1alpha.DatabaseUserPermissionsUpdateEvent.
 * Use `create(DatabaseUserPermissionsUpdateEventSchema)` to create a new message.
 */
export const DatabaseUserPermissionsUpdateEventSchema: GenMessage<DatabaseUserPermissionsUpdateEvent> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 95);

/**
 * @generated from message prehog.v1alpha.SubmitEventRequest
 */
export type SubmitEventRequest = Message<"prehog.v1alpha.SubmitEventRequest"> & {
  /**
   * anonymized, 32 bytes (HMAC-SHA-256) encoded in base64
   *
   * PostHog property: tp.cluster_name (still in base64)
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * optional, will default to the ingest time if unset
   *
   * PostHog timestamp
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  /**
   * the event being submitted
   *
   * @generated from oneof prehog.v1alpha.SubmitEventRequest.event
   */
  event: {
    /**
     * @generated from field: prehog.v1alpha.UserLoginEvent user_login = 3;
     */
    value: UserLoginEvent;
    case: "userLogin";
  } | {
    /**
     * @generated from field: prehog.v1alpha.SSOCreateEvent sso_create = 4;
     */
    value: SSOCreateEvent;
    case: "ssoCreate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.ResourceCreateEvent resource_create = 5;
     */
    value: ResourceCreateEvent;
    case: "resourceCreate";
  } | {
    /**
     * REMOVE IN V14: Use session_start_v2 instead
     *
     * @generated from field: prehog.v1alpha.SessionStartEvent session_start = 6;
     */
    value: SessionStartEvent;
    case: "sessionStart";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIBannerClickEvent ui_banner_click = 7;
     */
    value: UIBannerClickEvent;
    case: "uiBannerClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIOnboardCompleteGoToDashboardClickEvent ui_onboard_complete_go_to_dashboard_click = 9;
     */
    value: UIOnboardCompleteGoToDashboardClickEvent;
    case: "uiOnboardCompleteGoToDashboardClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIOnboardAddFirstResourceClickEvent ui_onboard_add_first_resource_click = 10;
     */
    value: UIOnboardAddFirstResourceClickEvent;
    case: "uiOnboardAddFirstResourceClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIOnboardAddFirstResourceLaterClickEvent ui_onboard_add_first_resource_later_click = 11;
     */
    value: UIOnboardAddFirstResourceLaterClickEvent;
    case: "uiOnboardAddFirstResourceLaterClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIOnboardSetCredentialSubmitEvent ui_onboard_set_credential_submit = 12;
     */
    value: UIOnboardSetCredentialSubmitEvent;
    case: "uiOnboardSetCredentialSubmit";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIOnboardRegisterChallengeSubmitEvent ui_onboard_register_challenge_submit = 13;
     */
    value: UIOnboardRegisterChallengeSubmitEvent;
    case: "uiOnboardRegisterChallengeSubmit";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIRecoveryCodesContinueClickEvent ui_recovery_codes_continue_click = 14;
     */
    value: UIRecoveryCodesContinueClickEvent;
    case: "uiRecoveryCodesContinueClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIRecoveryCodesCopyClickEvent ui_recovery_codes_copy_click = 15;
     */
    value: UIRecoveryCodesCopyClickEvent;
    case: "uiRecoveryCodesCopyClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIRecoveryCodesPrintClickEvent ui_recovery_codes_print_click = 16;
     */
    value: UIRecoveryCodesPrintClickEvent;
    case: "uiRecoveryCodesPrintClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverStartedEvent ui_discover_started_event = 17;
     */
    value: UIDiscoverStartedEvent;
    case: "uiDiscoverStartedEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverResourceSelectionEvent ui_discover_resource_selection_event = 18;
     */
    value: UIDiscoverResourceSelectionEvent;
    case: "uiDiscoverResourceSelectionEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UserCertificateIssuedEvent user_certificate_issued_event = 19;
     */
    value: UserCertificateIssuedEvent;
    case: "userCertificateIssuedEvent";
  } | {
    /**
     * Note: semantics of SessionStartEvent type values have changed to
     * differentiate SSH from Kubernetes exec sessions (as well as adding
     * db/app/desktop events). The structures are the same, however, so we don't
     * need a new message type.
     *
     * @generated from field: prehog.v1alpha.SessionStartEvent session_start_v2 = 20;
     */
    value: SessionStartEvent;
    case: "sessionStartV2";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverDeployServiceEvent ui_discover_deploy_service_event = 21;
     */
    value: UIDiscoverDeployServiceEvent;
    case: "uiDiscoverDeployServiceEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverDatabaseRegisterEvent ui_discover_database_register_event = 22;
     */
    value: UIDiscoverDatabaseRegisterEvent;
    case: "uiDiscoverDatabaseRegisterEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent ui_discover_database_configure_mtls_event = 23;
     */
    value: UIDiscoverDatabaseConfigureMTLSEvent;
    case: "uiDiscoverDatabaseConfigureMtlsEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent ui_discover_desktop_active_directory_tools_install_event = 24;
     */
    value: UIDiscoverDesktopActiveDirectoryToolsInstallEvent;
    case: "uiDiscoverDesktopActiveDirectoryToolsInstallEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent ui_discover_desktop_active_directory_configure_event = 25;
     */
    value: UIDiscoverDesktopActiveDirectoryConfigureEvent;
    case: "uiDiscoverDesktopActiveDirectoryConfigureEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent ui_discover_auto_discovered_resources_event = 26;
     */
    value: UIDiscoverAutoDiscoveredResourcesEvent;
    case: "uiDiscoverAutoDiscoveredResourcesEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent ui_discover_database_configure_iam_policy_event = 27;
     */
    value: UIDiscoverDatabaseConfigureIAMPolicyEvent;
    case: "uiDiscoverDatabaseConfigureIamPolicyEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent ui_discover_principals_configure_event = 28;
     */
    value: UIDiscoverPrincipalsConfigureEvent;
    case: "uiDiscoverPrincipalsConfigureEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverTestConnectionEvent ui_discover_test_connection_event = 29;
     */
    value: UIDiscoverTestConnectionEvent;
    case: "uiDiscoverTestConnectionEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverCompletedEvent ui_discover_completed_event = 30;
     */
    value: UIDiscoverCompletedEvent;
    case: "uiDiscoverCompletedEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.RoleCreateEvent role_create = 31;
     */
    value: RoleCreateEvent;
    case: "roleCreate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UICreateNewRoleClickEvent ui_create_new_role_click = 32;
     */
    value: UICreateNewRoleClickEvent;
    case: "uiCreateNewRoleClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UICreateNewRoleSaveClickEvent ui_create_new_role_save_click = 33;
     */
    value: UICreateNewRoleSaveClickEvent;
    case: "uiCreateNewRoleSaveClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UICreateNewRoleCancelClickEvent ui_create_new_role_cancel_click = 34;
     */
    value: UICreateNewRoleCancelClickEvent;
    case: "uiCreateNewRoleCancelClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UICreateNewRoleViewDocumentationClickEvent ui_create_new_role_view_documentation_click = 35;
     */
    value: UICreateNewRoleViewDocumentationClickEvent;
    case: "uiCreateNewRoleViewDocumentationClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.KubeRequestEvent kube_request = 36;
     */
    value: KubeRequestEvent;
    case: "kubeRequest";
  } | {
    /**
     * @generated from field: prehog.v1alpha.SFTPEvent sftp = 37;
     */
    value: SFTPEvent;
    case: "sftp";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AgentMetadataEvent agent_metadata_event = 38;
     */
    value: AgentMetadataEvent;
    case: "agentMetadataEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.ResourceHeartbeatEvent resource_heartbeat = 39;
     */
    value: ResourceHeartbeatEvent;
    case: "resourceHeartbeat";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverIntegrationAWSOIDCConnectEvent ui_discover_integration_aws_oidc_connect_event = 40;
     */
    value: UIDiscoverIntegrationAWSOIDCConnectEvent;
    case: "uiDiscoverIntegrationAwsOidcConnectEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverDatabaseRDSEnrollEvent ui_discover_database_rds_enroll_event = 41;
     */
    value: UIDiscoverDatabaseRDSEnrollEvent;
    case: "uiDiscoverDatabaseRdsEnrollEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UICallToActionClickEvent ui_call_to_action_click_event = 42;
     */
    value: UICallToActionClickEvent;
    case: "uiCallToActionClickEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AssistCompletionEvent assist_completion = 43;
     */
    value: AssistCompletionEvent;
    case: "assistCompletion";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIIntegrationEnrollStartEvent ui_integration_enroll_start_event = 44;
     */
    value: UIIntegrationEnrollStartEvent;
    case: "uiIntegrationEnrollStartEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIIntegrationEnrollCompleteEvent ui_integration_enroll_complete_event = 45;
     */
    value: UIIntegrationEnrollCompleteEvent;
    case: "uiIntegrationEnrollCompleteEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.EditorChangeEvent editor_change_event = 46;
     */
    value: EditorChangeEvent;
    case: "editorChangeEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.BotCreateEvent bot_create = 47;
     */
    value: BotCreateEvent;
    case: "botCreate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIOnboardQuestionnaireSubmitEvent ui_onboard_questionnaire_submit = 48;
     */
    value: UIOnboardQuestionnaireSubmitEvent;
    case: "uiOnboardQuestionnaireSubmit";
  } | {
    /**
     * @generated from field: prehog.v1alpha.BotJoinEvent bot_join = 49;
     */
    value: BotJoinEvent;
    case: "botJoin";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AssistExecutionEvent assist_execution = 50;
     */
    value: AssistExecutionEvent;
    case: "assistExecution";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AssistNewConversationEvent assist_new_conversation = 51;
     */
    value: AssistNewConversationEvent;
    case: "assistNewConversation";
  } | {
    /**
     * @generated from field: prehog.v1alpha.DeviceAuthenticateEvent device_authenticate_event = 52;
     */
    value: DeviceAuthenticateEvent;
    case: "deviceAuthenticateEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.FeatureRecommendationEvent feature_recommendation_event = 53;
     */
    value: FeatureRecommendationEvent;
    case: "featureRecommendationEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AssistAccessRequestEvent assist_access_request = 54;
     */
    value: AssistAccessRequestEvent;
    case: "assistAccessRequest";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AssistActionEvent assist_action = 55;
     */
    value: AssistActionEvent;
    case: "assistAction";
  } | {
    /**
     * @generated from field: prehog.v1alpha.DeviceEnrollEvent device_enroll_event = 56;
     */
    value: DeviceEnrollEvent;
    case: "deviceEnrollEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.LicenseLimitEvent license_limit_event = 57;
     */
    value: LicenseLimitEvent;
    case: "licenseLimitEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListCreateEvent access_list_create = 58;
     */
    value: AccessListCreateEvent;
    case: "accessListCreate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListUpdateEvent access_list_update = 59;
     */
    value: AccessListUpdateEvent;
    case: "accessListUpdate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListDeleteEvent access_list_delete = 60;
     */
    value: AccessListDeleteEvent;
    case: "accessListDelete";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListMemberCreateEvent access_list_member_create = 61;
     */
    value: AccessListMemberCreateEvent;
    case: "accessListMemberCreate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListMemberUpdateEvent access_list_member_update = 62;
     */
    value: AccessListMemberUpdateEvent;
    case: "accessListMemberUpdate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListMemberDeleteEvent access_list_member_delete = 63;
     */
    value: AccessListMemberDeleteEvent;
    case: "accessListMemberDelete";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListGrantsToUserEvent access_list_grants_to_user = 64;
     */
    value: AccessListGrantsToUserEvent;
    case: "accessListGrantsToUser";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverEC2InstanceSelectionEvent ui_discover_ec2_instance_selection = 65;
     */
    value: UIDiscoverEC2InstanceSelectionEvent;
    case: "uiDiscoverEc2InstanceSelection";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverDeployEICEEvent ui_discover_deploy_eice = 66;
     */
    value: UIDiscoverDeployEICEEvent;
    case: "uiDiscoverDeployEice";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverCreateNodeEvent ui_discover_create_node = 67;
     */
    value: UIDiscoverCreateNodeEvent;
    case: "uiDiscoverCreateNode";
  } | {
    /**
     * @generated from field: prehog.v1alpha.DesktopDirectoryShareEvent desktop_directory_share = 68;
     */
    value: DesktopDirectoryShareEvent;
    case: "desktopDirectoryShare";
  } | {
    /**
     * @generated from field: prehog.v1alpha.DesktopClipboardEvent desktop_clipboard_transfer = 69;
     */
    value: DesktopClipboardEvent;
    case: "desktopClipboardTransfer";
  } | {
    /**
     * @generated from field: prehog.v1alpha.TAGExecuteQueryEvent tag_execute_query = 70;
     */
    value: TAGExecuteQueryEvent;
    case: "tagExecuteQuery";
  } | {
    /**
     * @generated from field: prehog.v1alpha.ExternalAuditStorageAuthenticateEvent external_audit_storage_authenticate = 71;
     */
    value: ExternalAuditStorageAuthenticateEvent;
    case: "externalAuditStorageAuthenticate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.SecurityReportGetResultEvent security_report_get_result = 72;
     */
    value: SecurityReportGetResultEvent;
    case: "securityReportGetResult";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AuditQueryRunEvent audit_query_run = 73;
     */
    value: AuditQueryRunEvent;
    case: "auditQueryRun";
  } | {
    /**
     * @generated from field: prehog.v1alpha.DiscoveryFetchEvent discovery_fetch_event = 74;
     */
    value: DiscoveryFetchEvent;
    case: "discoveryFetchEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListReviewCreateEvent access_list_review_create = 75;
     */
    value: AccessListReviewCreateEvent;
    case: "accessListReviewCreate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListReviewDeleteEvent access_list_review_delete = 76;
     */
    value: AccessListReviewDeleteEvent;
    case: "accessListReviewDelete";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListReviewComplianceEvent access_list_review_compliance = 77;
     */
    value: AccessListReviewComplianceEvent;
    case: "accessListReviewCompliance";
  } | {
    /**
     * @generated from field: prehog.v1alpha.MFAAuthenticationEvent mfa_authentication_event = 78;
     */
    value: MFAAuthenticationEvent;
    case: "mfaAuthenticationEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.SPIFFESVIDIssuedEvent spiffe_svid_issued = 79;
     */
    value: SPIFFESVIDIssuedEvent;
    case: "spiffeSvidIssued";
  } | {
    /**
     * @generated from field: prehog.v1alpha.OktaAccessListSyncEvent okta_access_list_sync = 80;
     */
    value: OktaAccessListSyncEvent;
    case: "oktaAccessListSync";
  } | {
    /**
     * @generated from field: prehog.v1alpha.DatabaseUserCreatedEvent database_user_created = 81;
     */
    value: DatabaseUserCreatedEvent;
    case: "databaseUserCreated";
  } | {
    /**
     * @generated from field: prehog.v1alpha.DatabaseUserPermissionsUpdateEvent database_user_permissions_updated = 82;
     */
    value: DatabaseUserPermissionsUpdateEvent;
    case: "databaseUserPermissionsUpdated";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent ui_discover_create_discovery_config = 83;
     */
    value: UIDiscoverCreateDiscoveryConfigEvent;
    case: "uiDiscoverCreateDiscoveryConfig";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverKubeEKSEnrollEvent ui_discover_kube_eks_enroll_event = 84;
     */
    value: UIDiscoverKubeEKSEnrollEvent;
    case: "uiDiscoverKubeEksEnrollEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverCreateAppServerEvent ui_discover_create_app_server_event = 85;
     */
    value: UIDiscoverCreateAppServerEvent;
    case: "uiDiscoverCreateAppServerEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessGraphGitlabScanEvent access_graph_gitlab_scan = 86;
     */
    value: AccessGraphGitlabScanEvent;
    case: "accessGraphGitlabScan";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessGraphSecretsScanAuthorizedKeysEvent access_graph_secrets_scan_authorized_keys = 87;
     */
    value: AccessGraphSecretsScanAuthorizedKeysEvent;
    case: "accessGraphSecretsScanAuthorizedKeys";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessGraphSecretsScanSSHPrivateKeysEvent access_graph_secrets_scan_ssh_private_keys = 88;
     */
    value: AccessGraphSecretsScanSSHPrivateKeysEvent;
    case: "accessGraphSecretsScanSshPrivateKeys";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessGraphAWSScanEvent access_graph_aws_scan = 89;
     */
    value: AccessGraphAWSScanEvent;
    case: "accessGraphAwsScan";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessGraphAccessPathChangedEvent access_graph_access_path_changed = 90;
     */
    value: AccessGraphAccessPathChangedEvent;
    case: "accessGraphAccessPathChanged";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessGraphCrownJewelCreateEvent access_graph_crown_jewel_create = 91;
     */
    value: AccessGraphCrownJewelCreateEvent;
    case: "accessGraphCrownJewelCreate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIAccessGraphCrownJewelDiffViewEvent ui_access_graph_crown_jewel_diff_view = 92;
     */
    value: UIAccessGraphCrownJewelDiffViewEvent;
    case: "uiAccessGraphCrownJewelDiffView";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message prehog.v1alpha.SubmitEventRequest.
 * Use `create(SubmitEventRequestSchema)` to create a new message.
 */
export const SubmitEventRequestSchema: GenMessage<SubmitEventRequest> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 96);

/**
 * @generated from message prehog.v1alpha.SubmitEventResponse
 */
export type SubmitEventResponse = Message<"prehog.v1alpha.SubmitEventResponse"> & {
};

/**
 * Describes the message prehog.v1alpha.SubmitEventResponse.
 * Use `create(SubmitEventResponseSchema)` to create a new message.
 */
export const SubmitEventResponseSchema: GenMessage<SubmitEventResponse> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 97);

/**
 * @generated from message prehog.v1alpha.SubmitEventsRequest
 */
export type SubmitEventsRequest = Message<"prehog.v1alpha.SubmitEventsRequest"> & {
  /**
   * individual events to be submitted in a batch, up to 500 at once
   *
   * @generated from field: repeated prehog.v1alpha.SubmitEventRequest events = 1;
   */
  events: SubmitEventRequest[];
};

/**
 * Describes the message prehog.v1alpha.SubmitEventsRequest.
 * Use `create(SubmitEventsRequestSchema)` to create a new message.
 */
export const SubmitEventsRequestSchema: GenMessage<SubmitEventsRequest> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 98);

/**
 * @generated from message prehog.v1alpha.SubmitEventsResponse
 */
export type SubmitEventsResponse = Message<"prehog.v1alpha.SubmitEventsResponse"> & {
};

/**
 * Describes the message prehog.v1alpha.SubmitEventsResponse.
 * Use `create(SubmitEventsResponseSchema)` to create a new message.
 */
export const SubmitEventsResponseSchema: GenMessage<SubmitEventsResponse> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 99);

/**
 * @generated from message prehog.v1alpha.HelloTeleportRequest
 */
export type HelloTeleportRequest = Message<"prehog.v1alpha.HelloTeleportRequest"> & {
};

/**
 * Describes the message prehog.v1alpha.HelloTeleportRequest.
 * Use `create(HelloTeleportRequestSchema)` to create a new message.
 */
export const HelloTeleportRequestSchema: GenMessage<HelloTeleportRequest> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 100);

/**
 * @generated from message prehog.v1alpha.HelloTeleportResponse
 */
export type HelloTeleportResponse = Message<"prehog.v1alpha.HelloTeleportResponse"> & {
};

/**
 * Describes the message prehog.v1alpha.HelloTeleportResponse.
 * Use `create(HelloTeleportResponseSchema)` to create a new message.
 */
export const HelloTeleportResponseSchema: GenMessage<HelloTeleportResponse> = /*@__PURE__*/
  messageDesc(file_prehog_v1alpha_teleport, 101);

/**
 * the kind of a "resource" as intended by ResourceHeartbeatEvent
 * Keep in sync with prehog/v1/teleport.proto
 *
 * @generated from enum prehog.v1alpha.ResourceKind
 */
export enum ResourceKind {
  /**
   * @generated from enum value: RESOURCE_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * PostHog property value: "node"
   *
   * @generated from enum value: RESOURCE_KIND_NODE = 1;
   */
  NODE = 1,

  /**
   * PostHog property value: "app_server"
   *
   * @generated from enum value: RESOURCE_KIND_APP_SERVER = 2;
   */
  APP_SERVER = 2,

  /**
   * PostHog property value: "kube_server"
   *
   * @generated from enum value: RESOURCE_KIND_KUBE_SERVER = 3;
   */
  KUBE_SERVER = 3,

  /**
   * PostHog property value: "db_server"
   *
   * @generated from enum value: RESOURCE_KIND_DB_SERVER = 4;
   */
  DB_SERVER = 4,

  /**
   * PostHog property value: "windows_desktop"
   *
   * @generated from enum value: RESOURCE_KIND_WINDOWS_DESKTOP = 5;
   */
  WINDOWS_DESKTOP = 5,

  /**
   * ServerV3 ("node") heartbeat with a subkind of "openssh" (as opposed to
   * empty or "teleport"); not used in keepalives
   *
   * PostHog property value: "node.openssh"
   *
   * @generated from enum value: RESOURCE_KIND_NODE_OPENSSH = 6;
   */
  NODE_OPENSSH = 6,

  /**
   * ServerV3 ("node") heartbeat with a subkind of "openssh-ec2-ice".
   * Nodes that map EC2 instances and are accessed using EC2 Instance Connect Endpoint.
   * Not used in keepalives.
   * This is the SubKind SubKindOpenSSHEICENode in teleport repo.
   *
   * PostHog property value: "node.openssh_ec2_ice"
   *
   * @generated from enum value: RESOURCE_KIND_NODE_OPENSSH_EICE = 7;
   */
  NODE_OPENSSH_EICE = 7,
}

/**
 * Describes the enum prehog.v1alpha.ResourceKind.
 */
export const ResourceKindSchema: GenEnum<ResourceKind> = /*@__PURE__*/
  enumDesc(file_prehog_v1alpha_teleport, 0);

/**
 * The kind of user a given username refers to. Usernames should always refer to
 * a valid cluster user (even if temporary, e.g. SSO), but may be Machine ID
 * bot users.
 *
 * @generated from enum prehog.v1alpha.UserKind
 */
export enum UserKind {
  /**
   * Indicates a legacy cluster emitting events without a defined user kind.
   * Note that users (from PostHog's perspective) can be identified via future
   * events if the cluster is upgraded to specify this field.
   *
   * PostHog property value: ""
   *
   * @generated from enum value: USER_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Indicates the user associated with this event is human, either created
   * locally or via SSO.
   *
   * PostHog property value: "human"
   *
   * @generated from enum value: USER_KIND_HUMAN = 1;
   */
  HUMAN = 1,

  /**
   * Indicates the user associated with this event is a Machine ID bot user.
   *
   * PostHog property value: "bot"
   *
   * @generated from enum value: USER_KIND_BOT = 2;
   */
  BOT = 2,
}

/**
 * Describes the enum prehog.v1alpha.UserKind.
 */
export const UserKindSchema: GenEnum<UserKind> = /*@__PURE__*/
  enumDesc(file_prehog_v1alpha_teleport, 1);

/**
 * DiscoverResource represents a resource type.
 *
 * @generated from enum prehog.v1alpha.DiscoverResource
 */
export enum DiscoverResource {
  /**
   * @generated from enum value: DISCOVER_RESOURCE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_SERVER = 1;
   */
  SERVER = 1,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_KUBERNETES = 2;
   */
  KUBERNETES = 2,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_SELF_HOSTED = 3;
   */
  DATABASE_POSTGRES_SELF_HOSTED = 3,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_SELF_HOSTED = 4;
   */
  DATABASE_MYSQL_SELF_HOSTED = 4,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MONGODB_SELF_HOSTED = 5;
   */
  DATABASE_MONGODB_SELF_HOSTED = 5,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_RDS = 6;
   */
  DATABASE_POSTGRES_RDS = 6,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_RDS = 7;
   */
  DATABASE_MYSQL_RDS = 7,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_APPLICATION_HTTP = 8;
   */
  APPLICATION_HTTP = 8,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_APPLICATION_TCP = 9;
   */
  APPLICATION_TCP = 9,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_WINDOWS_DESKTOP = 10;
   */
  WINDOWS_DESKTOP = 10,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_RDS = 11;
   */
  DATABASE_SQLSERVER_RDS = 11,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT = 12;
   */
  DATABASE_POSTGRES_REDSHIFT = 12,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_SELF_HOSTED = 13;
   */
  DATABASE_SQLSERVER_SELF_HOSTED = 13,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_SELF_HOSTED = 14;
   */
  DATABASE_REDIS_SELF_HOSTED = 14,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_GCP = 15;
   */
  DATABASE_POSTGRES_GCP = 15,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_GCP = 16;
   */
  DATABASE_MYSQL_GCP = 16,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_GCP = 17;
   */
  DATABASE_SQLSERVER_GCP = 17,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT_SERVERLESS = 18;
   */
  DATABASE_POSTGRES_REDSHIFT_SERVERLESS = 18,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_AZURE = 19;
   */
  DATABASE_POSTGRES_AZURE = 19,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_DYNAMODB = 20;
   */
  DATABASE_DYNAMODB = 20,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_CASSANDRA_KEYSPACES = 21;
   */
  DATABASE_CASSANDRA_KEYSPACES = 21,

  /**
   * Cassandra & ScyllaDb
   *
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_CASSANDRA_SELF_HOSTED = 22;
   */
  DATABASE_CASSANDRA_SELF_HOSTED = 22,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_ELASTICSEARCH_SELF_HOSTED = 23;
   */
  DATABASE_ELASTICSEARCH_SELF_HOSTED = 23,

  /**
   * Elasticache & MemoryDb
   *
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_ELASTICACHE = 24;
   */
  DATABASE_REDIS_ELASTICACHE = 24,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_MEMORYDB = 25;
   */
  DATABASE_REDIS_MEMORYDB = 25,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_AZURE_CACHE = 26;
   */
  DATABASE_REDIS_AZURE_CACHE = 26,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_CLUSTER_SELF_HOSTED = 27;
   */
  DATABASE_REDIS_CLUSTER_SELF_HOSTED = 27,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_AZURE = 28;
   */
  DATABASE_MYSQL_AZURE = 28,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_AZURE = 29;
   */
  DATABASE_SQLSERVER_AZURE = 29,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_MICROSOFT = 30;
   */
  DATABASE_SQLSERVER_MICROSOFT = 30,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_COCKROACHDB_SELF_HOSTED = 31;
   */
  DATABASE_COCKROACHDB_SELF_HOSTED = 31,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MONGODB_ATLAS = 32;
   */
  DATABASE_MONGODB_ATLAS = 32,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SNOWFLAKE = 33;
   */
  DATABASE_SNOWFLAKE = 33,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DOC_DATABASE_RDS_PROXY = 34;
   */
  DOC_DATABASE_RDS_PROXY = 34,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DOC_DATABASE_HIGH_AVAILABILITY = 35;
   */
  DOC_DATABASE_HIGH_AVAILABILITY = 35,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DOC_DATABASE_DYNAMIC_REGISTRATION = 36;
   */
  DOC_DATABASE_DYNAMIC_REGISTRATION = 36,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_SAML_APPLICATION = 37;
   */
  SAML_APPLICATION = 37,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_EC2_INSTANCE = 38;
   */
  EC2_INSTANCE = 38,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DOC_WINDOWS_DESKTOP_NON_AD = 39;
   */
  DOC_WINDOWS_DESKTOP_NON_AD = 39,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_KUBERNETES_EKS = 40;
   */
  KUBERNETES_EKS = 40,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_APPLICATION_AWS_CONSOLE = 41;
   */
  APPLICATION_AWS_CONSOLE = 41,
}

/**
 * Describes the enum prehog.v1alpha.DiscoverResource.
 */
export const DiscoverResourceSchema: GenEnum<DiscoverResource> = /*@__PURE__*/
  enumDesc(file_prehog_v1alpha_teleport, 2);

/**
 * DiscoverStatus represents a Discover Step outcome.
 *
 * @generated from enum prehog.v1alpha.DiscoverStatus
 */
export enum DiscoverStatus {
  /**
   * @generated from enum value: DISCOVER_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The user tried to complete the action and it succeeded.
   *
   * @generated from enum value: DISCOVER_STATUS_SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * The system skipped the step.
   * For example:
   * When setting up a Database and there's already a Database Service proxying the DB.
   * In this case the Database Agent installation is skipped.
   *
   * @generated from enum value: DISCOVER_STATUS_SKIPPED = 2;
   */
  SKIPPED = 2,

  /**
   * The user tried to complete the action and it failed.
   *
   * @generated from enum value: DISCOVER_STATUS_ERROR = 3;
   */
  ERROR = 3,

  /**
   * The user did not complete the action and left the wizard.
   *
   * @generated from enum value: DISCOVER_STATUS_ABORTED = 4;
   */
  ABORTED = 4,
}

/**
 * Describes the enum prehog.v1alpha.DiscoverStatus.
 */
export const DiscoverStatusSchema: GenEnum<DiscoverStatus> = /*@__PURE__*/
  enumDesc(file_prehog_v1alpha_teleport, 3);

/**
 * CTA represents teleport web UI's call to action buttons
 *
 * @generated from enum prehog.v1alpha.CTA
 */
export enum CTA {
  /**
   * @generated from enum value: CTA_UNSPECIFIED = 0;
   */
  CTA_UNSPECIFIED = 0,

  /**
   * @generated from enum value: CTA_AUTH_CONNECTOR = 1;
   */
  CTA_AUTH_CONNECTOR = 1,

  /**
   * @generated from enum value: CTA_ACTIVE_SESSIONS = 2;
   */
  CTA_ACTIVE_SESSIONS = 2,

  /**
   * @generated from enum value: CTA_ACCESS_REQUESTS = 3;
   */
  CTA_ACCESS_REQUESTS = 3,

  /**
   * @generated from enum value: CTA_PREMIUM_SUPPORT = 4;
   */
  CTA_PREMIUM_SUPPORT = 4,

  /**
   * @generated from enum value: CTA_TRUSTED_DEVICES = 5;
   */
  CTA_TRUSTED_DEVICES = 5,

  /**
   * @generated from enum value: CTA_UPGRADE_BANNER = 6;
   */
  CTA_UPGRADE_BANNER = 6,

  /**
   * @generated from enum value: CTA_BILLING_SUMMARY = 7;
   */
  CTA_BILLING_SUMMARY = 7,

  /**
   * @generated from enum value: CTA_ACCESS_LIST = 8;
   */
  CTA_ACCESS_LIST = 8,

  /**
   * @generated from enum value: CTA_ACCESS_MONITORING = 9;
   */
  CTA_ACCESS_MONITORING = 9,

  /**
   * @generated from enum value: CTA_EXTERNAL_AUDIT_STORAGE = 10;
   */
  CTA_EXTERNAL_AUDIT_STORAGE = 10,

  /**
   * @generated from enum value: CTA_OKTA_USER_SYNC = 11;
   */
  CTA_OKTA_USER_SYNC = 11,

  /**
   * @generated from enum value: CTA_ENTRA_ID = 12;
   */
  CTA_ENTRA_ID = 12,
}

/**
 * Describes the enum prehog.v1alpha.CTA.
 */
export const CTASchema: GenEnum<CTA> = /*@__PURE__*/
  enumDesc(file_prehog_v1alpha_teleport, 4);

/**
 * IntegrationEnrollKind represents the types of integration that
 * can be enrolled.
 *
 * @generated from enum prehog.v1alpha.IntegrationEnrollKind
 */
export enum IntegrationEnrollKind {
  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_SLACK = 1;
   */
  SLACK = 1,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_AWS_OIDC = 2;
   */
  AWS_OIDC = 2,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_PAGERDUTY = 3;
   */
  PAGERDUTY = 3,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_EMAIL = 4;
   */
  EMAIL = 4,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_JIRA = 5;
   */
  JIRA = 5,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_DISCORD = 6;
   */
  DISCORD = 6,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MATTERMOST = 7;
   */
  MATTERMOST = 7,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MS_TEAMS = 8;
   */
  MS_TEAMS = 8,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_OPSGENIE = 9;
   */
  OPSGENIE = 9,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_OKTA = 10;
   */
  OKTA = 10,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_JAMF = 11;
   */
  JAMF = 11,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID = 12;
   */
  MACHINE_ID = 12,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_GITHUB_ACTIONS = 13;
   */
  MACHINE_ID_GITHUB_ACTIONS = 13,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_CIRCLECI = 14;
   */
  MACHINE_ID_CIRCLECI = 14,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_GITLAB = 15;
   */
  MACHINE_ID_GITLAB = 15,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_JENKINS = 16;
   */
  MACHINE_ID_JENKINS = 16,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_ANSIBLE = 17;
   */
  MACHINE_ID_ANSIBLE = 17,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_AWS = 18;
   */
  MACHINE_ID_AWS = 18,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_GCP = 19;
   */
  MACHINE_ID_GCP = 19,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_AZURE = 20;
   */
  MACHINE_ID_AZURE = 20,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_SPACELIFT = 21;
   */
  MACHINE_ID_SPACELIFT = 21,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_KUBERNETES = 22;
   */
  MACHINE_ID_KUBERNETES = 22,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_ENTRA_ID = 23;
   */
  ENTRA_ID = 23,
}

/**
 * Describes the enum prehog.v1alpha.IntegrationEnrollKind.
 */
export const IntegrationEnrollKindSchema: GenEnum<IntegrationEnrollKind> = /*@__PURE__*/
  enumDesc(file_prehog_v1alpha_teleport, 5);

/**
 * EditorChangeStatus is the possible value of an EditorChangeEvent event status
 *
 * @generated from enum prehog.v1alpha.EditorChangeStatus
 */
export enum EditorChangeStatus {
  /**
   * @generated from enum value: EDITOR_CHANGE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Status when the editor role is granted
   *
   * @generated from enum value: EDITOR_CHANGE_STATUS_ROLE_GRANTED = 1;
   */
  ROLE_GRANTED = 1,

  /**
   * Status when the editor role is removed
   *
   * @generated from enum value: EDITOR_CHANGE_STATUS_ROLE_REMOVED = 2;
   */
  ROLE_REMOVED = 2,
}

/**
 * Describes the enum prehog.v1alpha.EditorChangeStatus.
 */
export const EditorChangeStatusSchema: GenEnum<EditorChangeStatus> = /*@__PURE__*/
  enumDesc(file_prehog_v1alpha_teleport, 6);

/**
 * Feature is name of Teleport feature
 *
 * @generated from enum prehog.v1alpha.Feature
 */
export enum Feature {
  /**
   * @generated from enum value: FEATURE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FEATURE_TRUSTED_DEVICES = 1;
   */
  TRUSTED_DEVICES = 1,
}

/**
 * Describes the enum prehog.v1alpha.Feature.
 */
export const FeatureSchema: GenEnum<Feature> = /*@__PURE__*/
  enumDesc(file_prehog_v1alpha_teleport, 7);

/**
 * FeatureRecommendationStatus is feature recommendation status.
 *
 * @generated from enum prehog.v1alpha.FeatureRecommendationStatus
 */
export enum FeatureRecommendationStatus {
  /**
   * @generated from enum value: FEATURE_RECOMMENDATION_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * FEATURE_RECOMMENDATION_STATUS_NOTIFIED is emitted when a feature is recommended (notified in UI) to user.
   *
   * @generated from enum value: FEATURE_RECOMMENDATION_STATUS_NOTIFIED = 1;
   */
  NOTIFIED = 1,

  /**
   * FEATURE_RECOMMENDATION_STATUS_DONE is emitted when user completes the desired CTA.
   *
   * @generated from enum value: FEATURE_RECOMMENDATION_STATUS_DONE = 2;
   */
  DONE = 2,
}

/**
 * Describes the enum prehog.v1alpha.FeatureRecommendationStatus.
 */
export const FeatureRecommendationStatusSchema: GenEnum<FeatureRecommendationStatus> = /*@__PURE__*/
  enumDesc(file_prehog_v1alpha_teleport, 8);

/**
 * LicenseLimit indicates event type that triggered LicenseLimitEvent.
 *
 * @generated from enum prehog.v1alpha.LicenseLimit
 */
export enum LicenseLimit {
  /**
   * @generated from enum value: LICENSE_LIMIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * LICENSE_LIMIT_DEVICE_TRUST_TEAM_JAMF is emitted if license does not
   * allow Jamf integration (e.g. Team Plan)
   *
   * @generated from enum value: LICENSE_LIMIT_DEVICE_TRUST_TEAM_JAMF = 1;
   */
  DEVICE_TRUST_TEAM_JAMF = 1,

  /**
   * LICENSE_LIMIT_DEVICE_TRUST_TEAM_USAGE is emitted when allowed enrolled device
   * limit is reached
   *
   * @generated from enum value: LICENSE_LIMIT_DEVICE_TRUST_TEAM_USAGE = 2;
   */
  DEVICE_TRUST_TEAM_USAGE = 2,
}

/**
 * Describes the enum prehog.v1alpha.LicenseLimit.
 */
export const LicenseLimitSchema: GenEnum<LicenseLimit> = /*@__PURE__*/
  enumDesc(file_prehog_v1alpha_teleport, 9);

/**
 * @generated from service prehog.v1alpha.TeleportReportingService
 */
export const TeleportReportingService: GenService<{
  /**
   * equivalent to SubmitEvents with a single event, should be unused by now
   *
   * @generated from rpc prehog.v1alpha.TeleportReportingService.SubmitEvent
   * @deprecated
   */
  submitEvent: {
    methodKind: "unary";
    input: typeof SubmitEventRequestSchema;
    output: typeof SubmitEventResponseSchema;
  },
  /**
   * encodes and forwards usage events to the PostHog event database; each
   * event is annotated with some properties that depend on the identity of the
   * caller:
   * - tp.account_id (UUID in string form, can be empty if missing from the
   *   license)
   * - tp.license_name (should always be a UUID)
   * - tp.license_authority (name of the authority that signed the license file
   *   used for authentication)
   * - tp.is_cloud (boolean)
   *
   * @generated from rpc prehog.v1alpha.TeleportReportingService.SubmitEvents
   */
  submitEvents: {
    methodKind: "unary";
    input: typeof SubmitEventsRequestSchema;
    output: typeof SubmitEventsResponseSchema;
  },
  /**
   * @generated from rpc prehog.v1alpha.TeleportReportingService.HelloTeleport
   */
  helloTeleport: {
    methodKind: "unary";
    input: typeof HelloTeleportRequestSchema;
    output: typeof HelloTeleportResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_prehog_v1alpha_teleport, 0);

