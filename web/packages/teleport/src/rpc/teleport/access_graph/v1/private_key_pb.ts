// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/access_graph/v1/private_key.proto (package teleport.access_graph.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Metadata } from "../../header/v1/metadata_pb";
import { file_teleport_header_v1_metadata } from "../../header/v1/metadata_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/access_graph/v1/private_key.proto.
 */
export const file_teleport_access_graph_v1_private_key: GenFile = /*@__PURE__*/
  fileDesc("Cip0ZWxlcG9ydC9hY2Nlc3NfZ3JhcGgvdjEvcHJpdmF0ZV9rZXkucHJvdG8SGHRlbGVwb3J0LmFjY2Vzc19ncmFwaC52MSKlAQoKUHJpdmF0ZUtleRIuCghtZXRhZGF0YRgBIAEoCzIcLnRlbGVwb3J0LmhlYWRlci52MS5NZXRhZGF0YRIMCgRraW5kGAIgASgJEhAKCHN1Yl9raW5kGAMgASgJEg8KB3ZlcnNpb24YBCABKAkSNgoEc3BlYxgFIAEoCzIoLnRlbGVwb3J0LmFjY2Vzc19ncmFwaC52MS5Qcml2YXRlS2V5U3BlYyKFAQoOUHJpdmF0ZUtleVNwZWMSEQoJZGV2aWNlX2lkGAEgASgJEh4KFnB1YmxpY19rZXlfZmluZ2VycHJpbnQYAiABKAkSQAoPcHVibGljX2tleV9tb2RlGAMgASgOMicudGVsZXBvcnQuYWNjZXNzX2dyYXBoLnYxLlB1YmxpY0tleU1vZGUqigEKDVB1YmxpY0tleU1vZGUSHwobUFVCTElDX0tFWV9NT0RFX1VOU1BFQ0lGSUVEEAASGwoXUFVCTElDX0tFWV9NT0RFX0RFUklWRUQQARIcChhQVUJMSUNfS0VZX01PREVfUFVCX0ZJTEUQAhIdChlQVUJMSUNfS0VZX01PREVfUFJPVEVDVEVEEANCWlpYZ2l0aHViLmNvbS9ncmF2aXRhdGlvbmFsL3RlbGVwb3J0L2FwaS9nZW4vcHJvdG8vZ28vdGVsZXBvcnQvYWNjZXNzZ3JhcGgvdjE7YWNjZXNzZ3JhcGh2MWIGcHJvdG8z", [file_teleport_header_v1_metadata]);

/**
 * The `PrivateKey` message represents a private key entry for a specific local user.
 * It serves as a reference to a private key located on a user's laptop. Note that it *NEVER* contains the private key itself.
 * Instead, it stores metadata related to the key, including the fingerprint of the public key, the device trust identifier, and the public key mode.
 * The Teleport Access Graph uses this metadata to assess whether a particular private key is authorized to access a user on the node without using Teleport.
 *
 * @generated from message teleport.access_graph.v1.PrivateKey
 */
export type PrivateKey = Message<"teleport.access_graph.v1.PrivateKey"> & {
  /**
   * metadata is the PrivateKey's metadata.
   *
   * @generated from field: teleport.header.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * kind is a resource kind.
   *
   * @generated from field: string kind = 2;
   */
  kind: string;

  /**
   * sub_kind is an optional resource sub kind, used in some resources.
   *
   * @generated from field: string sub_kind = 3;
   */
  subKind: string;

  /**
   * version is version.
   *
   * @generated from field: string version = 4;
   */
  version: string;

  /**
   * Spec is a PrivateKey specification.
   *
   * @generated from field: teleport.access_graph.v1.PrivateKeySpec spec = 5;
   */
  spec?: PrivateKeySpec;
};

/**
 * Describes the message teleport.access_graph.v1.PrivateKey.
 * Use `create(PrivateKeySchema)` to create a new message.
 */
export const PrivateKeySchema: GenMessage<PrivateKey> = /*@__PURE__*/
  messageDesc(file_teleport_access_graph_v1_private_key, 0);

/**
 * PrivateKeySpec is the private key spec.
 *
 * @generated from message teleport.access_graph.v1.PrivateKeySpec
 */
export type PrivateKeySpec = Message<"teleport.access_graph.v1.PrivateKeySpec"> & {
  /**
   * device_id is the device trust identifier of the device that owns the key.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  /**
   * public_key_fingerprint is the SHA256 of the SSH public key corresponding to
   * the private key.
   *
   * @generated from field: string public_key_fingerprint = 2;
   */
  publicKeyFingerprint: string;

  /**
   * public_key_mode is the public key mode.
   *
   * @generated from field: teleport.access_graph.v1.PublicKeyMode public_key_mode = 3;
   */
  publicKeyMode: PublicKeyMode;
};

/**
 * Describes the message teleport.access_graph.v1.PrivateKeySpec.
 * Use `create(PrivateKeySpecSchema)` to create a new message.
 */
export const PrivateKeySpecSchema: GenMessage<PrivateKeySpec> = /*@__PURE__*/
  messageDesc(file_teleport_access_graph_v1_private_key, 1);

/**
 * PublicKeyMode is the mode of the public key.
 * The public key can be derived from the private key, stored in a separate file, or the private key was password protected
 * and we could not extract the public key from it or from the file.
 *
 * @generated from enum teleport.access_graph.v1.PublicKeyMode
 */
export enum PublicKeyMode {
  /**
   * PUBLIC_KEY_MODE_UNSPECIFIED is an invalid state.
   *
   * @generated from enum value: PUBLIC_KEY_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * PUBLIC_KEY_MODE_DERIVED is the state where the public key is derived from the private key.
   *
   * @generated from enum value: PUBLIC_KEY_MODE_DERIVED = 1;
   */
  DERIVED = 1,

  /**
   * PUBLIC_KEY_MODE_PUB_FILE is a state where the public key is stored in a separate file from the private key.
   * The private key is password protected and we could not extract the public key from it.
   * This mode is used when the private key is password protected and there is a <key>.pub file next to the private key
   * that contains the public key.
   *
   * @generated from enum value: PUBLIC_KEY_MODE_PUB_FILE = 2;
   */
  PUB_FILE = 2,

  /**
   * PUBLIC_KEY_MODE_PROTECTED is a state where the private key is password protected and we could not extract the public key from it
   * or from the .pub file.
   *
   * @generated from enum value: PUBLIC_KEY_MODE_PROTECTED = 3;
   */
  PROTECTED = 3,
}

/**
 * Describes the enum teleport.access_graph.v1.PublicKeyMode.
 */
export const PublicKeyModeSchema: GenEnum<PublicKeyMode> = /*@__PURE__*/
  enumDesc(file_teleport_access_graph_v1_private_key, 0);

