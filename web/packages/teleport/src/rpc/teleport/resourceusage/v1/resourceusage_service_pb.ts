// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/resourceusage/v1/resourceusage_service.proto (package teleport.resourceusage.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { AccessRequestsUsage } from "./access_requests_pb.js";
import { AccountUsageType } from "./account_usage_type_pb.js";
import { DevicesUsage } from "./device_trust_pb.js";

/**
 * GetUsageRequest is the request for GetUsage.
 *
 * @generated from message teleport.resourceusage.v1.GetUsageRequest
 */
export class GetUsageRequest extends Message<GetUsageRequest> {
  constructor(data?: PartialMessage<GetUsageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.resourceusage.v1.GetUsageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsageRequest {
    return new GetUsageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsageRequest {
    return new GetUsageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsageRequest {
    return new GetUsageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsageRequest | PlainMessage<GetUsageRequest> | undefined, b: GetUsageRequest | PlainMessage<GetUsageRequest> | undefined): boolean {
    return proto3.util.equals(GetUsageRequest, a, b);
  }
}

/**
 * GetUsageResponse is the response for GetUsage.
 *
 * @generated from message teleport.resourceusage.v1.GetUsageResponse
 */
export class GetUsageResponse extends Message<GetUsageResponse> {
  /**
   * @generated from field: teleport.resourceusage.v1.AccessRequestsUsage access_requests = 1;
   */
  accessRequests?: AccessRequestsUsage;

  /**
   * Usage type of the underlying account.
   * UNLIMITED accounts have no usage limits, therefore any numbers should be
   * disconsidered for those accounts.
   *
   * @generated from field: teleport.resourceusage.v1.AccountUsageType account_usage_type = 2;
   */
  accountUsageType = AccountUsageType.UNSPECIFIED;

  /**
   * DevicesUsage contains limits for trusted devices / Device Trust.
   *
   * @generated from field: teleport.resourceusage.v1.DevicesUsage devices_usage = 3;
   */
  devicesUsage?: DevicesUsage;

  constructor(data?: PartialMessage<GetUsageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.resourceusage.v1.GetUsageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_requests", kind: "message", T: AccessRequestsUsage },
    { no: 2, name: "account_usage_type", kind: "enum", T: proto3.getEnumType(AccountUsageType) },
    { no: 3, name: "devices_usage", kind: "message", T: DevicesUsage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsageResponse {
    return new GetUsageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsageResponse {
    return new GetUsageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsageResponse {
    return new GetUsageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsageResponse | PlainMessage<GetUsageResponse> | undefined, b: GetUsageResponse | PlainMessage<GetUsageResponse> | undefined): boolean {
    return proto3.util.equals(GetUsageResponse, a, b);
  }
}

