// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/dbobjectimportrule/v1/dbobjectimportrule_service.proto (package teleport.dbobjectimportrule.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { DatabaseObjectImportRule } from "./dbobjectimportrule_pb.js";

/**
 * The request for CreateDatabaseObjectImportRule.
 *
 * @generated from message teleport.dbobjectimportrule.v1.CreateDatabaseObjectImportRuleRequest
 */
export class CreateDatabaseObjectImportRuleRequest extends Message<CreateDatabaseObjectImportRuleRequest> {
  /**
   * The DatabaseObjectImportRule to create.
   *
   * @generated from field: teleport.dbobjectimportrule.v1.DatabaseObjectImportRule rule = 1;
   */
  rule?: DatabaseObjectImportRule;

  constructor(data?: PartialMessage<CreateDatabaseObjectImportRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.dbobjectimportrule.v1.CreateDatabaseObjectImportRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rule", kind: "message", T: DatabaseObjectImportRule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDatabaseObjectImportRuleRequest {
    return new CreateDatabaseObjectImportRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDatabaseObjectImportRuleRequest {
    return new CreateDatabaseObjectImportRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDatabaseObjectImportRuleRequest {
    return new CreateDatabaseObjectImportRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDatabaseObjectImportRuleRequest | PlainMessage<CreateDatabaseObjectImportRuleRequest> | undefined, b: CreateDatabaseObjectImportRuleRequest | PlainMessage<CreateDatabaseObjectImportRuleRequest> | undefined): boolean {
    return proto3.util.equals(CreateDatabaseObjectImportRuleRequest, a, b);
  }
}

/**
 * The request for GetDatabaseObjectImportRule.
 *
 * @generated from message teleport.dbobjectimportrule.v1.GetDatabaseObjectImportRuleRequest
 */
export class GetDatabaseObjectImportRuleRequest extends Message<GetDatabaseObjectImportRuleRequest> {
  /**
   * The name of the DatabaseObjectImportRule to fetch.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetDatabaseObjectImportRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.dbobjectimportrule.v1.GetDatabaseObjectImportRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDatabaseObjectImportRuleRequest {
    return new GetDatabaseObjectImportRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDatabaseObjectImportRuleRequest {
    return new GetDatabaseObjectImportRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDatabaseObjectImportRuleRequest {
    return new GetDatabaseObjectImportRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDatabaseObjectImportRuleRequest | PlainMessage<GetDatabaseObjectImportRuleRequest> | undefined, b: GetDatabaseObjectImportRuleRequest | PlainMessage<GetDatabaseObjectImportRuleRequest> | undefined): boolean {
    return proto3.util.equals(GetDatabaseObjectImportRuleRequest, a, b);
  }
}

/**
 * The request for ListDatabaseObjectImportRules.
 *
 * @generated from message teleport.dbobjectimportrule.v1.ListDatabaseObjectImportRulesRequest
 */
export class ListDatabaseObjectImportRulesRequest extends Message<ListDatabaseObjectImportRulesRequest> {
  /**
   * The maximum number of items to return.
   * The server may impose a different page size at its discretion.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * The page_token is the next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListDatabaseObjectImportRulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.dbobjectimportrule.v1.ListDatabaseObjectImportRulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDatabaseObjectImportRulesRequest {
    return new ListDatabaseObjectImportRulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDatabaseObjectImportRulesRequest {
    return new ListDatabaseObjectImportRulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDatabaseObjectImportRulesRequest {
    return new ListDatabaseObjectImportRulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDatabaseObjectImportRulesRequest | PlainMessage<ListDatabaseObjectImportRulesRequest> | undefined, b: ListDatabaseObjectImportRulesRequest | PlainMessage<ListDatabaseObjectImportRulesRequest> | undefined): boolean {
    return proto3.util.equals(ListDatabaseObjectImportRulesRequest, a, b);
  }
}

/**
 * The response for ListDatabaseObjectImportRules.
 *
 * @generated from message teleport.dbobjectimportrule.v1.ListDatabaseObjectImportRulesResponse
 */
export class ListDatabaseObjectImportRulesResponse extends Message<ListDatabaseObjectImportRulesResponse> {
  /**
   * The page of DatabaseObjectImportRules that matched the request.
   *
   * @generated from field: repeated teleport.dbobjectimportrule.v1.DatabaseObjectImportRule rules = 1;
   */
  rules: DatabaseObjectImportRule[] = [];

  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListDatabaseObjectImportRulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.dbobjectimportrule.v1.ListDatabaseObjectImportRulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rules", kind: "message", T: DatabaseObjectImportRule, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDatabaseObjectImportRulesResponse {
    return new ListDatabaseObjectImportRulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDatabaseObjectImportRulesResponse {
    return new ListDatabaseObjectImportRulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDatabaseObjectImportRulesResponse {
    return new ListDatabaseObjectImportRulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDatabaseObjectImportRulesResponse | PlainMessage<ListDatabaseObjectImportRulesResponse> | undefined, b: ListDatabaseObjectImportRulesResponse | PlainMessage<ListDatabaseObjectImportRulesResponse> | undefined): boolean {
    return proto3.util.equals(ListDatabaseObjectImportRulesResponse, a, b);
  }
}

/**
 * The request for UpdateDatabaseObjectImportRule.
 *
 * @generated from message teleport.dbobjectimportrule.v1.UpdateDatabaseObjectImportRuleRequest
 */
export class UpdateDatabaseObjectImportRuleRequest extends Message<UpdateDatabaseObjectImportRuleRequest> {
  /**
   * The DatabaseObjectImportRule to replace.
   *
   * @generated from field: teleport.dbobjectimportrule.v1.DatabaseObjectImportRule rule = 1;
   */
  rule?: DatabaseObjectImportRule;

  constructor(data?: PartialMessage<UpdateDatabaseObjectImportRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.dbobjectimportrule.v1.UpdateDatabaseObjectImportRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rule", kind: "message", T: DatabaseObjectImportRule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDatabaseObjectImportRuleRequest {
    return new UpdateDatabaseObjectImportRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDatabaseObjectImportRuleRequest {
    return new UpdateDatabaseObjectImportRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDatabaseObjectImportRuleRequest {
    return new UpdateDatabaseObjectImportRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDatabaseObjectImportRuleRequest | PlainMessage<UpdateDatabaseObjectImportRuleRequest> | undefined, b: UpdateDatabaseObjectImportRuleRequest | PlainMessage<UpdateDatabaseObjectImportRuleRequest> | undefined): boolean {
    return proto3.util.equals(UpdateDatabaseObjectImportRuleRequest, a, b);
  }
}

/**
 * The request for UpsertDatabaseObjectImportRule.
 *
 * @generated from message teleport.dbobjectimportrule.v1.UpsertDatabaseObjectImportRuleRequest
 */
export class UpsertDatabaseObjectImportRuleRequest extends Message<UpsertDatabaseObjectImportRuleRequest> {
  /**
   * The DatabaseObjectImportRule to create or replace.
   *
   * @generated from field: teleport.dbobjectimportrule.v1.DatabaseObjectImportRule rule = 1;
   */
  rule?: DatabaseObjectImportRule;

  constructor(data?: PartialMessage<UpsertDatabaseObjectImportRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.dbobjectimportrule.v1.UpsertDatabaseObjectImportRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rule", kind: "message", T: DatabaseObjectImportRule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertDatabaseObjectImportRuleRequest {
    return new UpsertDatabaseObjectImportRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertDatabaseObjectImportRuleRequest {
    return new UpsertDatabaseObjectImportRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertDatabaseObjectImportRuleRequest {
    return new UpsertDatabaseObjectImportRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertDatabaseObjectImportRuleRequest | PlainMessage<UpsertDatabaseObjectImportRuleRequest> | undefined, b: UpsertDatabaseObjectImportRuleRequest | PlainMessage<UpsertDatabaseObjectImportRuleRequest> | undefined): boolean {
    return proto3.util.equals(UpsertDatabaseObjectImportRuleRequest, a, b);
  }
}

/**
 * The request for DeleteDatabaseObjectImportRule.
 *
 * @generated from message teleport.dbobjectimportrule.v1.DeleteDatabaseObjectImportRuleRequest
 */
export class DeleteDatabaseObjectImportRuleRequest extends Message<DeleteDatabaseObjectImportRuleRequest> {
  /**
   * The name of the DatabaseObjectImportRule to delete.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteDatabaseObjectImportRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.dbobjectimportrule.v1.DeleteDatabaseObjectImportRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDatabaseObjectImportRuleRequest {
    return new DeleteDatabaseObjectImportRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDatabaseObjectImportRuleRequest {
    return new DeleteDatabaseObjectImportRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDatabaseObjectImportRuleRequest {
    return new DeleteDatabaseObjectImportRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDatabaseObjectImportRuleRequest | PlainMessage<DeleteDatabaseObjectImportRuleRequest> | undefined, b: DeleteDatabaseObjectImportRuleRequest | PlainMessage<DeleteDatabaseObjectImportRuleRequest> | undefined): boolean {
    return proto3.util.equals(DeleteDatabaseObjectImportRuleRequest, a, b);
  }
}

