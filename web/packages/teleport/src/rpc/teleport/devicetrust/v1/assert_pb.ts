// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/devicetrust/v1/assert.proto (package teleport.devicetrust.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { AuthenticateDeviceChallenge, AuthenticateDeviceChallengeResponse, TPMAuthenticateDeviceChallenge, TPMAuthenticateDeviceChallengeResponse } from "./authenticate_challenge_pb";
import { file_teleport_devicetrust_v1_authenticate_challenge } from "./authenticate_challenge_pb";
import type { DeviceCollectedData } from "./device_collected_data_pb";
import { file_teleport_devicetrust_v1_device_collected_data } from "./device_collected_data_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/devicetrust/v1/assert.proto.
 */
export const file_teleport_devicetrust_v1_assert: GenFile = /*@__PURE__*/
  fileDesc("CiR0ZWxlcG9ydC9kZXZpY2V0cnVzdC92MS9hc3NlcnQucHJvdG8SF3RlbGVwb3J0LmRldmljZXRydXN0LnYxIpoCChNBc3NlcnREZXZpY2VSZXF1ZXN0EjkKBGluaXQYASABKAsyKS50ZWxlcG9ydC5kZXZpY2V0cnVzdC52MS5Bc3NlcnREZXZpY2VJbml0SAASWgoSY2hhbGxlbmdlX3Jlc3BvbnNlGAIgASgLMjwudGVsZXBvcnQuZGV2aWNldHJ1c3QudjEuQXV0aGVudGljYXRlRGV2aWNlQ2hhbGxlbmdlUmVzcG9uc2VIABJhChZ0cG1fY2hhbGxlbmdlX3Jlc3BvbnNlGAMgASgLMj8udGVsZXBvcnQuZGV2aWNldHJ1c3QudjEuVFBNQXV0aGVudGljYXRlRGV2aWNlQ2hhbGxlbmdlUmVzcG9uc2VIAEIJCgdwYXlsb2FkIoICChRBc3NlcnREZXZpY2VSZXNwb25zZRJJCgljaGFsbGVuZ2UYASABKAsyNC50ZWxlcG9ydC5kZXZpY2V0cnVzdC52MS5BdXRoZW50aWNhdGVEZXZpY2VDaGFsbGVuZ2VIABJQCg10cG1fY2hhbGxlbmdlGAIgASgLMjcudGVsZXBvcnQuZGV2aWNldHJ1c3QudjEuVFBNQXV0aGVudGljYXRlRGV2aWNlQ2hhbGxlbmdlSAASQgoPZGV2aWNlX2Fzc2VydGVkGAMgASgLMicudGVsZXBvcnQuZGV2aWNldHJ1c3QudjEuRGV2aWNlQXNzZXJ0ZWRIAEIJCgdwYXlsb2FkImwKEEFzc2VydERldmljZUluaXQSFQoNY3JlZGVudGlhbF9pZBgBIAEoCRJBCgtkZXZpY2VfZGF0YRgCIAEoCzIsLnRlbGVwb3J0LmRldmljZXRydXN0LnYxLkRldmljZUNvbGxlY3RlZERhdGEiEAoORGV2aWNlQXNzZXJ0ZWRCWlpYZ2l0aHViLmNvbS9ncmF2aXRhdGlvbmFsL3RlbGVwb3J0L2FwaS9nZW4vcHJvdG8vZ28vdGVsZXBvcnQvZGV2aWNldHJ1c3QvdjE7ZGV2aWNldHJ1c3R2MWIGcHJvdG8z", [file_teleport_devicetrust_v1_authenticate_challenge, file_teleport_devicetrust_v1_device_collected_data]);

/**
 * Request to assert an enrolled device. Assertion authenticates the device,
 * regardless of the user driving the assertion.
 *
 * Assertion messages are meant to be included by other requests and responses,
 * either streams or multi-stage RPCs. The ceremony is resolved by a co-located
 * DeviceTrustService.
 *
 * See the lib/devicetrust/assert (client) and lib/devicetrust/assertserver
 * (server) packages.
 *
 * Assertion ceremony flow:
 * -> AssertDeviceInit (client)
 * <- AssertDeviceChallenge (server)
 * -> AssertDeviceChallengeResponse (client)
 * <- DeviceAsserted (server)
 *
 * A successful ceremony signifies that the device is registered, enrolled and
 * passed the authentication challenge.
 *
 * @generated from message teleport.devicetrust.v1.AssertDeviceRequest
 */
export type AssertDeviceRequest = Message<"teleport.devicetrust.v1.AssertDeviceRequest"> & {
  /**
   * @generated from oneof teleport.devicetrust.v1.AssertDeviceRequest.payload
   */
  payload: {
    /**
     * @generated from field: teleport.devicetrust.v1.AssertDeviceInit init = 1;
     */
    value: AssertDeviceInit;
    case: "init";
  } | {
    /**
     * @generated from field: teleport.devicetrust.v1.AuthenticateDeviceChallengeResponse challenge_response = 2;
     */
    value: AuthenticateDeviceChallengeResponse;
    case: "challengeResponse";
  } | {
    /**
     * @generated from field: teleport.devicetrust.v1.TPMAuthenticateDeviceChallengeResponse tpm_challenge_response = 3;
     */
    value: TPMAuthenticateDeviceChallengeResponse;
    case: "tpmChallengeResponse";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message teleport.devicetrust.v1.AssertDeviceRequest.
 * Use `create(AssertDeviceRequestSchema)` to create a new message.
 */
export const AssertDeviceRequestSchema: GenMessage<AssertDeviceRequest> = /*@__PURE__*/
  messageDesc(file_teleport_devicetrust_v1_assert, 0);

/**
 * Response of the device assertion ceremony.
 * See [AssertDeviceRequest].
 *
 * @generated from message teleport.devicetrust.v1.AssertDeviceResponse
 */
export type AssertDeviceResponse = Message<"teleport.devicetrust.v1.AssertDeviceResponse"> & {
  /**
   * @generated from oneof teleport.devicetrust.v1.AssertDeviceResponse.payload
   */
  payload: {
    /**
     * @generated from field: teleport.devicetrust.v1.AuthenticateDeviceChallenge challenge = 1;
     */
    value: AuthenticateDeviceChallenge;
    case: "challenge";
  } | {
    /**
     * @generated from field: teleport.devicetrust.v1.TPMAuthenticateDeviceChallenge tpm_challenge = 2;
     */
    value: TPMAuthenticateDeviceChallenge;
    case: "tpmChallenge";
  } | {
    /**
     * @generated from field: teleport.devicetrust.v1.DeviceAsserted device_asserted = 3;
     */
    value: DeviceAsserted;
    case: "deviceAsserted";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message teleport.devicetrust.v1.AssertDeviceResponse.
 * Use `create(AssertDeviceResponseSchema)` to create a new message.
 */
export const AssertDeviceResponseSchema: GenMessage<AssertDeviceResponse> = /*@__PURE__*/
  messageDesc(file_teleport_devicetrust_v1_assert, 1);

/**
 * AssertDeviceInit initiates the device assertion ceremony.
 * See [AssertDeviceRequest].
 *
 * @generated from message teleport.devicetrust.v1.AssertDeviceInit
 */
export type AssertDeviceInit = Message<"teleport.devicetrust.v1.AssertDeviceInit"> & {
  /**
   * ID of the enrolled device credential.
   *
   * @generated from field: string credential_id = 1;
   */
  credentialId: string;

  /**
   * Device collected data.
   * Matched against the device registration information and any previously
   * collected data.
   *
   * @generated from field: teleport.devicetrust.v1.DeviceCollectedData device_data = 2;
   */
  deviceData?: DeviceCollectedData;
};

/**
 * Describes the message teleport.devicetrust.v1.AssertDeviceInit.
 * Use `create(AssertDeviceInitSchema)` to create a new message.
 */
export const AssertDeviceInitSchema: GenMessage<AssertDeviceInit> = /*@__PURE__*/
  messageDesc(file_teleport_devicetrust_v1_assert, 2);

/**
 * DeviceAsserted marks a successful device assertion ceremony.
 * See [AssertDeviceRequest].
 *
 * @generated from message teleport.devicetrust.v1.DeviceAsserted
 */
export type DeviceAsserted = Message<"teleport.devicetrust.v1.DeviceAsserted"> & {
};

/**
 * Describes the message teleport.devicetrust.v1.DeviceAsserted.
 * Use `create(DeviceAssertedSchema)` to create a new message.
 */
export const DeviceAssertedSchema: GenMessage<DeviceAsserted> = /*@__PURE__*/
  messageDesc(file_teleport_devicetrust_v1_assert, 3);

