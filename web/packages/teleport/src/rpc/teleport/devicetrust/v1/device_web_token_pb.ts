// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/devicetrust/v1/device_web_token.proto (package teleport.devicetrust.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/devicetrust/v1/device_web_token.proto.
 */
export const file_teleport_devicetrust_v1_device_web_token: GenFile = /*@__PURE__*/
  fileDesc("Ci50ZWxlcG9ydC9kZXZpY2V0cnVzdC92MS9kZXZpY2Vfd2ViX3Rva2VuLnByb3RvEhd0ZWxlcG9ydC5kZXZpY2V0cnVzdC52MSKeAQoORGV2aWNlV2ViVG9rZW4SCgoCaWQYASABKAkSDQoFdG9rZW4YAiABKAkSFgoOd2ViX3Nlc3Npb25faWQYAyABKAkSGgoSYnJvd3Nlcl91c2VyX2FnZW50GAQgASgJEhIKCmJyb3dzZXJfaXAYBSABKAkSDAoEdXNlchgGIAEoCRIbChNleHBlY3RlZF9kZXZpY2VfaWRzGAcgAygJQlpaWGdpdGh1Yi5jb20vZ3Jhdml0YXRpb25hbC90ZWxlcG9ydC9hcGkvZ2VuL3Byb3RvL2dvL3RlbGVwb3J0L2RldmljZXRydXN0L3YxO2RldmljZXRydXN0djFiBnByb3RvMw");

/**
 * A device web token is a token used to device-authenticate a Web UI session.
 *
 * Tokens are generally acquired on login and exchanged for a single
 * on-behalf-of device authentication attempt, performed by Connect.
 *
 * See
 * https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-token.
 *
 * @generated from message teleport.devicetrust.v1.DeviceWebToken
 */
export type DeviceWebToken = Message<"teleport.devicetrust.v1.DeviceWebToken"> & {
  /**
   * Opaque token identifier.
   * Required for token usage.
   * System-generated.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Opaque device web token, in plaintext, encoded in base64.RawURLEncoding
   * (so it is inherently safe for URl use).
   * Required for token usage.
   * System-generated.
   *
   * @generated from field: string token = 2;
   */
  token: string;

  /**
   * Identifier for the Web Session being device-authorized.
   * Required for creation.
   *
   * @generated from field: string web_session_id = 3;
   */
  webSessionId: string;

  /**
   * Browser user agent, as acquired from the Web UI browser.
   * Used as part of expected device checks.
   * Required for creation.
   *
   * @generated from field: string browser_user_agent = 4;
   */
  browserUserAgent: string;

  /**
   * Browser public IP, as acquired from the Web UI browser.
   * Used as part of expected device checks.
   * Required for creation.
   *
   * @generated from field: string browser_ip = 5;
   */
  browserIp: string;

  /**
   * Owner of the Web Session and trusted device.
   * Used internally by the Device Trust system.
   * Transient.
   *
   * @generated from field: string user = 6;
   */
  user: string;

  /**
   * ID of the devices allowed to perform on-behalf-of device authentication.
   * Used internally by the Device Trust system.
   * Transient.
   *
   * @generated from field: repeated string expected_device_ids = 7;
   */
  expectedDeviceIds: string[];
};

/**
 * Describes the message teleport.devicetrust.v1.DeviceWebToken.
 * Use `create(DeviceWebTokenSchema)` to create a new message.
 */
export const DeviceWebTokenSchema: GenMessage<DeviceWebToken> = /*@__PURE__*/
  messageDesc(file_teleport_devicetrust_v1_device_web_token, 0);

