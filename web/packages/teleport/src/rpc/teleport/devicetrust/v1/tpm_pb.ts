// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/devicetrust/v1/tpm.proto (package teleport.devicetrust.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/devicetrust/v1/tpm.proto.
 */
export const file_teleport_devicetrust_v1_tpm: GenFile = /*@__PURE__*/
  fileDesc("CiF0ZWxlcG9ydC9kZXZpY2V0cnVzdC92MS90cG0ucHJvdG8SF3RlbGVwb3J0LmRldmljZXRydXN0LnYxIjsKBlRQTVBDUhINCgVpbmRleBgBIAEoBRIOCgZkaWdlc3QYAiABKAwSEgoKZGlnZXN0X2FsZxgDIAEoBCIsCghUUE1RdW90ZRINCgVxdW90ZRgBIAEoDBIRCglzaWduYXR1cmUYAiABKAwijAEKFVRQTVBsYXRmb3JtUGFyYW1ldGVycxIxCgZxdW90ZXMYASADKAsyIS50ZWxlcG9ydC5kZXZpY2V0cnVzdC52MS5UUE1RdW90ZRItCgRwY3JzGAIgAygLMh8udGVsZXBvcnQuZGV2aWNldHJ1c3QudjEuVFBNUENSEhEKCWV2ZW50X2xvZxgDIAEoDCJ0ChZUUE1QbGF0Zm9ybUF0dGVzdGF0aW9uEg0KBW5vbmNlGAEgASgMEksKE3BsYXRmb3JtX3BhcmFtZXRlcnMYAiABKAsyLi50ZWxlcG9ydC5kZXZpY2V0cnVzdC52MS5UUE1QbGF0Zm9ybVBhcmFtZXRlcnNCWlpYZ2l0aHViLmNvbS9ncmF2aXRhdGlvbmFsL3RlbGVwb3J0L2FwaS9nZW4vcHJvdG8vZ28vdGVsZXBvcnQvZGV2aWNldHJ1c3QvdjE7ZGV2aWNldHJ1c3R2MWIGcHJvdG8z");

/**
 * Encapsulates the value of a PCR at a point at time.
 * See https://pkg.go.dev/github.com/google/go-attestation/attest#PCR
 *
 * @generated from message teleport.devicetrust.v1.TPMPCR
 */
export type TPMPCR = Message<"teleport.devicetrust.v1.TPMPCR"> & {
  /**
   * the PCR index in the PCR bank
   *
   * @generated from field: int32 index = 1;
   */
  index: number;

  /**
   * the digest currently held in the PCR
   *
   * @generated from field: bytes digest = 2;
   */
  digest: Uint8Array;

  /**
   * the hash algorithm used to produce the digest in this PCR bank. This value
   * is the underlying value of the Go crypto.Hash type.
   *
   * @generated from field: uint64 digest_alg = 3;
   */
  digestAlg: bigint;
};

/**
 * Describes the message teleport.devicetrust.v1.TPMPCR.
 * Use `create(TPMPCRSchema)` to create a new message.
 */
export const TPMPCRSchema: GenMessage<TPMPCR> = /*@__PURE__*/
  messageDesc(file_teleport_devicetrust_v1_tpm, 0);

/**
 * Encapsulates the result of a quote operation against the TPM over a PCR
 * using an attestation key.
 * See https://pkg.go.dev/github.com/google/go-attestation/attest#Quote
 *
 * @generated from message teleport.devicetrust.v1.TPMQuote
 */
export type TPMQuote = Message<"teleport.devicetrust.v1.TPMQuote"> & {
  /**
   * @generated from field: bytes quote = 1;
   */
  quote: Uint8Array;

  /**
   * @generated from field: bytes signature = 2;
   */
  signature: Uint8Array;
};

/**
 * Describes the message teleport.devicetrust.v1.TPMQuote.
 * Use `create(TPMQuoteSchema)` to create a new message.
 */
export const TPMQuoteSchema: GenMessage<TPMQuote> = /*@__PURE__*/
  messageDesc(file_teleport_devicetrust_v1_tpm, 1);

/**
 * The quotes, PCRs and event log from a TPM that attest to the booted state
 * of the machine.
 * See https://pkg.go.dev/github.com/google/go-attestation/attest#PlatformParameters
 * Excludes TPMVersion and Public since these are already known values.
 *
 * @generated from message teleport.devicetrust.v1.TPMPlatformParameters
 */
export type TPMPlatformParameters = Message<"teleport.devicetrust.v1.TPMPlatformParameters"> & {
  /**
   * @generated from field: repeated teleport.devicetrust.v1.TPMQuote quotes = 1;
   */
  quotes: TPMQuote[];

  /**
   * @generated from field: repeated teleport.devicetrust.v1.TPMPCR pcrs = 2;
   */
  pcrs: TPMPCR[];

  /**
   * @generated from field: bytes event_log = 3;
   */
  eventLog: Uint8Array;
};

/**
 * Describes the message teleport.devicetrust.v1.TPMPlatformParameters.
 * Use `create(TPMPlatformParametersSchema)` to create a new message.
 */
export const TPMPlatformParametersSchema: GenMessage<TPMPlatformParameters> = /*@__PURE__*/
  messageDesc(file_teleport_devicetrust_v1_tpm, 2);

/**
 * Holds the record of a TPM platform attestation, including the platform
 * parameters sent by the device and the nonce the server generated. This allows
 * a historical platform attestation to be revalidated and allows us to compare
 * the incoming state of a device (e.g during authentication) against the
 * historical state in order to detect potentially malicious actions.
 *
 * @generated from message teleport.devicetrust.v1.TPMPlatformAttestation
 */
export type TPMPlatformAttestation = Message<"teleport.devicetrust.v1.TPMPlatformAttestation"> & {
  /**
   * @generated from field: bytes nonce = 1;
   */
  nonce: Uint8Array;

  /**
   * @generated from field: teleport.devicetrust.v1.TPMPlatformParameters platform_parameters = 2;
   */
  platformParameters?: TPMPlatformParameters;
};

/**
 * Describes the message teleport.devicetrust.v1.TPMPlatformAttestation.
 * Use `create(TPMPlatformAttestationSchema)` to create a new message.
 */
export const TPMPlatformAttestationSchema: GenMessage<TPMPlatformAttestation> = /*@__PURE__*/
  messageDesc(file_teleport_devicetrust_v1_tpm, 3);

