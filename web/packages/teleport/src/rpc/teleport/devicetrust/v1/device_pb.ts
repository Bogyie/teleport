// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/devicetrust/v1/device.proto (package teleport.devicetrust.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { OSType } from "./os_type_pb.js";
import { DeviceEnrollToken } from "./device_enroll_token_pb.js";
import { DeviceCollectedData } from "./device_collected_data_pb.js";
import { DeviceSource } from "./device_source_pb.js";
import { DeviceProfile } from "./device_profile_pb.js";

/**
 * AttestationType indicates the degree to which the device credential has
 * been attested.
 *
 * @generated from enum teleport.devicetrust.v1.DeviceAttestationType
 */
export enum DeviceAttestationType {
  /**
   * Bare public key which has only verified with proof of ownership.
   * Used on macOS.
   *
   * @generated from enum value: DEVICE_ATTESTATION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Credential was verified through a TPM EK->AK chain on enrollment.
   *
   * @generated from enum value: DEVICE_ATTESTATION_TYPE_TPM_EKPUB = 1;
   */
  TPM_EKPUB = 1,

  /**
   * Credential was verified through a TPM EKCert->AK chain on enrollment,
   * but no allow-listed CAs were configured to validate this EKCert against.
   *
   * @generated from enum value: DEVICE_ATTESTATION_TYPE_TPM_EKCERT = 2;
   */
  TPM_EKCERT = 2,

  /**
   * Credential was verified through a TPM EKCert->AK chain on enrollment, and
   * the EKCert was signed by a configured allow-listed CA.
   *
   * @generated from enum value: DEVICE_ATTESTATION_TYPE_TPM_EKCERT_TRUSTED = 3;
   */
  TPM_EKCERT_TRUSTED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(DeviceAttestationType)
proto3.util.setEnumType(DeviceAttestationType, "teleport.devicetrust.v1.DeviceAttestationType", [
  { no: 0, name: "DEVICE_ATTESTATION_TYPE_UNSPECIFIED" },
  { no: 1, name: "DEVICE_ATTESTATION_TYPE_TPM_EKPUB" },
  { no: 2, name: "DEVICE_ATTESTATION_TYPE_TPM_EKCERT" },
  { no: 3, name: "DEVICE_ATTESTATION_TYPE_TPM_EKCERT_TRUSTED" },
]);

/**
 * DeviceEnrollStatus represents the enrollment status of a device.
 *
 * @generated from enum teleport.devicetrust.v1.DeviceEnrollStatus
 */
export enum DeviceEnrollStatus {
  /**
   * @generated from enum value: DEVICE_ENROLL_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Device is registered but not enrolled.
   *
   * @generated from enum value: DEVICE_ENROLL_STATUS_NOT_ENROLLED = 1;
   */
  NOT_ENROLLED = 1,

  /**
   * Device is registered and enrolled.
   *
   * @generated from enum value: DEVICE_ENROLL_STATUS_ENROLLED = 2;
   */
  ENROLLED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(DeviceEnrollStatus)
proto3.util.setEnumType(DeviceEnrollStatus, "teleport.devicetrust.v1.DeviceEnrollStatus", [
  { no: 0, name: "DEVICE_ENROLL_STATUS_UNSPECIFIED" },
  { no: 1, name: "DEVICE_ENROLL_STATUS_NOT_ENROLLED" },
  { no: 2, name: "DEVICE_ENROLL_STATUS_ENROLLED" },
]);

/**
 * Device represents a registered device.
 * Registered devices may be enrolled. Enrolled devices are allowed to perform
 * device-aware actions.
 *
 * @generated from message teleport.devicetrust.v1.Device
 */
export class Device extends Message<Device> {
  /**
   * API version of the Device definition, present for compatibility with
   * types.DeviceV1.
   * Always "v1".
   *
   * @generated from field: string api_version = 1;
   */
  apiVersion = "";

  /**
   * Unique device identifier.
   * System managed.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * Device operating system.
   * Required.
   *
   * @generated from field: teleport.devicetrust.v1.OSType os_type = 3;
   */
  osType = OSType.OS_TYPE_UNSPECIFIED;

  /**
   * Device inventory identifier.
   * Takes different meanings depending on the device and operating system.
   * For macOS devices it is the device serial number.
   * Required.
   *
   * @generated from field: string asset_tag = 4;
   */
  assetTag = "";

  /**
   * Create time.
   * System managed.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 5;
   */
  createTime?: Timestamp;

  /**
   * Last update time.
   * System managed.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 6;
   */
  updateTime?: Timestamp;

  /**
   * Enrollment token for the device.
   * Only present in situations where device creation and enrollment are rolled
   * into a single operation.
   * Transient.
   *
   * @generated from field: teleport.devicetrust.v1.DeviceEnrollToken enroll_token = 7;
   */
  enrollToken?: DeviceEnrollToken;

  /**
   * Enrollment status of the device.
   * May be changed to DEVICE_ENROLL_STATUS_NOT_ENROLLED at any time to
   * forcefully unenroll a device (server-side only).
   * System managed.
   *
   * @generated from field: teleport.devicetrust.v1.DeviceEnrollStatus enroll_status = 8;
   */
  enrollStatus = DeviceEnrollStatus.UNSPECIFIED;

  /**
   * Currently enrolled device credential.
   * Manually unenrolling a device clears the credential.
   * System managed.
   *
   * @generated from field: teleport.devicetrust.v1.DeviceCredential credential = 9;
   */
  credential?: DeviceCredential;

  /**
   * Device data collected during enrollment and device authentication.
   * Enrollment data is always present, while authentication data is capped at N
   * most recent events.
   * Only present in certain read modes.
   * Transient.
   *
   * @generated from field: repeated teleport.devicetrust.v1.DeviceCollectedData collected_data = 10;
   */
  collectedData: DeviceCollectedData[] = [];

  /**
   * Source of the device.
   * Devices managed directly via Teleport (`tctl`, Web UI, etc) have no
   * assigned source.
   *
   * @generated from field: teleport.devicetrust.v1.DeviceSource source = 11;
   */
  source?: DeviceSource;

  /**
   * Device information acquired from an external source.
   *
   * @generated from field: teleport.devicetrust.v1.DeviceProfile profile = 12;
   */
  profile?: DeviceProfile;

  /**
   * Device owner.
   * Usually the owner is the same user who performed the enrollment ceremony.
   * May be empty for legacy devices (Teleport v13.2 and older).
   * Manually unenrolling a device clears the owner.
   * System-managed.
   *
   * @generated from field: string owner = 13;
   */
  owner = "";

  constructor(data?: PartialMessage<Device>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.devicetrust.v1.Device";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "os_type", kind: "enum", T: proto3.getEnumType(OSType) },
    { no: 4, name: "asset_tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "create_time", kind: "message", T: Timestamp },
    { no: 6, name: "update_time", kind: "message", T: Timestamp },
    { no: 7, name: "enroll_token", kind: "message", T: DeviceEnrollToken },
    { no: 8, name: "enroll_status", kind: "enum", T: proto3.getEnumType(DeviceEnrollStatus) },
    { no: 9, name: "credential", kind: "message", T: DeviceCredential },
    { no: 10, name: "collected_data", kind: "message", T: DeviceCollectedData, repeated: true },
    { no: 11, name: "source", kind: "message", T: DeviceSource },
    { no: 12, name: "profile", kind: "message", T: DeviceProfile },
    { no: 13, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Device {
    return new Device().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Device {
    return new Device().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Device {
    return new Device().fromJsonString(jsonString, options);
  }

  static equals(a: Device | PlainMessage<Device> | undefined, b: Device | PlainMessage<Device> | undefined): boolean {
    return proto3.util.equals(Device, a, b);
  }
}

/**
 * DeviceCredential represents the current enrolled public key of a device.
 *
 * @generated from message teleport.devicetrust.v1.DeviceCredential
 */
export class DeviceCredential extends Message<DeviceCredential> {
  /**
   * Unique identifier of the credential, defined client-side.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Device public key marshaled as a PKIX, ASN.1 DER. Used only on MacOS.
   *
   * @generated from field: bytes public_key_der = 2;
   */
  publicKeyDer = new Uint8Array(0);

  /**
   * The degree to which the device credential is attested.
   *
   * @generated from field: teleport.devicetrust.v1.DeviceAttestationType device_attestation_type = 3;
   */
  deviceAttestationType = DeviceAttestationType.UNSPECIFIED;

  /**
   * For TPM devices, the serial number of the TPM endorsement certificate.
   *
   * @generated from field: string tpm_ekcert_serial = 4;
   */
  tpmEkcertSerial = "";

  /**
   * For TPM devices, the encoded TPMT_PUBLIC structure containing the
   * attestation public key and signing parameters.
   *
   * @generated from field: bytes tpm_ak_public = 5;
   */
  tpmAkPublic = new Uint8Array(0);

  constructor(data?: PartialMessage<DeviceCredential>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.devicetrust.v1.DeviceCredential";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "public_key_der", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "device_attestation_type", kind: "enum", T: proto3.getEnumType(DeviceAttestationType) },
    { no: 4, name: "tpm_ekcert_serial", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "tpm_ak_public", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceCredential {
    return new DeviceCredential().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceCredential {
    return new DeviceCredential().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceCredential {
    return new DeviceCredential().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceCredential | PlainMessage<DeviceCredential> | undefined, b: DeviceCredential | PlainMessage<DeviceCredential> | undefined): boolean {
    return proto3.util.equals(DeviceCredential, a, b);
  }
}

