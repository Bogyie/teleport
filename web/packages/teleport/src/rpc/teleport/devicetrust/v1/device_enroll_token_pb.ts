// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/devicetrust/v1/device_enroll_token.proto (package teleport.devicetrust.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * DeviceEnrollToken encapsulates the permission, granted by a device
 * administrator to an user, to enroll a device.
 * An enrolled device allows its user to perform device-aware actions.
 *
 * @generated from message teleport.devicetrust.v1.DeviceEnrollToken
 */
export class DeviceEnrollToken extends Message<DeviceEnrollToken> {
  /**
   * Opaque enrollement token required by the EnrollDevice RPC.
   *
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * Expiration time for the token.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 2;
   */
  expireTime?: Timestamp;

  constructor(data?: PartialMessage<DeviceEnrollToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.devicetrust.v1.DeviceEnrollToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expire_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceEnrollToken {
    return new DeviceEnrollToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceEnrollToken {
    return new DeviceEnrollToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceEnrollToken {
    return new DeviceEnrollToken().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceEnrollToken | PlainMessage<DeviceEnrollToken> | undefined, b: DeviceEnrollToken | PlainMessage<DeviceEnrollToken> | undefined): boolean {
    return proto3.util.equals(DeviceEnrollToken, a, b);
  }
}

