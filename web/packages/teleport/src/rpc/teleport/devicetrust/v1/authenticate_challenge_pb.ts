// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/devicetrust/v1/authenticate_challenge.proto (package teleport.devicetrust.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { TPMPlatformParameters } from "./tpm_pb";
import { file_teleport_devicetrust_v1_tpm } from "./tpm_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/devicetrust/v1/authenticate_challenge.proto.
 */
export const file_teleport_devicetrust_v1_authenticate_challenge: GenFile = /*@__PURE__*/
  fileDesc("CjR0ZWxlcG9ydC9kZXZpY2V0cnVzdC92MS9hdXRoZW50aWNhdGVfY2hhbGxlbmdlLnByb3RvEhd0ZWxlcG9ydC5kZXZpY2V0cnVzdC52MSIwChtBdXRoZW50aWNhdGVEZXZpY2VDaGFsbGVuZ2USEQoJY2hhbGxlbmdlGAEgASgMIk8KI0F1dGhlbnRpY2F0ZURldmljZUNoYWxsZW5nZVJlc3BvbnNlEhEKCXNpZ25hdHVyZRgBIAEoDBIVCg1zc2hfc2lnbmF0dXJlGAIgASgMIjsKHlRQTUF1dGhlbnRpY2F0ZURldmljZUNoYWxsZW5nZRIZChFhdHRlc3RhdGlvbl9ub25jZRgBIAEoDCKMAQomVFBNQXV0aGVudGljYXRlRGV2aWNlQ2hhbGxlbmdlUmVzcG9uc2USSwoTcGxhdGZvcm1fcGFyYW1ldGVycxgBIAEoCzIuLnRlbGVwb3J0LmRldmljZXRydXN0LnYxLlRQTVBsYXRmb3JtUGFyYW1ldGVycxIVCg1zc2hfc2lnbmF0dXJlGAIgASgMQlpaWGdpdGh1Yi5jb20vZ3Jhdml0YXRpb25hbC90ZWxlcG9ydC9hcGkvZ2VuL3Byb3RvL2dvL3RlbGVwb3J0L2RldmljZXRydXN0L3YxO2RldmljZXRydXN0djFiBnByb3RvMw", [file_teleport_devicetrust_v1_tpm]);

/**
 * AuthenticateDeviceChallenge carries the authentication challenge.
 *
 * @generated from message teleport.devicetrust.v1.AuthenticateDeviceChallenge
 */
export type AuthenticateDeviceChallenge = Message<"teleport.devicetrust.v1.AuthenticateDeviceChallenge"> & {
  /**
   * Randomly-generated, opaque challenge to be signed using the device key.
   *
   * @generated from field: bytes challenge = 1;
   */
  challenge: Uint8Array;
};

/**
 * Describes the message teleport.devicetrust.v1.AuthenticateDeviceChallenge.
 * Use `create(AuthenticateDeviceChallengeSchema)` to create a new message.
 */
export const AuthenticateDeviceChallengeSchema: GenMessage<AuthenticateDeviceChallenge> = /*@__PURE__*/
  messageDesc(file_teleport_devicetrust_v1_authenticate_challenge, 0);

/**
 * AuthenticateDeviceChallengeResponse carries the authentication challenge
 * response.
 *
 * @generated from message teleport.devicetrust.v1.AuthenticateDeviceChallengeResponse
 */
export type AuthenticateDeviceChallengeResponse = Message<"teleport.devicetrust.v1.AuthenticateDeviceChallengeResponse"> & {
  /**
   * Signature over the challenge, using the device key.
   *
   * @generated from field: bytes signature = 1;
   */
  signature: Uint8Array;

  /**
   * Signature over the challenge, using the SSH key. This is required when the
   * SSH and TLS public keys do not match, to prove ownership of the private key
   * associated with the SSH certificate being augmented.
   *
   * @generated from field: bytes ssh_signature = 2;
   */
  sshSignature: Uint8Array;
};

/**
 * Describes the message teleport.devicetrust.v1.AuthenticateDeviceChallengeResponse.
 * Use `create(AuthenticateDeviceChallengeResponseSchema)` to create a new message.
 */
export const AuthenticateDeviceChallengeResponseSchema: GenMessage<AuthenticateDeviceChallengeResponse> = /*@__PURE__*/
  messageDesc(file_teleport_devicetrust_v1_authenticate_challenge, 1);

/**
 * TPMAuthenticateDeviceChallenge carries the authentication challenge
 * specific to TPMs.
 *
 * @generated from message teleport.devicetrust.v1.TPMAuthenticateDeviceChallenge
 */
export type TPMAuthenticateDeviceChallenge = Message<"teleport.devicetrust.v1.TPMAuthenticateDeviceChallenge"> & {
  /**
   * Randomly-generated nonce to be used during platform attestation by the
   * TPM.
   *
   * @generated from field: bytes attestation_nonce = 1;
   */
  attestationNonce: Uint8Array;
};

/**
 * Describes the message teleport.devicetrust.v1.TPMAuthenticateDeviceChallenge.
 * Use `create(TPMAuthenticateDeviceChallengeSchema)` to create a new message.
 */
export const TPMAuthenticateDeviceChallengeSchema: GenMessage<TPMAuthenticateDeviceChallenge> = /*@__PURE__*/
  messageDesc(file_teleport_devicetrust_v1_authenticate_challenge, 2);

/**
 * TPMAuthenticateDeviceChallengeResponse carries the authentication challenge
 * response specific to TPMs.
 *
 * @generated from message teleport.devicetrust.v1.TPMAuthenticateDeviceChallengeResponse
 */
export type TPMAuthenticateDeviceChallengeResponse = Message<"teleport.devicetrust.v1.TPMAuthenticateDeviceChallengeResponse"> & {
  /**
   * The result of the client's platform attestation with the nonce provided
   * in `TPMAuthenticateDeviceChallenge`.
   *
   * @generated from field: teleport.devicetrust.v1.TPMPlatformParameters platform_parameters = 1;
   */
  platformParameters?: TPMPlatformParameters;

  /**
   * Signature over the attestation_nonce, using the SSH key. This is required
   * when the SSH and TLS public keys do not match, to prove ownership of the
   * private key associated with the SSH certificate being augmented.
   *
   * @generated from field: bytes ssh_signature = 2;
   */
  sshSignature: Uint8Array;
};

/**
 * Describes the message teleport.devicetrust.v1.TPMAuthenticateDeviceChallengeResponse.
 * Use `create(TPMAuthenticateDeviceChallengeResponseSchema)` to create a new message.
 */
export const TPMAuthenticateDeviceChallengeResponseSchema: GenMessage<TPMAuthenticateDeviceChallengeResponse> = /*@__PURE__*/
  messageDesc(file_teleport_devicetrust_v1_authenticate_challenge, 3);

