// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/externalauditstorage/v1/externalauditstorage_service.proto (package teleport.externalauditstorage.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ExternalAuditStorage } from "./externalauditstorage_pb.js";

/**
 * GetDraftExternalAuditStorageRequest is a request to get the draft external
 * audit storage configuration.
 *
 * @generated from message teleport.externalauditstorage.v1.GetDraftExternalAuditStorageRequest
 */
export class GetDraftExternalAuditStorageRequest extends Message<GetDraftExternalAuditStorageRequest> {
  constructor(data?: PartialMessage<GetDraftExternalAuditStorageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.GetDraftExternalAuditStorageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDraftExternalAuditStorageRequest {
    return new GetDraftExternalAuditStorageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDraftExternalAuditStorageRequest {
    return new GetDraftExternalAuditStorageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDraftExternalAuditStorageRequest {
    return new GetDraftExternalAuditStorageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDraftExternalAuditStorageRequest | PlainMessage<GetDraftExternalAuditStorageRequest> | undefined, b: GetDraftExternalAuditStorageRequest | PlainMessage<GetDraftExternalAuditStorageRequest> | undefined): boolean {
    return proto3.util.equals(GetDraftExternalAuditStorageRequest, a, b);
  }
}

/**
 * GetDraftExternalAuditStorageResponse is a response to getting the draft
 * external audit storage configuration.
 *
 * @generated from message teleport.externalauditstorage.v1.GetDraftExternalAuditStorageResponse
 */
export class GetDraftExternalAuditStorageResponse extends Message<GetDraftExternalAuditStorageResponse> {
  /**
   * ExternalAuditStorage is the current draft ExternalAuditStorage.
   *
   * @generated from field: teleport.externalauditstorage.v1.ExternalAuditStorage external_audit_storage = 1;
   */
  externalAuditStorage?: ExternalAuditStorage;

  constructor(data?: PartialMessage<GetDraftExternalAuditStorageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.GetDraftExternalAuditStorageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "external_audit_storage", kind: "message", T: ExternalAuditStorage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDraftExternalAuditStorageResponse {
    return new GetDraftExternalAuditStorageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDraftExternalAuditStorageResponse {
    return new GetDraftExternalAuditStorageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDraftExternalAuditStorageResponse {
    return new GetDraftExternalAuditStorageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDraftExternalAuditStorageResponse | PlainMessage<GetDraftExternalAuditStorageResponse> | undefined, b: GetDraftExternalAuditStorageResponse | PlainMessage<GetDraftExternalAuditStorageResponse> | undefined): boolean {
    return proto3.util.equals(GetDraftExternalAuditStorageResponse, a, b);
  }
}

/**
 * CreateDraftExternalAuditStorageRequest is a request to create the provided
 * draft external audit storage configuration if one does not already exist.
 *
 * @generated from message teleport.externalauditstorage.v1.CreateDraftExternalAuditStorageRequest
 */
export class CreateDraftExternalAuditStorageRequest extends Message<CreateDraftExternalAuditStorageRequest> {
  /**
   * ExternalAuditStorage is the ExternalAuditStorage to be created.
   *
   * @generated from field: teleport.externalauditstorage.v1.ExternalAuditStorage external_audit_storage = 1;
   */
  externalAuditStorage?: ExternalAuditStorage;

  constructor(data?: PartialMessage<CreateDraftExternalAuditStorageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.CreateDraftExternalAuditStorageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "external_audit_storage", kind: "message", T: ExternalAuditStorage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDraftExternalAuditStorageRequest {
    return new CreateDraftExternalAuditStorageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDraftExternalAuditStorageRequest {
    return new CreateDraftExternalAuditStorageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDraftExternalAuditStorageRequest {
    return new CreateDraftExternalAuditStorageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDraftExternalAuditStorageRequest | PlainMessage<CreateDraftExternalAuditStorageRequest> | undefined, b: CreateDraftExternalAuditStorageRequest | PlainMessage<CreateDraftExternalAuditStorageRequest> | undefined): boolean {
    return proto3.util.equals(CreateDraftExternalAuditStorageRequest, a, b);
  }
}

/**
 * CreateDraftExternalAuditStorageResponse is a response to creating the draft
 * external audit storage configuration.
 *
 * @generated from message teleport.externalauditstorage.v1.CreateDraftExternalAuditStorageResponse
 */
export class CreateDraftExternalAuditStorageResponse extends Message<CreateDraftExternalAuditStorageResponse> {
  /**
   * ExternalAuditStorage is the ExternalAuditStorage that was created.
   *
   * @generated from field: teleport.externalauditstorage.v1.ExternalAuditStorage external_audit_storage = 1;
   */
  externalAuditStorage?: ExternalAuditStorage;

  constructor(data?: PartialMessage<CreateDraftExternalAuditStorageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.CreateDraftExternalAuditStorageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "external_audit_storage", kind: "message", T: ExternalAuditStorage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDraftExternalAuditStorageResponse {
    return new CreateDraftExternalAuditStorageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDraftExternalAuditStorageResponse {
    return new CreateDraftExternalAuditStorageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDraftExternalAuditStorageResponse {
    return new CreateDraftExternalAuditStorageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDraftExternalAuditStorageResponse | PlainMessage<CreateDraftExternalAuditStorageResponse> | undefined, b: CreateDraftExternalAuditStorageResponse | PlainMessage<CreateDraftExternalAuditStorageResponse> | undefined): boolean {
    return proto3.util.equals(CreateDraftExternalAuditStorageResponse, a, b);
  }
}

/**
 * UpsertDraftExternalAuditStorageRequest is a request to upsert the provided
 * draft external audit storage configuration.
 *
 * @generated from message teleport.externalauditstorage.v1.UpsertDraftExternalAuditStorageRequest
 */
export class UpsertDraftExternalAuditStorageRequest extends Message<UpsertDraftExternalAuditStorageRequest> {
  /**
   * ExternalAuditStorage is the ExternalAuditStorage to be upserted.
   *
   * @generated from field: teleport.externalauditstorage.v1.ExternalAuditStorage external_audit_storage = 1;
   */
  externalAuditStorage?: ExternalAuditStorage;

  constructor(data?: PartialMessage<UpsertDraftExternalAuditStorageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.UpsertDraftExternalAuditStorageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "external_audit_storage", kind: "message", T: ExternalAuditStorage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertDraftExternalAuditStorageRequest {
    return new UpsertDraftExternalAuditStorageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertDraftExternalAuditStorageRequest {
    return new UpsertDraftExternalAuditStorageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertDraftExternalAuditStorageRequest {
    return new UpsertDraftExternalAuditStorageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertDraftExternalAuditStorageRequest | PlainMessage<UpsertDraftExternalAuditStorageRequest> | undefined, b: UpsertDraftExternalAuditStorageRequest | PlainMessage<UpsertDraftExternalAuditStorageRequest> | undefined): boolean {
    return proto3.util.equals(UpsertDraftExternalAuditStorageRequest, a, b);
  }
}

/**
 * UpsertDraftExternalAuditStorageResponse is a response to upserting the draft
 * external audit storage configuration.
 *
 * @generated from message teleport.externalauditstorage.v1.UpsertDraftExternalAuditStorageResponse
 */
export class UpsertDraftExternalAuditStorageResponse extends Message<UpsertDraftExternalAuditStorageResponse> {
  /**
   * ExternalAuditStorage is the ExternalAuditStorage that was upserted.
   *
   * @generated from field: teleport.externalauditstorage.v1.ExternalAuditStorage external_audit_storage = 1;
   */
  externalAuditStorage?: ExternalAuditStorage;

  constructor(data?: PartialMessage<UpsertDraftExternalAuditStorageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.UpsertDraftExternalAuditStorageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "external_audit_storage", kind: "message", T: ExternalAuditStorage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertDraftExternalAuditStorageResponse {
    return new UpsertDraftExternalAuditStorageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertDraftExternalAuditStorageResponse {
    return new UpsertDraftExternalAuditStorageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertDraftExternalAuditStorageResponse {
    return new UpsertDraftExternalAuditStorageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertDraftExternalAuditStorageResponse | PlainMessage<UpsertDraftExternalAuditStorageResponse> | undefined, b: UpsertDraftExternalAuditStorageResponse | PlainMessage<UpsertDraftExternalAuditStorageResponse> | undefined): boolean {
    return proto3.util.equals(UpsertDraftExternalAuditStorageResponse, a, b);
  }
}

/**
 * DeleteDraftExternalAuditStorageRequest is a request to delete a draft External
 * Audit Storage configuration.
 *
 * @generated from message teleport.externalauditstorage.v1.DeleteDraftExternalAuditStorageRequest
 */
export class DeleteDraftExternalAuditStorageRequest extends Message<DeleteDraftExternalAuditStorageRequest> {
  constructor(data?: PartialMessage<DeleteDraftExternalAuditStorageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.DeleteDraftExternalAuditStorageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDraftExternalAuditStorageRequest {
    return new DeleteDraftExternalAuditStorageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDraftExternalAuditStorageRequest {
    return new DeleteDraftExternalAuditStorageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDraftExternalAuditStorageRequest {
    return new DeleteDraftExternalAuditStorageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDraftExternalAuditStorageRequest | PlainMessage<DeleteDraftExternalAuditStorageRequest> | undefined, b: DeleteDraftExternalAuditStorageRequest | PlainMessage<DeleteDraftExternalAuditStorageRequest> | undefined): boolean {
    return proto3.util.equals(DeleteDraftExternalAuditStorageRequest, a, b);
  }
}

/**
 * PromoteToClusterExternalAuditStorageRequest is a request to promote the current
 * draft to cluster external audit storage.
 *
 * @generated from message teleport.externalauditstorage.v1.PromoteToClusterExternalAuditStorageRequest
 */
export class PromoteToClusterExternalAuditStorageRequest extends Message<PromoteToClusterExternalAuditStorageRequest> {
  constructor(data?: PartialMessage<PromoteToClusterExternalAuditStorageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.PromoteToClusterExternalAuditStorageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PromoteToClusterExternalAuditStorageRequest {
    return new PromoteToClusterExternalAuditStorageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PromoteToClusterExternalAuditStorageRequest {
    return new PromoteToClusterExternalAuditStorageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PromoteToClusterExternalAuditStorageRequest {
    return new PromoteToClusterExternalAuditStorageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PromoteToClusterExternalAuditStorageRequest | PlainMessage<PromoteToClusterExternalAuditStorageRequest> | undefined, b: PromoteToClusterExternalAuditStorageRequest | PlainMessage<PromoteToClusterExternalAuditStorageRequest> | undefined): boolean {
    return proto3.util.equals(PromoteToClusterExternalAuditStorageRequest, a, b);
  }
}

/**
 * PromoteToClusterExternalAuditStorageResponse is a response of promote the
 * current draft to cluster external audit storage.
 *
 * @generated from message teleport.externalauditstorage.v1.PromoteToClusterExternalAuditStorageResponse
 */
export class PromoteToClusterExternalAuditStorageResponse extends Message<PromoteToClusterExternalAuditStorageResponse> {
  /**
   * ClusterExternalAuditStorage is the ExternalAuditStorage will be used in cluster.
   *
   * @generated from field: teleport.externalauditstorage.v1.ExternalAuditStorage cluster_external_audit_storage = 1;
   */
  clusterExternalAuditStorage?: ExternalAuditStorage;

  constructor(data?: PartialMessage<PromoteToClusterExternalAuditStorageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.PromoteToClusterExternalAuditStorageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_external_audit_storage", kind: "message", T: ExternalAuditStorage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PromoteToClusterExternalAuditStorageResponse {
    return new PromoteToClusterExternalAuditStorageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PromoteToClusterExternalAuditStorageResponse {
    return new PromoteToClusterExternalAuditStorageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PromoteToClusterExternalAuditStorageResponse {
    return new PromoteToClusterExternalAuditStorageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PromoteToClusterExternalAuditStorageResponse | PlainMessage<PromoteToClusterExternalAuditStorageResponse> | undefined, b: PromoteToClusterExternalAuditStorageResponse | PlainMessage<PromoteToClusterExternalAuditStorageResponse> | undefined): boolean {
    return proto3.util.equals(PromoteToClusterExternalAuditStorageResponse, a, b);
  }
}

/**
 * GetClusterExternalAuditStorageRequest is a request to get an cluster External
 * Audit Storage configuration.
 *
 * @generated from message teleport.externalauditstorage.v1.GetClusterExternalAuditStorageRequest
 */
export class GetClusterExternalAuditStorageRequest extends Message<GetClusterExternalAuditStorageRequest> {
  constructor(data?: PartialMessage<GetClusterExternalAuditStorageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.GetClusterExternalAuditStorageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterExternalAuditStorageRequest {
    return new GetClusterExternalAuditStorageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterExternalAuditStorageRequest {
    return new GetClusterExternalAuditStorageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterExternalAuditStorageRequest {
    return new GetClusterExternalAuditStorageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterExternalAuditStorageRequest | PlainMessage<GetClusterExternalAuditStorageRequest> | undefined, b: GetClusterExternalAuditStorageRequest | PlainMessage<GetClusterExternalAuditStorageRequest> | undefined): boolean {
    return proto3.util.equals(GetClusterExternalAuditStorageRequest, a, b);
  }
}

/**
 * GetClusterExternalAuditStorageResponse is a response of getting an cluster
 * external audit storage configuration.
 *
 * @generated from message teleport.externalauditstorage.v1.GetClusterExternalAuditStorageResponse
 */
export class GetClusterExternalAuditStorageResponse extends Message<GetClusterExternalAuditStorageResponse> {
  /**
   * ClusterExternalAuditStorage contains name of external audit storage.
   *
   * @generated from field: teleport.externalauditstorage.v1.ExternalAuditStorage cluster_external_audit_storage = 1;
   */
  clusterExternalAuditStorage?: ExternalAuditStorage;

  constructor(data?: PartialMessage<GetClusterExternalAuditStorageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.GetClusterExternalAuditStorageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_external_audit_storage", kind: "message", T: ExternalAuditStorage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterExternalAuditStorageResponse {
    return new GetClusterExternalAuditStorageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterExternalAuditStorageResponse {
    return new GetClusterExternalAuditStorageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterExternalAuditStorageResponse {
    return new GetClusterExternalAuditStorageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterExternalAuditStorageResponse | PlainMessage<GetClusterExternalAuditStorageResponse> | undefined, b: GetClusterExternalAuditStorageResponse | PlainMessage<GetClusterExternalAuditStorageResponse> | undefined): boolean {
    return proto3.util.equals(GetClusterExternalAuditStorageResponse, a, b);
  }
}

/**
 * DisableClusterExternalAuditStorageRequest is a request for disabling cluster
 * external audit storage.
 *
 * @generated from message teleport.externalauditstorage.v1.DisableClusterExternalAuditStorageRequest
 */
export class DisableClusterExternalAuditStorageRequest extends Message<DisableClusterExternalAuditStorageRequest> {
  constructor(data?: PartialMessage<DisableClusterExternalAuditStorageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.DisableClusterExternalAuditStorageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisableClusterExternalAuditStorageRequest {
    return new DisableClusterExternalAuditStorageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisableClusterExternalAuditStorageRequest {
    return new DisableClusterExternalAuditStorageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisableClusterExternalAuditStorageRequest {
    return new DisableClusterExternalAuditStorageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DisableClusterExternalAuditStorageRequest | PlainMessage<DisableClusterExternalAuditStorageRequest> | undefined, b: DisableClusterExternalAuditStorageRequest | PlainMessage<DisableClusterExternalAuditStorageRequest> | undefined): boolean {
    return proto3.util.equals(DisableClusterExternalAuditStorageRequest, a, b);
  }
}

/**
 * GenerateDraftExternalAuditStorageRequest is a request for
 * GenerateDraftExternalAuditStorage.
 *
 * @generated from message teleport.externalauditstorage.v1.GenerateDraftExternalAuditStorageRequest
 */
export class GenerateDraftExternalAuditStorageRequest extends Message<GenerateDraftExternalAuditStorageRequest> {
  /**
   * IntegrationName is name of existing AWS OIDC integration used to get AWS
   * credentials.
   *
   * @generated from field: string integration_name = 1;
   */
  integrationName = "";

  /**
   * Region is the AWS region where infrastructure is hosted.
   *
   * @generated from field: string region = 2;
   */
  region = "";

  constructor(data?: PartialMessage<GenerateDraftExternalAuditStorageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.GenerateDraftExternalAuditStorageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateDraftExternalAuditStorageRequest {
    return new GenerateDraftExternalAuditStorageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateDraftExternalAuditStorageRequest {
    return new GenerateDraftExternalAuditStorageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateDraftExternalAuditStorageRequest {
    return new GenerateDraftExternalAuditStorageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateDraftExternalAuditStorageRequest | PlainMessage<GenerateDraftExternalAuditStorageRequest> | undefined, b: GenerateDraftExternalAuditStorageRequest | PlainMessage<GenerateDraftExternalAuditStorageRequest> | undefined): boolean {
    return proto3.util.equals(GenerateDraftExternalAuditStorageRequest, a, b);
  }
}

/**
 * GenerateDraftExternalAuditStorageResponse is a response for
 * GenerateDraftExternalAuditStorage.
 *
 * @generated from message teleport.externalauditstorage.v1.GenerateDraftExternalAuditStorageResponse
 */
export class GenerateDraftExternalAuditStorageResponse extends Message<GenerateDraftExternalAuditStorageResponse> {
  /**
   * ExternalAuditStorage is the generated ExternalAuditStorage that has been set as
   * the current draft.
   *
   * @generated from field: teleport.externalauditstorage.v1.ExternalAuditStorage external_audit_storage = 1;
   */
  externalAuditStorage?: ExternalAuditStorage;

  constructor(data?: PartialMessage<GenerateDraftExternalAuditStorageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.GenerateDraftExternalAuditStorageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "external_audit_storage", kind: "message", T: ExternalAuditStorage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateDraftExternalAuditStorageResponse {
    return new GenerateDraftExternalAuditStorageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateDraftExternalAuditStorageResponse {
    return new GenerateDraftExternalAuditStorageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateDraftExternalAuditStorageResponse {
    return new GenerateDraftExternalAuditStorageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateDraftExternalAuditStorageResponse | PlainMessage<GenerateDraftExternalAuditStorageResponse> | undefined, b: GenerateDraftExternalAuditStorageResponse | PlainMessage<GenerateDraftExternalAuditStorageResponse> | undefined): boolean {
    return proto3.util.equals(GenerateDraftExternalAuditStorageResponse, a, b);
  }
}

/**
 * TestDraftExternalAuditStorageBucketsRequest is a request to test the connection of
 * the current draft external audit storage configuration buckets.
 *
 * @generated from message teleport.externalauditstorage.v1.TestDraftExternalAuditStorageBucketsRequest
 */
export class TestDraftExternalAuditStorageBucketsRequest extends Message<TestDraftExternalAuditStorageBucketsRequest> {
  constructor(data?: PartialMessage<TestDraftExternalAuditStorageBucketsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.TestDraftExternalAuditStorageBucketsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestDraftExternalAuditStorageBucketsRequest {
    return new TestDraftExternalAuditStorageBucketsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestDraftExternalAuditStorageBucketsRequest {
    return new TestDraftExternalAuditStorageBucketsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestDraftExternalAuditStorageBucketsRequest {
    return new TestDraftExternalAuditStorageBucketsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TestDraftExternalAuditStorageBucketsRequest | PlainMessage<TestDraftExternalAuditStorageBucketsRequest> | undefined, b: TestDraftExternalAuditStorageBucketsRequest | PlainMessage<TestDraftExternalAuditStorageBucketsRequest> | undefined): boolean {
    return proto3.util.equals(TestDraftExternalAuditStorageBucketsRequest, a, b);
  }
}

/**
 * TestDraftExternalAuditStorageBucketsResponse is a response from testing the connection
 * of the current draft external audit storage configuration buckets.
 *
 * @generated from message teleport.externalauditstorage.v1.TestDraftExternalAuditStorageBucketsResponse
 */
export class TestDraftExternalAuditStorageBucketsResponse extends Message<TestDraftExternalAuditStorageBucketsResponse> {
  constructor(data?: PartialMessage<TestDraftExternalAuditStorageBucketsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.TestDraftExternalAuditStorageBucketsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestDraftExternalAuditStorageBucketsResponse {
    return new TestDraftExternalAuditStorageBucketsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestDraftExternalAuditStorageBucketsResponse {
    return new TestDraftExternalAuditStorageBucketsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestDraftExternalAuditStorageBucketsResponse {
    return new TestDraftExternalAuditStorageBucketsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TestDraftExternalAuditStorageBucketsResponse | PlainMessage<TestDraftExternalAuditStorageBucketsResponse> | undefined, b: TestDraftExternalAuditStorageBucketsResponse | PlainMessage<TestDraftExternalAuditStorageBucketsResponse> | undefined): boolean {
    return proto3.util.equals(TestDraftExternalAuditStorageBucketsResponse, a, b);
  }
}

/**
 * TestDraftExternalAuditStorageGlueRequest is a request to test the connection of
 * the current draft external audit storage configuration glue table.
 *
 * @generated from message teleport.externalauditstorage.v1.TestDraftExternalAuditStorageGlueRequest
 */
export class TestDraftExternalAuditStorageGlueRequest extends Message<TestDraftExternalAuditStorageGlueRequest> {
  constructor(data?: PartialMessage<TestDraftExternalAuditStorageGlueRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.TestDraftExternalAuditStorageGlueRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestDraftExternalAuditStorageGlueRequest {
    return new TestDraftExternalAuditStorageGlueRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestDraftExternalAuditStorageGlueRequest {
    return new TestDraftExternalAuditStorageGlueRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestDraftExternalAuditStorageGlueRequest {
    return new TestDraftExternalAuditStorageGlueRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TestDraftExternalAuditStorageGlueRequest | PlainMessage<TestDraftExternalAuditStorageGlueRequest> | undefined, b: TestDraftExternalAuditStorageGlueRequest | PlainMessage<TestDraftExternalAuditStorageGlueRequest> | undefined): boolean {
    return proto3.util.equals(TestDraftExternalAuditStorageGlueRequest, a, b);
  }
}

/**
 * TestDraftExternalAuditStorageGlueResponse is a response from testing the connection
 * of the current draft external audit storage configuration glue table.
 *
 * @generated from message teleport.externalauditstorage.v1.TestDraftExternalAuditStorageGlueResponse
 */
export class TestDraftExternalAuditStorageGlueResponse extends Message<TestDraftExternalAuditStorageGlueResponse> {
  constructor(data?: PartialMessage<TestDraftExternalAuditStorageGlueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.TestDraftExternalAuditStorageGlueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestDraftExternalAuditStorageGlueResponse {
    return new TestDraftExternalAuditStorageGlueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestDraftExternalAuditStorageGlueResponse {
    return new TestDraftExternalAuditStorageGlueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestDraftExternalAuditStorageGlueResponse {
    return new TestDraftExternalAuditStorageGlueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TestDraftExternalAuditStorageGlueResponse | PlainMessage<TestDraftExternalAuditStorageGlueResponse> | undefined, b: TestDraftExternalAuditStorageGlueResponse | PlainMessage<TestDraftExternalAuditStorageGlueResponse> | undefined): boolean {
    return proto3.util.equals(TestDraftExternalAuditStorageGlueResponse, a, b);
  }
}

/**
 * TestDraftExternalAuditStorageAthenaRequest is a request to test the connection of
 * the current draft external audit storage configuration athena.
 *
 * @generated from message teleport.externalauditstorage.v1.TestDraftExternalAuditStorageAthenaRequest
 */
export class TestDraftExternalAuditStorageAthenaRequest extends Message<TestDraftExternalAuditStorageAthenaRequest> {
  constructor(data?: PartialMessage<TestDraftExternalAuditStorageAthenaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.TestDraftExternalAuditStorageAthenaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestDraftExternalAuditStorageAthenaRequest {
    return new TestDraftExternalAuditStorageAthenaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestDraftExternalAuditStorageAthenaRequest {
    return new TestDraftExternalAuditStorageAthenaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestDraftExternalAuditStorageAthenaRequest {
    return new TestDraftExternalAuditStorageAthenaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TestDraftExternalAuditStorageAthenaRequest | PlainMessage<TestDraftExternalAuditStorageAthenaRequest> | undefined, b: TestDraftExternalAuditStorageAthenaRequest | PlainMessage<TestDraftExternalAuditStorageAthenaRequest> | undefined): boolean {
    return proto3.util.equals(TestDraftExternalAuditStorageAthenaRequest, a, b);
  }
}

/**
 * TestDraftExternalAuditStorageAthenaResponse is a response from testing the connection
 * of the current draft external audit storage configuration athena.
 *
 * @generated from message teleport.externalauditstorage.v1.TestDraftExternalAuditStorageAthenaResponse
 */
export class TestDraftExternalAuditStorageAthenaResponse extends Message<TestDraftExternalAuditStorageAthenaResponse> {
  constructor(data?: PartialMessage<TestDraftExternalAuditStorageAthenaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.TestDraftExternalAuditStorageAthenaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestDraftExternalAuditStorageAthenaResponse {
    return new TestDraftExternalAuditStorageAthenaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestDraftExternalAuditStorageAthenaResponse {
    return new TestDraftExternalAuditStorageAthenaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestDraftExternalAuditStorageAthenaResponse {
    return new TestDraftExternalAuditStorageAthenaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TestDraftExternalAuditStorageAthenaResponse | PlainMessage<TestDraftExternalAuditStorageAthenaResponse> | undefined, b: TestDraftExternalAuditStorageAthenaResponse | PlainMessage<TestDraftExternalAuditStorageAthenaResponse> | undefined): boolean {
    return proto3.util.equals(TestDraftExternalAuditStorageAthenaResponse, a, b);
  }
}

