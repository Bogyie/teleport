// Copyright 2024 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts"
// @generated from file teleport/userprovisioning/v2/statichostuser_service.proto (package teleport.userprovisioning.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { CreateStaticHostUserRequest, DeleteStaticHostUserRequest, GetStaticHostUserRequest, ListStaticHostUsersRequest, ListStaticHostUsersResponse, UpdateStaticHostUserRequest, UpsertStaticHostUserRequest } from "./statichostuser_service_pb.js";
import { StaticHostUser } from "./statichostuser_pb.js";

/**
 * GetStaticHostUser retrieves a static host user resource by name.
 *
 * @generated from rpc teleport.userprovisioning.v2.StaticHostUsersService.GetStaticHostUser
 */
export const getStaticHostUser = {
  localName: "getStaticHostUser",
  name: "GetStaticHostUser",
  kind: MethodKind.Unary,
  I: GetStaticHostUserRequest,
  O: StaticHostUser,
  service: {
    typeName: "teleport.userprovisioning.v2.StaticHostUsersService"
  }
} as const;

/**
 * ListStaticHostUsers gets all existing static host users.
 *
 * @generated from rpc teleport.userprovisioning.v2.StaticHostUsersService.ListStaticHostUsers
 */
export const listStaticHostUsers = {
  localName: "listStaticHostUsers",
  name: "ListStaticHostUsers",
  kind: MethodKind.Unary,
  I: ListStaticHostUsersRequest,
  O: ListStaticHostUsersResponse,
  service: {
    typeName: "teleport.userprovisioning.v2.StaticHostUsersService"
  }
} as const;

/**
 * CreateStaticHostUser creates a static host user if one does not already exist.
 *
 * @generated from rpc teleport.userprovisioning.v2.StaticHostUsersService.CreateStaticHostUser
 */
export const createStaticHostUser = {
  localName: "createStaticHostUser",
  name: "CreateStaticHostUser",
  kind: MethodKind.Unary,
  I: CreateStaticHostUserRequest,
  O: StaticHostUser,
  service: {
    typeName: "teleport.userprovisioning.v2.StaticHostUsersService"
  }
} as const;

/**
 * UpdateStaticHostUser updates an existing static host user.
 *
 * @generated from rpc teleport.userprovisioning.v2.StaticHostUsersService.UpdateStaticHostUser
 */
export const updateStaticHostUser = {
  localName: "updateStaticHostUser",
  name: "UpdateStaticHostUser",
  kind: MethodKind.Unary,
  I: UpdateStaticHostUserRequest,
  O: StaticHostUser,
  service: {
    typeName: "teleport.userprovisioning.v2.StaticHostUsersService"
  }
} as const;

/**
 * UpsertStaticHostUser creates a new static host user or forcefully updates an existing static host user.
 *
 * @generated from rpc teleport.userprovisioning.v2.StaticHostUsersService.UpsertStaticHostUser
 */
export const upsertStaticHostUser = {
  localName: "upsertStaticHostUser",
  name: "UpsertStaticHostUser",
  kind: MethodKind.Unary,
  I: UpsertStaticHostUserRequest,
  O: StaticHostUser,
  service: {
    typeName: "teleport.userprovisioning.v2.StaticHostUsersService"
  }
} as const;

/**
 * DeleteStaticHostUser removes an existing static host user resource by name.
 *
 * @generated from rpc teleport.userprovisioning.v2.StaticHostUsersService.DeleteStaticHostUser
 */
export const deleteStaticHostUser = {
  localName: "deleteStaticHostUser",
  name: "DeleteStaticHostUser",
  kind: MethodKind.Unary,
  I: DeleteStaticHostUserRequest,
  O: Empty,
  service: {
    typeName: "teleport.userprovisioning.v2.StaticHostUsersService"
  }
} as const;
