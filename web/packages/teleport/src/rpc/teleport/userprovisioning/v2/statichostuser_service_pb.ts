// Copyright 2024 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/userprovisioning/v2/statichostuser_service.proto (package teleport.userprovisioning.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { StaticHostUser } from "./statichostuser_pb.js";

/**
 * Request for GetStaticHostUser.
 *
 * @generated from message teleport.userprovisioning.v2.GetStaticHostUserRequest
 */
export class GetStaticHostUserRequest extends Message<GetStaticHostUserRequest> {
  /**
   * Name of the user to retrieve, this take priority over current_user.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetStaticHostUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userprovisioning.v2.GetStaticHostUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStaticHostUserRequest {
    return new GetStaticHostUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStaticHostUserRequest {
    return new GetStaticHostUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStaticHostUserRequest {
    return new GetStaticHostUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStaticHostUserRequest | PlainMessage<GetStaticHostUserRequest> | undefined, b: GetStaticHostUserRequest | PlainMessage<GetStaticHostUserRequest> | undefined): boolean {
    return proto3.util.equals(GetStaticHostUserRequest, a, b);
  }
}

/**
 * Request for ListStaticHostUsers.
 *
 * Follows the pagination semantics of
 * https://cloud.google.com/apis/design/standard_methods#list.
 *
 * @generated from message teleport.userprovisioning.v2.ListStaticHostUsersRequest
 */
export class ListStaticHostUsersRequest extends Message<ListStaticHostUsersRequest> {
  /**
   * The maximum number of items to return.
   * The server may impose a different page size at its discretion.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * The next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListStaticHostUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userprovisioning.v2.ListStaticHostUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListStaticHostUsersRequest {
    return new ListStaticHostUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListStaticHostUsersRequest {
    return new ListStaticHostUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListStaticHostUsersRequest {
    return new ListStaticHostUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListStaticHostUsersRequest | PlainMessage<ListStaticHostUsersRequest> | undefined, b: ListStaticHostUsersRequest | PlainMessage<ListStaticHostUsersRequest> | undefined): boolean {
    return proto3.util.equals(ListStaticHostUsersRequest, a, b);
  }
}

/**
 * Response for ListStaticHostUsers.
 *
 * @generated from message teleport.userprovisioning.v2.ListStaticHostUsersResponse
 */
export class ListStaticHostUsersResponse extends Message<ListStaticHostUsersResponse> {
  /**
   * Static host users that matched the search.
   *
   * @generated from field: repeated teleport.userprovisioning.v2.StaticHostUser users = 1;
   */
  users: StaticHostUser[] = [];

  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListStaticHostUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userprovisioning.v2.ListStaticHostUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: StaticHostUser, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListStaticHostUsersResponse {
    return new ListStaticHostUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListStaticHostUsersResponse {
    return new ListStaticHostUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListStaticHostUsersResponse {
    return new ListStaticHostUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListStaticHostUsersResponse | PlainMessage<ListStaticHostUsersResponse> | undefined, b: ListStaticHostUsersResponse | PlainMessage<ListStaticHostUsersResponse> | undefined): boolean {
    return proto3.util.equals(ListStaticHostUsersResponse, a, b);
  }
}

/**
 * Request for CreateStaticHostUser.
 *
 * @generated from message teleport.userprovisioning.v2.CreateStaticHostUserRequest
 */
export class CreateStaticHostUserRequest extends Message<CreateStaticHostUserRequest> {
  /**
   * The static host user resource to create.
   *
   * @generated from field: teleport.userprovisioning.v2.StaticHostUser user = 1;
   */
  user?: StaticHostUser;

  constructor(data?: PartialMessage<CreateStaticHostUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userprovisioning.v2.CreateStaticHostUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: StaticHostUser },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateStaticHostUserRequest {
    return new CreateStaticHostUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateStaticHostUserRequest {
    return new CreateStaticHostUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateStaticHostUserRequest {
    return new CreateStaticHostUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateStaticHostUserRequest | PlainMessage<CreateStaticHostUserRequest> | undefined, b: CreateStaticHostUserRequest | PlainMessage<CreateStaticHostUserRequest> | undefined): boolean {
    return proto3.util.equals(CreateStaticHostUserRequest, a, b);
  }
}

/**
 * Request for UpdateStaticHostUser.
 *
 * @generated from message teleport.userprovisioning.v2.UpdateStaticHostUserRequest
 */
export class UpdateStaticHostUserRequest extends Message<UpdateStaticHostUserRequest> {
  /**
   * The static host user resource to update.
   *
   * @generated from field: teleport.userprovisioning.v2.StaticHostUser user = 2;
   */
  user?: StaticHostUser;

  constructor(data?: PartialMessage<UpdateStaticHostUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userprovisioning.v2.UpdateStaticHostUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "user", kind: "message", T: StaticHostUser },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateStaticHostUserRequest {
    return new UpdateStaticHostUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateStaticHostUserRequest {
    return new UpdateStaticHostUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateStaticHostUserRequest {
    return new UpdateStaticHostUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateStaticHostUserRequest | PlainMessage<UpdateStaticHostUserRequest> | undefined, b: UpdateStaticHostUserRequest | PlainMessage<UpdateStaticHostUserRequest> | undefined): boolean {
    return proto3.util.equals(UpdateStaticHostUserRequest, a, b);
  }
}

/**
 * Request for UpsertStaticHostUser.
 *
 * @generated from message teleport.userprovisioning.v2.UpsertStaticHostUserRequest
 */
export class UpsertStaticHostUserRequest extends Message<UpsertStaticHostUserRequest> {
  /**
   * The static host user resource to upsert.
   *
   * @generated from field: teleport.userprovisioning.v2.StaticHostUser user = 2;
   */
  user?: StaticHostUser;

  constructor(data?: PartialMessage<UpsertStaticHostUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userprovisioning.v2.UpsertStaticHostUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "user", kind: "message", T: StaticHostUser },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertStaticHostUserRequest {
    return new UpsertStaticHostUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertStaticHostUserRequest {
    return new UpsertStaticHostUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertStaticHostUserRequest {
    return new UpsertStaticHostUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertStaticHostUserRequest | PlainMessage<UpsertStaticHostUserRequest> | undefined, b: UpsertStaticHostUserRequest | PlainMessage<UpsertStaticHostUserRequest> | undefined): boolean {
    return proto3.util.equals(UpsertStaticHostUserRequest, a, b);
  }
}

/**
 * Request for DeleteStaticHostUser.
 *
 * @generated from message teleport.userprovisioning.v2.DeleteStaticHostUserRequest
 */
export class DeleteStaticHostUserRequest extends Message<DeleteStaticHostUserRequest> {
  /**
   * Name of the user resource to remove.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteStaticHostUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userprovisioning.v2.DeleteStaticHostUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteStaticHostUserRequest {
    return new DeleteStaticHostUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteStaticHostUserRequest {
    return new DeleteStaticHostUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteStaticHostUserRequest {
    return new DeleteStaticHostUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteStaticHostUserRequest | PlainMessage<DeleteStaticHostUserRequest> | undefined, b: DeleteStaticHostUserRequest | PlainMessage<DeleteStaticHostUserRequest> | undefined): boolean {
    return proto3.util.equals(DeleteStaticHostUserRequest, a, b);
  }
}

