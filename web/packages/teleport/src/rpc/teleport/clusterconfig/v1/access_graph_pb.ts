// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/clusterconfig/v1/access_graph.proto (package teleport.clusterconfig.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * AccessGraphConfig holds the information about the configured Access Graph service.
 *
 * @generated from message teleport.clusterconfig.v1.AccessGraphConfig
 */
export class AccessGraphConfig extends Message<AccessGraphConfig> {
  /**
   * enabled indicates if the Access Graph is enabled for the cluster.
   *
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  /**
   * address is the address of the access graph service. The address is in the
   * form of "host:port".
   *
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * ca is the PEM-encoded CA certificate of the access graph service.
   *
   * @generated from field: bytes ca = 3;
   */
  ca = new Uint8Array(0);

  /**
   * insecure is a flag that indicates whether the access graph service should
   * skip verifying the server's certificate chain and host name.
   *
   * @generated from field: bool insecure = 4;
   */
  insecure = false;

  /**
   * secrets_scan_config is used to configure the parameters for the secrets scanning functionality.
   *
   * @generated from field: teleport.clusterconfig.v1.AccessGraphSecretsScanConfiguration secrets_scan_config = 5;
   */
  secretsScanConfig?: AccessGraphSecretsScanConfiguration;

  constructor(data?: PartialMessage<AccessGraphConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.AccessGraphConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ca", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "insecure", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "secrets_scan_config", kind: "message", T: AccessGraphSecretsScanConfiguration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessGraphConfig {
    return new AccessGraphConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessGraphConfig {
    return new AccessGraphConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessGraphConfig {
    return new AccessGraphConfig().fromJsonString(jsonString, options);
  }

  static equals(a: AccessGraphConfig | PlainMessage<AccessGraphConfig> | undefined, b: AccessGraphConfig | PlainMessage<AccessGraphConfig> | undefined): boolean {
    return proto3.util.equals(AccessGraphConfig, a, b);
  }
}

/**
 * AccessGraphSecretsScanConfiguration controls the secrets scanning service parameters.
 *
 * @generated from message teleport.clusterconfig.v1.AccessGraphSecretsScanConfiguration
 */
export class AccessGraphSecretsScanConfiguration extends Message<AccessGraphSecretsScanConfiguration> {
  /**
   * ssh_scan_enabled indicates if the SSH scan feature is enabled for the cluster.
   *
   * @generated from field: bool ssh_scan_enabled = 1;
   */
  sshScanEnabled = false;

  constructor(data?: PartialMessage<AccessGraphSecretsScanConfiguration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.AccessGraphSecretsScanConfiguration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ssh_scan_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessGraphSecretsScanConfiguration {
    return new AccessGraphSecretsScanConfiguration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessGraphSecretsScanConfiguration {
    return new AccessGraphSecretsScanConfiguration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessGraphSecretsScanConfiguration {
    return new AccessGraphSecretsScanConfiguration().fromJsonString(jsonString, options);
  }

  static equals(a: AccessGraphSecretsScanConfiguration | PlainMessage<AccessGraphSecretsScanConfiguration> | undefined, b: AccessGraphSecretsScanConfiguration | PlainMessage<AccessGraphSecretsScanConfiguration> | undefined): boolean {
    return proto3.util.equals(AccessGraphSecretsScanConfiguration, a, b);
  }
}

