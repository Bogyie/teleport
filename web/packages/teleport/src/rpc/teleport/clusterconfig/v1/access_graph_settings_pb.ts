// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/clusterconfig/v1/access_graph_settings.proto (package teleport.clusterconfig.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Metadata } from "../../header/v1/metadata_pb.js";

/**
 * AccessGraphSecretsScanConfig is used to configure the parameters for the secrets scanning functionality.
 *
 * @generated from enum teleport.clusterconfig.v1.AccessGraphSecretsScanConfig
 */
export enum AccessGraphSecretsScanConfig {
  /**
   * ACCESS_GRAPH_SECRETS_SCAN_CONFIG_UNSPECIFIED is an unknown secrets scan configuration.
   *
   * @generated from enum value: ACCESS_GRAPH_SECRETS_SCAN_CONFIG_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * ACCESS_GRAPH_SECRETS_SCAN_CONFIG_DISABLED is a disabled secrets scan configuration.
   *
   * @generated from enum value: ACCESS_GRAPH_SECRETS_SCAN_CONFIG_DISABLED = 1;
   */
  DISABLED = 1,

  /**
   * ACCESS_GRAPH_SECRETS_SCAN_CONFIG_ENABLED is an enabled secrets scan configuration.
   *
   * @generated from enum value: ACCESS_GRAPH_SECRETS_SCAN_CONFIG_ENABLED = 2;
   */
  ENABLED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AccessGraphSecretsScanConfig)
proto3.util.setEnumType(AccessGraphSecretsScanConfig, "teleport.clusterconfig.v1.AccessGraphSecretsScanConfig", [
  { no: 0, name: "ACCESS_GRAPH_SECRETS_SCAN_CONFIG_UNSPECIFIED" },
  { no: 1, name: "ACCESS_GRAPH_SECRETS_SCAN_CONFIG_DISABLED" },
  { no: 2, name: "ACCESS_GRAPH_SECRETS_SCAN_CONFIG_ENABLED" },
]);

/**
 * AccessGraphSettings holds dynamic configuration settings for the Access Graph service.
 *
 * @generated from message teleport.clusterconfig.v1.AccessGraphSettings
 */
export class AccessGraphSettings extends Message<AccessGraphSettings> {
  /**
   * kind is the kind of the resource.
   *
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * sub_kind is the sub kind of the resource.
   *
   * @generated from field: string sub_kind = 2;
   */
  subKind = "";

  /**
   * version is the version of the resource.
   *
   * @generated from field: string version = 3;
   */
  version = "";

  /**
   * metadata is the metadata of the resource.
   *
   * @generated from field: teleport.header.v1.Metadata metadata = 4;
   */
  metadata?: Metadata;

  /**
   * spec is the spec of the resource.
   *
   * @generated from field: teleport.clusterconfig.v1.AccessGraphSettingsSpec spec = 5;
   */
  spec?: AccessGraphSettingsSpec;

  constructor(data?: PartialMessage<AccessGraphSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.AccessGraphSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sub_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata", kind: "message", T: Metadata },
    { no: 5, name: "spec", kind: "message", T: AccessGraphSettingsSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessGraphSettings {
    return new AccessGraphSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessGraphSettings {
    return new AccessGraphSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessGraphSettings {
    return new AccessGraphSettings().fromJsonString(jsonString, options);
  }

  static equals(a: AccessGraphSettings | PlainMessage<AccessGraphSettings> | undefined, b: AccessGraphSettings | PlainMessage<AccessGraphSettings> | undefined): boolean {
    return proto3.util.equals(AccessGraphSettings, a, b);
  }
}

/**
 * AccessGraphSettingsSpec is the spec for the Access Graph service configuration settings.
 *
 * @generated from message teleport.clusterconfig.v1.AccessGraphSettingsSpec
 */
export class AccessGraphSettingsSpec extends Message<AccessGraphSettingsSpec> {
  /**
   * secrets_scan_config is used to configure the parameters for the secrets scanning functionality.
   *
   * @generated from field: teleport.clusterconfig.v1.AccessGraphSecretsScanConfig secrets_scan_config = 1;
   */
  secretsScanConfig = AccessGraphSecretsScanConfig.UNSPECIFIED;

  constructor(data?: PartialMessage<AccessGraphSettingsSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.AccessGraphSettingsSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secrets_scan_config", kind: "enum", T: proto3.getEnumType(AccessGraphSecretsScanConfig) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessGraphSettingsSpec {
    return new AccessGraphSettingsSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessGraphSettingsSpec {
    return new AccessGraphSettingsSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessGraphSettingsSpec {
    return new AccessGraphSettingsSpec().fromJsonString(jsonString, options);
  }

  static equals(a: AccessGraphSettingsSpec | PlainMessage<AccessGraphSettingsSpec> | undefined, b: AccessGraphSettingsSpec | PlainMessage<AccessGraphSettingsSpec> | undefined): boolean {
    return proto3.util.equals(AccessGraphSettingsSpec, a, b);
  }
}

