// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/clusterconfig/v1/clusterconfig_service.proto (package teleport.clusterconfig.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { AuthPreferenceV2, ClusterNetworkingConfigV2, SessionRecordingConfigV2 } from "../../legacy/types/types_pb.js";
import { AccessGraphConfig } from "./access_graph_pb.js";
import { AccessGraphSettings } from "./access_graph_settings_pb.js";

/**
 * Request for GetClusterNetworkingConfig
 *
 * @generated from message teleport.clusterconfig.v1.GetClusterNetworkingConfigRequest
 */
export class GetClusterNetworkingConfigRequest extends Message<GetClusterNetworkingConfigRequest> {
  constructor(data?: PartialMessage<GetClusterNetworkingConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.GetClusterNetworkingConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterNetworkingConfigRequest {
    return new GetClusterNetworkingConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterNetworkingConfigRequest {
    return new GetClusterNetworkingConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterNetworkingConfigRequest {
    return new GetClusterNetworkingConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterNetworkingConfigRequest | PlainMessage<GetClusterNetworkingConfigRequest> | undefined, b: GetClusterNetworkingConfigRequest | PlainMessage<GetClusterNetworkingConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetClusterNetworkingConfigRequest, a, b);
  }
}

/**
 * Request for UpdateClusterNetworkingConfig
 *
 * @generated from message teleport.clusterconfig.v1.UpdateClusterNetworkingConfigRequest
 */
export class UpdateClusterNetworkingConfigRequest extends Message<UpdateClusterNetworkingConfigRequest> {
  /**
   * @generated from field: types.ClusterNetworkingConfigV2 cluster_network_config = 1;
   */
  clusterNetworkConfig?: ClusterNetworkingConfigV2;

  constructor(data?: PartialMessage<UpdateClusterNetworkingConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.UpdateClusterNetworkingConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_network_config", kind: "message", T: ClusterNetworkingConfigV2 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateClusterNetworkingConfigRequest {
    return new UpdateClusterNetworkingConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateClusterNetworkingConfigRequest {
    return new UpdateClusterNetworkingConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateClusterNetworkingConfigRequest {
    return new UpdateClusterNetworkingConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateClusterNetworkingConfigRequest | PlainMessage<UpdateClusterNetworkingConfigRequest> | undefined, b: UpdateClusterNetworkingConfigRequest | PlainMessage<UpdateClusterNetworkingConfigRequest> | undefined): boolean {
    return proto3.util.equals(UpdateClusterNetworkingConfigRequest, a, b);
  }
}

/**
 * Request for UpsertClusterNetworkingConfig
 *
 * @generated from message teleport.clusterconfig.v1.UpsertClusterNetworkingConfigRequest
 */
export class UpsertClusterNetworkingConfigRequest extends Message<UpsertClusterNetworkingConfigRequest> {
  /**
   * @generated from field: types.ClusterNetworkingConfigV2 cluster_network_config = 1;
   */
  clusterNetworkConfig?: ClusterNetworkingConfigV2;

  constructor(data?: PartialMessage<UpsertClusterNetworkingConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.UpsertClusterNetworkingConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_network_config", kind: "message", T: ClusterNetworkingConfigV2 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertClusterNetworkingConfigRequest {
    return new UpsertClusterNetworkingConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertClusterNetworkingConfigRequest {
    return new UpsertClusterNetworkingConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertClusterNetworkingConfigRequest {
    return new UpsertClusterNetworkingConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertClusterNetworkingConfigRequest | PlainMessage<UpsertClusterNetworkingConfigRequest> | undefined, b: UpsertClusterNetworkingConfigRequest | PlainMessage<UpsertClusterNetworkingConfigRequest> | undefined): boolean {
    return proto3.util.equals(UpsertClusterNetworkingConfigRequest, a, b);
  }
}

/**
 * Request for ResetClusterNetworkingConfig
 *
 * @generated from message teleport.clusterconfig.v1.ResetClusterNetworkingConfigRequest
 */
export class ResetClusterNetworkingConfigRequest extends Message<ResetClusterNetworkingConfigRequest> {
  constructor(data?: PartialMessage<ResetClusterNetworkingConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.ResetClusterNetworkingConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetClusterNetworkingConfigRequest {
    return new ResetClusterNetworkingConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetClusterNetworkingConfigRequest {
    return new ResetClusterNetworkingConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetClusterNetworkingConfigRequest {
    return new ResetClusterNetworkingConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResetClusterNetworkingConfigRequest | PlainMessage<ResetClusterNetworkingConfigRequest> | undefined, b: ResetClusterNetworkingConfigRequest | PlainMessage<ResetClusterNetworkingConfigRequest> | undefined): boolean {
    return proto3.util.equals(ResetClusterNetworkingConfigRequest, a, b);
  }
}

/**
 * Request for GetSessionRecordingConfig
 *
 * @generated from message teleport.clusterconfig.v1.GetSessionRecordingConfigRequest
 */
export class GetSessionRecordingConfigRequest extends Message<GetSessionRecordingConfigRequest> {
  constructor(data?: PartialMessage<GetSessionRecordingConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.GetSessionRecordingConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSessionRecordingConfigRequest {
    return new GetSessionRecordingConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSessionRecordingConfigRequest {
    return new GetSessionRecordingConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSessionRecordingConfigRequest {
    return new GetSessionRecordingConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSessionRecordingConfigRequest | PlainMessage<GetSessionRecordingConfigRequest> | undefined, b: GetSessionRecordingConfigRequest | PlainMessage<GetSessionRecordingConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetSessionRecordingConfigRequest, a, b);
  }
}

/**
 * Request for UpdateSessionRecordingConfig
 *
 * @generated from message teleport.clusterconfig.v1.UpdateSessionRecordingConfigRequest
 */
export class UpdateSessionRecordingConfigRequest extends Message<UpdateSessionRecordingConfigRequest> {
  /**
   * @generated from field: types.SessionRecordingConfigV2 session_recording_config = 1;
   */
  sessionRecordingConfig?: SessionRecordingConfigV2;

  constructor(data?: PartialMessage<UpdateSessionRecordingConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.UpdateSessionRecordingConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_recording_config", kind: "message", T: SessionRecordingConfigV2 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSessionRecordingConfigRequest {
    return new UpdateSessionRecordingConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSessionRecordingConfigRequest {
    return new UpdateSessionRecordingConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSessionRecordingConfigRequest {
    return new UpdateSessionRecordingConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSessionRecordingConfigRequest | PlainMessage<UpdateSessionRecordingConfigRequest> | undefined, b: UpdateSessionRecordingConfigRequest | PlainMessage<UpdateSessionRecordingConfigRequest> | undefined): boolean {
    return proto3.util.equals(UpdateSessionRecordingConfigRequest, a, b);
  }
}

/**
 * Request for UpsertSessionRecordingConfig
 *
 * @generated from message teleport.clusterconfig.v1.UpsertSessionRecordingConfigRequest
 */
export class UpsertSessionRecordingConfigRequest extends Message<UpsertSessionRecordingConfigRequest> {
  /**
   * @generated from field: types.SessionRecordingConfigV2 session_recording_config = 1;
   */
  sessionRecordingConfig?: SessionRecordingConfigV2;

  constructor(data?: PartialMessage<UpsertSessionRecordingConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.UpsertSessionRecordingConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_recording_config", kind: "message", T: SessionRecordingConfigV2 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertSessionRecordingConfigRequest {
    return new UpsertSessionRecordingConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertSessionRecordingConfigRequest {
    return new UpsertSessionRecordingConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertSessionRecordingConfigRequest {
    return new UpsertSessionRecordingConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertSessionRecordingConfigRequest | PlainMessage<UpsertSessionRecordingConfigRequest> | undefined, b: UpsertSessionRecordingConfigRequest | PlainMessage<UpsertSessionRecordingConfigRequest> | undefined): boolean {
    return proto3.util.equals(UpsertSessionRecordingConfigRequest, a, b);
  }
}

/**
 * Request for ResetSessionRecordingConfig
 *
 * @generated from message teleport.clusterconfig.v1.ResetSessionRecordingConfigRequest
 */
export class ResetSessionRecordingConfigRequest extends Message<ResetSessionRecordingConfigRequest> {
  constructor(data?: PartialMessage<ResetSessionRecordingConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.ResetSessionRecordingConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetSessionRecordingConfigRequest {
    return new ResetSessionRecordingConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetSessionRecordingConfigRequest {
    return new ResetSessionRecordingConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetSessionRecordingConfigRequest {
    return new ResetSessionRecordingConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResetSessionRecordingConfigRequest | PlainMessage<ResetSessionRecordingConfigRequest> | undefined, b: ResetSessionRecordingConfigRequest | PlainMessage<ResetSessionRecordingConfigRequest> | undefined): boolean {
    return proto3.util.equals(ResetSessionRecordingConfigRequest, a, b);
  }
}

/**
 * Request for GetAuthPreference
 *
 * @generated from message teleport.clusterconfig.v1.GetAuthPreferenceRequest
 */
export class GetAuthPreferenceRequest extends Message<GetAuthPreferenceRequest> {
  constructor(data?: PartialMessage<GetAuthPreferenceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.GetAuthPreferenceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthPreferenceRequest {
    return new GetAuthPreferenceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthPreferenceRequest {
    return new GetAuthPreferenceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthPreferenceRequest {
    return new GetAuthPreferenceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthPreferenceRequest | PlainMessage<GetAuthPreferenceRequest> | undefined, b: GetAuthPreferenceRequest | PlainMessage<GetAuthPreferenceRequest> | undefined): boolean {
    return proto3.util.equals(GetAuthPreferenceRequest, a, b);
  }
}

/**
 * Request for UpdateAuthPreference
 *
 * @generated from message teleport.clusterconfig.v1.UpdateAuthPreferenceRequest
 */
export class UpdateAuthPreferenceRequest extends Message<UpdateAuthPreferenceRequest> {
  /**
   * @generated from field: types.AuthPreferenceV2 auth_preference = 1;
   */
  authPreference?: AuthPreferenceV2;

  constructor(data?: PartialMessage<UpdateAuthPreferenceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.UpdateAuthPreferenceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auth_preference", kind: "message", T: AuthPreferenceV2 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAuthPreferenceRequest {
    return new UpdateAuthPreferenceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAuthPreferenceRequest {
    return new UpdateAuthPreferenceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAuthPreferenceRequest {
    return new UpdateAuthPreferenceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAuthPreferenceRequest | PlainMessage<UpdateAuthPreferenceRequest> | undefined, b: UpdateAuthPreferenceRequest | PlainMessage<UpdateAuthPreferenceRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAuthPreferenceRequest, a, b);
  }
}

/**
 * Request for UpsertAuthPreference
 *
 * @generated from message teleport.clusterconfig.v1.UpsertAuthPreferenceRequest
 */
export class UpsertAuthPreferenceRequest extends Message<UpsertAuthPreferenceRequest> {
  /**
   * @generated from field: types.AuthPreferenceV2 auth_preference = 1;
   */
  authPreference?: AuthPreferenceV2;

  constructor(data?: PartialMessage<UpsertAuthPreferenceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.UpsertAuthPreferenceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auth_preference", kind: "message", T: AuthPreferenceV2 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertAuthPreferenceRequest {
    return new UpsertAuthPreferenceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertAuthPreferenceRequest {
    return new UpsertAuthPreferenceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertAuthPreferenceRequest {
    return new UpsertAuthPreferenceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertAuthPreferenceRequest | PlainMessage<UpsertAuthPreferenceRequest> | undefined, b: UpsertAuthPreferenceRequest | PlainMessage<UpsertAuthPreferenceRequest> | undefined): boolean {
    return proto3.util.equals(UpsertAuthPreferenceRequest, a, b);
  }
}

/**
 * Request for ResetAuthPreference
 *
 * @generated from message teleport.clusterconfig.v1.ResetAuthPreferenceRequest
 */
export class ResetAuthPreferenceRequest extends Message<ResetAuthPreferenceRequest> {
  constructor(data?: PartialMessage<ResetAuthPreferenceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.ResetAuthPreferenceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetAuthPreferenceRequest {
    return new ResetAuthPreferenceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetAuthPreferenceRequest {
    return new ResetAuthPreferenceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetAuthPreferenceRequest {
    return new ResetAuthPreferenceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResetAuthPreferenceRequest | PlainMessage<ResetAuthPreferenceRequest> | undefined, b: ResetAuthPreferenceRequest | PlainMessage<ResetAuthPreferenceRequest> | undefined): boolean {
    return proto3.util.equals(ResetAuthPreferenceRequest, a, b);
  }
}

/**
 * Request for GetClusterAuditConfig
 *
 * @generated from message teleport.clusterconfig.v1.GetClusterAuditConfigRequest
 */
export class GetClusterAuditConfigRequest extends Message<GetClusterAuditConfigRequest> {
  constructor(data?: PartialMessage<GetClusterAuditConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.GetClusterAuditConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterAuditConfigRequest {
    return new GetClusterAuditConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterAuditConfigRequest {
    return new GetClusterAuditConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterAuditConfigRequest {
    return new GetClusterAuditConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterAuditConfigRequest | PlainMessage<GetClusterAuditConfigRequest> | undefined, b: GetClusterAuditConfigRequest | PlainMessage<GetClusterAuditConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetClusterAuditConfigRequest, a, b);
  }
}

/**
 * Request for GetClusterAccessGraphConfig
 *
 * @generated from message teleport.clusterconfig.v1.GetClusterAccessGraphConfigRequest
 */
export class GetClusterAccessGraphConfigRequest extends Message<GetClusterAccessGraphConfigRequest> {
  constructor(data?: PartialMessage<GetClusterAccessGraphConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.GetClusterAccessGraphConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterAccessGraphConfigRequest {
    return new GetClusterAccessGraphConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterAccessGraphConfigRequest {
    return new GetClusterAccessGraphConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterAccessGraphConfigRequest {
    return new GetClusterAccessGraphConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterAccessGraphConfigRequest | PlainMessage<GetClusterAccessGraphConfigRequest> | undefined, b: GetClusterAccessGraphConfigRequest | PlainMessage<GetClusterAccessGraphConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetClusterAccessGraphConfigRequest, a, b);
  }
}

/**
 * Response for GetClusterAccessGraphConfig
 *
 * @generated from message teleport.clusterconfig.v1.GetClusterAccessGraphConfigResponse
 */
export class GetClusterAccessGraphConfigResponse extends Message<GetClusterAccessGraphConfigResponse> {
  /**
   * access_graph holds the information about Access Graph service.
   *
   * @generated from field: teleport.clusterconfig.v1.AccessGraphConfig access_graph = 1;
   */
  accessGraph?: AccessGraphConfig;

  constructor(data?: PartialMessage<GetClusterAccessGraphConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.GetClusterAccessGraphConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_graph", kind: "message", T: AccessGraphConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterAccessGraphConfigResponse {
    return new GetClusterAccessGraphConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterAccessGraphConfigResponse {
    return new GetClusterAccessGraphConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterAccessGraphConfigResponse {
    return new GetClusterAccessGraphConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterAccessGraphConfigResponse | PlainMessage<GetClusterAccessGraphConfigResponse> | undefined, b: GetClusterAccessGraphConfigResponse | PlainMessage<GetClusterAccessGraphConfigResponse> | undefined): boolean {
    return proto3.util.equals(GetClusterAccessGraphConfigResponse, a, b);
  }
}

/**
 * Request for GetAccessGraphSettings
 *
 * @generated from message teleport.clusterconfig.v1.GetAccessGraphSettingsRequest
 */
export class GetAccessGraphSettingsRequest extends Message<GetAccessGraphSettingsRequest> {
  constructor(data?: PartialMessage<GetAccessGraphSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.GetAccessGraphSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccessGraphSettingsRequest {
    return new GetAccessGraphSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccessGraphSettingsRequest {
    return new GetAccessGraphSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccessGraphSettingsRequest {
    return new GetAccessGraphSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccessGraphSettingsRequest | PlainMessage<GetAccessGraphSettingsRequest> | undefined, b: GetAccessGraphSettingsRequest | PlainMessage<GetAccessGraphSettingsRequest> | undefined): boolean {
    return proto3.util.equals(GetAccessGraphSettingsRequest, a, b);
  }
}

/**
 * Request for CreateAccessGraphSettings
 *
 * @generated from message teleport.clusterconfig.v1.CreateAccessGraphSettingsRequest
 */
export class CreateAccessGraphSettingsRequest extends Message<CreateAccessGraphSettingsRequest> {
  /**
   * @generated from field: teleport.clusterconfig.v1.AccessGraphSettings access_graph_settings = 1;
   */
  accessGraphSettings?: AccessGraphSettings;

  constructor(data?: PartialMessage<CreateAccessGraphSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.CreateAccessGraphSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_graph_settings", kind: "message", T: AccessGraphSettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAccessGraphSettingsRequest {
    return new CreateAccessGraphSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAccessGraphSettingsRequest {
    return new CreateAccessGraphSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAccessGraphSettingsRequest {
    return new CreateAccessGraphSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAccessGraphSettingsRequest | PlainMessage<CreateAccessGraphSettingsRequest> | undefined, b: CreateAccessGraphSettingsRequest | PlainMessage<CreateAccessGraphSettingsRequest> | undefined): boolean {
    return proto3.util.equals(CreateAccessGraphSettingsRequest, a, b);
  }
}

/**
 * Request for UpdateAccessGraphSettings
 *
 * @generated from message teleport.clusterconfig.v1.UpdateAccessGraphSettingsRequest
 */
export class UpdateAccessGraphSettingsRequest extends Message<UpdateAccessGraphSettingsRequest> {
  /**
   * @generated from field: teleport.clusterconfig.v1.AccessGraphSettings access_graph_settings = 1;
   */
  accessGraphSettings?: AccessGraphSettings;

  constructor(data?: PartialMessage<UpdateAccessGraphSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.UpdateAccessGraphSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_graph_settings", kind: "message", T: AccessGraphSettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccessGraphSettingsRequest {
    return new UpdateAccessGraphSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccessGraphSettingsRequest {
    return new UpdateAccessGraphSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccessGraphSettingsRequest {
    return new UpdateAccessGraphSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAccessGraphSettingsRequest | PlainMessage<UpdateAccessGraphSettingsRequest> | undefined, b: UpdateAccessGraphSettingsRequest | PlainMessage<UpdateAccessGraphSettingsRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAccessGraphSettingsRequest, a, b);
  }
}

/**
 * Request for UpsertAccessGraphSettings
 *
 * @generated from message teleport.clusterconfig.v1.UpsertAccessGraphSettingsRequest
 */
export class UpsertAccessGraphSettingsRequest extends Message<UpsertAccessGraphSettingsRequest> {
  /**
   * @generated from field: teleport.clusterconfig.v1.AccessGraphSettings access_graph_settings = 1;
   */
  accessGraphSettings?: AccessGraphSettings;

  constructor(data?: PartialMessage<UpsertAccessGraphSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.UpsertAccessGraphSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_graph_settings", kind: "message", T: AccessGraphSettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertAccessGraphSettingsRequest {
    return new UpsertAccessGraphSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertAccessGraphSettingsRequest {
    return new UpsertAccessGraphSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertAccessGraphSettingsRequest {
    return new UpsertAccessGraphSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertAccessGraphSettingsRequest | PlainMessage<UpsertAccessGraphSettingsRequest> | undefined, b: UpsertAccessGraphSettingsRequest | PlainMessage<UpsertAccessGraphSettingsRequest> | undefined): boolean {
    return proto3.util.equals(UpsertAccessGraphSettingsRequest, a, b);
  }
}

/**
 * Request for ResetAccessGraphSettings
 *
 * @generated from message teleport.clusterconfig.v1.ResetAccessGraphSettingsRequest
 */
export class ResetAccessGraphSettingsRequest extends Message<ResetAccessGraphSettingsRequest> {
  constructor(data?: PartialMessage<ResetAccessGraphSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.clusterconfig.v1.ResetAccessGraphSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetAccessGraphSettingsRequest {
    return new ResetAccessGraphSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetAccessGraphSettingsRequest {
    return new ResetAccessGraphSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetAccessGraphSettingsRequest {
    return new ResetAccessGraphSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResetAccessGraphSettingsRequest | PlainMessage<ResetAccessGraphSettingsRequest> | undefined, b: ResetAccessGraphSettingsRequest | PlainMessage<ResetAccessGraphSettingsRequest> | undefined): boolean {
    return proto3.util.equals(ResetAccessGraphSettingsRequest, a, b);
  }
}

