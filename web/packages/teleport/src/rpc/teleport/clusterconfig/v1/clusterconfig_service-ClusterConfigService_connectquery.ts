// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts"
// @generated from file teleport/clusterconfig/v1/clusterconfig_service.proto (package teleport.clusterconfig.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MethodKind } from "@bufbuild/protobuf";
import { CreateAccessGraphSettingsRequest, GetAccessGraphSettingsRequest, GetAuthPreferenceRequest, GetClusterAccessGraphConfigRequest, GetClusterAccessGraphConfigResponse, GetClusterAuditConfigRequest, GetClusterNetworkingConfigRequest, GetSessionRecordingConfigRequest, ResetAccessGraphSettingsRequest, ResetAuthPreferenceRequest, ResetClusterNetworkingConfigRequest, ResetSessionRecordingConfigRequest, UpdateAccessGraphSettingsRequest, UpdateAuthPreferenceRequest, UpdateClusterNetworkingConfigRequest, UpdateSessionRecordingConfigRequest, UpsertAccessGraphSettingsRequest, UpsertAuthPreferenceRequest, UpsertClusterNetworkingConfigRequest, UpsertSessionRecordingConfigRequest } from "./clusterconfig_service_pb.js";
import { AuthPreferenceV2, ClusterAuditConfigV2, ClusterNetworkingConfigV2, SessionRecordingConfigV2 } from "../../legacy/types/types_pb.js";
import { AccessGraphSettings } from "./access_graph_settings_pb.js";

/**
 * GetClusterNetworkingConfig retrieves the active cluster networking configuration.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.GetClusterNetworkingConfig
 */
export const getClusterNetworkingConfig = {
  localName: "getClusterNetworkingConfig",
  name: "GetClusterNetworkingConfig",
  kind: MethodKind.Unary,
  I: GetClusterNetworkingConfigRequest,
  O: ClusterNetworkingConfigV2,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;

/**
 * UpdateClusterNetworkingConfig updates the cluster networking configuration.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.UpdateClusterNetworkingConfig
 */
export const updateClusterNetworkingConfig = {
  localName: "updateClusterNetworkingConfig",
  name: "UpdateClusterNetworkingConfig",
  kind: MethodKind.Unary,
  I: UpdateClusterNetworkingConfigRequest,
  O: ClusterNetworkingConfigV2,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;

/**
 * UpsertClusterNetworkingConfig overwrites the active cluster networking configuration.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.UpsertClusterNetworkingConfig
 */
export const upsertClusterNetworkingConfig = {
  localName: "upsertClusterNetworkingConfig",
  name: "UpsertClusterNetworkingConfig",
  kind: MethodKind.Unary,
  I: UpsertClusterNetworkingConfigRequest,
  O: ClusterNetworkingConfigV2,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;

/**
 * ResetClusterNetworkingConfig restores the active cluster networking configuration to default settings.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.ResetClusterNetworkingConfig
 */
export const resetClusterNetworkingConfig = {
  localName: "resetClusterNetworkingConfig",
  name: "ResetClusterNetworkingConfig",
  kind: MethodKind.Unary,
  I: ResetClusterNetworkingConfigRequest,
  O: ClusterNetworkingConfigV2,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;

/**
 * GetSessionRecordingConfig retrieves the active session recording configuration.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.GetSessionRecordingConfig
 */
export const getSessionRecordingConfig = {
  localName: "getSessionRecordingConfig",
  name: "GetSessionRecordingConfig",
  kind: MethodKind.Unary,
  I: GetSessionRecordingConfigRequest,
  O: SessionRecordingConfigV2,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;

/**
 * UpdateSessionRecordingConfig updates the session recording configuration.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.UpdateSessionRecordingConfig
 */
export const updateSessionRecordingConfig = {
  localName: "updateSessionRecordingConfig",
  name: "UpdateSessionRecordingConfig",
  kind: MethodKind.Unary,
  I: UpdateSessionRecordingConfigRequest,
  O: SessionRecordingConfigV2,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;

/**
 * UpsertSessionRecordingConfig overwrites the active session recording configuration.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.UpsertSessionRecordingConfig
 */
export const upsertSessionRecordingConfig = {
  localName: "upsertSessionRecordingConfig",
  name: "UpsertSessionRecordingConfig",
  kind: MethodKind.Unary,
  I: UpsertSessionRecordingConfigRequest,
  O: SessionRecordingConfigV2,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;

/**
 * ResetSessionRecordingConfig restores the active session recording configuration to default settings.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.ResetSessionRecordingConfig
 */
export const resetSessionRecordingConfig = {
  localName: "resetSessionRecordingConfig",
  name: "ResetSessionRecordingConfig",
  kind: MethodKind.Unary,
  I: ResetSessionRecordingConfigRequest,
  O: SessionRecordingConfigV2,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;

/**
 * GetAuthPreference retrieves the active auth preference.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.GetAuthPreference
 */
export const getAuthPreference = {
  localName: "getAuthPreference",
  name: "GetAuthPreference",
  kind: MethodKind.Unary,
  I: GetAuthPreferenceRequest,
  O: AuthPreferenceV2,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;

/**
 * UpdateAuthPreference updates the auth preference.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.UpdateAuthPreference
 */
export const updateAuthPreference = {
  localName: "updateAuthPreference",
  name: "UpdateAuthPreference",
  kind: MethodKind.Unary,
  I: UpdateAuthPreferenceRequest,
  O: AuthPreferenceV2,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;

/**
 * UpsertAuthPreference overwrites the active auth preference.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.UpsertAuthPreference
 */
export const upsertAuthPreference = {
  localName: "upsertAuthPreference",
  name: "UpsertAuthPreference",
  kind: MethodKind.Unary,
  I: UpsertAuthPreferenceRequest,
  O: AuthPreferenceV2,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;

/**
 * ResetAuthPreference restores the active auth preference to default settings.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.ResetAuthPreference
 */
export const resetAuthPreference = {
  localName: "resetAuthPreference",
  name: "ResetAuthPreference",
  kind: MethodKind.Unary,
  I: ResetAuthPreferenceRequest,
  O: AuthPreferenceV2,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;

/**
 * GetClusterAuditConfig retrieves the active cluster audit configuration.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.GetClusterAuditConfig
 */
export const getClusterAuditConfig = {
  localName: "getClusterAuditConfig",
  name: "GetClusterAuditConfig",
  kind: MethodKind.Unary,
  I: GetClusterAuditConfigRequest,
  O: ClusterAuditConfigV2,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;

/**
 * GetClusterAccessGraphConfig retrieves the cluster Access Graph configuration from Auth service.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.GetClusterAccessGraphConfig
 */
export const getClusterAccessGraphConfig = {
  localName: "getClusterAccessGraphConfig",
  name: "GetClusterAccessGraphConfig",
  kind: MethodKind.Unary,
  I: GetClusterAccessGraphConfigRequest,
  O: GetClusterAccessGraphConfigResponse,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;

/**
 * GetAccessGraphSettings updates the cluster Access Graph configuration.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.GetAccessGraphSettings
 */
export const getAccessGraphSettings = {
  localName: "getAccessGraphSettings",
  name: "GetAccessGraphSettings",
  kind: MethodKind.Unary,
  I: GetAccessGraphSettingsRequest,
  O: AccessGraphSettings,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;

/**
 * CreateAccessGraphSettings creates the cluster Access Graph configuration.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.CreateAccessGraphSettings
 */
export const createAccessGraphSettings = {
  localName: "createAccessGraphSettings",
  name: "CreateAccessGraphSettings",
  kind: MethodKind.Unary,
  I: CreateAccessGraphSettingsRequest,
  O: AccessGraphSettings,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;

/**
 * UpdateAccessGraphSettings updates the cluster Access Graph configuration.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.UpdateAccessGraphSettings
 */
export const updateAccessGraphSettings = {
  localName: "updateAccessGraphSettings",
  name: "UpdateAccessGraphSettings",
  kind: MethodKind.Unary,
  I: UpdateAccessGraphSettingsRequest,
  O: AccessGraphSettings,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;

/**
 * UpsertAccessGraphSettings overwrites the active cluster Access Graph configuration.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.UpsertAccessGraphSettings
 */
export const upsertAccessGraphSettings = {
  localName: "upsertAccessGraphSettings",
  name: "UpsertAccessGraphSettings",
  kind: MethodKind.Unary,
  I: UpsertAccessGraphSettingsRequest,
  O: AccessGraphSettings,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;

/**
 * ResetAccessGraphSettings restores the active cluster Access Graph to default settings.
 *
 * @generated from rpc teleport.clusterconfig.v1.ClusterConfigService.ResetAccessGraphSettings
 */
export const resetAccessGraphSettings = {
  localName: "resetAccessGraphSettings",
  name: "ResetAccessGraphSettings",
  kind: MethodKind.Unary,
  I: ResetAccessGraphSettingsRequest,
  O: AccessGraphSettings,
  service: {
    typeName: "teleport.clusterconfig.v1.ClusterConfigService"
  }
} as const;
