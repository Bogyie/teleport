//
// Teleport
// Copyright (C) 2024  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/notifications/v1/notifications_service.proto (package teleport.notifications.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { GlobalNotification, Notification, UserLastSeenNotification, UserNotificationState } from "./notifications_pb.js";

/**
 * CreateUserNotificationRequest is the request for creating a user-specific notification.
 *
 * @generated from message teleport.notifications.v1.CreateUserNotificationRequest
 */
export class CreateUserNotificationRequest extends Message<CreateUserNotificationRequest> {
  /**
   * username is the username of the user the notification to create is for.
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * notification is the notification to create.
   *
   * @generated from field: teleport.notifications.v1.Notification notification = 2;
   */
  notification?: Notification;

  constructor(data?: PartialMessage<CreateUserNotificationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.notifications.v1.CreateUserNotificationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "notification", kind: "message", T: Notification },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserNotificationRequest {
    return new CreateUserNotificationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserNotificationRequest {
    return new CreateUserNotificationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserNotificationRequest {
    return new CreateUserNotificationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserNotificationRequest | PlainMessage<CreateUserNotificationRequest> | undefined, b: CreateUserNotificationRequest | PlainMessage<CreateUserNotificationRequest> | undefined): boolean {
    return proto3.util.equals(CreateUserNotificationRequest, a, b);
  }
}

/**
 * DeleteUserNotificationRequest is the request for deleting a user-specific notification.
 *
 * @generated from message teleport.notifications.v1.DeleteUserNotificationRequest
 */
export class DeleteUserNotificationRequest extends Message<DeleteUserNotificationRequest> {
  /**
   * username is the username of the user the notification to delete is for.
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * notification_id is the ID of the notification to delete.
   *
   * @generated from field: string notification_id = 2;
   */
  notificationId = "";

  constructor(data?: PartialMessage<DeleteUserNotificationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.notifications.v1.DeleteUserNotificationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "notification_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserNotificationRequest {
    return new DeleteUserNotificationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserNotificationRequest {
    return new DeleteUserNotificationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserNotificationRequest {
    return new DeleteUserNotificationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUserNotificationRequest | PlainMessage<DeleteUserNotificationRequest> | undefined, b: DeleteUserNotificationRequest | PlainMessage<DeleteUserNotificationRequest> | undefined): boolean {
    return proto3.util.equals(DeleteUserNotificationRequest, a, b);
  }
}

/**
 * ListNotificationsRequest is the request for listing a user's notifications.
 *
 * @generated from message teleport.notifications.v1.ListNotificationsRequest
 */
export class ListNotificationsRequest extends Message<ListNotificationsRequest> {
  /**
   * page_size is the size of the page to return.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * page_token is the next_page_token value returned from a previous ListUserNotifications request, if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * filters specify search criteria to limit which notifications should be returned. If omitted, the default behavior will be to list all notifications.
   *
   * @generated from field: teleport.notifications.v1.NotificationFilters filters = 3;
   */
  filters?: NotificationFilters;

  constructor(data?: PartialMessage<ListNotificationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.notifications.v1.ListNotificationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "filters", kind: "message", T: NotificationFilters },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNotificationsRequest {
    return new ListNotificationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNotificationsRequest {
    return new ListNotificationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNotificationsRequest {
    return new ListNotificationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListNotificationsRequest | PlainMessage<ListNotificationsRequest> | undefined, b: ListNotificationsRequest | PlainMessage<ListNotificationsRequest> | undefined): boolean {
    return proto3.util.equals(ListNotificationsRequest, a, b);
  }
}

/**
 * NotificationFilters provide a mechanism to refine ListNotification results.
 *
 * @generated from message teleport.notifications.v1.NotificationFilters
 */
export class NotificationFilters extends Message<NotificationFilters> {
  /**
   * username is the username of the user the notifications being listed are for.
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * global_only is whether to only list global notifications (notifications capable of targetting multiple users).
   *
   * @generated from field: bool global_only = 2;
   */
  globalOnly = false;

  /**
   * user_created_only is whether to only list user-created notifications (ie. notifications created by an admin via the tctl interface).
   *
   * @generated from field: bool user_created_only = 3;
   */
  userCreatedOnly = false;

  constructor(data?: PartialMessage<NotificationFilters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.notifications.v1.NotificationFilters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "global_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "user_created_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotificationFilters {
    return new NotificationFilters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotificationFilters {
    return new NotificationFilters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotificationFilters {
    return new NotificationFilters().fromJsonString(jsonString, options);
  }

  static equals(a: NotificationFilters | PlainMessage<NotificationFilters> | undefined, b: NotificationFilters | PlainMessage<NotificationFilters> | undefined): boolean {
    return proto3.util.equals(NotificationFilters, a, b);
  }
}

/**
 * ListNotificationsResponse is the response from listing a user's notifications.
 *
 * @generated from message teleport.notifications.v1.ListNotificationsResponse
 */
export class ListNotificationsResponse extends Message<ListNotificationsResponse> {
  /**
   * notifications is the notifications returned.
   *
   * @generated from field: repeated teleport.notifications.v1.Notification notifications = 1;
   */
  notifications: Notification[] = [];

  /**
   * next_page_token contains the next page token to use as the start key for the next page of notifications.
   *
   * @generated from field: string next_page_token = 3;
   */
  nextPageToken = "";

  /**
   * user_last_seen_notification_timestamp is the timestamp of the last notification the user has seen.
   *
   * @generated from field: google.protobuf.Timestamp user_last_seen_notification_timestamp = 4;
   */
  userLastSeenNotificationTimestamp?: Timestamp;

  constructor(data?: PartialMessage<ListNotificationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.notifications.v1.ListNotificationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "notifications", kind: "message", T: Notification, repeated: true },
    { no: 3, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_last_seen_notification_timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNotificationsResponse {
    return new ListNotificationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNotificationsResponse {
    return new ListNotificationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNotificationsResponse {
    return new ListNotificationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListNotificationsResponse | PlainMessage<ListNotificationsResponse> | undefined, b: ListNotificationsResponse | PlainMessage<ListNotificationsResponse> | undefined): boolean {
    return proto3.util.equals(ListNotificationsResponse, a, b);
  }
}

/**
 * CreateGlobalNotificationRequest is the request for creating a global notification.
 *
 * @generated from message teleport.notifications.v1.CreateGlobalNotificationRequest
 */
export class CreateGlobalNotificationRequest extends Message<CreateGlobalNotificationRequest> {
  /**
   * global_notification is the global notification to create.
   *
   * @generated from field: teleport.notifications.v1.GlobalNotification global_notification = 1;
   */
  globalNotification?: GlobalNotification;

  constructor(data?: PartialMessage<CreateGlobalNotificationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.notifications.v1.CreateGlobalNotificationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "global_notification", kind: "message", T: GlobalNotification },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateGlobalNotificationRequest {
    return new CreateGlobalNotificationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateGlobalNotificationRequest {
    return new CreateGlobalNotificationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateGlobalNotificationRequest {
    return new CreateGlobalNotificationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateGlobalNotificationRequest | PlainMessage<CreateGlobalNotificationRequest> | undefined, b: CreateGlobalNotificationRequest | PlainMessage<CreateGlobalNotificationRequest> | undefined): boolean {
    return proto3.util.equals(CreateGlobalNotificationRequest, a, b);
  }
}

/**
 * DeleteGlobalNotificationRequest is the request for deleting a global notification.
 *
 * @generated from message teleport.notifications.v1.DeleteGlobalNotificationRequest
 */
export class DeleteGlobalNotificationRequest extends Message<DeleteGlobalNotificationRequest> {
  /**
   * notification_id is the ID of the notification to delete.
   *
   * @generated from field: string notification_id = 1;
   */
  notificationId = "";

  constructor(data?: PartialMessage<DeleteGlobalNotificationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.notifications.v1.DeleteGlobalNotificationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "notification_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteGlobalNotificationRequest {
    return new DeleteGlobalNotificationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteGlobalNotificationRequest {
    return new DeleteGlobalNotificationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteGlobalNotificationRequest {
    return new DeleteGlobalNotificationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteGlobalNotificationRequest | PlainMessage<DeleteGlobalNotificationRequest> | undefined, b: DeleteGlobalNotificationRequest | PlainMessage<DeleteGlobalNotificationRequest> | undefined): boolean {
    return proto3.util.equals(DeleteGlobalNotificationRequest, a, b);
  }
}

/**
 * UpsertUserNotificationStateRequest is the request for creating or updating a user notification state.
 *
 * @generated from message teleport.notifications.v1.UpsertUserNotificationStateRequest
 */
export class UpsertUserNotificationStateRequest extends Message<UpsertUserNotificationStateRequest> {
  /**
   * username is the username of the user.
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * user_notification_state is the user notification state to create.
   *
   * @generated from field: teleport.notifications.v1.UserNotificationState user_notification_state = 2;
   */
  userNotificationState?: UserNotificationState;

  constructor(data?: PartialMessage<UpsertUserNotificationStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.notifications.v1.UpsertUserNotificationStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_notification_state", kind: "message", T: UserNotificationState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertUserNotificationStateRequest {
    return new UpsertUserNotificationStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertUserNotificationStateRequest {
    return new UpsertUserNotificationStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertUserNotificationStateRequest {
    return new UpsertUserNotificationStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertUserNotificationStateRequest | PlainMessage<UpsertUserNotificationStateRequest> | undefined, b: UpsertUserNotificationStateRequest | PlainMessage<UpsertUserNotificationStateRequest> | undefined): boolean {
    return proto3.util.equals(UpsertUserNotificationStateRequest, a, b);
  }
}

/**
 * UpsertUserLastSeenNotificationRequest is the request for creating or updating a user's last seen notification.
 *
 * @generated from message teleport.notifications.v1.UpsertUserLastSeenNotificationRequest
 */
export class UpsertUserLastSeenNotificationRequest extends Message<UpsertUserLastSeenNotificationRequest> {
  /**
   * username is the username of the user.
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * user_notification_state is the updated user last seen notification item.
   *
   * @generated from field: teleport.notifications.v1.UserLastSeenNotification user_last_seen_notification = 2;
   */
  userLastSeenNotification?: UserLastSeenNotification;

  constructor(data?: PartialMessage<UpsertUserLastSeenNotificationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.notifications.v1.UpsertUserLastSeenNotificationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_last_seen_notification", kind: "message", T: UserLastSeenNotification },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertUserLastSeenNotificationRequest {
    return new UpsertUserLastSeenNotificationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertUserLastSeenNotificationRequest {
    return new UpsertUserLastSeenNotificationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertUserLastSeenNotificationRequest {
    return new UpsertUserLastSeenNotificationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertUserLastSeenNotificationRequest | PlainMessage<UpsertUserLastSeenNotificationRequest> | undefined, b: UpsertUserLastSeenNotificationRequest | PlainMessage<UpsertUserLastSeenNotificationRequest> | undefined): boolean {
    return proto3.util.equals(UpsertUserLastSeenNotificationRequest, a, b);
  }
}

