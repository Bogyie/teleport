//
// Teleport
// Copyright (C) 2024  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts"
// @generated from file teleport/notifications/v1/notifications_service.proto (package teleport.notifications.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { CreateGlobalNotificationRequest, CreateUserNotificationRequest, DeleteGlobalNotificationRequest, DeleteUserNotificationRequest, ListNotificationsRequest, ListNotificationsResponse, UpsertUserLastSeenNotificationRequest, UpsertUserNotificationStateRequest } from "./notifications_service_pb.js";
import { GlobalNotification, Notification, UserLastSeenNotification, UserNotificationState } from "./notifications_pb.js";

/**
 * CreateUserNotification creates a user-specific notification.
 *
 * @generated from rpc teleport.notifications.v1.NotificationService.CreateUserNotification
 */
export const createUserNotification = {
  localName: "createUserNotification",
  name: "CreateUserNotification",
  kind: MethodKind.Unary,
  I: CreateUserNotificationRequest,
  O: Notification,
  service: {
    typeName: "teleport.notifications.v1.NotificationService"
  }
} as const;

/**
 * DeleteUserNotification deletes a user-specific notification.
 *
 * @generated from rpc teleport.notifications.v1.NotificationService.DeleteUserNotification
 */
export const deleteUserNotification = {
  localName: "deleteUserNotification",
  name: "DeleteUserNotification",
  kind: MethodKind.Unary,
  I: DeleteUserNotificationRequest,
  O: Empty,
  service: {
    typeName: "teleport.notifications.v1.NotificationService"
  }
} as const;

/**
 * CreateGlobalNotification creates a global notification.
 *
 * @generated from rpc teleport.notifications.v1.NotificationService.CreateGlobalNotification
 */
export const createGlobalNotification = {
  localName: "createGlobalNotification",
  name: "CreateGlobalNotification",
  kind: MethodKind.Unary,
  I: CreateGlobalNotificationRequest,
  O: GlobalNotification,
  service: {
    typeName: "teleport.notifications.v1.NotificationService"
  }
} as const;

/**
 * DeleteGlobalNotification deletes a global notification.
 *
 * @generated from rpc teleport.notifications.v1.NotificationService.DeleteGlobalNotification
 */
export const deleteGlobalNotification = {
  localName: "deleteGlobalNotification",
  name: "DeleteGlobalNotification",
  kind: MethodKind.Unary,
  I: DeleteGlobalNotificationRequest,
  O: Empty,
  service: {
    typeName: "teleport.notifications.v1.NotificationService"
  }
} as const;

/**
 * ListNotifications returns a paginated list of a user's notifications.
 *
 * @generated from rpc teleport.notifications.v1.NotificationService.ListNotifications
 */
export const listNotifications = {
  localName: "listNotifications",
  name: "ListNotifications",
  kind: MethodKind.Unary,
  I: ListNotificationsRequest,
  O: ListNotificationsResponse,
  service: {
    typeName: "teleport.notifications.v1.NotificationService"
  }
} as const;

/**
 * UpsertUserNotificationState creates or updates a user notification state which records whether the user has clicked on or dismissed a notification.
 *
 * @generated from rpc teleport.notifications.v1.NotificationService.UpsertUserNotificationState
 */
export const upsertUserNotificationState = {
  localName: "upsertUserNotificationState",
  name: "UpsertUserNotificationState",
  kind: MethodKind.Unary,
  I: UpsertUserNotificationStateRequest,
  O: UserNotificationState,
  service: {
    typeName: "teleport.notifications.v1.NotificationService"
  }
} as const;

/**
 * UpsertUserLastSeenNotification creates or updates a user's last seen notification item.
 *
 * @generated from rpc teleport.notifications.v1.NotificationService.UpsertUserLastSeenNotification
 */
export const upsertUserLastSeenNotification = {
  localName: "upsertUserLastSeenNotification",
  name: "UpsertUserLastSeenNotification",
  kind: MethodKind.Unary,
  I: UpsertUserLastSeenNotificationRequest,
  O: UserLastSeenNotification,
  service: {
    typeName: "teleport.notifications.v1.NotificationService"
  }
} as const;
