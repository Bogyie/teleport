// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts"
// @generated from file teleport/loginrule/v1/loginrule_service.proto (package teleport.loginrule.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { CreateLoginRuleRequest, DeleteLoginRuleRequest, GetLoginRuleRequest, ListLoginRulesRequest, ListLoginRulesResponse, TestLoginRuleRequest, TestLoginRuleResponse, UpsertLoginRuleRequest } from "./loginrule_service_pb.js";
import { LoginRule } from "./loginrule_pb.js";

/**
 * CreateLoginRule creates a login rule if one with the same name does not
 * already exist, else it returns an error.
 *
 * @generated from rpc teleport.loginrule.v1.LoginRuleService.CreateLoginRule
 */
export const createLoginRule = {
  localName: "createLoginRule",
  name: "CreateLoginRule",
  kind: MethodKind.Unary,
  I: CreateLoginRuleRequest,
  O: LoginRule,
  service: {
    typeName: "teleport.loginrule.v1.LoginRuleService"
  }
} as const;

/**
 * UpsertLoginRule creates a login rule if one with the same name does not
 * already exist, else it replaces the existing login rule.
 *
 * @generated from rpc teleport.loginrule.v1.LoginRuleService.UpsertLoginRule
 */
export const upsertLoginRule = {
  localName: "upsertLoginRule",
  name: "UpsertLoginRule",
  kind: MethodKind.Unary,
  I: UpsertLoginRuleRequest,
  O: LoginRule,
  service: {
    typeName: "teleport.loginrule.v1.LoginRuleService"
  }
} as const;

/**
 * GetLoginRule retrieves a login rule described by the given request.
 *
 * @generated from rpc teleport.loginrule.v1.LoginRuleService.GetLoginRule
 */
export const getLoginRule = {
  localName: "getLoginRule",
  name: "GetLoginRule",
  kind: MethodKind.Unary,
  I: GetLoginRuleRequest,
  O: LoginRule,
  service: {
    typeName: "teleport.loginrule.v1.LoginRuleService"
  }
} as const;

/**
 * ListLoginRules lists all login rules.
 *
 * @generated from rpc teleport.loginrule.v1.LoginRuleService.ListLoginRules
 */
export const listLoginRules = {
  localName: "listLoginRules",
  name: "ListLoginRules",
  kind: MethodKind.Unary,
  I: ListLoginRulesRequest,
  O: ListLoginRulesResponse,
  service: {
    typeName: "teleport.loginrule.v1.LoginRuleService"
  }
} as const;

/**
 * DeleteLoginRule deletes an existing login rule.
 *
 * @generated from rpc teleport.loginrule.v1.LoginRuleService.DeleteLoginRule
 */
export const deleteLoginRule = {
  localName: "deleteLoginRule",
  name: "DeleteLoginRule",
  kind: MethodKind.Unary,
  I: DeleteLoginRuleRequest,
  O: Empty,
  service: {
    typeName: "teleport.loginrule.v1.LoginRuleService"
  }
} as const;

/**
 * TestLoginRule evaluates login rules against provided user traits
 * to test that the output matches expectations prior to them being enforced and
 * potentially locking out users.
 *
 * @generated from rpc teleport.loginrule.v1.LoginRuleService.TestLoginRule
 */
export const testLoginRule = {
  localName: "testLoginRule",
  name: "TestLoginRule",
  kind: MethodKind.Unary,
  I: TestLoginRuleRequest,
  O: TestLoginRuleResponse,
  service: {
    typeName: "teleport.loginrule.v1.LoginRuleService"
  }
} as const;
