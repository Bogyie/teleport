// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/loginrule/v1/loginrule.proto (package teleport.loginrule.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Metadata } from "../../legacy/types/types_pb.js";
import { StringValues } from "../../legacy/types/wrappers/wrappers_pb.js";

/**
 * LoginRule is a resource to configure rules and logic which should run during
 * Teleport user login.
 *
 * @generated from message teleport.loginrule.v1.LoginRule
 */
export class LoginRule extends Message<LoginRule> {
  /**
   * Metadata is resource metadata.
   *
   * @generated from field: types.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * Version is the resource version.
   *
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * Priority is the priority of the login rule relative to other login rules
   * in the same cluster. Login rules with a lower numbered priority will be
   * evaluated first.
   *
   * @generated from field: int32 priority = 3;
   */
  priority = 0;

  /**
   * TraitsMap is a map of trait keys to lists of predicate expressions which
   * should evaluate to the desired values for that trait.
   *
   * @generated from field: map<string, wrappers.StringValues> traits_map = 4;
   */
  traitsMap: { [key: string]: StringValues } = {};

  /**
   * TraitsExpression is a predicate expression which should return the
   * desired traits for the user upon login.
   *
   * @generated from field: string traits_expression = 5;
   */
  traitsExpression = "";

  constructor(data?: PartialMessage<LoginRule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.loginrule.v1.LoginRule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "traits_map", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: StringValues} },
    { no: 5, name: "traits_expression", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginRule {
    return new LoginRule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginRule {
    return new LoginRule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginRule {
    return new LoginRule().fromJsonString(jsonString, options);
  }

  static equals(a: LoginRule | PlainMessage<LoginRule> | undefined, b: LoginRule | PlainMessage<LoginRule> | undefined): boolean {
    return proto3.util.equals(LoginRule, a, b);
  }
}

