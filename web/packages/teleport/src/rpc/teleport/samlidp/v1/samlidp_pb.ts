// Copyright 2021-2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/samlidp/v1/samlidp.proto (package teleport.samlidp.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { MFAAuthenticateResponse } from "../../legacy/client/proto/authservice_pb.js";
import { SAMLIdPServiceProviderV1, UserV2 } from "../../legacy/types/types_pb.js";
import { StringValues } from "../../legacy/types/wrappers/wrappers_pb.js";

/**
 * ProcessSAMLIdPRequestRequest is a request to create and sign the SAML IdP response
 * to a SAML IdP auth request.
 *
 * @generated from message teleport.samlidp.v1.ProcessSAMLIdPRequestRequest
 */
export class ProcessSAMLIdPRequestRequest extends Message<ProcessSAMLIdPRequestRequest> {
  /**
   * destination is the destination of the response.
   *
   * @generated from field: string destination = 1;
   */
  destination = "";

  /**
   * request_id is the request ID.
   *
   * @generated from field: string request_id = 2;
   */
  requestId = "";

  /**
   * request_time is the time the request was made.
   *
   * @generated from field: google.protobuf.Timestamp request_time = 3;
   */
  requestTime?: Timestamp;

  /**
   * Metadata_url is the metadata URL of the SAML IdP.
   *
   * @generated from field: string metadata_url = 4;
   */
  metadataUrl = "";

  /**
   * signature_method is the signature method to use.
   *
   * @generated from field: string signature_method = 5;
   */
  signatureMethod = "";

  /**
   * assertion is the SAML assertion to sign.
   *
   * @generated from field: bytes assertion = 6;
   */
  assertion = new Uint8Array(0);

  /**
   * service_provider_sso_descriptor is the raw bytes of the service provider's SSO descriptor.
   *
   * @generated from field: bytes service_provider_sso_descriptor = 7;
   */
  serviceProviderSsoDescriptor = new Uint8Array(0);

  /**
   * mfa_response is an mfa challenge response used to verify the user.
   *
   * @generated from field: proto.MFAAuthenticateResponse mfa_response = 8;
   */
  mfaResponse?: MFAAuthenticateResponse;

  constructor(data?: PartialMessage<ProcessSAMLIdPRequestRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.samlidp.v1.ProcessSAMLIdPRequestRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "destination", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "request_time", kind: "message", T: Timestamp },
    { no: 4, name: "metadata_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "signature_method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "assertion", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "service_provider_sso_descriptor", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "mfa_response", kind: "message", T: MFAAuthenticateResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessSAMLIdPRequestRequest {
    return new ProcessSAMLIdPRequestRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessSAMLIdPRequestRequest {
    return new ProcessSAMLIdPRequestRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessSAMLIdPRequestRequest {
    return new ProcessSAMLIdPRequestRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessSAMLIdPRequestRequest | PlainMessage<ProcessSAMLIdPRequestRequest> | undefined, b: ProcessSAMLIdPRequestRequest | PlainMessage<ProcessSAMLIdPRequestRequest> | undefined): boolean {
    return proto3.util.equals(ProcessSAMLIdPRequestRequest, a, b);
  }
}

/**
 * ProcessSAMLIdPRequestResponse is a response to processing the SAML IdP auth request.
 *
 * @generated from message teleport.samlidp.v1.ProcessSAMLIdPRequestResponse
 */
export class ProcessSAMLIdPRequestResponse extends Message<ProcessSAMLIdPRequestResponse> {
  /**
   * response is the SAML response.
   *
   * @generated from field: bytes response = 1;
   */
  response = new Uint8Array(0);

  constructor(data?: PartialMessage<ProcessSAMLIdPRequestResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.samlidp.v1.ProcessSAMLIdPRequestResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessSAMLIdPRequestResponse {
    return new ProcessSAMLIdPRequestResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessSAMLIdPRequestResponse {
    return new ProcessSAMLIdPRequestResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessSAMLIdPRequestResponse {
    return new ProcessSAMLIdPRequestResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessSAMLIdPRequestResponse | PlainMessage<ProcessSAMLIdPRequestResponse> | undefined, b: ProcessSAMLIdPRequestResponse | PlainMessage<ProcessSAMLIdPRequestResponse> | undefined): boolean {
    return proto3.util.equals(ProcessSAMLIdPRequestResponse, a, b);
  }
}

/**
 * TestSAMLIdPAttributeMappingRequest is a request to test attribute mapping.
 *
 * @generated from message teleport.samlidp.v1.TestSAMLIdPAttributeMappingRequest
 */
export class TestSAMLIdPAttributeMappingRequest extends Message<TestSAMLIdPAttributeMappingRequest> {
  /**
   * service_provider is a SAML service provider with attribute mapping.
   *
   * @generated from field: types.SAMLIdPServiceProviderV1 service_provider = 1;
   */
  serviceProvider?: SAMLIdPServiceProviderV1;

  /**
   * users is a list of users whose details will be used
   * to evaluate attribute mapping.
   *
   * @generated from field: repeated types.UserV2 users = 2;
   */
  users: UserV2[] = [];

  constructor(data?: PartialMessage<TestSAMLIdPAttributeMappingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.samlidp.v1.TestSAMLIdPAttributeMappingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_provider", kind: "message", T: SAMLIdPServiceProviderV1 },
    { no: 2, name: "users", kind: "message", T: UserV2, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestSAMLIdPAttributeMappingRequest {
    return new TestSAMLIdPAttributeMappingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestSAMLIdPAttributeMappingRequest {
    return new TestSAMLIdPAttributeMappingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestSAMLIdPAttributeMappingRequest {
    return new TestSAMLIdPAttributeMappingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TestSAMLIdPAttributeMappingRequest | PlainMessage<TestSAMLIdPAttributeMappingRequest> | undefined, b: TestSAMLIdPAttributeMappingRequest | PlainMessage<TestSAMLIdPAttributeMappingRequest> | undefined): boolean {
    return proto3.util.equals(TestSAMLIdPAttributeMappingRequest, a, b);
  }
}

/**
 * TestSAMLIdPAttributeMappingResponse is a response to attribute mapping test request.
 *
 * @generated from message teleport.samlidp.v1.TestSAMLIdPAttributeMappingResponse
 */
export class TestSAMLIdPAttributeMappingResponse extends Message<TestSAMLIdPAttributeMappingResponse> {
  /**
   * mapped_attributes is the result of attribute mapping evaluation.
   *
   * @generated from field: repeated teleport.samlidp.v1.MappedAttribute mapped_attributes = 1;
   */
  mappedAttributes: MappedAttribute[] = [];

  constructor(data?: PartialMessage<TestSAMLIdPAttributeMappingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.samlidp.v1.TestSAMLIdPAttributeMappingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mapped_attributes", kind: "message", T: MappedAttribute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestSAMLIdPAttributeMappingResponse {
    return new TestSAMLIdPAttributeMappingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestSAMLIdPAttributeMappingResponse {
    return new TestSAMLIdPAttributeMappingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestSAMLIdPAttributeMappingResponse {
    return new TestSAMLIdPAttributeMappingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TestSAMLIdPAttributeMappingResponse | PlainMessage<TestSAMLIdPAttributeMappingResponse> | undefined, b: TestSAMLIdPAttributeMappingResponse | PlainMessage<TestSAMLIdPAttributeMappingResponse> | undefined): boolean {
    return proto3.util.equals(TestSAMLIdPAttributeMappingResponse, a, b);
  }
}

/**
 * MappedAttribute is a result of attribute mapping with username
 * of a user whose username, role and traits are used for evaluation.
 *
 * @generated from message teleport.samlidp.v1.MappedAttribute
 */
export class MappedAttribute extends Message<MappedAttribute> {
  /**
   * username is username of user whose detail is used for attribute mapping.
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * mapped_values is a result of attribute mapping where key is requested
   * attribute name and value is result of evaluated predicate expression.
   *
   * @generated from field: map<string, wrappers.StringValues> mapped_values = 2;
   */
  mappedValues: { [key: string]: StringValues } = {};

  constructor(data?: PartialMessage<MappedAttribute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.samlidp.v1.MappedAttribute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mapped_values", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: StringValues} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MappedAttribute {
    return new MappedAttribute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MappedAttribute {
    return new MappedAttribute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MappedAttribute {
    return new MappedAttribute().fromJsonString(jsonString, options);
  }

  static equals(a: MappedAttribute | PlainMessage<MappedAttribute> | undefined, b: MappedAttribute | PlainMessage<MappedAttribute> | undefined): boolean {
    return proto3.util.equals(MappedAttribute, a, b);
  }
}

