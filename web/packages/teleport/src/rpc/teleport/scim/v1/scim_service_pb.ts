// Copyright 2024 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/scim/v1/scim_service.proto (package teleport.scim.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Struct, Timestamp } from "@bufbuild/protobuf";

/**
 * ListSCIMResourcesRequest represents a request to fetch multiple resources
 *
 * @generated from message teleport.scim.v1.ListSCIMResourcesRequest
 */
export class ListSCIMResourcesRequest extends Message<ListSCIMResourcesRequest> {
  /**
   * Target describes the set of requested by the client, vy integration and
   * resource type.
   *
   * @generated from field: teleport.scim.v1.RequestTarget target = 1;
   */
  target?: RequestTarget;

  /**
   * Page is an optional request to retrieve a page of results. Returns all
   * appropriate results if not set.
   *
   * @generated from field: teleport.scim.v1.Page page = 2;
   */
  page?: Page;

  /**
   * Filter is an optional filter to apply to any retrieved results.
   *
   * @generated from field: string filter = 3;
   */
  filter = "";

  constructor(data?: PartialMessage<ListSCIMResourcesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.scim.v1.ListSCIMResourcesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "message", T: RequestTarget },
    { no: 2, name: "page", kind: "message", T: Page },
    { no: 3, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSCIMResourcesRequest {
    return new ListSCIMResourcesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSCIMResourcesRequest {
    return new ListSCIMResourcesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSCIMResourcesRequest {
    return new ListSCIMResourcesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSCIMResourcesRequest | PlainMessage<ListSCIMResourcesRequest> | undefined, b: ListSCIMResourcesRequest | PlainMessage<ListSCIMResourcesRequest> | undefined): boolean {
    return proto3.util.equals(ListSCIMResourcesRequest, a, b);
  }
}

/**
 * GetSCIMResourceRequest describes a request to fetch a specific resource
 *
 * @generated from message teleport.scim.v1.GetSCIMResourceRequest
 */
export class GetSCIMResourceRequest extends Message<GetSCIMResourceRequest> {
  /**
   * Target is the owner, type and ID if the resource targeted by the request.
   *
   * @generated from field: teleport.scim.v1.RequestTarget target = 1;
   */
  target?: RequestTarget;

  constructor(data?: PartialMessage<GetSCIMResourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.scim.v1.GetSCIMResourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "message", T: RequestTarget },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSCIMResourceRequest {
    return new GetSCIMResourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSCIMResourceRequest {
    return new GetSCIMResourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSCIMResourceRequest {
    return new GetSCIMResourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSCIMResourceRequest | PlainMessage<GetSCIMResourceRequest> | undefined, b: GetSCIMResourceRequest | PlainMessage<GetSCIMResourceRequest> | undefined): boolean {
    return proto3.util.equals(GetSCIMResourceRequest, a, b);
  }
}

/**
 * CreateSCIMResourceRequest contains a request for the SCIM server to create a
 * new resource
 *
 * @generated from message teleport.scim.v1.CreateSCIMResourceRequest
 */
export class CreateSCIMResourceRequest extends Message<CreateSCIMResourceRequest> {
  /**
   * Target is the owner & type of the resource targeted by the request.
   *
   * @generated from field: teleport.scim.v1.RequestTarget target = 1;
   */
  target?: RequestTarget;

  /**
   * Resource describes the resource to be created
   *
   * @generated from field: teleport.scim.v1.Resource resource = 2;
   */
  resource?: Resource;

  constructor(data?: PartialMessage<CreateSCIMResourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.scim.v1.CreateSCIMResourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "message", T: RequestTarget },
    { no: 2, name: "resource", kind: "message", T: Resource },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSCIMResourceRequest {
    return new CreateSCIMResourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSCIMResourceRequest {
    return new CreateSCIMResourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSCIMResourceRequest {
    return new CreateSCIMResourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSCIMResourceRequest | PlainMessage<CreateSCIMResourceRequest> | undefined, b: CreateSCIMResourceRequest | PlainMessage<CreateSCIMResourceRequest> | undefined): boolean {
    return proto3.util.equals(CreateSCIMResourceRequest, a, b);
  }
}

/**
 * UpdateSCIMResourceRequest describes an update to a given resource
 *
 * @generated from message teleport.scim.v1.UpdateSCIMResourceRequest
 */
export class UpdateSCIMResourceRequest extends Message<UpdateSCIMResourceRequest> {
  /**
   * Target is the owner, type and ID if the resource targeted by the request.
   *
   * @generated from field: teleport.scim.v1.RequestTarget target = 1;
   */
  target?: RequestTarget;

  /**
   * Resource is a representation of the updated resource that the server needs
   * to conform with
   *
   * @generated from field: teleport.scim.v1.Resource resource = 2;
   */
  resource?: Resource;

  constructor(data?: PartialMessage<UpdateSCIMResourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.scim.v1.UpdateSCIMResourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "message", T: RequestTarget },
    { no: 2, name: "resource", kind: "message", T: Resource },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSCIMResourceRequest {
    return new UpdateSCIMResourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSCIMResourceRequest {
    return new UpdateSCIMResourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSCIMResourceRequest {
    return new UpdateSCIMResourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSCIMResourceRequest | PlainMessage<UpdateSCIMResourceRequest> | undefined, b: UpdateSCIMResourceRequest | PlainMessage<UpdateSCIMResourceRequest> | undefined): boolean {
    return proto3.util.equals(UpdateSCIMResourceRequest, a, b);
  }
}

/**
 * DeleteSCIMResourceRequest describes a request to delete a SCIM-mamanged
 * resource
 *
 * @generated from message teleport.scim.v1.DeleteSCIMResourceRequest
 */
export class DeleteSCIMResourceRequest extends Message<DeleteSCIMResourceRequest> {
  /**
   * Target is the owner, type and ID if the resource targeted by the request.
   *
   * @generated from field: teleport.scim.v1.RequestTarget target = 1;
   */
  target?: RequestTarget;

  constructor(data?: PartialMessage<DeleteSCIMResourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.scim.v1.DeleteSCIMResourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "message", T: RequestTarget },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSCIMResourceRequest {
    return new DeleteSCIMResourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSCIMResourceRequest {
    return new DeleteSCIMResourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSCIMResourceRequest {
    return new DeleteSCIMResourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSCIMResourceRequest | PlainMessage<DeleteSCIMResourceRequest> | undefined, b: DeleteSCIMResourceRequest | PlainMessage<DeleteSCIMResourceRequest> | undefined): boolean {
    return proto3.util.equals(DeleteSCIMResourceRequest, a, b);
  }
}

/**
 * Resource represents an arbitrary SCIM resource, as per RFC7643
 * Section 3.1.
 *
 * See https://datatracker.ietf.org/doc/html/rfc7643#section-3.1
 *
 * @generated from message teleport.scim.v1.Resource
 */
export class Resource extends Message<Resource> {
  /**
   * @generated from field: repeated string schemas = 1;
   */
  schemas: string[] = [];

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string external_id = 3;
   */
  externalId = "";

  /**
   * @generated from field: teleport.scim.v1.Meta meta = 4;
   */
  meta?: Meta;

  /**
   * @generated from field: google.protobuf.Struct attributes = 5;
   */
  attributes?: Struct;

  constructor(data?: PartialMessage<Resource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.scim.v1.Resource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schemas", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "external_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "meta", kind: "message", T: Meta },
    { no: 5, name: "attributes", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resource {
    return new Resource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJsonString(jsonString, options);
  }

  static equals(a: Resource | PlainMessage<Resource> | undefined, b: Resource | PlainMessage<Resource> | undefined): boolean {
    return proto3.util.equals(Resource, a, b);
  }
}

/**
 * Meta holds resource metadata as per RFC7643 Section 3.1.
 *
 * See https://datatracker.ietf.org/doc/html/rfc7643#section-3.1
 *
 * @generated from message teleport.scim.v1.Meta
 */
export class Meta extends Message<Meta> {
  /**
   * @generated from field: string resource_type = 1;
   */
  resourceType = "";

  /**
   * @generated from field: google.protobuf.Timestamp created = 2;
   */
  created?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp modified = 3;
   */
  modified?: Timestamp;

  /**
   * @generated from field: string location = 4;
   */
  location = "";

  /**
   * @generated from field: string version = 5;
   */
  version = "";

  constructor(data?: PartialMessage<Meta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.scim.v1.Meta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created", kind: "message", T: Timestamp },
    { no: 3, name: "modified", kind: "message", T: Timestamp },
    { no: 4, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Meta {
    return new Meta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Meta {
    return new Meta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Meta {
    return new Meta().fromJsonString(jsonString, options);
  }

  static equals(a: Meta | PlainMessage<Meta> | undefined, b: Meta | PlainMessage<Meta> | undefined): boolean {
    return proto3.util.equals(Meta, a, b);
  }
}

/**
 * ResourceList encapsulates a list of resources as per RFC7644
 * Section 3.4.2
 *
 * See https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2
 *
 * @generated from message teleport.scim.v1.ResourceList
 */
export class ResourceList extends Message<ResourceList> {
  /**
   * @generated from field: int32 total_results = 1;
   */
  totalResults = 0;

  /**
   * @generated from field: int32 start_index = 2;
   */
  startIndex = 0;

  /**
   * @generated from field: int32 items_per_page = 3;
   */
  itemsPerPage = 0;

  /**
   * @generated from field: repeated teleport.scim.v1.Resource resources = 4;
   */
  resources: Resource[] = [];

  constructor(data?: PartialMessage<ResourceList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.scim.v1.ResourceList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_results", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "start_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "items_per_page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "resources", kind: "message", T: Resource, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceList {
    return new ResourceList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceList {
    return new ResourceList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceList {
    return new ResourceList().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceList | PlainMessage<ResourceList> | undefined, b: ResourceList | PlainMessage<ResourceList> | undefined): boolean {
    return proto3.util.equals(ResourceList, a, b);
  }
}

/**
 * RequestTarget describes the target resource set of a given request. Common to
 * all request types.
 *
 * @generated from message teleport.scim.v1.RequestTarget
 */
export class RequestTarget extends Message<RequestTarget> {
  /**
   * Authorization is the contents of the HTTP Authorization header supplied by
   * the SCIM client, used to authenticate the request against the targeted
   * interation.
   *
   * @generated from field: string authorization = 1;
   */
  authorization = "";

  /**
   * PluginID is the name of the integration to interact with
   *
   * @generated from field: string plugin_id = 2;
   */
  pluginId = "";

  /**
   * ResourceType is the name of the type of resource to interact with.
   * Expecting either "User" or "Group"
   *
   * @generated from field: string resource_type = 3;
   */
  resourceType = "";

  /**
   * ResourceID is the name of a specific resource to interact with. If blank,
   * treat the request as a bulk query
   *
   * @generated from field: string resource_id = 4;
   */
  resourceId = "";

  constructor(data?: PartialMessage<RequestTarget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.scim.v1.RequestTarget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authorization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "plugin_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "resource_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestTarget {
    return new RequestTarget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestTarget {
    return new RequestTarget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestTarget {
    return new RequestTarget().fromJsonString(jsonString, options);
  }

  static equals(a: RequestTarget | PlainMessage<RequestTarget> | undefined, b: RequestTarget | PlainMessage<RequestTarget> | undefined): boolean {
    return proto3.util.equals(RequestTarget, a, b);
  }
}

/**
 * Page represents an optional range to set in GET request
 *
 * @generated from message teleport.scim.v1.Page
 */
export class Page extends Message<Page> {
  /**
   * @generated from field: uint64 start_index = 1;
   */
  startIndex = protoInt64.zero;

  /**
   * @generated from field: uint64 count = 2;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<Page>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.scim.v1.Page";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Page {
    return new Page().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Page {
    return new Page().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Page {
    return new Page().fromJsonString(jsonString, options);
  }

  static equals(a: Page | PlainMessage<Page> | undefined, b: Page | PlainMessage<Page> | undefined): boolean {
    return proto3.util.equals(Page, a, b);
  }
}

