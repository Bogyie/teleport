//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/lib/web/terminal/envelope.proto (package teleport.lib.web, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Envelope is used to wrap and transend and receive messages between the
 * web client and proxy.
 *
 * @generated from message teleport.lib.web.Envelope
 */
export class Envelope extends Message<Envelope> {
  /**
   * Version is the version of the protocol.
   *
   * @generated from field: string Version = 1;
   */
  Version = "";

  /**
   * Type is the type of message. For version 1 of the protocol this must
   * not be longer than 1 character.
   *
   * @generated from field: string Type = 2;
   */
  Type = "";

  /**
   * Payload is the actual data to send.
   *
   * @generated from field: string Payload = 3;
   */
  Payload = "";

  constructor(data?: PartialMessage<Envelope>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.lib.web.Envelope";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Payload", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Envelope {
    return new Envelope().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Envelope {
    return new Envelope().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Envelope {
    return new Envelope().fromJsonString(jsonString, options);
  }

  static equals(a: Envelope | PlainMessage<Envelope> | undefined, b: Envelope | PlainMessage<Envelope> | undefined): boolean {
    return proto3.util.equals(Envelope, a, b);
  }
}

