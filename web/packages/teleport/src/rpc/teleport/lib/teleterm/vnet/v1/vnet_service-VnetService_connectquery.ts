// Teleport
// Copyright (C) 2024 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/lib/teleterm/vnet/v1/vnet_service.proto (package teleport.lib.teleterm.vnet.v1, syntax proto3)
/* eslint-disable */

import { MethodKind } from "@bufbuild/protobuf";
import { GetBackgroundItemStatusRequest, GetBackgroundItemStatusResponse, ListDNSZonesRequest, ListDNSZonesResponse, StartRequest, StartResponse, StopRequest, StopResponse } from "./vnet_service_pb";

/**
 * Start starts VNet.
 *
 * @generated from rpc teleport.lib.teleterm.vnet.v1.VnetService.Start
 */
export const start = {
  localName: "start",
  name: "Start",
  kind: MethodKind.Unary,
  I: StartRequest,
  O: StartResponse,
  service: {
    typeName: "teleport.lib.teleterm.vnet.v1.VnetService"
  }
} as const;

/**
 * Stop stops VNet.
 *
 * @generated from rpc teleport.lib.teleterm.vnet.v1.VnetService.Stop
 */
export const stop = {
  localName: "stop",
  name: "Stop",
  kind: MethodKind.Unary,
  I: StopRequest,
  O: StopResponse,
  service: {
    typeName: "teleport.lib.teleterm.vnet.v1.VnetService"
  }
} as const;

/**
 * ListDNSZones returns DNS zones of all root and leaf clusters with non-expired user certs. This
 * includes the proxy service hostnames and custom DNS zones configured in vnet_config.
 *
 * This is fetched independently of what the Electron app thinks the current state of the cluster
 * looks like, since the VNet admin process also fetches this data independently of the Electron
 * app.
 *
 * Just like the admin process, it skips root and leaf clusters for which the vnet_config couldn't
 * be fetched (due to e.g., a network error or an expired cert).
 *
 * @generated from rpc teleport.lib.teleterm.vnet.v1.VnetService.ListDNSZones
 */
export const listDNSZones = {
  localName: "listDNSZones",
  name: "ListDNSZones",
  kind: MethodKind.Unary,
  I: ListDNSZonesRequest,
  O: ListDNSZonesResponse,
  service: {
    typeName: "teleport.lib.teleterm.vnet.v1.VnetService"
  }
} as const;

/**
 * GetBackgroundItemStatus returns the status of the background item responsible for launching
 * VNet daemon. macOS only. tsh must be compiled with the vnetdaemon build tag.
 *
 * @generated from rpc teleport.lib.teleterm.vnet.v1.VnetService.GetBackgroundItemStatus
 */
export const getBackgroundItemStatus = {
  localName: "getBackgroundItemStatus",
  name: "GetBackgroundItemStatus",
  kind: MethodKind.Unary,
  I: GetBackgroundItemStatusRequest,
  O: GetBackgroundItemStatusResponse,
  service: {
    typeName: "teleport.lib.teleterm.vnet.v1.VnetService"
  }
} as const;
