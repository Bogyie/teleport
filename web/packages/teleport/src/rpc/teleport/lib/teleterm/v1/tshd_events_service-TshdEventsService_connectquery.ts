//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts"
// @generated from file teleport/lib/teleterm/v1/tshd_events_service.proto (package teleport.lib.teleterm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MethodKind } from "@bufbuild/protobuf";
import { GetUsageReportingSettingsRequest, GetUsageReportingSettingsResponse, PromptMFARequest, PromptMFAResponse, ReloginRequest, ReloginResponse, ReportUnexpectedVnetShutdownRequest, ReportUnexpectedVnetShutdownResponse, SendNotificationRequest, SendNotificationResponse, SendPendingHeadlessAuthenticationRequest, SendPendingHeadlessAuthenticationResponse } from "./tshd_events_service_pb.js";

/**
 * Relogin makes the Electron app display a login modal for the specific root cluster. The request
 * returns a response after the relogin procedure has been successfully finished.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TshdEventsService.Relogin
 */
export const relogin = {
  localName: "relogin",
  name: "Relogin",
  kind: MethodKind.Unary,
  I: ReloginRequest,
  O: ReloginResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TshdEventsService"
  }
} as const;

/**
 * SendNotification causes the Electron app to display a notification in the UI. The request
 * accepts a specific message rather than a generic string so that the Electron is in control as
 * to what message is displayed and how exactly it looks.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TshdEventsService.SendNotification
 */
export const sendNotification = {
  localName: "sendNotification",
  name: "SendNotification",
  kind: MethodKind.Unary,
  I: SendNotificationRequest,
  O: SendNotificationResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TshdEventsService"
  }
} as const;

/**
 * SendPendingHeadlessAuthentication notifies the Electron app of a pending headless authentication,
 * which it can use to initiate headless authentication resolution in the UI.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TshdEventsService.SendPendingHeadlessAuthentication
 */
export const sendPendingHeadlessAuthentication = {
  localName: "sendPendingHeadlessAuthentication",
  name: "SendPendingHeadlessAuthentication",
  kind: MethodKind.Unary,
  I: SendPendingHeadlessAuthenticationRequest,
  O: SendPendingHeadlessAuthenticationResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TshdEventsService"
  }
} as const;

/**
 * PromptMFA notifies the Electron app that the daemon is waiting for the user to answer an MFA prompt.
 * If Webauthn is supported, tsh daemon starts another goroutine which readies the hardware key.
 * If TOTP is supported, tsh daemon expects that the Electron app responds to this RPC with the
 * code.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TshdEventsService.PromptMFA
 */
export const promptMFA = {
  localName: "promptMFA",
  name: "PromptMFA",
  kind: MethodKind.Unary,
  I: PromptMFARequest,
  O: PromptMFAResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TshdEventsService"
  }
} as const;

/**
 * GetUsageReportingSettings returns the current state of usage reporting.
 * At the moment, the user cannot toggle usage reporting on and off without shutting down the app,
 * with the only exception being the first start of the app when they're prompted about telemetry.
 * Hence why this is an RPC and not information passed over argv to tsh daemon.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TshdEventsService.GetUsageReportingSettings
 */
export const getUsageReportingSettings = {
  localName: "getUsageReportingSettings",
  name: "GetUsageReportingSettings",
  kind: MethodKind.Unary,
  I: GetUsageReportingSettingsRequest,
  O: GetUsageReportingSettingsResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TshdEventsService"
  }
} as const;

/**
 * ReportUnexpectedVnetShutdown is sent by tsh daemon when VNet exits outside of the
 * request-response cycle of Start and Stop RPCs of VnetService. The Electron app is then able to
 * update the state of VNet in the UI.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TshdEventsService.ReportUnexpectedVnetShutdown
 */
export const reportUnexpectedVnetShutdown = {
  localName: "reportUnexpectedVnetShutdown",
  name: "ReportUnexpectedVnetShutdown",
  kind: MethodKind.Unary,
  I: ReportUnexpectedVnetShutdownRequest,
  O: ReportUnexpectedVnetShutdownResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TshdEventsService"
  }
} as const;
