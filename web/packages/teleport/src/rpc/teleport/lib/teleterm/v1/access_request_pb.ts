//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/lib/teleterm/v1/access_request.proto (package teleport.lib.teleterm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message teleport.lib.teleterm.v1.AccessRequest
 */
export class AccessRequest extends Message<AccessRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * the request state of Access Request. option of PENDING, APPROVED, DENIED, PROMOTED, NONE
   *
   * @generated from field: string state = 2;
   */
  state = "";

  /**
   * @generated from field: string resolve_reason = 3;
   */
  resolveReason = "";

  /**
   * @generated from field: string request_reason = 4;
   */
  requestReason = "";

  /**
   * user is the user who submitted the Access Request
   *
   * @generated from field: string user = 5;
   */
  user = "";

  /**
   * a list of roles requested
   *
   * @generated from field: repeated string roles = 6;
   */
  roles: string[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp created = 7;
   */
  created?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp expires = 8;
   */
  expires?: Timestamp;

  /**
   * @generated from field: repeated teleport.lib.teleterm.v1.AccessRequestReview reviews = 9;
   */
  reviews: AccessRequestReview[] = [];

  /**
   * @generated from field: repeated string suggested_reviewers = 10;
   */
  suggestedReviewers: string[] = [];

  /**
   * thresholds specifies minimum amount of approvers or deniers. Defaults to 'default'
   *
   * @generated from field: repeated string threshold_names = 11;
   */
  thresholdNames: string[] = [];

  /**
   * TODO(avatus) remove the resource_ids field once the changes to rely on resources instead is merged
   * a list of resourceIDs requested in the AccessRequest
   *
   * @generated from field: repeated teleport.lib.teleterm.v1.ResourceID resource_ids = 12;
   */
  resourceIds: ResourceID[] = [];

  /**
   * @generated from field: repeated teleport.lib.teleterm.v1.Resource resources = 13;
   */
  resources: Resource[] = [];

  /**
   * promoted_access_list_title is the title of the access
   * list that this access request was promoted to.
   *
   * @generated from field: string promoted_access_list_title = 14;
   */
  promotedAccessListTitle = "";

  /**
   * assume_start_time is the time after which the requested access can be assumed.
   *
   * @generated from field: google.protobuf.Timestamp assume_start_time = 15;
   */
  assumeStartTime?: Timestamp;

  /**
   * max_duration is the maximum duration for which the request is valid.
   *
   * @generated from field: google.protobuf.Timestamp max_duration = 16;
   */
  maxDuration?: Timestamp;

  /**
   * request_ttl is the expiration time of the request (how long it will await
   * approval).
   *
   * @generated from field: google.protobuf.Timestamp request_ttl = 17;
   */
  requestTtl?: Timestamp;

  /**
   * session_ttl indicates how long a certificate for a session should be valid for.
   *
   * @generated from field: google.protobuf.Timestamp session_ttl = 18;
   */
  sessionTtl?: Timestamp;

  constructor(data?: PartialMessage<AccessRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.lib.teleterm.v1.AccessRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resolve_reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "request_reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "created", kind: "message", T: Timestamp },
    { no: 8, name: "expires", kind: "message", T: Timestamp },
    { no: 9, name: "reviews", kind: "message", T: AccessRequestReview, repeated: true },
    { no: 10, name: "suggested_reviewers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "threshold_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "resource_ids", kind: "message", T: ResourceID, repeated: true },
    { no: 13, name: "resources", kind: "message", T: Resource, repeated: true },
    { no: 14, name: "promoted_access_list_title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "assume_start_time", kind: "message", T: Timestamp },
    { no: 16, name: "max_duration", kind: "message", T: Timestamp },
    { no: 17, name: "request_ttl", kind: "message", T: Timestamp },
    { no: 18, name: "session_ttl", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessRequest {
    return new AccessRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessRequest {
    return new AccessRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessRequest {
    return new AccessRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccessRequest | PlainMessage<AccessRequest> | undefined, b: AccessRequest | PlainMessage<AccessRequest> | undefined): boolean {
    return proto3.util.equals(AccessRequest, a, b);
  }
}

/**
 * @generated from message teleport.lib.teleterm.v1.AccessRequestReview
 */
export class AccessRequestReview extends Message<AccessRequestReview> {
  /**
   * author is the creator of the AccessRequestReview.
   *
   * @generated from field: string author = 1;
   */
  author = "";

  /**
   * list of roles approved
   *
   * @generated from field: repeated string roles = 2;
   */
  roles: string[] = [];

  /**
   * the state of the review, either APPROVED or DENIED
   *
   * @generated from field: string state = 3;
   */
  state = "";

  /**
   * reason is why the request was approved or denied
   *
   * @generated from field: string reason = 4;
   */
  reason = "";

  /**
   * @generated from field: google.protobuf.Timestamp created = 5;
   */
  created?: Timestamp;

  /**
   * promoted_access_list_title is the title of the access
   * list that the access request was promoted to.
   *
   * @generated from field: string promoted_access_list_title = 6;
   */
  promotedAccessListTitle = "";

  /**
   * if not a nil value, this reviewer overwrote
   * the requested start time.
   *
   * @generated from field: google.protobuf.Timestamp assume_start_time = 7;
   */
  assumeStartTime?: Timestamp;

  constructor(data?: PartialMessage<AccessRequestReview>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.lib.teleterm.v1.AccessRequestReview";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created", kind: "message", T: Timestamp },
    { no: 6, name: "promoted_access_list_title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "assume_start_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessRequestReview {
    return new AccessRequestReview().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessRequestReview {
    return new AccessRequestReview().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessRequestReview {
    return new AccessRequestReview().fromJsonString(jsonString, options);
  }

  static equals(a: AccessRequestReview | PlainMessage<AccessRequestReview> | undefined, b: AccessRequestReview | PlainMessage<AccessRequestReview> | undefined): boolean {
    return proto3.util.equals(AccessRequestReview, a, b);
  }
}

/**
 * @generated from message teleport.lib.teleterm.v1.ResourceID
 */
export class ResourceID extends Message<ResourceID> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string cluster_name = 3;
   */
  clusterName = "";

  /**
   * @generated from field: string sub_resource_name = 4;
   */
  subResourceName = "";

  constructor(data?: PartialMessage<ResourceID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.lib.teleterm.v1.ResourceID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "sub_resource_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceID {
    return new ResourceID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceID {
    return new ResourceID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceID {
    return new ResourceID().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceID | PlainMessage<ResourceID> | undefined, b: ResourceID | PlainMessage<ResourceID> | undefined): boolean {
    return proto3.util.equals(ResourceID, a, b);
  }
}

/**
 * @generated from message teleport.lib.teleterm.v1.ResourceDetails
 */
export class ResourceDetails extends Message<ResourceDetails> {
  /**
   * @generated from field: string hostname = 1;
   */
  hostname = "";

  /**
   * @generated from field: string friendly_name = 2;
   */
  friendlyName = "";

  constructor(data?: PartialMessage<ResourceDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.lib.teleterm.v1.ResourceDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "friendly_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceDetails {
    return new ResourceDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceDetails {
    return new ResourceDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceDetails {
    return new ResourceDetails().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceDetails | PlainMessage<ResourceDetails> | undefined, b: ResourceDetails | PlainMessage<ResourceDetails> | undefined): boolean {
    return proto3.util.equals(ResourceDetails, a, b);
  }
}

/**
 * @generated from message teleport.lib.teleterm.v1.Resource
 */
export class Resource extends Message<Resource> {
  /**
   * @generated from field: teleport.lib.teleterm.v1.ResourceID id = 1;
   */
  id?: ResourceID;

  /**
   * @generated from field: teleport.lib.teleterm.v1.ResourceDetails details = 2;
   */
  details?: ResourceDetails;

  constructor(data?: PartialMessage<Resource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.lib.teleterm.v1.Resource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: ResourceID },
    { no: 2, name: "details", kind: "message", T: ResourceDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resource {
    return new Resource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJsonString(jsonString, options);
  }

  static equals(a: Resource | PlainMessage<Resource> | undefined, b: Resource | PlainMessage<Resource> | undefined): boolean {
    return proto3.util.equals(Resource, a, b);
  }
}

