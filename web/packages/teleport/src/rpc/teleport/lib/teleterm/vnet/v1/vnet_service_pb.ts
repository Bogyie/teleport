// Teleport
// Copyright (C) 2024 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/lib/teleterm/vnet/v1/vnet_service.proto (package teleport.lib.teleterm.vnet.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/lib/teleterm/vnet/v1/vnet_service.proto.
 */
export const file_teleport_lib_teleterm_vnet_v1_vnet_service: GenFile = /*@__PURE__*/
  fileDesc("CjB0ZWxlcG9ydC9saWIvdGVsZXRlcm0vdm5ldC92MS92bmV0X3NlcnZpY2UucHJvdG8SHXRlbGVwb3J0LmxpYi50ZWxldGVybS52bmV0LnYxIg4KDFN0YXJ0UmVxdWVzdCIPCg1TdGFydFJlc3BvbnNlIg0KC1N0b3BSZXF1ZXN0Ig4KDFN0b3BSZXNwb25zZSIVChNMaXN0RE5TWm9uZXNSZXF1ZXN0IikKFExpc3RETlNab25lc1Jlc3BvbnNlEhEKCWRuc196b25lcxgBIAMoCSIgCh5HZXRCYWNrZ3JvdW5kSXRlbVN0YXR1c1JlcXVlc3QiZgofR2V0QmFja2dyb3VuZEl0ZW1TdGF0dXNSZXNwb25zZRJDCgZzdGF0dXMYASABKA4yMy50ZWxlcG9ydC5saWIudGVsZXRlcm0udm5ldC52MS5CYWNrZ3JvdW5kSXRlbVN0YXR1cyqLAgoUQmFja2dyb3VuZEl0ZW1TdGF0dXMSJgoiQkFDS0dST1VORF9JVEVNX1NUQVRVU19VTlNQRUNJRklFRBAAEikKJUJBQ0tHUk9VTkRfSVRFTV9TVEFUVVNfTk9UX1JFR0lTVEVSRUQQARIiCh5CQUNLR1JPVU5EX0lURU1fU1RBVFVTX0VOQUJMRUQQAhIsCihCQUNLR1JPVU5EX0lURU1fU1RBVFVTX1JFUVVJUkVTX0FQUFJPVkFMEAMSJAogQkFDS0dST1VORF9JVEVNX1NUQVRVU19OT1RfRk9VTkQQBBIoCiRCQUNLR1JPVU5EX0lURU1fU1RBVFVTX05PVF9TVVBQT1JURUQQBTLmAwoLVm5ldFNlcnZpY2USYgoFU3RhcnQSKy50ZWxlcG9ydC5saWIudGVsZXRlcm0udm5ldC52MS5TdGFydFJlcXVlc3QaLC50ZWxlcG9ydC5saWIudGVsZXRlcm0udm5ldC52MS5TdGFydFJlc3BvbnNlEl8KBFN0b3ASKi50ZWxlcG9ydC5saWIudGVsZXRlcm0udm5ldC52MS5TdG9wUmVxdWVzdBorLnRlbGVwb3J0LmxpYi50ZWxldGVybS52bmV0LnYxLlN0b3BSZXNwb25zZRJ3CgxMaXN0RE5TWm9uZXMSMi50ZWxlcG9ydC5saWIudGVsZXRlcm0udm5ldC52MS5MaXN0RE5TWm9uZXNSZXF1ZXN0GjMudGVsZXBvcnQubGliLnRlbGV0ZXJtLnZuZXQudjEuTGlzdEROU1pvbmVzUmVzcG9uc2USmAEKF0dldEJhY2tncm91bmRJdGVtU3RhdHVzEj0udGVsZXBvcnQubGliLnRlbGV0ZXJtLnZuZXQudjEuR2V0QmFja2dyb3VuZEl0ZW1TdGF0dXNSZXF1ZXN0Gj4udGVsZXBvcnQubGliLnRlbGV0ZXJtLnZuZXQudjEuR2V0QmFja2dyb3VuZEl0ZW1TdGF0dXNSZXNwb25zZUJVWlNnaXRodWIuY29tL2dyYXZpdGF0aW9uYWwvdGVsZXBvcnQvZ2VuL3Byb3RvL2dvL3RlbGVwb3J0L2xpYi90ZWxldGVybS92bmV0L3YxO3ZuZXR2MWIGcHJvdG8z");

/**
 * Request for Start.
 *
 * @generated from message teleport.lib.teleterm.vnet.v1.StartRequest
 */
export type StartRequest = Message<"teleport.lib.teleterm.vnet.v1.StartRequest"> & {
};

/**
 * Describes the message teleport.lib.teleterm.vnet.v1.StartRequest.
 * Use `create(StartRequestSchema)` to create a new message.
 */
export const StartRequestSchema: GenMessage<StartRequest> = /*@__PURE__*/
  messageDesc(file_teleport_lib_teleterm_vnet_v1_vnet_service, 0);

/**
 * Response for Start.
 *
 * @generated from message teleport.lib.teleterm.vnet.v1.StartResponse
 */
export type StartResponse = Message<"teleport.lib.teleterm.vnet.v1.StartResponse"> & {
};

/**
 * Describes the message teleport.lib.teleterm.vnet.v1.StartResponse.
 * Use `create(StartResponseSchema)` to create a new message.
 */
export const StartResponseSchema: GenMessage<StartResponse> = /*@__PURE__*/
  messageDesc(file_teleport_lib_teleterm_vnet_v1_vnet_service, 1);

/**
 * Request for Stop.
 *
 * @generated from message teleport.lib.teleterm.vnet.v1.StopRequest
 */
export type StopRequest = Message<"teleport.lib.teleterm.vnet.v1.StopRequest"> & {
};

/**
 * Describes the message teleport.lib.teleterm.vnet.v1.StopRequest.
 * Use `create(StopRequestSchema)` to create a new message.
 */
export const StopRequestSchema: GenMessage<StopRequest> = /*@__PURE__*/
  messageDesc(file_teleport_lib_teleterm_vnet_v1_vnet_service, 2);

/**
 * Response for Stop.
 *
 * @generated from message teleport.lib.teleterm.vnet.v1.StopResponse
 */
export type StopResponse = Message<"teleport.lib.teleterm.vnet.v1.StopResponse"> & {
};

/**
 * Describes the message teleport.lib.teleterm.vnet.v1.StopResponse.
 * Use `create(StopResponseSchema)` to create a new message.
 */
export const StopResponseSchema: GenMessage<StopResponse> = /*@__PURE__*/
  messageDesc(file_teleport_lib_teleterm_vnet_v1_vnet_service, 3);

/**
 * Request for ListDNSZones.
 *
 * @generated from message teleport.lib.teleterm.vnet.v1.ListDNSZonesRequest
 */
export type ListDNSZonesRequest = Message<"teleport.lib.teleterm.vnet.v1.ListDNSZonesRequest"> & {
};

/**
 * Describes the message teleport.lib.teleterm.vnet.v1.ListDNSZonesRequest.
 * Use `create(ListDNSZonesRequestSchema)` to create a new message.
 */
export const ListDNSZonesRequestSchema: GenMessage<ListDNSZonesRequest> = /*@__PURE__*/
  messageDesc(file_teleport_lib_teleterm_vnet_v1_vnet_service, 4);

/**
 * Response for ListDNSZones.
 *
 * @generated from message teleport.lib.teleterm.vnet.v1.ListDNSZonesResponse
 */
export type ListDNSZonesResponse = Message<"teleport.lib.teleterm.vnet.v1.ListDNSZonesResponse"> & {
  /**
   * dns_zones is a deduplicated list of DNS zones.
   *
   * @generated from field: repeated string dns_zones = 1;
   */
  dnsZones: string[];
};

/**
 * Describes the message teleport.lib.teleterm.vnet.v1.ListDNSZonesResponse.
 * Use `create(ListDNSZonesResponseSchema)` to create a new message.
 */
export const ListDNSZonesResponseSchema: GenMessage<ListDNSZonesResponse> = /*@__PURE__*/
  messageDesc(file_teleport_lib_teleterm_vnet_v1_vnet_service, 5);

/**
 * Request for GetBackgroundItemStatus.
 *
 * @generated from message teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusRequest
 */
export type GetBackgroundItemStatusRequest = Message<"teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusRequest"> & {
};

/**
 * Describes the message teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusRequest.
 * Use `create(GetBackgroundItemStatusRequestSchema)` to create a new message.
 */
export const GetBackgroundItemStatusRequestSchema: GenMessage<GetBackgroundItemStatusRequest> = /*@__PURE__*/
  messageDesc(file_teleport_lib_teleterm_vnet_v1_vnet_service, 6);

/**
 * Response for GetBackgroundItemStatus.
 *
 * @generated from message teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusResponse
 */
export type GetBackgroundItemStatusResponse = Message<"teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusResponse"> & {
  /**
   * @generated from field: teleport.lib.teleterm.vnet.v1.BackgroundItemStatus status = 1;
   */
  status: BackgroundItemStatus;
};

/**
 * Describes the message teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusResponse.
 * Use `create(GetBackgroundItemStatusResponseSchema)` to create a new message.
 */
export const GetBackgroundItemStatusResponseSchema: GenMessage<GetBackgroundItemStatusResponse> = /*@__PURE__*/
  messageDesc(file_teleport_lib_teleterm_vnet_v1_vnet_service, 7);

/**
 * BackgroundItemStatus maps to SMAppServiceStatus of the Service Management framework in macOS.
 * https://developer.apple.com/documentation/servicemanagement/smappservice/status-swift.enum?language=objc
 *
 * @generated from enum teleport.lib.teleterm.vnet.v1.BackgroundItemStatus
 */
export enum BackgroundItemStatus {
  /**
   * @generated from enum value: BACKGROUND_ITEM_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: BACKGROUND_ITEM_STATUS_NOT_REGISTERED = 1;
   */
  NOT_REGISTERED = 1,

  /**
   * This is the status the background item should have before tsh attempts to send a message to the
   * daemon.
   *
   * @generated from enum value: BACKGROUND_ITEM_STATUS_ENABLED = 2;
   */
  ENABLED = 2,

  /**
   * @generated from enum value: BACKGROUND_ITEM_STATUS_REQUIRES_APPROVAL = 3;
   */
  REQUIRES_APPROVAL = 3,

  /**
   * @generated from enum value: BACKGROUND_ITEM_STATUS_NOT_FOUND = 4;
   */
  NOT_FOUND = 4,

  /**
   * @generated from enum value: BACKGROUND_ITEM_STATUS_NOT_SUPPORTED = 5;
   */
  NOT_SUPPORTED = 5,
}

/**
 * Describes the enum teleport.lib.teleterm.vnet.v1.BackgroundItemStatus.
 */
export const BackgroundItemStatusSchema: GenEnum<BackgroundItemStatus> = /*@__PURE__*/
  enumDesc(file_teleport_lib_teleterm_vnet_v1_vnet_service, 0);

/**
 * VnetService provides methods to manage a VNet instance.
 *
 * @generated from service teleport.lib.teleterm.vnet.v1.VnetService
 */
export const VnetService: GenService<{
  /**
   * Start starts VNet.
   *
   * @generated from rpc teleport.lib.teleterm.vnet.v1.VnetService.Start
   */
  start: {
    methodKind: "unary";
    input: typeof StartRequestSchema;
    output: typeof StartResponseSchema;
  },
  /**
   * Stop stops VNet.
   *
   * @generated from rpc teleport.lib.teleterm.vnet.v1.VnetService.Stop
   */
  stop: {
    methodKind: "unary";
    input: typeof StopRequestSchema;
    output: typeof StopResponseSchema;
  },
  /**
   * ListDNSZones returns DNS zones of all root and leaf clusters with non-expired user certs. This
   * includes the proxy service hostnames and custom DNS zones configured in vnet_config.
   *
   * This is fetched independently of what the Electron app thinks the current state of the cluster
   * looks like, since the VNet admin process also fetches this data independently of the Electron
   * app.
   *
   * Just like the admin process, it skips root and leaf clusters for which the vnet_config couldn't
   * be fetched (due to e.g., a network error or an expired cert).
   *
   * @generated from rpc teleport.lib.teleterm.vnet.v1.VnetService.ListDNSZones
   */
  listDNSZones: {
    methodKind: "unary";
    input: typeof ListDNSZonesRequestSchema;
    output: typeof ListDNSZonesResponseSchema;
  },
  /**
   * GetBackgroundItemStatus returns the status of the background item responsible for launching
   * VNet daemon. macOS only. tsh must be compiled with the vnetdaemon build tag.
   *
   * @generated from rpc teleport.lib.teleterm.vnet.v1.VnetService.GetBackgroundItemStatus
   */
  getBackgroundItemStatus: {
    methodKind: "unary";
    input: typeof GetBackgroundItemStatusRequestSchema;
    output: typeof GetBackgroundItemStatusResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_teleport_lib_teleterm_vnet_v1_vnet_service, 0);

