// Teleport
// Copyright (C) 2024 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/lib/teleterm/vnet/v1/vnet_service.proto (package teleport.lib.teleterm.vnet.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * BackgroundItemStatus maps to SMAppServiceStatus of the Service Management framework in macOS.
 * https://developer.apple.com/documentation/servicemanagement/smappservice/status-swift.enum?language=objc
 *
 * @generated from enum teleport.lib.teleterm.vnet.v1.BackgroundItemStatus
 */
export enum BackgroundItemStatus {
  /**
   * @generated from enum value: BACKGROUND_ITEM_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: BACKGROUND_ITEM_STATUS_NOT_REGISTERED = 1;
   */
  NOT_REGISTERED = 1,

  /**
   * This is the status the background item should have before tsh attempts to send a message to the
   * daemon.
   *
   * @generated from enum value: BACKGROUND_ITEM_STATUS_ENABLED = 2;
   */
  ENABLED = 2,

  /**
   * @generated from enum value: BACKGROUND_ITEM_STATUS_REQUIRES_APPROVAL = 3;
   */
  REQUIRES_APPROVAL = 3,

  /**
   * @generated from enum value: BACKGROUND_ITEM_STATUS_NOT_FOUND = 4;
   */
  NOT_FOUND = 4,

  /**
   * @generated from enum value: BACKGROUND_ITEM_STATUS_NOT_SUPPORTED = 5;
   */
  NOT_SUPPORTED = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(BackgroundItemStatus)
proto3.util.setEnumType(BackgroundItemStatus, "teleport.lib.teleterm.vnet.v1.BackgroundItemStatus", [
  { no: 0, name: "BACKGROUND_ITEM_STATUS_UNSPECIFIED" },
  { no: 1, name: "BACKGROUND_ITEM_STATUS_NOT_REGISTERED" },
  { no: 2, name: "BACKGROUND_ITEM_STATUS_ENABLED" },
  { no: 3, name: "BACKGROUND_ITEM_STATUS_REQUIRES_APPROVAL" },
  { no: 4, name: "BACKGROUND_ITEM_STATUS_NOT_FOUND" },
  { no: 5, name: "BACKGROUND_ITEM_STATUS_NOT_SUPPORTED" },
]);

/**
 * Request for Start.
 *
 * @generated from message teleport.lib.teleterm.vnet.v1.StartRequest
 */
export class StartRequest extends Message<StartRequest> {
  constructor(data?: PartialMessage<StartRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.lib.teleterm.vnet.v1.StartRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartRequest {
    return new StartRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartRequest {
    return new StartRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartRequest {
    return new StartRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartRequest | PlainMessage<StartRequest> | undefined, b: StartRequest | PlainMessage<StartRequest> | undefined): boolean {
    return proto3.util.equals(StartRequest, a, b);
  }
}

/**
 * Response for Start.
 *
 * @generated from message teleport.lib.teleterm.vnet.v1.StartResponse
 */
export class StartResponse extends Message<StartResponse> {
  constructor(data?: PartialMessage<StartResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.lib.teleterm.vnet.v1.StartResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartResponse {
    return new StartResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartResponse {
    return new StartResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartResponse {
    return new StartResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartResponse | PlainMessage<StartResponse> | undefined, b: StartResponse | PlainMessage<StartResponse> | undefined): boolean {
    return proto3.util.equals(StartResponse, a, b);
  }
}

/**
 * Request for Stop.
 *
 * @generated from message teleport.lib.teleterm.vnet.v1.StopRequest
 */
export class StopRequest extends Message<StopRequest> {
  constructor(data?: PartialMessage<StopRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.lib.teleterm.vnet.v1.StopRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopRequest {
    return new StopRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopRequest {
    return new StopRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopRequest {
    return new StopRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopRequest | PlainMessage<StopRequest> | undefined, b: StopRequest | PlainMessage<StopRequest> | undefined): boolean {
    return proto3.util.equals(StopRequest, a, b);
  }
}

/**
 * Response for Stop.
 *
 * @generated from message teleport.lib.teleterm.vnet.v1.StopResponse
 */
export class StopResponse extends Message<StopResponse> {
  constructor(data?: PartialMessage<StopResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.lib.teleterm.vnet.v1.StopResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopResponse {
    return new StopResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopResponse {
    return new StopResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopResponse {
    return new StopResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopResponse | PlainMessage<StopResponse> | undefined, b: StopResponse | PlainMessage<StopResponse> | undefined): boolean {
    return proto3.util.equals(StopResponse, a, b);
  }
}

/**
 * Request for ListDNSZones.
 *
 * @generated from message teleport.lib.teleterm.vnet.v1.ListDNSZonesRequest
 */
export class ListDNSZonesRequest extends Message<ListDNSZonesRequest> {
  constructor(data?: PartialMessage<ListDNSZonesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.lib.teleterm.vnet.v1.ListDNSZonesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDNSZonesRequest {
    return new ListDNSZonesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDNSZonesRequest {
    return new ListDNSZonesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDNSZonesRequest {
    return new ListDNSZonesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDNSZonesRequest | PlainMessage<ListDNSZonesRequest> | undefined, b: ListDNSZonesRequest | PlainMessage<ListDNSZonesRequest> | undefined): boolean {
    return proto3.util.equals(ListDNSZonesRequest, a, b);
  }
}

/**
 * Response for ListDNSZones.
 *
 * @generated from message teleport.lib.teleterm.vnet.v1.ListDNSZonesResponse
 */
export class ListDNSZonesResponse extends Message<ListDNSZonesResponse> {
  /**
   * dns_zones is a deduplicated list of DNS zones.
   *
   * @generated from field: repeated string dns_zones = 1;
   */
  dnsZones: string[] = [];

  constructor(data?: PartialMessage<ListDNSZonesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.lib.teleterm.vnet.v1.ListDNSZonesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dns_zones", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDNSZonesResponse {
    return new ListDNSZonesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDNSZonesResponse {
    return new ListDNSZonesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDNSZonesResponse {
    return new ListDNSZonesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDNSZonesResponse | PlainMessage<ListDNSZonesResponse> | undefined, b: ListDNSZonesResponse | PlainMessage<ListDNSZonesResponse> | undefined): boolean {
    return proto3.util.equals(ListDNSZonesResponse, a, b);
  }
}

/**
 * Request for GetBackgroundItemStatus.
 *
 * @generated from message teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusRequest
 */
export class GetBackgroundItemStatusRequest extends Message<GetBackgroundItemStatusRequest> {
  constructor(data?: PartialMessage<GetBackgroundItemStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBackgroundItemStatusRequest {
    return new GetBackgroundItemStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBackgroundItemStatusRequest {
    return new GetBackgroundItemStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBackgroundItemStatusRequest {
    return new GetBackgroundItemStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBackgroundItemStatusRequest | PlainMessage<GetBackgroundItemStatusRequest> | undefined, b: GetBackgroundItemStatusRequest | PlainMessage<GetBackgroundItemStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetBackgroundItemStatusRequest, a, b);
  }
}

/**
 * Response for GetBackgroundItemStatus.
 *
 * @generated from message teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusResponse
 */
export class GetBackgroundItemStatusResponse extends Message<GetBackgroundItemStatusResponse> {
  /**
   * @generated from field: teleport.lib.teleterm.vnet.v1.BackgroundItemStatus status = 1;
   */
  status = BackgroundItemStatus.UNSPECIFIED;

  constructor(data?: PartialMessage<GetBackgroundItemStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(BackgroundItemStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBackgroundItemStatusResponse {
    return new GetBackgroundItemStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBackgroundItemStatusResponse {
    return new GetBackgroundItemStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBackgroundItemStatusResponse {
    return new GetBackgroundItemStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBackgroundItemStatusResponse | PlainMessage<GetBackgroundItemStatusResponse> | undefined, b: GetBackgroundItemStatusResponse | PlainMessage<GetBackgroundItemStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetBackgroundItemStatusResponse, a, b);
  }
}

