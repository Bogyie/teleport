//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/lib/teleterm/v1/server.proto (package teleport.lib.teleterm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Label } from "./label_pb.js";

/**
 * Server describes connected Server
 *
 * @generated from message teleport.lib.teleterm.v1.Server
 */
export class Server extends Message<Server> {
  /**
   * uri is the server uri
   *
   * @generated from field: string uri = 1;
   */
  uri = "";

  /**
   * tunnel indicates if this server is connected over a reverse tunnel
   *
   * @generated from field: bool tunnel = 2;
   */
  tunnel = false;

  /**
   * name is the server name
   *
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * hostname is this server hostname
   *
   * @generated from field: string hostname = 4;
   */
  hostname = "";

  /**
   * addr is this server ip address
   *
   * @generated from field: string addr = 5;
   */
  addr = "";

  /**
   * labels is this server list of labels
   *
   * @generated from field: repeated teleport.lib.teleterm.v1.Label labels = 6;
   */
  labels: Label[] = [];

  /**
   * node sub kind: teleport, openssh, openssh-ec2-ice
   *
   * @generated from field: string sub_kind = 7;
   */
  subKind = "";

  constructor(data?: PartialMessage<Server>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.lib.teleterm.v1.Server";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tunnel", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "labels", kind: "message", T: Label, repeated: true },
    { no: 7, name: "sub_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Server {
    return new Server().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Server {
    return new Server().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Server {
    return new Server().fromJsonString(jsonString, options);
  }

  static equals(a: Server | PlainMessage<Server> | undefined, b: Server | PlainMessage<Server> | undefined): boolean {
    return proto3.util.equals(Server, a, b);
  }
}

