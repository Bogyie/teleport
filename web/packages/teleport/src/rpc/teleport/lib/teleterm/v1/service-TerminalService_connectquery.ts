//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/lib/teleterm/v1/service.proto (package teleport.lib.teleterm.v1, syntax proto3)
/* eslint-disable */

import { MethodKind } from "@bufbuild/protobuf";
import { AddClusterRequest, AssumeRoleRequest, AuthenticateWebDeviceRequest, AuthenticateWebDeviceResponse, CreateAccessRequestRequest, CreateAccessRequestResponse, CreateConnectMyComputerNodeTokenRequest, CreateConnectMyComputerNodeTokenResponse, CreateConnectMyComputerRoleRequest, CreateConnectMyComputerRoleResponse, CreateGatewayRequest, DeleteAccessRequestRequest, DeleteConnectMyComputerNodeRequest, DeleteConnectMyComputerNodeResponse, EmptyResponse, GetAccessRequestRequest, GetAccessRequestResponse, GetAccessRequestsRequest, GetAccessRequestsResponse, GetAppsRequest, GetAppsResponse, GetAuthSettingsRequest, GetClusterRequest, GetConnectMyComputerNodeNameRequest, GetConnectMyComputerNodeNameResponse, GetDatabasesRequest, GetDatabasesResponse, GetKubesRequest, GetKubesResponse, GetRequestableRolesRequest, GetRequestableRolesResponse, GetServersRequest, GetServersResponse, GetSuggestedAccessListsRequest, GetSuggestedAccessListsResponse, GetUserPreferencesRequest, GetUserPreferencesResponse, ListClustersRequest, ListClustersResponse, ListDatabaseUsersRequest, ListDatabaseUsersResponse, ListGatewaysRequest, ListGatewaysResponse, ListLeafClustersRequest, ListUnifiedResourcesRequest, ListUnifiedResourcesResponse, LoginRequest, LogoutRequest, PromoteAccessRequestRequest, PromoteAccessRequestResponse, RemoveClusterRequest, RemoveGatewayRequest, ReviewAccessRequestRequest, ReviewAccessRequestResponse, SetGatewayLocalPortRequest, SetGatewayTargetSubresourceNameRequest, UpdateHeadlessAuthenticationStateRequest, UpdateHeadlessAuthenticationStateResponse, UpdateTshdEventsServerAddressRequest, UpdateTshdEventsServerAddressResponse, UpdateUserPreferencesRequest, UpdateUserPreferencesResponse, WaitForConnectMyComputerNodeJoinRequest, WaitForConnectMyComputerNodeJoinResponse } from "./service_pb";
import { Cluster } from "./cluster_pb";
import { Gateway } from "./gateway_pb";
import { AuthSettings } from "./auth_settings_pb";
import { ReportUsageEventRequest } from "./usage_events_pb";

/**
 * UpdateTshdEventsServerAddress lets the Electron app update the address the tsh daemon is
 * supposed to use when connecting to the tshd events gRPC service. This RPC needs to be made
 * before any other from this service.
 *
 * The service is supposed to return a response from this call only after the client is ready.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.UpdateTshdEventsServerAddress
 */
export const updateTshdEventsServerAddress = {
  localName: "updateTshdEventsServerAddress",
  name: "UpdateTshdEventsServerAddress",
  kind: MethodKind.Unary,
  I: UpdateTshdEventsServerAddressRequest,
  O: UpdateTshdEventsServerAddressResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * ListRootClusters lists root clusters
 * Does not include detailed cluster information that would require a network request.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.ListRootClusters
 */
export const listRootClusters = {
  localName: "listRootClusters",
  name: "ListRootClusters",
  kind: MethodKind.Unary,
  I: ListClustersRequest,
  O: ListClustersResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * ListLeafClusters lists leaf clusters
 * Does not include detailed cluster information that would require a network request.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.ListLeafClusters
 */
export const listLeafClusters = {
  localName: "listLeafClusters",
  name: "ListLeafClusters",
  kind: MethodKind.Unary,
  I: ListLeafClustersRequest,
  O: ListClustersResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * GetDatabases returns a filtered and paginated list of databases
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetDatabases
 */
export const getDatabases = {
  localName: "getDatabases",
  name: "GetDatabases",
  kind: MethodKind.Unary,
  I: GetDatabasesRequest,
  O: GetDatabasesResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * ListDatabaseUsers lists allowed users for the given database based on the role set.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.ListDatabaseUsers
 */
export const listDatabaseUsers = {
  localName: "listDatabaseUsers",
  name: "ListDatabaseUsers",
  kind: MethodKind.Unary,
  I: ListDatabaseUsersRequest,
  O: ListDatabaseUsersResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * GetServers returns filtered, sorted, and paginated servers
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetServers
 */
export const getServers = {
  localName: "getServers",
  name: "GetServers",
  kind: MethodKind.Unary,
  I: GetServersRequest,
  O: GetServersResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * GetAccessRequests lists filtered AccessRequests
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetAccessRequests
 */
export const getAccessRequests = {
  localName: "getAccessRequests",
  name: "GetAccessRequests",
  kind: MethodKind.Unary,
  I: GetAccessRequestsRequest,
  O: GetAccessRequestsResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * GetAccessRequest retreives a single Access Request
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetAccessRequest
 */
export const getAccessRequest = {
  localName: "getAccessRequest",
  name: "GetAccessRequest",
  kind: MethodKind.Unary,
  I: GetAccessRequestRequest,
  O: GetAccessRequestResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * DeleteAccessRequest deletes the access request by id
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.DeleteAccessRequest
 */
export const deleteAccessRequest = {
  localName: "deleteAccessRequest",
  name: "DeleteAccessRequest",
  kind: MethodKind.Unary,
  I: DeleteAccessRequestRequest,
  O: EmptyResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * CreateAccessRequest creates an access request
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.CreateAccessRequest
 */
export const createAccessRequest = {
  localName: "createAccessRequest",
  name: "CreateAccessRequest",
  kind: MethodKind.Unary,
  I: CreateAccessRequestRequest,
  O: CreateAccessRequestResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * ReviewAccessRequest submits a review for an Access Request
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.ReviewAccessRequest
 */
export const reviewAccessRequest = {
  localName: "reviewAccessRequest",
  name: "ReviewAccessRequest",
  kind: MethodKind.Unary,
  I: ReviewAccessRequestRequest,
  O: ReviewAccessRequestResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * GetRequestableRoles gets all requestable roles
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetRequestableRoles
 */
export const getRequestableRoles = {
  localName: "getRequestableRoles",
  name: "GetRequestableRoles",
  kind: MethodKind.Unary,
  I: GetRequestableRolesRequest,
  O: GetRequestableRolesResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * AssumeRole assumes the role of the given access request
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.AssumeRole
 */
export const assumeRole = {
  localName: "assumeRole",
  name: "AssumeRole",
  kind: MethodKind.Unary,
  I: AssumeRoleRequest,
  O: EmptyResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * PromoteAccessRequest promotes an access request to an access list.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.PromoteAccessRequest
 */
export const promoteAccessRequest = {
  localName: "promoteAccessRequest",
  name: "PromoteAccessRequest",
  kind: MethodKind.Unary,
  I: PromoteAccessRequestRequest,
  O: PromoteAccessRequestResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * GetSuggestedAccessLists returns suggested access lists for an access request.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetSuggestedAccessLists
 */
export const getSuggestedAccessLists = {
  localName: "getSuggestedAccessLists",
  name: "GetSuggestedAccessLists",
  kind: MethodKind.Unary,
  I: GetSuggestedAccessListsRequest,
  O: GetSuggestedAccessListsResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * GetKubes returns filtered, sorted, and paginated kubes
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetKubes
 */
export const getKubes = {
  localName: "getKubes",
  name: "GetKubes",
  kind: MethodKind.Unary,
  I: GetKubesRequest,
  O: GetKubesResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * GetApps returns a filtered and paginated list of apps.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetApps
 */
export const getApps = {
  localName: "getApps",
  name: "GetApps",
  kind: MethodKind.Unary,
  I: GetAppsRequest,
  O: GetAppsResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * AddCluster adds a cluster to profile
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.AddCluster
 */
export const addCluster = {
  localName: "addCluster",
  name: "AddCluster",
  kind: MethodKind.Unary,
  I: AddClusterRequest,
  O: Cluster,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * RemoveCluster removes a cluster from profile
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.RemoveCluster
 */
export const removeCluster = {
  localName: "removeCluster",
  name: "RemoveCluster",
  kind: MethodKind.Unary,
  I: RemoveClusterRequest,
  O: EmptyResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * ListGateways lists gateways
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.ListGateways
 */
export const listGateways = {
  localName: "listGateways",
  name: "ListGateways",
  kind: MethodKind.Unary,
  I: ListGatewaysRequest,
  O: ListGatewaysResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * CreateGateway creates a gateway
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.CreateGateway
 */
export const createGateway = {
  localName: "createGateway",
  name: "CreateGateway",
  kind: MethodKind.Unary,
  I: CreateGatewayRequest,
  O: Gateway,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * RemoveGateway removes a gateway
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.RemoveGateway
 */
export const removeGateway = {
  localName: "removeGateway",
  name: "RemoveGateway",
  kind: MethodKind.Unary,
  I: RemoveGatewayRequest,
  O: EmptyResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * SetGatewayTargetSubresourceName changes the TargetSubresourceName field of gateway.Gateway
 * and returns the updated version of gateway.Gateway.
 *
 * In Connect this is used to update the db name of a db connection along with the CLI command.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.SetGatewayTargetSubresourceName
 */
export const setGatewayTargetSubresourceName = {
  localName: "setGatewayTargetSubresourceName",
  name: "SetGatewayTargetSubresourceName",
  kind: MethodKind.Unary,
  I: SetGatewayTargetSubresourceNameRequest,
  O: Gateway,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * SetGatewayLocalPort starts a new gateway on the new port, stops the old gateway and then
 * assigns the URI of the old gateway to the new one. It does so without fetching a new db cert.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.SetGatewayLocalPort
 */
export const setGatewayLocalPort = {
  localName: "setGatewayLocalPort",
  name: "SetGatewayLocalPort",
  kind: MethodKind.Unary,
  I: SetGatewayLocalPortRequest,
  O: Gateway,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * GetAuthSettings returns cluster auth settigns
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetAuthSettings
 */
export const getAuthSettings = {
  localName: "getAuthSettings",
  name: "GetAuthSettings",
  kind: MethodKind.Unary,
  I: GetAuthSettingsRequest,
  O: AuthSettings,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * GetCluster returns cluster. Makes a network request and includes detailed
 * information about enterprise features availabed on the connected auth server
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetCluster
 */
export const getCluster = {
  localName: "getCluster",
  name: "GetCluster",
  kind: MethodKind.Unary,
  I: GetClusterRequest,
  O: Cluster,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * Login logs in a user to a cluster
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.Login
 */
export const login = {
  localName: "login",
  name: "Login",
  kind: MethodKind.Unary,
  I: LoginRequest,
  O: EmptyResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * ClusterLogin logs out a user from cluster
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.Logout
 */
export const logout = {
  localName: "logout",
  name: "Logout",
  kind: MethodKind.Unary,
  I: LogoutRequest,
  O: EmptyResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * ReportUsageEvent allows to send usage events that are then anonymized and forwarded to prehog
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.ReportUsageEvent
 */
export const reportUsageEvent = {
  localName: "reportUsageEvent",
  name: "ReportUsageEvent",
  kind: MethodKind.Unary,
  I: ReportUsageEventRequest,
  O: EmptyResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * UpdateHeadlessAuthenticationState updates a headless authentication resource's state.
 * An MFA challenge will be prompted when approving a headless authentication.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.UpdateHeadlessAuthenticationState
 */
export const updateHeadlessAuthenticationState = {
  localName: "updateHeadlessAuthenticationState",
  name: "UpdateHeadlessAuthenticationState",
  kind: MethodKind.Unary,
  I: UpdateHeadlessAuthenticationStateRequest,
  O: UpdateHeadlessAuthenticationStateResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * CreateConnectMyComputerRole creates a role which allows access to nodes with the label
 * teleport.dev/connect-my-computer/owner: <cluster user> and allows logging in to those nodes as
 * the current system user.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.CreateConnectMyComputerRole
 */
export const createConnectMyComputerRole = {
  localName: "createConnectMyComputerRole",
  name: "CreateConnectMyComputerRole",
  kind: MethodKind.Unary,
  I: CreateConnectMyComputerRoleRequest,
  O: CreateConnectMyComputerRoleResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * CreateConnectMyComputerNodeToken creates a node join token that is valid for 5 minutes
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.CreateConnectMyComputerNodeToken
 */
export const createConnectMyComputerNodeToken = {
  localName: "createConnectMyComputerNodeToken",
  name: "CreateConnectMyComputerNodeToken",
  kind: MethodKind.Unary,
  I: CreateConnectMyComputerNodeTokenRequest,
  O: CreateConnectMyComputerNodeTokenResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * WaitForConnectMyComputerNodeJoin sets up a watcher and returns a response only after detecting
 * that the Connect My Computer node for the particular cluster has joined the cluster (the
 * OpPut event).
 *
 * This RPC times out by itself after a minute to prevent the request from hanging forever, in
 * case the client didn't set a deadline or doesn't abort the request.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.WaitForConnectMyComputerNodeJoin
 */
export const waitForConnectMyComputerNodeJoin = {
  localName: "waitForConnectMyComputerNodeJoin",
  name: "WaitForConnectMyComputerNodeJoin",
  kind: MethodKind.Unary,
  I: WaitForConnectMyComputerNodeJoinRequest,
  O: WaitForConnectMyComputerNodeJoinResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * DeleteConnectMyComputerNode deletes the Connect My Computer node.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.DeleteConnectMyComputerNode
 */
export const deleteConnectMyComputerNode = {
  localName: "deleteConnectMyComputerNode",
  name: "DeleteConnectMyComputerNode",
  kind: MethodKind.Unary,
  I: DeleteConnectMyComputerNodeRequest,
  O: DeleteConnectMyComputerNodeResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * GetConnectMyComputerNodeName reads the Connect My Computer node name (UUID) from a disk.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetConnectMyComputerNodeName
 */
export const getConnectMyComputerNodeName = {
  localName: "getConnectMyComputerNodeName",
  name: "GetConnectMyComputerNodeName",
  kind: MethodKind.Unary,
  I: GetConnectMyComputerNodeNameRequest,
  O: GetConnectMyComputerNodeNameResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * ListUnifiedResources retrieves a paginated list of all resource types displayable in the UI.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.ListUnifiedResources
 */
export const listUnifiedResources = {
  localName: "listUnifiedResources",
  name: "ListUnifiedResources",
  kind: MethodKind.Unary,
  I: ListUnifiedResourcesRequest,
  O: ListUnifiedResourcesResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * GetUserPreferences returns the combined (root + leaf cluster) preferences for a given user.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetUserPreferences
 */
export const getUserPreferences = {
  localName: "getUserPreferences",
  name: "GetUserPreferences",
  kind: MethodKind.Unary,
  I: GetUserPreferencesRequest,
  O: GetUserPreferencesResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * UpdateUserPreferences updates the preferences for a given user in appropriate root and leaf clusters.
 * Only the properties that are set (cluster_preferences, unified_resource_preferences) will be updated.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.UpdateUserPreferences
 */
export const updateUserPreferences = {
  localName: "updateUserPreferences",
  name: "UpdateUserPreferences",
  kind: MethodKind.Unary,
  I: UpdateUserPreferencesRequest,
  O: UpdateUserPreferencesResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;

/**
 * AuthenticateWebDevice blesses a web session with device trust by performing
 * the on-behalf-of device authentication ceremony.
 *
 * See
 * https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
 *
 * @generated from rpc teleport.lib.teleterm.v1.TerminalService.AuthenticateWebDevice
 */
export const authenticateWebDevice = {
  localName: "authenticateWebDevice",
  name: "AuthenticateWebDevice",
  kind: MethodKind.Unary,
  I: AuthenticateWebDeviceRequest,
  O: AuthenticateWebDeviceResponse,
  service: {
    typeName: "teleport.lib.teleterm.v1.TerminalService"
  }
} as const;
