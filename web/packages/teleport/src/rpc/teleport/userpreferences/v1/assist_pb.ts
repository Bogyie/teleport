// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/userpreferences/v1/assist.proto (package teleport.userpreferences.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * AssistViewMode is the way the assistant is displayed.
 *
 * @generated from enum teleport.userpreferences.v1.AssistViewMode
 */
export enum AssistViewMode {
  /**
   * @generated from enum value: ASSIST_VIEW_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * DOCKED is the assistant is docked to the right hand side of the screen.
   *
   * @generated from enum value: ASSIST_VIEW_MODE_DOCKED = 1;
   */
  DOCKED = 1,

  /**
   * POPUP is the assistant is displayed as a popup.
   *
   * @generated from enum value: ASSIST_VIEW_MODE_POPUP = 2;
   */
  POPUP = 2,

  /**
   * POPUP_EXPANDED is the assistant is displayed as a popup and expanded.
   *
   * @generated from enum value: ASSIST_VIEW_MODE_POPUP_EXPANDED = 3;
   */
  POPUP_EXPANDED = 3,

  /**
   * POPUP_EXPANDED_SIDEBAR_VISIBLE is the assistant is displayed as a popup and expanded with the sidebar visible.
   *
   * @generated from enum value: ASSIST_VIEW_MODE_POPUP_EXPANDED_SIDEBAR_VISIBLE = 4;
   */
  POPUP_EXPANDED_SIDEBAR_VISIBLE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(AssistViewMode)
proto3.util.setEnumType(AssistViewMode, "teleport.userpreferences.v1.AssistViewMode", [
  { no: 0, name: "ASSIST_VIEW_MODE_UNSPECIFIED" },
  { no: 1, name: "ASSIST_VIEW_MODE_DOCKED" },
  { no: 2, name: "ASSIST_VIEW_MODE_POPUP" },
  { no: 3, name: "ASSIST_VIEW_MODE_POPUP_EXPANDED" },
  { no: 4, name: "ASSIST_VIEW_MODE_POPUP_EXPANDED_SIDEBAR_VISIBLE" },
]);

/**
 * AssistUserPreferences is the user preferences for Assist.
 *
 * @generated from message teleport.userpreferences.v1.AssistUserPreferences
 */
export class AssistUserPreferences extends Message<AssistUserPreferences> {
  /**
   * preferredLogins is an array of the logins a user would prefer to use when running a command, ordered by preference.
   *
   * @generated from field: repeated string preferred_logins = 1;
   */
  preferredLogins: string[] = [];

  /**
   * viewMode is the way the assistant is displayed.
   *
   * @generated from field: teleport.userpreferences.v1.AssistViewMode view_mode = 2;
   */
  viewMode = AssistViewMode.UNSPECIFIED;

  constructor(data?: PartialMessage<AssistUserPreferences>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userpreferences.v1.AssistUserPreferences";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preferred_logins", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "view_mode", kind: "enum", T: proto3.getEnumType(AssistViewMode) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssistUserPreferences {
    return new AssistUserPreferences().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssistUserPreferences {
    return new AssistUserPreferences().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssistUserPreferences {
    return new AssistUserPreferences().fromJsonString(jsonString, options);
  }

  static equals(a: AssistUserPreferences | PlainMessage<AssistUserPreferences> | undefined, b: AssistUserPreferences | PlainMessage<AssistUserPreferences> | undefined): boolean {
    return proto3.util.equals(AssistUserPreferences, a, b);
  }
}

