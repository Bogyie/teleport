// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/userpreferences/v1/access_graph.proto (package teleport.userpreferences.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * AccessGraphUserPreferences is the user preferences for Access Graph.
 *
 * @generated from message teleport.userpreferences.v1.AccessGraphUserPreferences
 */
export class AccessGraphUserPreferences extends Message<AccessGraphUserPreferences> {
  /**
   * has_been_redirected is true if the user has already been redirected to the Access Graph
   * on login, after having signed up for a trial from the Teleport Policy page.
   *
   * @generated from field: bool has_been_redirected = 1;
   */
  hasBeenRedirected = false;

  constructor(data?: PartialMessage<AccessGraphUserPreferences>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userpreferences.v1.AccessGraphUserPreferences";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "has_been_redirected", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessGraphUserPreferences {
    return new AccessGraphUserPreferences().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessGraphUserPreferences {
    return new AccessGraphUserPreferences().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessGraphUserPreferences {
    return new AccessGraphUserPreferences().fromJsonString(jsonString, options);
  }

  static equals(a: AccessGraphUserPreferences | PlainMessage<AccessGraphUserPreferences> | undefined, b: AccessGraphUserPreferences | PlainMessage<AccessGraphUserPreferences> | undefined): boolean {
    return proto3.util.equals(AccessGraphUserPreferences, a, b);
  }
}

