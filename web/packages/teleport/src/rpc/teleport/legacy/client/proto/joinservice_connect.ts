// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file teleport/legacy/client/proto/joinservice.proto (package proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { RegisterUsingAzureMethodRequest, RegisterUsingAzureMethodResponse, RegisterUsingIAMMethodRequest, RegisterUsingIAMMethodResponse, RegisterUsingTPMMethodRequest, RegisterUsingTPMMethodResponse } from "./joinservice_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * JoinService provides methods which allow Teleport nodes, proxies, and other
 * services to join the Teleport cluster by fetching signed cluster
 * certificates. It is implemented on both the Auth and Proxy servers to serve
 * the needs of both nodes connecting directly to the Auth server and IoT mode
 * nodes connecting only to the Proxy.
 *
 * @generated from service proto.JoinService
 */
export const JoinService = {
  typeName: "proto.JoinService",
  methods: {
    /**
     * RegisterUsingIAMMethod is used to register a new node to the cluster using
     * the IAM join method.
     *
     * @generated from rpc proto.JoinService.RegisterUsingIAMMethod
     */
    registerUsingIAMMethod: {
      name: "RegisterUsingIAMMethod",
      I: RegisterUsingIAMMethodRequest,
      O: RegisterUsingIAMMethodResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * RegisterUsingAzureMethod is used to register a new node to the cluster
     * using the Azure join method.
     *
     * @generated from rpc proto.JoinService.RegisterUsingAzureMethod
     */
    registerUsingAzureMethod: {
      name: "RegisterUsingAzureMethod",
      I: RegisterUsingAzureMethodRequest,
      O: RegisterUsingAzureMethodResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * RegisterUsingTPMMethod allows registration of a new agent or Bot to the
     * cluster using a known TPM.
     *
     * @generated from rpc proto.JoinService.RegisterUsingTPMMethod
     */
    registerUsingTPMMethod: {
      name: "RegisterUsingTPMMethod",
      I: RegisterUsingTPMMethodRequest,
      O: RegisterUsingTPMMethodResponse,
      kind: MethodKind.BiDiStreaming,
    },
  }
} as const;

