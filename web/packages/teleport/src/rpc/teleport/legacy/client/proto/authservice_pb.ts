// Copyright 2021-2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/legacy/client/proto/authservice.proto (package proto, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../../gogoproto/gogo_pb";
import type { EmptySchema, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { AttestationStatement } from "../../../attestation/v1/attestation_pb";
import { file_teleport_attestation_v1_attestation } from "../../../attestation/v1/attestation_pb";
import type { CertsSchema } from "./certs_pb";
import { file_teleport_legacy_client_proto_certs } from "./certs_pb";
import type { EventSchema } from "./event_pb";
import { file_teleport_legacy_client_proto_event } from "./event_pb";
import type { OneOf, OneOfSchema, StreamStatusSchema } from "../../types/events/events_pb";
import { file_teleport_legacy_types_events_events } from "../../types/events/events_pb";
import type { AccessCapabilitiesRequestSchema, AccessCapabilitiesSchema, AccessRequestAllowedPromotions, AccessRequestFilter, AccessRequestFilterSchema, AccessRequestV3, AccessRequestV3Schema, AccessReviewSubmissionSchema, AcquireSemaphoreRequestSchema, AgentUpgradeSchedule, AlertAcknowledgement, AlertAcknowledgementSchema, AppServerOrSAMLIdPServiceProviderV1, AppServerV3, AppV3ListSchema, AppV3Schema, AuthPreferenceV2Schema, ClusterAlert, ClusterAuditConfigV2Schema, ClusterMaintenanceConfigV1Schema, ClusterNetworkingConfigV2Schema, ConnectionDiagnosticTrace, ConnectionDiagnosticV1Schema, DatabaseServerV3, DatabaseServiceV1, DatabaseV3ListSchema, DatabaseV3Schema, DeleteWebSessionRequestSchema, DeleteWebTokenRequestSchema, GetClusterAlertsRequestSchema, GetWebSessionRequestSchema, GetWebTokenRequestSchema, GithubAuthRequestSchema, GithubConnectorV3, GithubConnectorV3ListSchema, GithubConnectorV3Schema, HeadlessAuthenticationSchema, HeadlessAuthenticationState, InstallerV1ListSchema, InstallerV1Schema, InstanceFilterSchema, InstanceV1Schema, KeepAliveSchema, KubernetesClusterV3, KubernetesClusterV3ListSchema, KubernetesClusterV3Schema, KubernetesServerV3, LockTarget, LockV2, LockV2Schema, MFADevice, NetworkRestrictionsV4Schema, OIDCAuthRequestSchema, OIDCConnectorV3, OIDCConnectorV3ListSchema, OIDCConnectorV3Schema, Participant, PluginDataFilterSchema, PluginDataUpdateParamsSchema, PluginDataV3, ProvisionTokenV2, ProvisionTokenV2ListSchema, ProvisionTokenV2Schema, Release, RemoteClusterV3Schema, RequestState, ResourceInNamespaceRequestSchema, ResourceRequestSchema, ResourcesInNamespaceRequestSchema, ResourcesWithSecretsRequestSchema, ResourceWithSecretsRequestSchema, RoleFilter, RoleV6, RoleV6Schema, Rotation, SAMLAuthRequestSchema, SAMLConnectorV2, SAMLConnectorV2ListSchema, SAMLConnectorV2Schema, SAMLIdPServiceProviderV1, SAMLIdPServiceProviderV1Schema, SAMLSessionData, SemaphoreFilterSchema, SemaphoreLeaseSchema, SemaphoreV3, ServerInfoV1Schema, ServerV2, ServerV2Schema, SessionRecordingConfigV2Schema, SessionState, SessionTrackerFilterSchema, SessionTrackerV1, SessionTrackerV1Schema, SignatureAlgorithmSuite, SortBy, SSODiagnosticInfoSchema, TrustedClusterV2ListSchema, TrustedClusterV2Schema, UIConfigV1Schema, UserGroupV1, UserGroupV1Schema, UserTokenUsage, UserTokenV3Schema, UserV2, UserV2Schema, WatchKind, WebSessionV2, WebTokenV3, WindowsDesktopFilter, WindowsDesktopFilterSchema, WindowsDesktopServiceV3, WindowsDesktopServiceV3Schema, WindowsDesktopV3, WindowsDesktopV3Schema } from "../../types/types_pb";
import { file_teleport_legacy_types_types } from "../../types/types_pb";
import type { CredentialAssertion, CredentialAssertionResponse, CredentialCreation, CredentialCreationResponse } from "../../types/webauthn/webauthn_pb";
import { file_teleport_legacy_types_webauthn_webauthn } from "../../types/webauthn/webauthn_pb";
import type { LabelValues, StringValues } from "../../types/wrappers/wrappers_pb";
import { file_teleport_legacy_types_wrappers_wrappers } from "../../types/wrappers/wrappers_pb";
import type { ChallengeExtensions } from "../../../mfa/v1/mfa_pb";
import { file_teleport_mfa_v1_mfa } from "../../../mfa/v1/mfa_pb";
import type { UsageEventOneOf } from "../../../usageevents/v1/usageevents_pb";
import { file_teleport_usageevents_v1_usageevents } from "../../../usageevents/v1/usageevents_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/legacy/client/proto/authservice.proto.
 */
export const file_teleport_legacy_client_proto_authservice: GenFile = /*@__PURE__*/
  fileDesc("", [file_gogoproto_gogo, file_google_protobuf_empty, file_google_protobuf_timestamp, file_teleport_attestation_v1_attestation, file_teleport_legacy_client_proto_certs, file_teleport_legacy_client_proto_event, file_teleport_legacy_types_events_events, file_teleport_legacy_types_types, file_teleport_legacy_types_webauthn_webauthn, file_teleport_legacy_types_wrappers_wrappers, file_teleport_mfa_v1_mfa, file_teleport_usageevents_v1_usageevents]);

/**
 * Watch specifies watch parameters
 *
 * @generated from message proto.Watch
 */
export type Watch = Message<"proto.Watch"> & {
  /**
   * Kinds specifies object kinds to watch
   *
   * @generated from field: repeated types.WatchKind Kinds = 1;
   */
  Kinds: WatchKind[];

  /**
   * @generated from field: bool AllowPartialSuccess = 2;
   */
  AllowPartialSuccess: boolean;
};

/**
 * Describes the message proto.Watch.
 * Use `create(WatchSchema)` to create a new message.
 */
export const WatchSchema: GenMessage<Watch> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 0);

/**
 * HostCertsRequest specifies certificate-generation parameters
 * for a server.
 *
 * @generated from message proto.HostCertsRequest
 */
export type HostCertsRequest = Message<"proto.HostCertsRequest"> & {
  /**
   * HostID is a unique ID of the host.
   *
   * @generated from field: string HostID = 1;
   */
  HostID: string;

  /**
   * NodeName is a user-friendly host name.
   *
   * @generated from field: string NodeName = 2;
   */
  NodeName: string;

  /**
   * Role is a system role assigned to the host.
   *
   * @generated from field: string Role = 3;
   */
  Role: string;

  /**
   * AdditionalPrincipals is a list of additional principals
   * to include in OpenSSH and X509 certificates
   *
   * @generated from field: repeated string AdditionalPrincipals = 4;
   */
  AdditionalPrincipals: string[];

  /**
   * DNSNames is a list of DNS names to include in x509 certificates.
   *
   * @generated from field: repeated string DNSNames = 5;
   */
  DNSNames: string[];

  /**
   * PublicTLSKey is a PEM encoded public key, which the auth server will use
   * to create a signed TLS certificate. This field is required.
   *
   * @generated from field: bytes PublicTLSKey = 6;
   */
  PublicTLSKey: Uint8Array;

  /**
   * PublicSSHKey is a SSH encoded public key, which the auth server will use
   * to create a signed SSH certificate. This field is required.
   *
   * @generated from field: bytes PublicSSHKey = 7;
   */
  PublicSSHKey: Uint8Array;

  /**
   * RemoteAddr is the IP address of the remote host requesting a certificate.
   * RemoteAddr is used to replace 0.0.0.0 in the list of additional principals.
   *
   * @generated from field: string RemoteAddr = 8;
   */
  RemoteAddr: string;

  /**
   * Rotation allows clients to send the certificate authority rotation state
   * expected by the client so that auth servers can avoid the situation when
   * clients request certs assuming one state and auth servers issue another.
   *
   * @generated from field: types.Rotation Rotation = 9;
   */
  Rotation?: Rotation;

  /**
   * NoCache is argument that only local callers can supply to bypass cache
   *
   * @generated from field: bool NoCache = 10;
   */
  NoCache: boolean;

  /**
   * SystemRoles is a list of system roles held by the host. Most host certs are
   * single-role and only specify the Role field. The SystemRoles field is only
   * currently used on Instance certs, which need to express all roles held by
   * the instance.
   *
   * @generated from field: repeated string SystemRoles = 11;
   */
  SystemRoles: string[];

  /**
   * SystemRoleAssertionID is used by agents to prove that they have a given system role when
   * their credentials originate from multiple separate join tokens so that they can be issued
   * an instance certificate that encompasses all of their capabilities. This field will be
   * deprecated once we have a more comprehensive model for join token joining/replacement.
   *
   * @generated from field: string SystemRoleAssertionID = 13;
   */
  SystemRoleAssertionID: string;
};

/**
 * Describes the message proto.HostCertsRequest.
 * Use `create(HostCertsRequestSchema)` to create a new message.
 */
export const HostCertsRequestSchema: GenMessage<HostCertsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 1);

/**
 * OpenSSHCertRequest specifies certificate-generation parameters
 * for a certificates used to connect to Agentless nodes.
 *
 * @generated from message proto.OpenSSHCertRequest
 */
export type OpenSSHCertRequest = Message<"proto.OpenSSHCertRequest"> & {
  /**
   * PublicKey is the public key to sign.
   *
   * @generated from field: bytes PublicKey = 2;
   */
  PublicKey: Uint8Array;

  /**
   * TTL is the duration the certificate will be valid for.
   *
   * @generated from field: int64 TTL = 3;
   */
  TTL: bigint;

  /**
   * Cluster is the Teleport cluster name the target node is connected to.
   *
   * @generated from field: string Cluster = 4;
   */
  Cluster: string;

  /**
   * User is the Teleport user the certificate will be generated for.
   *
   * @generated from field: types.UserV2 User = 5;
   */
  User?: UserV2;

  /**
   * Roles are the roles of the Teleport user the certificate will be
   * generated for.
   *
   * @generated from field: repeated types.RoleV6 Roles = 6;
   */
  Roles: RoleV6[];
};

/**
 * Describes the message proto.OpenSSHCertRequest.
 * Use `create(OpenSSHCertRequestSchema)` to create a new message.
 */
export const OpenSSHCertRequestSchema: GenMessage<OpenSSHCertRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 2);

/**
 * OpenSSHCert is a SSH certificate signed by OpenSSH CA.
 *
 * @generated from message proto.OpenSSHCert
 */
export type OpenSSHCert = Message<"proto.OpenSSHCert"> & {
  /**
   * @generated from field: bytes Cert = 1;
   */
  Cert: Uint8Array;
};

/**
 * Describes the message proto.OpenSSHCert.
 * Use `create(OpenSSHCertSchema)` to create a new message.
 */
export const OpenSSHCertSchema: GenMessage<OpenSSHCert> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 3);

/**
 * UserCertRequest specifies certificate-generation parameters
 * for a user.
 *
 * @generated from message proto.UserCertsRequest
 */
export type UserCertsRequest = Message<"proto.UserCertsRequest"> & {
  /**
   * PublicKey is a public key to be signed.
   *
   * Deprecated: Prefer SSHPublicKey and/or TLSPublicKey.
   *
   * @generated from field: bytes PublicKey = 1 [deprecated = true];
   * @deprecated
   */
  PublicKey: Uint8Array;

  /**
   * Username of key owner.
   *
   * @generated from field: string Username = 2;
   */
  Username: string;

  /**
   * Expires is a desired time of the expiry of the certificate, could
   * be adjusted based on the permissions
   *
   * @generated from field: google.protobuf.Timestamp Expires = 3;
   */
  Expires?: Timestamp;

  /**
   * Format encodes the desired SSH Certificate format (either old ssh
   * compatibility
   * format to remove some metadata causing trouble with old SSH servers)
   * or standard SSH cert format with custom extensions
   *
   * @generated from field: string Format = 4;
   */
  Format: string;

  /**
   * RouteToCluster is an optional cluster name to add to the certificate,
   * so that requests originating with this certificate will be redirected
   * to this cluster
   *
   * @generated from field: string RouteToCluster = 5;
   */
  RouteToCluster: string;

  /**
   * AccessRequests is an optional list of request IDs indicating requests whose
   * escalated privileges should be added to the certificate.
   *
   * @generated from field: repeated string AccessRequests = 6;
   */
  AccessRequests: string[];

  /**
   * KubernetesCluster specifies the target kubernetes cluster for TLS
   * identities. This can be empty on older Teleport clients.
   *
   * @generated from field: string KubernetesCluster = 7;
   */
  KubernetesCluster: string;

  /**
   * RouteToDatabase specifies the target database proxy name to encode into
   * certificate so database client requests are routed appropriately.
   *
   * @generated from field: proto.RouteToDatabase RouteToDatabase = 8;
   */
  RouteToDatabase?: RouteToDatabase;

  /**
   * NodeName is the name of the SSH node that this user certificate will be
   * scoped to.
   *
   * @generated from field: string NodeName = 9;
   */
  NodeName: string;

  /**
   * CertUsage limits the resulting user certificate to a single protocol.
   *
   * @generated from field: proto.UserCertsRequest.CertUsage Usage = 10;
   */
  Usage: UserCertsRequest_CertUsage;

  /**
   * RouteToApp specifies application to issue certificate for.
   *
   * @generated from field: proto.RouteToApp RouteToApp = 11;
   */
  RouteToApp?: RouteToApp;

  /**
   * RoleRequests specify an alternative set of named roles to apply to the
   * certificate, assuming the requestor is allowed to impersonate said roles
   * directly. An empty set of requests returns the user's normal set of
   * roles.
   *
   * @generated from field: repeated string RoleRequests = 12;
   */
  RoleRequests: string[];

  /**
   * RouteToWindowsDesktop specifies the target windows desktop name to encode into
   * certificate so windows desktop client requests are routed appropriately.
   *
   * @generated from field: proto.RouteToWindowsDesktop RouteToWindowsDesktop = 13;
   */
  RouteToWindowsDesktop?: RouteToWindowsDesktop;

  /**
   * UseRoleRequests is used to ensure a certificate request is intended to
   * use role impersonation, even if the list of role requests is empty.
   *
   * @generated from field: bool UseRoleRequests = 14;
   */
  UseRoleRequests: boolean;

  /**
   * DropAccessRequests is an optional list of request IDs indicating requests
   * whose escalated privileges should be removed from the certificate.
   * IDs pointing at non-existent requests are ignored.
   *
   * If present, the roles and traits in the generated cert will be based on
   * the state of the user resource on the backend, active requests (not being
   * dropped) and new access requests specified through AccessRequests (if any).
   *
   * This means that technically sending UserCertsRequest with bogus IDs in
   * DropAccessRequests can be used to refresh the role list based on backend
   * state. A better long-term solution would be to add a dedicated field for
   * this to avoid sending bogus IDs.
   *
   * @generated from field: repeated string DropAccessRequests = 15;
   */
  DropAccessRequests: string[];

  /**
   * ConnectionDiagnosticID is the ID of the ConnectionDiagnostic resource we should use to add
   * traces as we pass certain checkpoints.
   *
   * @generated from field: string ConnectionDiagnosticID = 16;
   */
  ConnectionDiagnosticID: string;

  /**
   * RequesterName identifies who sent the request.
   *
   * @generated from field: proto.UserCertsRequest.Requester RequesterName = 17;
   */
  RequesterName: UserCertsRequest_Requester;

  /**
   * MFAResponse is a response to a challenge from a user's MFA device.
   * An optional field, that when provided, the response will be validated
   * and the ID of the validated MFA device will be stored in the certificate.
   *
   * @generated from field: proto.MFAAuthenticateResponse MFAResponse = 18;
   */
  MFAResponse?: MFAAuthenticateResponse;

  /**
   * SSHLogin is the OS Login for the SSH session that the certificate will be used for.
   * This login is used when performing RBAC checks to determine if MFA is required
   * to access the resource.
   *
   * @generated from field: string SSHLogin = 19;
   */
  SSHLogin: string;

  /**
   * AttestationStatement is an attestation statement for the given public key.
   *
   * Deprecated: prefer SSHPublicKeyAttestationStatement and/or
   * TLSPublicKeyAttestationStatement.
   *
   * @generated from field: teleport.attestation.v1.AttestationStatement attestation_statement = 20 [deprecated = true];
   * @deprecated
   */
  attestationStatement?: AttestationStatement;

  /**
   * Purpose is the intended purpose of the certificates.
   *
   * @generated from field: proto.UserCertsRequest.CertPurpose Purpose = 21;
   */
  Purpose: UserCertsRequest_CertPurpose;

  /**
   * SSHPublicKey is a public key in SSH authorized_keys format, to be used as
   * the subject for the issued SSH certificate. If omitted, only a TLS cert
   * will be returned.
   *
   * @generated from field: bytes SSHPublicKey = 22;
   */
  SSHPublicKey: Uint8Array;

  /**
   * TLSPublicKey is a public key in PEM-encoded PKCS#1 or PKIX format, to be used as
   * the subject for the issued TLS certificate. If omitted, only an SSH cert
   * will be returned.
   *
   * @generated from field: bytes TLSPublicKey = 23;
   */
  TLSPublicKey: Uint8Array;

  /**
   * SSHPublicKeyAttestationStatement is an attestation statement for SSHPublicKey.
   *
   * @generated from field: teleport.attestation.v1.AttestationStatement SSHPublicKeyAttestationStatement = 25;
   */
  SSHPublicKeyAttestationStatement?: AttestationStatement;

  /**
   * TLSPublicKeyAttestationStatement is an attestation statement for TLSPublicKey.
   *
   * @generated from field: teleport.attestation.v1.AttestationStatement TLSPublicKeyAttestationStatement = 26;
   */
  TLSPublicKeyAttestationStatement?: AttestationStatement;
};

/**
 * Describes the message proto.UserCertsRequest.
 * Use `create(UserCertsRequestSchema)` to create a new message.
 */
export const UserCertsRequestSchema: GenMessage<UserCertsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 4);

/**
 * @generated from enum proto.UserCertsRequest.CertUsage
 */
export enum UserCertsRequest_CertUsage {
  /**
   * All means a request for both SSH and TLS certificates for the
   * overall user session. These certificates are not specific to any SSH
   * node, Kubernetes cluster, database or web app.
   *
   * @generated from enum value: All = 0;
   */
  All = 0,

  /**
   * SSH means a request for an SSH certificate for access to a specific
   * SSH node, as specified by NodeName.
   *
   * @generated from enum value: SSH = 1;
   */
  SSH = 1,

  /**
   * Kubernetes means a request for a TLS certificate for access to a
   * specific Kubernetes cluster, as specified by KubernetesCluster.
   *
   * @generated from enum value: Kubernetes = 2;
   */
  Kubernetes = 2,

  /**
   * Database means a request for a TLS certificate for access to a
   * specific database, as specified by RouteToDatabase.
   *
   * @generated from enum value: Database = 3;
   */
  Database = 3,

  /**
   * App means a request for a TLS certificate for access to a specific
   * web app, as specified by RouteToApp.
   *
   * @generated from enum value: App = 4;
   */
  App = 4,

  /**
   * WindowsDesktop means a request for a TLS certificate for access to a specific
   * windows desktop.
   *
   * @generated from enum value: WindowsDesktop = 5;
   */
  WindowsDesktop = 5,
}

/**
 * Describes the enum proto.UserCertsRequest.CertUsage.
 */
export const UserCertsRequest_CertUsageSchema: GenEnum<UserCertsRequest_CertUsage> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_client_proto_authservice, 4, 0);

/**
 * Requester is the name of the service that sent the request.
 *
 * @generated from enum proto.UserCertsRequest.Requester
 */
export enum UserCertsRequest_Requester {
  /**
   * UNSPECIFIED is set when the requester in unknown.
   *
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * TSH_DB_LOCAL_PROXY_TUNNEL is set when the request was sent by a tsh db local proxy tunnel.
   *
   * @generated from enum value: TSH_DB_LOCAL_PROXY_TUNNEL = 1;
   */
  TSH_DB_LOCAL_PROXY_TUNNEL = 1,

  /**
   * TSH_KUBE_LOCAL_PROXY is set when the request was sent by a tsh kube local proxy.
   *
   * @generated from enum value: TSH_KUBE_LOCAL_PROXY = 2;
   */
  TSH_KUBE_LOCAL_PROXY = 2,

  /**
   * TSH_KUBE_LOCAL_PROXY_HEADLESS is set when the request was sent by a tsh kube local proxy in headless mode.
   *
   * @generated from enum value: TSH_KUBE_LOCAL_PROXY_HEADLESS = 3;
   */
  TSH_KUBE_LOCAL_PROXY_HEADLESS = 3,

  /**
   * TSH_APP_LOCAL_PROXY is set when the request was sent by a tsh app local proxy.
   *
   * @generated from enum value: TSH_APP_LOCAL_PROXY = 4;
   */
  TSH_APP_LOCAL_PROXY = 4,
}

/**
 * Describes the enum proto.UserCertsRequest.Requester.
 */
export const UserCertsRequest_RequesterSchema: GenEnum<UserCertsRequest_Requester> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_client_proto_authservice, 4, 1);

/**
 * CertPurpose complements CertUsage by informing Teleport of the intended use
 * for the certificates.
 *
 * @generated from enum proto.UserCertsRequest.CertPurpose
 */
export enum UserCertsRequest_CertPurpose {
  /**
   * Purpose not specified.
   * Interpreted as CERT_PURPOSE_LOGIN_CERTS.
   *
   * @generated from enum value: CERT_PURPOSE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Generate login certificates, both SSH and TLS, as well as CA certs.
   *
   * @generated from enum value: CERT_PURPOSE_LOGIN_CERTS = 1;
   */
  LOGIN_CERTS = 1,

  /**
   * Generate single-user certificates, either SSH or TLS, depending on the
   * specified Usage.
   *
   * @generated from enum value: CERT_PURPOSE_SINGLE_USE_CERTS = 2;
   */
  SINGLE_USE_CERTS = 2,
}

/**
 * Describes the enum proto.UserCertsRequest.CertPurpose.
 */
export const UserCertsRequest_CertPurposeSchema: GenEnum<UserCertsRequest_CertPurpose> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_client_proto_authservice, 4, 2);

/**
 * RouteToDatabase combines parameters for database service routing information.
 *
 * @generated from message proto.RouteToDatabase
 */
export type RouteToDatabase = Message<"proto.RouteToDatabase"> & {
  /**
   * ServiceName is the Teleport database proxy service name the cert is for.
   *
   * @generated from field: string ServiceName = 1;
   */
  ServiceName: string;

  /**
   * Protocol is the type of the database the cert is for.
   *
   * @generated from field: string Protocol = 2;
   */
  Protocol: string;

  /**
   * Username is an optional database username to embed.
   *
   * @generated from field: string Username = 3;
   */
  Username: string;

  /**
   * Database is an optional database name to embed.
   *
   * @generated from field: string Database = 4;
   */
  Database: string;

  /**
   * Roles is an optional list of database roles to embed.
   *
   * @generated from field: repeated string Roles = 5;
   */
  Roles: string[];
};

/**
 * Describes the message proto.RouteToDatabase.
 * Use `create(RouteToDatabaseSchema)` to create a new message.
 */
export const RouteToDatabaseSchema: GenMessage<RouteToDatabase> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 5);

/**
 * RouteToWindowsDesktop combines parameters for windows desktop routing information.
 *
 * @generated from message proto.RouteToWindowsDesktop
 */
export type RouteToWindowsDesktop = Message<"proto.RouteToWindowsDesktop"> & {
  /**
   * WindowsDesktop is the Windows Desktop server name to embed.
   *
   * @generated from field: string WindowsDesktop = 1;
   */
  WindowsDesktop: string;

  /**
   * Login is the Windows desktop user login to embed.
   *
   * @generated from field: string Login = 2;
   */
  Login: string;
};

/**
 * Describes the message proto.RouteToWindowsDesktop.
 * Use `create(RouteToWindowsDesktopSchema)` to create a new message.
 */
export const RouteToWindowsDesktopSchema: GenMessage<RouteToWindowsDesktop> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 6);

/**
 * RouteToApp contains parameters for application access certificate requests.
 *
 * @generated from message proto.RouteToApp
 */
export type RouteToApp = Message<"proto.RouteToApp"> & {
  /**
   * Name is the application name certificate is being requested for.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;

  /**
   * SessionID is the ID of the application session.
   * DEPRECATED: Automatically generated by server.
   * TODO (Joerger): DELETE IN v17.0.0
   *
   * @generated from field: string SessionID = 2 [deprecated = true];
   * @deprecated
   */
  SessionID: string;

  /**
   * PublicAddr is the application public address.
   *
   * @generated from field: string PublicAddr = 3;
   */
  PublicAddr: string;

  /**
   * ClusterName is the cluster where the application resides.
   *
   * @generated from field: string ClusterName = 4;
   */
  ClusterName: string;

  /**
   * AWSRoleARN is the AWS role to assume when accessing AWS API.
   *
   * @generated from field: string AWSRoleARN = 5;
   */
  AWSRoleARN: string;

  /**
   * AzureIdentity is the Azure identity to assume when accessing Azure API.
   *
   * @generated from field: string AzureIdentity = 6;
   */
  AzureIdentity: string;

  /**
   * GCPServiceAccount is the GCP service account to assume when accessing GCP API.
   *
   * @generated from field: string GCPServiceAccount = 7;
   */
  GCPServiceAccount: string;

  /**
   * URI is the URI of the app. This is the internal endpoint where the application is running and isn't user-facing.
   *
   * @generated from field: string URI = 8;
   */
  URI: string;
};

/**
 * Describes the message proto.RouteToApp.
 * Use `create(RouteToAppSchema)` to create a new message.
 */
export const RouteToAppSchema: GenMessage<RouteToApp> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 7);

/**
 * GetUserRequest specifies parameters for the GetUser method.
 *
 * @generated from message proto.GetUserRequest
 */
export type GetUserRequest = Message<"proto.GetUserRequest"> & {
  /**
   * Name is the name of the desired user.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;

  /**
   * WithSecrets specifies whether to load associated secrets.
   *
   * @generated from field: bool WithSecrets = 2;
   */
  WithSecrets: boolean;
};

/**
 * Describes the message proto.GetUserRequest.
 * Use `create(GetUserRequestSchema)` to create a new message.
 */
export const GetUserRequestSchema: GenMessage<GetUserRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 8);

/**
 * GetUsersRequest specifies parameters for the GetUsers method.
 *
 * @generated from message proto.GetUsersRequest
 */
export type GetUsersRequest = Message<"proto.GetUsersRequest"> & {
  /**
   * WithSecrets specifies whether to load associated secrets.
   *
   * @generated from field: bool WithSecrets = 1;
   */
  WithSecrets: boolean;
};

/**
 * Describes the message proto.GetUsersRequest.
 * Use `create(GetUsersRequestSchema)` to create a new message.
 */
export const GetUsersRequestSchema: GenMessage<GetUsersRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 9);

/**
 * ChangePasswordRequest specifies the parameters for the ChangePassword method.
 *
 * @generated from message proto.ChangePasswordRequest
 */
export type ChangePasswordRequest = Message<"proto.ChangePasswordRequest"> & {
  /**
   * @generated from field: string User = 1;
   */
  User: string;

  /**
   * @generated from field: bytes OldPassword = 2;
   */
  OldPassword: Uint8Array;

  /**
   * @generated from field: bytes NewPassword = 3;
   */
  NewPassword: Uint8Array;

  /**
   * @generated from field: string SecondFactorToken = 4;
   */
  SecondFactorToken: string;

  /**
   * @generated from field: webauthn.CredentialAssertionResponse Webauthn = 5;
   */
  Webauthn?: CredentialAssertionResponse;
};

/**
 * Describes the message proto.ChangePasswordRequest.
 * Use `create(ChangePasswordRequestSchema)` to create a new message.
 */
export const ChangePasswordRequestSchema: GenMessage<ChangePasswordRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 10);

/**
 * PluginDataSeq is a sequence of plugin data.
 *
 * @generated from message proto.PluginDataSeq
 */
export type PluginDataSeq = Message<"proto.PluginDataSeq"> & {
  /**
   * @generated from field: repeated types.PluginDataV3 PluginData = 1;
   */
  PluginData: PluginDataV3[];
};

/**
 * Describes the message proto.PluginDataSeq.
 * Use `create(PluginDataSeqSchema)` to create a new message.
 */
export const PluginDataSeqSchema: GenMessage<PluginDataSeq> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 11);

/**
 * RequestStateSetter encodes the parameters necessary to update the
 * state of a privilege escalation request.
 *
 * @generated from message proto.RequestStateSetter
 */
export type RequestStateSetter = Message<"proto.RequestStateSetter"> & {
  /**
   * ID is the request ID being targeted
   *
   * @generated from field: string ID = 1;
   */
  ID: string;

  /**
   * State is the desired state to be set
   *
   * @generated from field: types.RequestState State = 2;
   */
  State: RequestState;

  /**
   * Delegator is an optional indicator of who delegated this
   * state update (used by plugins to indicate which user approved
   * or denied the request).
   *
   * @generated from field: string Delegator = 3;
   */
  Delegator: string;

  /**
   * Reason is an optional message indicating the reason for the
   * resolution (approval, denail , etc...).
   *
   * @generated from field: string Reason = 4;
   */
  Reason: string;

  /**
   * Annotations are key/value pairs received from plugins during request
   * resolution.  They are currently only used to provide additional logging
   * information.
   *
   * @generated from field: wrappers.LabelValues Annotations = 5;
   */
  Annotations?: LabelValues;

  /**
   * Roles, if present, overrides the existing set of roles associated
   * with the access request.
   *
   * @generated from field: repeated string Roles = 6;
   */
  Roles: string[];

  /**
   * AssumeStartTime is the time the requested roles can be assumed.
   *
   * @generated from field: google.protobuf.Timestamp AssumeStartTime = 7;
   */
  AssumeStartTime?: Timestamp;
};

/**
 * Describes the message proto.RequestStateSetter.
 * Use `create(RequestStateSetterSchema)` to create a new message.
 */
export const RequestStateSetterSchema: GenMessage<RequestStateSetter> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 12);

/**
 * RequestID is the unique identifier of an access request.
 *
 * @generated from message proto.RequestID
 */
export type RequestID = Message<"proto.RequestID"> & {
  /**
   * @generated from field: string ID = 1;
   */
  ID: string;
};

/**
 * Describes the message proto.RequestID.
 * Use `create(RequestIDSchema)` to create a new message.
 */
export const RequestIDSchema: GenMessage<RequestID> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 13);

/**
 * GetResetPasswordTokenRequest is a request to get a reset password token.
 *
 * @generated from message proto.GetResetPasswordTokenRequest
 */
export type GetResetPasswordTokenRequest = Message<"proto.GetResetPasswordTokenRequest"> & {
  /**
   * @generated from field: string TokenID = 1;
   */
  TokenID: string;
};

/**
 * Describes the message proto.GetResetPasswordTokenRequest.
 * Use `create(GetResetPasswordTokenRequestSchema)` to create a new message.
 */
export const GetResetPasswordTokenRequestSchema: GenMessage<GetResetPasswordTokenRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 14);

/**
 * CreateResetPasswordTokenRequest is a request to create a reset password token.
 *
 * @generated from message proto.CreateResetPasswordTokenRequest
 */
export type CreateResetPasswordTokenRequest = Message<"proto.CreateResetPasswordTokenRequest"> & {
  /**
   * Name is the user name.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;

  /**
   * Type is a token type.
   *
   * @generated from field: string Type = 2;
   */
  Type: string;

  /**
   * TTL specifies how long the generated token is valid for.
   *
   * @generated from field: int64 TTL = 3;
   */
  TTL: bigint;
};

/**
 * Describes the message proto.CreateResetPasswordTokenRequest.
 * Use `create(CreateResetPasswordTokenRequestSchema)` to create a new message.
 */
export const CreateResetPasswordTokenRequestSchema: GenMessage<CreateResetPasswordTokenRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 15);

/**
 * RenewableCertsRequest is a request to generate a first set of renewable
 * certificates from a bot join token.
 *
 * @generated from message proto.RenewableCertsRequest
 */
export type RenewableCertsRequest = Message<"proto.RenewableCertsRequest"> & {
  /**
   * Token is a bot join token.
   *
   * @generated from field: string Token = 1;
   */
  Token: string;

  /**
   * PublicKey is a public key to be signed.
   *
   * @generated from field: bytes PublicKey = 2;
   */
  PublicKey: Uint8Array;
};

/**
 * Describes the message proto.RenewableCertsRequest.
 * Use `create(RenewableCertsRequestSchema)` to create a new message.
 */
export const RenewableCertsRequestSchema: GenMessage<RenewableCertsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 16);

/**
 * PingRequest is the input value for the Ping method.
 *
 * Ping method currently takes no parameters
 *
 * @generated from message proto.PingRequest
 */
export type PingRequest = Message<"proto.PingRequest"> & {
};

/**
 * Describes the message proto.PingRequest.
 * Use `create(PingRequestSchema)` to create a new message.
 */
export const PingRequestSchema: GenMessage<PingRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 17);

/**
 * PingResponse contains data about the teleport auth server.
 *
 * @generated from message proto.PingResponse
 */
export type PingResponse = Message<"proto.PingResponse"> & {
  /**
   * ClusterName is the name of the teleport cluster.
   *
   * @generated from field: string ClusterName = 1;
   */
  ClusterName: string;

  /**
   * ServerVersion is the version of the auth server.
   *
   * @generated from field: string ServerVersion = 2;
   */
  ServerVersion: string;

  /**
   * ServerFeatures are the features supported by the auth server.
   *
   * @generated from field: proto.Features ServerFeatures = 3;
   */
  ServerFeatures?: Features;

  /**
   * ProxyPublicAddr is the server's public proxy address.
   *
   * @generated from field: string ProxyPublicAddr = 4;
   */
  ProxyPublicAddr: string;

  /**
   * IsBoring signals whether or not the server was compiled with BoringCrypto.
   *
   * @generated from field: bool IsBoring = 5;
   */
  IsBoring: boolean;

  /**
   * RemoteAddr is the client peer addr as seen from the auth server (used to assist
   * instances in guessing their external IP when none is configured).
   *
   * @generated from field: string RemoteAddr = 7;
   */
  RemoteAddr: string;

  /**
   * LoadAllCAs signals whether or not tsh should load all CAs when trying
   * to ssh into a node.
   *
   * @generated from field: bool LoadAllCAs = 8;
   */
  LoadAllCAs: boolean;

  /**
   * SignatureAlgorithmSuite is the configured signature algorithm suite for the cluster.
   *
   * @generated from field: types.SignatureAlgorithmSuite signature_algorithm_suite = 9;
   */
  signatureAlgorithmSuite: SignatureAlgorithmSuite;
};

/**
 * Describes the message proto.PingResponse.
 * Use `create(PingResponseSchema)` to create a new message.
 */
export const PingResponseSchema: GenMessage<PingResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 18);

/**
 * Features are auth server features.
 *
 * @generated from message proto.Features
 */
export type Features = Message<"proto.Features"> & {
  /**
   * Kubernetes enables Kubernetes Access product
   * Deprecated remove in v18; leverage entitlements
   *
   * @generated from field: bool Kubernetes = 1;
   */
  Kubernetes: boolean;

  /**
   * App enables Application Access product
   * Deprecated remove in v18; leverage entitlements
   *
   * @generated from field: bool App = 2;
   */
  App: boolean;

  /**
   * DB enables database access product
   * Deprecated remove in v18; leverage entitlements
   *
   * @generated from field: bool DB = 3;
   */
  DB: boolean;

  /**
   * OIDC enables OIDC connectors
   * Deprecated remove in v18; leverage entitlements
   *
   * @generated from field: bool OIDC = 4;
   */
  OIDC: boolean;

  /**
   * SAML enables SAML connectors
   * Deprecated remove in v18; leverage entitlements
   *
   * @generated from field: bool SAML = 5;
   */
  SAML: boolean;

  /**
   * AccessControls enables FIPS access controls
   *
   * @generated from field: bool AccessControls = 6;
   */
  AccessControls: boolean;

  /**
   * AdvancedAccessWorkflows is currently set to the value of the Cloud AccessRequests entitlement
   *
   * @generated from field: bool AdvancedAccessWorkflows = 7;
   */
  AdvancedAccessWorkflows: boolean;

  /**
   * Cloud enables some cloud-related features
   *
   * @generated from field: bool Cloud = 8;
   */
  Cloud: boolean;

  /**
   * HSM enables PKCS#11 HSM support
   * Deprecated remove in v18; leverage entitlements
   *
   * @generated from field: bool HSM = 9;
   */
  HSM: boolean;

  /**
   * Desktop enables desktop access product
   * Deprecated remove in v18; leverage entitlements
   *
   * @generated from field: bool Desktop = 10;
   */
  Desktop: boolean;

  /**
   * RecoveryCodes enables recovery codes
   *
   * @generated from field: bool RecoveryCodes = 14;
   */
  RecoveryCodes: boolean;

  /**
   * Plugins enables hosted plugins
   *
   * @generated from field: bool Plugins = 15;
   */
  Plugins: boolean;

  /**
   * AutomaticUpgrades enables Automatic Upgrades for the agents/services.
   *
   * @generated from field: bool AutomaticUpgrades = 16;
   */
  AutomaticUpgrades: boolean;

  /**
   * IsUsageBased enables some usage-based billing features
   *
   * @generated from field: bool IsUsageBased = 17;
   */
  IsUsageBased: boolean;

  /**
   * Assist enables the Assistant feature
   * Deprecated remove in v18; leverage entitlements
   *
   * @generated from field: bool Assist = 18;
   */
  Assist: boolean;

  /**
   * DeviceTrust holds its namesake feature settings.
   * Deprecated remove in v18; leverage entitlements
   *
   * @generated from field: proto.DeviceTrustFeature DeviceTrust = 19;
   */
  DeviceTrust?: DeviceTrustFeature;

  /**
   * FeatureHiding enables hiding features from being discoverable for users who don't have the necessary permissions.
   * Deprecated remove in v18; leverage entitlements
   *
   * @generated from field: bool FeatureHiding = 20;
   */
  FeatureHiding: boolean;

  /**
   * AccessRequests holds its namesake feature settings.
   * Deprecated remove in v18; leverage entitlements
   *
   * @generated from field: proto.AccessRequestsFeature AccessRequests = 21;
   */
  AccessRequests?: AccessRequestsFeature;

  /**
   * CustomTheme holds the name of WebUI custom theme.
   *
   * @generated from field: string CustomTheme = 22;
   */
  CustomTheme: string;

  /**
   * IdentityGovernance indicates whether IGS related features are enabled:
   * access list, access request, access monitoring, device trust.
   * Deprecated remove in v18; leverage entitlements
   *
   * @generated from field: bool IdentityGovernance = 23;
   */
  IdentityGovernance: boolean;

  /**
   * AccessGraph enables the usage of access graph.
   * NOTE: this is a legacy flag that is currently used to signal
   * that Access Graph integration is *enabled* on a cluster.
   * *Access* to the feature is gated on the `Policy` flag.
   * TODO(justinas): remove this field once "TAG enabled" status is moved to a resource in the backend.
   *
   * @generated from field: bool AccessGraph = 24;
   */
  AccessGraph: boolean;

  /**
   * AccessListFeature holds its namesake feature settings.
   * Deprecated remove in v18; leverage entitlements
   *
   * @generated from field: proto.AccessListFeature AccessList = 25;
   */
  AccessList?: AccessListFeature;

  /**
   * AccessMonitoringFeature holds its namesake feature settings.
   * Deprecated remove in v18; leverage entitlements for access and AccessMonitoringConfigured for enabled
   *
   * @generated from field: proto.AccessMonitoringFeature AccessMonitoring = 26;
   */
  AccessMonitoring?: AccessMonitoringFeature;

  /**
   * ProductType describes the product being used.
   *
   * @generated from field: proto.ProductType ProductType = 27;
   */
  ProductType: ProductType;

  /**
   * Policy enables the Teleport Policy feature set.
   * At the time of writing, this includes Teleport Access Graph (TAG).
   * Deprecated remove in v18; leverage entitlements
   *
   * @generated from field: proto.PolicyFeature Policy = 28;
   */
  Policy?: PolicyFeature;

  /**
   * Questionnaire indicates whether cluster users should get an onboarding questionnaire
   *
   * @generated from field: bool Questionnaire = 29;
   */
  Questionnaire: boolean;

  /**
   * IsStripeManaged indicates if the cluster billing is managed via Stripe
   *
   * @generated from field: bool IsStripeManaged = 30;
   */
  IsStripeManaged: boolean;

  /**
   * ExternalAuditStorage indicates whether the EAS feature is enabled in the cluster.
   * Deprecated remove in v18; leverage entitlements
   *
   * @generated from field: bool ExternalAuditStorage = 31;
   */
  ExternalAuditStorage: boolean;

  /**
   * SupportType indicates the type of the customer's support
   *
   * @generated from field: proto.SupportType SupportType = 32;
   */
  SupportType: SupportType;

  /**
   * JoinActiveSessions indicates whether joining active sessions via web UI is enabled
   * Deprecated remove in v18; leverage entitlements
   *
   * @generated from field: bool JoinActiveSessions = 33;
   */
  JoinActiveSessions: boolean;

  /**
   * MobileDeviceManagement indicates whether endpoint management (like Jamf Plugin) can be used in the cluster
   * Deprecated remove in v18; leverage entitlements
   *
   * @generated from field: bool MobileDeviceManagement = 34;
   */
  MobileDeviceManagement: boolean;

  /**
   * entitlements define a customer’s access to a specific features
   *
   * @generated from field: map<string, proto.EntitlementInfo> entitlements = 35;
   */
  entitlements: { [key: string]: EntitlementInfo };

  /**
   * AccessMonitoringConfigured contributes to the enablement of access monitoring.
   * NOTE: this flag is used to signal that Access Monitoring is *enabled* on a cluster.
   * *Access* to the feature is gated on the `AccessMonitoring` entitlement.
   *
   * @generated from field: bool AccessMonitoringConfigured = 36;
   */
  AccessMonitoringConfigured: boolean;
};

/**
 * Describes the message proto.Features.
 * Use `create(FeaturesSchema)` to create a new message.
 */
export const FeaturesSchema: GenMessage<Features> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 19);

/**
 * EntitlementInfo is the state and limits of a particular entitlement
 *
 * @generated from message proto.EntitlementInfo
 */
export type EntitlementInfo = Message<"proto.EntitlementInfo"> & {
  /**
   * enabled indicates the feature is 'on' if true
   *
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * limit indicates the allotted amount of use when limited
   *
   * @generated from field: int32 limit = 2;
   */
  limit: number;
};

/**
 * Describes the message proto.EntitlementInfo.
 * Use `create(EntitlementInfoSchema)` to create a new message.
 */
export const EntitlementInfoSchema: GenMessage<EntitlementInfo> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 20);

/**
 * DeviceTrustFeature holds the Device Trust feature general and usage-based
 * settings.
 * Limits have no affect if [Features.IdentityGovernance] is enabled.
 *
 * @generated from message proto.DeviceTrustFeature
 */
export type DeviceTrustFeature = Message<"proto.DeviceTrustFeature"> & {
  /**
   * Currently this flag is to gate actions from OSS clusters.
   *
   * Determining support for device trust is currently determined by:
   *   1) Enterprise + [Features.IdentityGovernanceSecurity] == true, new flag
   *   introduced with Enterprise Usage Based (EUB) product.
   *   2) Enterprise + [Features.IsUsageBasedBilling] == false, legacy support
   *   where before EUB, it was unlimited.
   *
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * Usage-based limit for the number of registered/enrolled devices, at the
   * implementation's discretion.
   *
   * @generated from field: int32 devices_usage_limit = 2;
   */
  devicesUsageLimit: number;
};

/**
 * Describes the message proto.DeviceTrustFeature.
 * Use `create(DeviceTrustFeatureSchema)` to create a new message.
 */
export const DeviceTrustFeatureSchema: GenMessage<DeviceTrustFeature> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 21);

/**
 * AccessRequestsFeature holds the AccessRequest feature general and usage-based
 * settings.
 * Limits have no affect if [Features.IdentityGovernance] is enabled.
 *
 * @generated from message proto.AccessRequestsFeature
 */
export type AccessRequestsFeature = Message<"proto.AccessRequestsFeature"> & {
  /**
   * Usage-based limit for the number of limit for the number of
   * access requests created in a calendar month.
   *
   * @generated from field: int32 monthly_request_limit = 1;
   */
  monthlyRequestLimit: number;
};

/**
 * Describes the message proto.AccessRequestsFeature.
 * Use `create(AccessRequestsFeatureSchema)` to create a new message.
 */
export const AccessRequestsFeatureSchema: GenMessage<AccessRequestsFeature> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 22);

/**
 * AccessListFeature holds the Access List feature settings.
 * Limits have no affect if [Features.IdentityGovernance] is enabled.
 *
 * @generated from message proto.AccessListFeature
 */
export type AccessListFeature = Message<"proto.AccessListFeature"> & {
  /**
   * Limit for the number of access list creatable when feature is
   * not enabled.
   *
   * @generated from field: int32 create_limit = 1;
   */
  createLimit: number;
};

/**
 * Describes the message proto.AccessListFeature.
 * Use `create(AccessListFeatureSchema)` to create a new message.
 */
export const AccessListFeatureSchema: GenMessage<AccessListFeature> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 23);

/**
 * AccessMonitoringFeature holds the Access Monitoring feature settings.
 * Limits have no affect if [Features.IdentityGovernance] is enabled.
 *
 * @generated from message proto.AccessMonitoringFeature
 */
export type AccessMonitoringFeature = Message<"proto.AccessMonitoringFeature"> & {
  /**
   * True if enabled in the auth service config: [auth_service.access_monitoring.enabled].
   *
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * Defines the max number of days to include in an access report.
   *
   * @generated from field: int32 max_report_range_limit = 2;
   */
  maxReportRangeLimit: number;
};

/**
 * Describes the message proto.AccessMonitoringFeature.
 * Use `create(AccessMonitoringFeatureSchema)` to create a new message.
 */
export const AccessMonitoringFeatureSchema: GenMessage<AccessMonitoringFeature> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 24);

/**
 * PolicyFeature holds the Teleport Policy feature set settings.
 *
 * @generated from message proto.PolicyFeature
 */
export type PolicyFeature = Message<"proto.PolicyFeature"> & {
  /**
   * True if Teleport Policy is enabled in the license.
   *
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;
};

/**
 * Describes the message proto.PolicyFeature.
 * Use `create(PolicyFeatureSchema)` to create a new message.
 */
export const PolicyFeatureSchema: GenMessage<PolicyFeature> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 25);

/**
 * DeleteUserRequest is the input value for the DeleteUser method.
 *
 * @generated from message proto.DeleteUserRequest
 */
export type DeleteUserRequest = Message<"proto.DeleteUserRequest"> & {
  /**
   * Name is the user name to delete.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;
};

/**
 * Describes the message proto.DeleteUserRequest.
 * Use `create(DeleteUserRequestSchema)` to create a new message.
 */
export const DeleteUserRequestSchema: GenMessage<DeleteUserRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 26);

/**
 * Semaphores is a sequence of Semaphore resources.
 *
 * @generated from message proto.Semaphores
 */
export type Semaphores = Message<"proto.Semaphores"> & {
  /**
   * @generated from field: repeated types.SemaphoreV3 Semaphores = 1;
   */
  Semaphores: SemaphoreV3[];
};

/**
 * Describes the message proto.Semaphores.
 * Use `create(SemaphoresSchema)` to create a new message.
 */
export const SemaphoresSchema: GenMessage<Semaphores> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 27);

/**
 * AuditStreamRequest contains stream request - event or stream control request
 *
 * @generated from message proto.AuditStreamRequest
 */
export type AuditStreamRequest = Message<"proto.AuditStreamRequest"> & {
  /**
   * Request is either stream request - create, resume or complete stream
   * or event submitted as a part of the stream
   *
   * @generated from oneof proto.AuditStreamRequest.Request
   */
  Request: {
    /**
     * CreateStream creates the stream for session ID
     * should be the first message sent to the stream
     *
     * @generated from field: proto.CreateStream CreateStream = 1;
     */
    value: CreateStream;
    case: "CreateStream";
  } | {
    /**
     * ResumeStream resumes existing stream, should be the
     * first message sent to the stream
     *
     * @generated from field: proto.ResumeStream ResumeStream = 2;
     */
    value: ResumeStream;
    case: "ResumeStream";
  } | {
    /**
     * CompleteStream completes the stream
     *
     * @generated from field: proto.CompleteStream CompleteStream = 3;
     */
    value: CompleteStream;
    case: "CompleteStream";
  } | {
    /**
     * FlushAndClose flushes and closes the stream
     *
     * @generated from field: proto.FlushAndCloseStream FlushAndCloseStream = 4;
     */
    value: FlushAndCloseStream;
    case: "FlushAndCloseStream";
  } | {
    /**
     * Event contains the stream event
     *
     * @generated from field: events.OneOf Event = 5;
     */
    value: OneOf;
    case: "Event";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message proto.AuditStreamRequest.
 * Use `create(AuditStreamRequestSchema)` to create a new message.
 */
export const AuditStreamRequestSchema: GenMessage<AuditStreamRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 28);

/**
 * AuditStreamStatus returns audit stream status
 * with corresponding upload ID
 *
 * @generated from message proto.AuditStreamStatus
 */
export type AuditStreamStatus = Message<"proto.AuditStreamStatus"> & {
  /**
   * UploadID is upload ID associated with the stream,
   * can be used to resume the stream
   *
   * @generated from field: string UploadID = 1;
   */
  UploadID: string;
};

/**
 * Describes the message proto.AuditStreamStatus.
 * Use `create(AuditStreamStatusSchema)` to create a new message.
 */
export const AuditStreamStatusSchema: GenMessage<AuditStreamStatus> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 29);

/**
 * CreateStream creates stream for a new session ID
 *
 * @generated from message proto.CreateStream
 */
export type CreateStream = Message<"proto.CreateStream"> & {
  /**
   * @generated from field: string SessionID = 1;
   */
  SessionID: string;
};

/**
 * Describes the message proto.CreateStream.
 * Use `create(CreateStreamSchema)` to create a new message.
 */
export const CreateStreamSchema: GenMessage<CreateStream> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 30);

/**
 * ResumeStream resumes stream that was previously created
 *
 * @generated from message proto.ResumeStream
 */
export type ResumeStream = Message<"proto.ResumeStream"> & {
  /**
   * SessionID is a session ID of the stream
   *
   * @generated from field: string SessionID = 1;
   */
  SessionID: string;

  /**
   * UploadID is upload ID to resume
   *
   * @generated from field: string UploadID = 2;
   */
  UploadID: string;
};

/**
 * Describes the message proto.ResumeStream.
 * Use `create(ResumeStreamSchema)` to create a new message.
 */
export const ResumeStreamSchema: GenMessage<ResumeStream> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 31);

/**
 * CompleteStream completes the stream
 * and uploads it to the session server
 *
 * @generated from message proto.CompleteStream
 */
export type CompleteStream = Message<"proto.CompleteStream"> & {
};

/**
 * Describes the message proto.CompleteStream.
 * Use `create(CompleteStreamSchema)` to create a new message.
 */
export const CompleteStreamSchema: GenMessage<CompleteStream> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 32);

/**
 * FlushAndCloseStream flushes the stream data and closes the stream
 *
 * @generated from message proto.FlushAndCloseStream
 */
export type FlushAndCloseStream = Message<"proto.FlushAndCloseStream"> & {
};

/**
 * Describes the message proto.FlushAndCloseStream.
 * Use `create(FlushAndCloseStreamSchema)` to create a new message.
 */
export const FlushAndCloseStreamSchema: GenMessage<FlushAndCloseStream> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 33);

/**
 * UpsertApplicationServerRequest upserts an app server.
 *
 * @generated from message proto.UpsertApplicationServerRequest
 */
export type UpsertApplicationServerRequest = Message<"proto.UpsertApplicationServerRequest"> & {
  /**
   * Server is an app server resource to register.
   *
   * @generated from field: types.AppServerV3 Server = 1;
   */
  Server?: AppServerV3;
};

/**
 * Describes the message proto.UpsertApplicationServerRequest.
 * Use `create(UpsertApplicationServerRequestSchema)` to create a new message.
 */
export const UpsertApplicationServerRequestSchema: GenMessage<UpsertApplicationServerRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 34);

/**
 * DeleteApplicationServerRequest is a request to delete an app server.
 *
 * @generated from message proto.DeleteApplicationServerRequest
 */
export type DeleteApplicationServerRequest = Message<"proto.DeleteApplicationServerRequest"> & {
  /**
   * Namespace is the app server namespace.
   *
   * @generated from field: string Namespace = 1;
   */
  Namespace: string;

  /**
   * HostID is the app server host uuid.
   *
   * @generated from field: string HostID = 2;
   */
  HostID: string;

  /**
   * Name is the name of the application to delete.
   *
   * @generated from field: string Name = 3;
   */
  Name: string;
};

/**
 * Describes the message proto.DeleteApplicationServerRequest.
 * Use `create(DeleteApplicationServerRequestSchema)` to create a new message.
 */
export const DeleteApplicationServerRequestSchema: GenMessage<DeleteApplicationServerRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 35);

/**
 * DeleteAllApplicationServersRequest are the parameters used to remove all applications.
 *
 * @generated from message proto.DeleteAllApplicationServersRequest
 */
export type DeleteAllApplicationServersRequest = Message<"proto.DeleteAllApplicationServersRequest"> & {
  /**
   * Namespace is the app servers namespace.
   *
   * @generated from field: string Namespace = 1;
   */
  Namespace: string;
};

/**
 * Describes the message proto.DeleteAllApplicationServersRequest.
 * Use `create(DeleteAllApplicationServersRequestSchema)` to create a new message.
 */
export const DeleteAllApplicationServersRequestSchema: GenMessage<DeleteAllApplicationServersRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 36);

/**
 * GenerateAppTokenRequest are the parameters used to request an application
 * token.
 *
 * @generated from message proto.GenerateAppTokenRequest
 */
export type GenerateAppTokenRequest = Message<"proto.GenerateAppTokenRequest"> & {
  /**
   * Username is the Teleport username.
   *
   * @generated from field: string Username = 1;
   */
  Username: string;

  /**
   * Roles is a list of Teleport roles assigned to the user.
   *
   * @generated from field: repeated string Roles = 2;
   */
  Roles: string[];

  /**
   * URI is the URI of the application this token is targeting.
   *
   * @generated from field: string URI = 3;
   */
  URI: string;

  /**
   * Expires is the time this token expires.
   *
   * @generated from field: google.protobuf.Timestamp Expires = 4;
   */
  Expires?: Timestamp;

  /**
   * Traits are the traits assigned to the user within Teleport.
   *
   * @generated from field: map<string, wrappers.StringValues> Traits = 5;
   */
  Traits: { [key: string]: StringValues };
};

/**
 * Describes the message proto.GenerateAppTokenRequest.
 * Use `create(GenerateAppTokenRequestSchema)` to create a new message.
 */
export const GenerateAppTokenRequestSchema: GenMessage<GenerateAppTokenRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 37);

/**
 * GenerateAppTokenResponse contains a signed application token.
 *
 * @generated from message proto.GenerateAppTokenResponse
 */
export type GenerateAppTokenResponse = Message<"proto.GenerateAppTokenResponse"> & {
  /**
   * @generated from field: string Token = 1;
   */
  Token: string;
};

/**
 * Describes the message proto.GenerateAppTokenResponse.
 * Use `create(GenerateAppTokenResponseSchema)` to create a new message.
 */
export const GenerateAppTokenResponseSchema: GenMessage<GenerateAppTokenResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 38);

/**
 * GetAppSessionRequest are the parameters used to request an application web session.
 *
 * @generated from message proto.GetAppSessionRequest
 */
export type GetAppSessionRequest = Message<"proto.GetAppSessionRequest"> & {
  /**
   * SessionID is the ID of the session being requested.
   *
   * @generated from field: string SessionID = 1;
   */
  SessionID: string;
};

/**
 * Describes the message proto.GetAppSessionRequest.
 * Use `create(GetAppSessionRequestSchema)` to create a new message.
 */
export const GetAppSessionRequestSchema: GenMessage<GetAppSessionRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 39);

/**
 * GetAppSessionResponse contains the requested application web session.
 *
 * @generated from message proto.GetAppSessionResponse
 */
export type GetAppSessionResponse = Message<"proto.GetAppSessionResponse"> & {
  /**
   * Session is the application web session.
   *
   * @generated from field: types.WebSessionV2 Session = 1;
   */
  Session?: WebSessionV2;
};

/**
 * Describes the message proto.GetAppSessionResponse.
 * Use `create(GetAppSessionResponseSchema)` to create a new message.
 */
export const GetAppSessionResponseSchema: GenMessage<GetAppSessionResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 40);

/**
 * ListAppSessionRequest are the parameters used to request an application web session.
 *
 * Follows the pagination semantics of
 * https://cloud.google.com/apis/design/standard_methods#list.
 *
 * @generated from message proto.ListAppSessionsRequest
 */
export type ListAppSessionsRequest = Message<"proto.ListAppSessionsRequest"> & {
  /**
   * The maximum number of items to return.
   * The server may impose a different page size at its discretion.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * The next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Optional username which will filter the returned web sessions
   * to include only those for the given user.
   *
   * @generated from field: string user = 3;
   */
  user: string;
};

/**
 * Describes the message proto.ListAppSessionsRequest.
 * Use `create(ListAppSessionsRequestSchema)` to create a new message.
 */
export const ListAppSessionsRequestSchema: GenMessage<ListAppSessionsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 41);

/**
 * ListAppSessionResponse contains the requested application web session.
 *
 * @generated from message proto.ListAppSessionsResponse
 */
export type ListAppSessionsResponse = Message<"proto.ListAppSessionsResponse"> & {
  /**
   * Sessions for the retrieved page.
   *
   * @generated from field: repeated types.WebSessionV2 sessions = 1;
   */
  sessions: WebSessionV2[];

  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message proto.ListAppSessionsResponse.
 * Use `create(ListAppSessionsResponseSchema)` to create a new message.
 */
export const ListAppSessionsResponseSchema: GenMessage<ListAppSessionsResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 42);

/**
 * GetSnowflakeSessionsResponse contains all the requested Snowflake web sessions.
 *
 * @generated from message proto.GetSnowflakeSessionsResponse
 */
export type GetSnowflakeSessionsResponse = Message<"proto.GetSnowflakeSessionsResponse"> & {
  /**
   * Sessions is a list of Snowflake web sessions.
   *
   * @generated from field: repeated types.WebSessionV2 Sessions = 1;
   */
  Sessions: WebSessionV2[];
};

/**
 * Describes the message proto.GetSnowflakeSessionsResponse.
 * Use `create(GetSnowflakeSessionsResponseSchema)` to create a new message.
 */
export const GetSnowflakeSessionsResponseSchema: GenMessage<GetSnowflakeSessionsResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 43);

/**
 * ListSAMLIdPSessionRequest are the parameters used to request a SAML IdP sessions.
 *
 * Follows the pagination semantics of
 * https://cloud.google.com/apis/design/standard_methods#list.
 *
 * @generated from message proto.ListSAMLIdPSessionsRequest
 */
export type ListSAMLIdPSessionsRequest = Message<"proto.ListSAMLIdPSessionsRequest"> & {
  /**
   * The maximum number of items to return.
   * The server may impose a different page size at its discretion.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * The next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Optional username which will filter the returned SAML IdP sessions
   * to include only those for the given user.
   *
   * @generated from field: string user = 3;
   */
  user: string;
};

/**
 * Describes the message proto.ListSAMLIdPSessionsRequest.
 * Use `create(ListSAMLIdPSessionsRequestSchema)` to create a new message.
 */
export const ListSAMLIdPSessionsRequestSchema: GenMessage<ListSAMLIdPSessionsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 44);

/**
 * ListSAMLIdPSessionsResponse contains all the requested SAML IdP sessions.
 *
 * @generated from message proto.ListSAMLIdPSessionsResponse
 */
export type ListSAMLIdPSessionsResponse = Message<"proto.ListSAMLIdPSessionsResponse"> & {
  /**
   * Sessions for the retrieved page.
   *
   * @generated from field: repeated types.WebSessionV2 sessions = 1;
   */
  sessions: WebSessionV2[];

  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message proto.ListSAMLIdPSessionsResponse.
 * Use `create(ListSAMLIdPSessionsResponseSchema)` to create a new message.
 */
export const ListSAMLIdPSessionsResponseSchema: GenMessage<ListSAMLIdPSessionsResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 45);

/**
 * CreateAppSessionRequest contains the parameters to request a application web session.
 *
 * @generated from message proto.CreateAppSessionRequest
 */
export type CreateAppSessionRequest = Message<"proto.CreateAppSessionRequest"> & {
  /**
   * Username is the name of the user requesting the session.
   *
   * @generated from field: string Username = 1;
   */
  Username: string;

  /**
   * PublicAddr is the public address the application.
   *
   * @generated from field: string PublicAddr = 3;
   */
  PublicAddr: string;

  /**
   * ClusterName is cluster within which the application is running.
   *
   * @generated from field: string ClusterName = 4;
   */
  ClusterName: string;

  /**
   * AWSRoleARN is AWS role the user wants to assume.
   *
   * @generated from field: string AWSRoleARN = 5;
   */
  AWSRoleARN: string;

  /**
   * AzureIdentity is Azure identity the user wants to assume.
   *
   * @generated from field: string AzureIdentity = 6;
   */
  AzureIdentity: string;

  /**
   * GCPServiceAccount is the GCP service account the user wants to assume.
   *
   * @generated from field: string GCPServiceAccount = 7;
   */
  GCPServiceAccount: string;

  /**
   * MFAResponse is a response to a challenge from a user's MFA device.
   * An optional field, that when provided, the response will be validated and
   * the ID of the validated MFA device will be stored in session's certificate.
   *
   * @generated from field: proto.MFAAuthenticateResponse MFAResponse = 8;
   */
  MFAResponse?: MFAAuthenticateResponse;

  /**
   * AppName is the name of the application.
   *
   * @generated from field: string AppName = 9;
   */
  AppName: string;

  /**
   * URI is the URI of the app. This is the internal endpoint where the application is running and isn't user-facing.
   *
   * @generated from field: string URI = 10;
   */
  URI: string;

  /**
   * ClientAddr is a client (user's) address.
   *
   * @generated from field: string ClientAddr = 11;
   */
  ClientAddr: string;
};

/**
 * Describes the message proto.CreateAppSessionRequest.
 * Use `create(CreateAppSessionRequestSchema)` to create a new message.
 */
export const CreateAppSessionRequestSchema: GenMessage<CreateAppSessionRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 46);

/**
 * CreateAppSessionResponse contains the requested application web session.
 *
 * @generated from message proto.CreateAppSessionResponse
 */
export type CreateAppSessionResponse = Message<"proto.CreateAppSessionResponse"> & {
  /**
   * Session is the application web session.
   *
   * @generated from field: types.WebSessionV2 Session = 1;
   */
  Session?: WebSessionV2;
};

/**
 * Describes the message proto.CreateAppSessionResponse.
 * Use `create(CreateAppSessionResponseSchema)` to create a new message.
 */
export const CreateAppSessionResponseSchema: GenMessage<CreateAppSessionResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 47);

/**
 * CreateSnowflakeSessionRequest contains data required to create Snowflake web session.
 *
 * @generated from message proto.CreateSnowflakeSessionRequest
 */
export type CreateSnowflakeSessionRequest = Message<"proto.CreateSnowflakeSessionRequest"> & {
  /**
   * Username is the name of the user requesting the session.
   *
   * @generated from field: string Username = 1;
   */
  Username: string;

  /**
   * SessionToken is the Snowflake server session token.
   *
   * @generated from field: string SessionToken = 2;
   */
  SessionToken: string;

  /**
   * TokenTTL is the token validity period.
   *
   * @generated from field: int64 TokenTTL = 3;
   */
  TokenTTL: bigint;
};

/**
 * Describes the message proto.CreateSnowflakeSessionRequest.
 * Use `create(CreateSnowflakeSessionRequestSchema)` to create a new message.
 */
export const CreateSnowflakeSessionRequestSchema: GenMessage<CreateSnowflakeSessionRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 48);

/**
 * CreateSnowflakeSessionResponse contains Snowflake WebSession.
 *
 * @generated from message proto.CreateSnowflakeSessionResponse
 */
export type CreateSnowflakeSessionResponse = Message<"proto.CreateSnowflakeSessionResponse"> & {
  /**
   * @generated from field: types.WebSessionV2 Session = 1;
   */
  Session?: WebSessionV2;
};

/**
 * Describes the message proto.CreateSnowflakeSessionResponse.
 * Use `create(CreateSnowflakeSessionResponseSchema)` to create a new message.
 */
export const CreateSnowflakeSessionResponseSchema: GenMessage<CreateSnowflakeSessionResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 49);

/**
 * CreateSAMLIdPSessionRequest contains data required to create a SAML IdP session.
 *
 * @generated from message proto.CreateSAMLIdPSessionRequest
 */
export type CreateSAMLIdPSessionRequest = Message<"proto.CreateSAMLIdPSessionRequest"> & {
  /**
   * SessionID is the identifier for the session.
   *
   * @generated from field: string SessionID = 1;
   */
  SessionID: string;

  /**
   * Username is the name of the user requesting the session.
   *
   * @generated from field: string Username = 2;
   */
  Username: string;

  /**
   * SAMLSession is the session data associated with the SAML IdP session.
   *
   * @generated from field: types.SAMLSessionData SAMLSession = 3;
   */
  SAMLSession?: SAMLSessionData;
};

/**
 * Describes the message proto.CreateSAMLIdPSessionRequest.
 * Use `create(CreateSAMLIdPSessionRequestSchema)` to create a new message.
 */
export const CreateSAMLIdPSessionRequestSchema: GenMessage<CreateSAMLIdPSessionRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 50);

/**
 * CreateSAMLIdPSessionResponse contains a SAML IdP session.
 *
 * @generated from message proto.CreateSAMLIdPSessionResponse
 */
export type CreateSAMLIdPSessionResponse = Message<"proto.CreateSAMLIdPSessionResponse"> & {
  /**
   * @generated from field: types.WebSessionV2 Session = 1;
   */
  Session?: WebSessionV2;
};

/**
 * Describes the message proto.CreateSAMLIdPSessionResponse.
 * Use `create(CreateSAMLIdPSessionResponseSchema)` to create a new message.
 */
export const CreateSAMLIdPSessionResponseSchema: GenMessage<CreateSAMLIdPSessionResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 51);

/**
 * GetSnowflakeSessionRequest are the parameters used to request an Snowflake web session.
 *
 * @generated from message proto.GetSnowflakeSessionRequest
 */
export type GetSnowflakeSessionRequest = Message<"proto.GetSnowflakeSessionRequest"> & {
  /**
   * SessionID is the ID of the session being requested.
   *
   * @generated from field: string SessionID = 1;
   */
  SessionID: string;
};

/**
 * Describes the message proto.GetSnowflakeSessionRequest.
 * Use `create(GetSnowflakeSessionRequestSchema)` to create a new message.
 */
export const GetSnowflakeSessionRequestSchema: GenMessage<GetSnowflakeSessionRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 52);

/**
 * GetSnowflakeSessionResponse contains the requested Snowflake web session.
 *
 * @generated from message proto.GetSnowflakeSessionResponse
 */
export type GetSnowflakeSessionResponse = Message<"proto.GetSnowflakeSessionResponse"> & {
  /**
   * Session is the Snowflake web session.
   *
   * @generated from field: types.WebSessionV2 Session = 1;
   */
  Session?: WebSessionV2;
};

/**
 * Describes the message proto.GetSnowflakeSessionResponse.
 * Use `create(GetSnowflakeSessionResponseSchema)` to create a new message.
 */
export const GetSnowflakeSessionResponseSchema: GenMessage<GetSnowflakeSessionResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 53);

/**
 * GetSAMLIdPSessionRequest are the parameters used to request a SAML IdP session.
 *
 * @generated from message proto.GetSAMLIdPSessionRequest
 */
export type GetSAMLIdPSessionRequest = Message<"proto.GetSAMLIdPSessionRequest"> & {
  /**
   * SessionID is the ID of the session being requested.
   *
   * @generated from field: string SessionID = 1;
   */
  SessionID: string;
};

/**
 * Describes the message proto.GetSAMLIdPSessionRequest.
 * Use `create(GetSAMLIdPSessionRequestSchema)` to create a new message.
 */
export const GetSAMLIdPSessionRequestSchema: GenMessage<GetSAMLIdPSessionRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 54);

/**
 * GetSAMLIdPSessionResponse contains the requested SAML IdP session.
 *
 * @generated from message proto.GetSAMLIdPSessionResponse
 */
export type GetSAMLIdPSessionResponse = Message<"proto.GetSAMLIdPSessionResponse"> & {
  /**
   * Session is the SAML IdP web session.
   *
   * @generated from field: types.WebSessionV2 Session = 1;
   */
  Session?: WebSessionV2;
};

/**
 * Describes the message proto.GetSAMLIdPSessionResponse.
 * Use `create(GetSAMLIdPSessionResponseSchema)` to create a new message.
 */
export const GetSAMLIdPSessionResponseSchema: GenMessage<GetSAMLIdPSessionResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 55);

/**
 * DeleteAppSessionRequest contains the parameters used to remove an application web session.
 *
 * @generated from message proto.DeleteAppSessionRequest
 */
export type DeleteAppSessionRequest = Message<"proto.DeleteAppSessionRequest"> & {
  /**
   * @generated from field: string SessionID = 1;
   */
  SessionID: string;
};

/**
 * Describes the message proto.DeleteAppSessionRequest.
 * Use `create(DeleteAppSessionRequestSchema)` to create a new message.
 */
export const DeleteAppSessionRequestSchema: GenMessage<DeleteAppSessionRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 56);

/**
 * DeleteSnowflakeSessionRequest contains the parameters used to remove a Snowflake web session.
 *
 * @generated from message proto.DeleteSnowflakeSessionRequest
 */
export type DeleteSnowflakeSessionRequest = Message<"proto.DeleteSnowflakeSessionRequest"> & {
  /**
   * @generated from field: string SessionID = 1;
   */
  SessionID: string;
};

/**
 * Describes the message proto.DeleteSnowflakeSessionRequest.
 * Use `create(DeleteSnowflakeSessionRequestSchema)` to create a new message.
 */
export const DeleteSnowflakeSessionRequestSchema: GenMessage<DeleteSnowflakeSessionRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 57);

/**
 * DeleteSAMLIdPSessionRequest contains the parameters used to remove a SAML IdP session.
 *
 * @generated from message proto.DeleteSAMLIdPSessionRequest
 */
export type DeleteSAMLIdPSessionRequest = Message<"proto.DeleteSAMLIdPSessionRequest"> & {
  /**
   * @generated from field: string SessionID = 1;
   */
  SessionID: string;
};

/**
 * Describes the message proto.DeleteSAMLIdPSessionRequest.
 * Use `create(DeleteSAMLIdPSessionRequestSchema)` to create a new message.
 */
export const DeleteSAMLIdPSessionRequestSchema: GenMessage<DeleteSAMLIdPSessionRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 58);

/**
 * DeleteUserAppSessionsRequest contains the parameters used to remove the
 * user's application web sessions.
 *
 * @generated from message proto.DeleteUserAppSessionsRequest
 */
export type DeleteUserAppSessionsRequest = Message<"proto.DeleteUserAppSessionsRequest"> & {
  /**
   * @generated from field: string Username = 1;
   */
  Username: string;
};

/**
 * Describes the message proto.DeleteUserAppSessionsRequest.
 * Use `create(DeleteUserAppSessionsRequestSchema)` to create a new message.
 */
export const DeleteUserAppSessionsRequestSchema: GenMessage<DeleteUserAppSessionsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 59);

/**
 * DeleteUserAppSessionsRequest contains the parameters used to remove the
 * user's SAML IdP sessions.
 *
 * @generated from message proto.DeleteUserSAMLIdPSessionsRequest
 */
export type DeleteUserSAMLIdPSessionsRequest = Message<"proto.DeleteUserSAMLIdPSessionsRequest"> & {
  /**
   * @generated from field: string Username = 1;
   */
  Username: string;
};

/**
 * Describes the message proto.DeleteUserSAMLIdPSessionsRequest.
 * Use `create(DeleteUserSAMLIdPSessionsRequestSchema)` to create a new message.
 */
export const DeleteUserSAMLIdPSessionsRequestSchema: GenMessage<DeleteUserSAMLIdPSessionsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 60);

/**
 * GetWebSessionResponse contains the requested web session.
 *
 * @generated from message proto.GetWebSessionResponse
 */
export type GetWebSessionResponse = Message<"proto.GetWebSessionResponse"> & {
  /**
   * Session is the web session.
   *
   * @generated from field: types.WebSessionV2 Session = 1;
   */
  Session?: WebSessionV2;
};

/**
 * Describes the message proto.GetWebSessionResponse.
 * Use `create(GetWebSessionResponseSchema)` to create a new message.
 */
export const GetWebSessionResponseSchema: GenMessage<GetWebSessionResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 61);

/**
 * GetWebSessionsResponse contains all the requested web sessions.
 *
 * @generated from message proto.GetWebSessionsResponse
 */
export type GetWebSessionsResponse = Message<"proto.GetWebSessionsResponse"> & {
  /**
   * Sessions is a list of web sessions.
   *
   * @generated from field: repeated types.WebSessionV2 Sessions = 1;
   */
  Sessions: WebSessionV2[];
};

/**
 * Describes the message proto.GetWebSessionsResponse.
 * Use `create(GetWebSessionsResponseSchema)` to create a new message.
 */
export const GetWebSessionsResponseSchema: GenMessage<GetWebSessionsResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 62);

/**
 * GetWebTokenResponse contains the requested web token.
 *
 * @generated from message proto.GetWebTokenResponse
 */
export type GetWebTokenResponse = Message<"proto.GetWebTokenResponse"> & {
  /**
   * Token is the web token being requested.
   *
   * @generated from field: types.WebTokenV3 Token = 1;
   */
  Token?: WebTokenV3;
};

/**
 * Describes the message proto.GetWebTokenResponse.
 * Use `create(GetWebTokenResponseSchema)` to create a new message.
 */
export const GetWebTokenResponseSchema: GenMessage<GetWebTokenResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 63);

/**
 * GetWebTokensResponse contains all the requested web tokens.
 *
 * @generated from message proto.GetWebTokensResponse
 */
export type GetWebTokensResponse = Message<"proto.GetWebTokensResponse"> & {
  /**
   * Tokens is a list of web tokens.
   *
   * @generated from field: repeated types.WebTokenV3 Tokens = 1;
   */
  Tokens: WebTokenV3[];
};

/**
 * Describes the message proto.GetWebTokensResponse.
 * Use `create(GetWebTokensResponseSchema)` to create a new message.
 */
export const GetWebTokensResponseSchema: GenMessage<GetWebTokensResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 64);

/**
 * UpsertKubernetesServerRequest are the parameters used to add or update a
 * kubernetes server.
 *
 * @generated from message proto.UpsertKubernetesServerRequest
 */
export type UpsertKubernetesServerRequest = Message<"proto.UpsertKubernetesServerRequest"> & {
  /**
   * @generated from field: types.KubernetesServerV3 Server = 1;
   */
  Server?: KubernetesServerV3;
};

/**
 * Describes the message proto.UpsertKubernetesServerRequest.
 * Use `create(UpsertKubernetesServerRequestSchema)` to create a new message.
 */
export const UpsertKubernetesServerRequestSchema: GenMessage<UpsertKubernetesServerRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 65);

/**
 * DeleteKubernetesServerRequest are the parameters used to remove a kubernetes server.
 *
 * @generated from message proto.DeleteKubernetesServerRequest
 */
export type DeleteKubernetesServerRequest = Message<"proto.DeleteKubernetesServerRequest"> & {
  /**
   * HostID is the kube server host uuid.
   *
   * @generated from field: string HostID = 1;
   */
  HostID: string;

  /**
   * Name is the name of the kubernetes service to delete.
   *
   * @generated from field: string Name = 2;
   */
  Name: string;
};

/**
 * Describes the message proto.DeleteKubernetesServerRequest.
 * Use `create(DeleteKubernetesServerRequestSchema)` to create a new message.
 */
export const DeleteKubernetesServerRequestSchema: GenMessage<DeleteKubernetesServerRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 66);

/**
 * DeleteAllKubernetesServersRequest are the parameters used to remove all kubernetes servers.
 *
 * @generated from message proto.DeleteAllKubernetesServersRequest
 */
export type DeleteAllKubernetesServersRequest = Message<"proto.DeleteAllKubernetesServersRequest"> & {
};

/**
 * Describes the message proto.DeleteAllKubernetesServersRequest.
 * Use `create(DeleteAllKubernetesServersRequestSchema)` to create a new message.
 */
export const DeleteAllKubernetesServersRequestSchema: GenMessage<DeleteAllKubernetesServersRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 67);

/**
 * UpsertDatabaseServerRequest is a request to register database server.
 *
 * @generated from message proto.UpsertDatabaseServerRequest
 */
export type UpsertDatabaseServerRequest = Message<"proto.UpsertDatabaseServerRequest"> & {
  /**
   * Server is the database proxy server to register.
   *
   * @generated from field: types.DatabaseServerV3 Server = 1;
   */
  Server?: DatabaseServerV3;
};

/**
 * Describes the message proto.UpsertDatabaseServerRequest.
 * Use `create(UpsertDatabaseServerRequestSchema)` to create a new message.
 */
export const UpsertDatabaseServerRequestSchema: GenMessage<UpsertDatabaseServerRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 68);

/**
 * DeleteDatabaseServerRequest is a request to delete a database server.
 *
 * @generated from message proto.DeleteDatabaseServerRequest
 */
export type DeleteDatabaseServerRequest = Message<"proto.DeleteDatabaseServerRequest"> & {
  /**
   * Namespace is the database server namespace.
   *
   * @generated from field: string Namespace = 1;
   */
  Namespace: string;

  /**
   * HostID is the ID of the host database server is running on.
   *
   * @generated from field: string HostID = 2;
   */
  HostID: string;

  /**
   * Name is the database server name.
   *
   * @generated from field: string Name = 3;
   */
  Name: string;
};

/**
 * Describes the message proto.DeleteDatabaseServerRequest.
 * Use `create(DeleteDatabaseServerRequestSchema)` to create a new message.
 */
export const DeleteDatabaseServerRequestSchema: GenMessage<DeleteDatabaseServerRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 69);

/**
 * DeleteAllDatabaseServersRequest is a request to delete all database servers.
 *
 * @generated from message proto.DeleteAllDatabaseServersRequest
 */
export type DeleteAllDatabaseServersRequest = Message<"proto.DeleteAllDatabaseServersRequest"> & {
  /**
   * Namespace is the database servers namespace.
   *
   * @generated from field: string Namespace = 1;
   */
  Namespace: string;
};

/**
 * Describes the message proto.DeleteAllDatabaseServersRequest.
 * Use `create(DeleteAllDatabaseServersRequestSchema)` to create a new message.
 */
export const DeleteAllDatabaseServersRequestSchema: GenMessage<DeleteAllDatabaseServersRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 70);

/**
 * DatabaseServiceV1List represents a list of DatabaseService resources.
 *
 * @generated from message proto.DatabaseServiceV1List
 */
export type DatabaseServiceV1List = Message<"proto.DatabaseServiceV1List"> & {
  /**
   * Services is a list of DatabaseService resources.
   *
   * @generated from field: repeated types.DatabaseServiceV1 Services = 1;
   */
  Services: DatabaseServiceV1[];
};

/**
 * Describes the message proto.DatabaseServiceV1List.
 * Use `create(DatabaseServiceV1ListSchema)` to create a new message.
 */
export const DatabaseServiceV1ListSchema: GenMessage<DatabaseServiceV1List> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 71);

/**
 * UpsertDatabaseServiceRequest is a request to register DatabaseService.
 *
 * @generated from message proto.UpsertDatabaseServiceRequest
 */
export type UpsertDatabaseServiceRequest = Message<"proto.UpsertDatabaseServiceRequest"> & {
  /**
   * Service is the database service to register.
   *
   * @generated from field: types.DatabaseServiceV1 Service = 1;
   */
  Service?: DatabaseServiceV1;
};

/**
 * Describes the message proto.UpsertDatabaseServiceRequest.
 * Use `create(UpsertDatabaseServiceRequestSchema)` to create a new message.
 */
export const UpsertDatabaseServiceRequestSchema: GenMessage<UpsertDatabaseServiceRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 72);

/**
 * DeleteAllDatabaseServicesRequest is a request to delete all DatabaseServices.
 *
 * @generated from message proto.DeleteAllDatabaseServicesRequest
 */
export type DeleteAllDatabaseServicesRequest = Message<"proto.DeleteAllDatabaseServicesRequest"> & {
};

/**
 * Describes the message proto.DeleteAllDatabaseServicesRequest.
 * Use `create(DeleteAllDatabaseServicesRequestSchema)` to create a new message.
 */
export const DeleteAllDatabaseServicesRequestSchema: GenMessage<DeleteAllDatabaseServicesRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 73);

/**
 * DatabaseCSRRequest is a request to generate a client certificate used
 * by the proxy to authenticate with a remote database service.
 *
 * @generated from message proto.DatabaseCSRRequest
 */
export type DatabaseCSRRequest = Message<"proto.DatabaseCSRRequest"> & {
  /**
   * CSR is the request to sign.
   *
   * @generated from field: bytes CSR = 1;
   */
  CSR: Uint8Array;

  /**
   * ClusterName is the name of the cluster the request is for.
   *
   * @generated from field: string ClusterName = 2;
   */
  ClusterName: string;
};

/**
 * Describes the message proto.DatabaseCSRRequest.
 * Use `create(DatabaseCSRRequestSchema)` to create a new message.
 */
export const DatabaseCSRRequestSchema: GenMessage<DatabaseCSRRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 74);

/**
 * DatabaseCSRResponse contains the signed database certificate.
 *
 * @generated from message proto.DatabaseCSRResponse
 */
export type DatabaseCSRResponse = Message<"proto.DatabaseCSRResponse"> & {
  /**
   * Cert is the signed certificate.
   *
   * @generated from field: bytes Cert = 1;
   */
  Cert: Uint8Array;

  /**
   * CACerts is a list of certificate authorities.
   *
   * @generated from field: repeated bytes CACerts = 2;
   */
  CACerts: Uint8Array[];
};

/**
 * Describes the message proto.DatabaseCSRResponse.
 * Use `create(DatabaseCSRResponseSchema)` to create a new message.
 */
export const DatabaseCSRResponseSchema: GenMessage<DatabaseCSRResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 75);

/**
 * DatabaseCertRequest is a request to generate a client certificate used
 * by a database service to authenticate with a database instance.
 *
 * @generated from message proto.DatabaseCertRequest
 */
export type DatabaseCertRequest = Message<"proto.DatabaseCertRequest"> & {
  /**
   * CSR is the request to sign.
   *
   * @generated from field: bytes CSR = 1;
   */
  CSR: Uint8Array;

  /**
   * ServerName is the SAN to include in the certificate.
   * DEPRECATED: Replaced by ServerNames.
   *
   * @generated from field: string ServerName = 2 [deprecated = true];
   * @deprecated
   */
  ServerName: string;

  /**
   * TTL is the certificate validity period.
   *
   * @generated from field: int64 TTL = 3;
   */
  TTL: bigint;

  /**
   * ServerNames are SANs to include in the certificate.
   *
   * @generated from field: repeated string ServerNames = 4;
   */
  ServerNames: string[];

  /**
   * RequesterName identifies who sent the request.
   *
   * @generated from field: proto.DatabaseCertRequest.Requester RequesterName = 5;
   */
  RequesterName: DatabaseCertRequest_Requester;

  /**
   * CertificateExtensions identifies which extensions, if any, should be added to the certificate.
   *
   * @generated from field: proto.DatabaseCertRequest.Extensions CertificateExtensions = 6;
   */
  CertificateExtensions: DatabaseCertRequest_Extensions;

  /**
   * CRLEndpoint is a certificate revocation list distribution point. Required for Windows smartcard certs.
   *
   * @generated from field: string CRLEndpoint = 7;
   */
  CRLEndpoint: string;
};

/**
 * Describes the message proto.DatabaseCertRequest.
 * Use `create(DatabaseCertRequestSchema)` to create a new message.
 */
export const DatabaseCertRequestSchema: GenMessage<DatabaseCertRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 76);

/**
 * Requester is a name of service that sent the request.
 *
 * @generated from enum proto.DatabaseCertRequest.Requester
 */
export enum DatabaseCertRequest_Requester {
  /**
   * UNSPECIFIED is set when the requester in unknown.
   *
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * TCTL is set when request was sent by tctl tool.
   *
   * @generated from enum value: TCTL = 1;
   */
  TCTL = 1,
}

/**
 * Describes the enum proto.DatabaseCertRequest.Requester.
 */
export const DatabaseCertRequest_RequesterSchema: GenEnum<DatabaseCertRequest_Requester> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_client_proto_authservice, 76, 0);

/**
 * Extensions are the extensions to add to the certificate.
 *
 * @generated from enum proto.DatabaseCertRequest.Extensions
 */
export enum DatabaseCertRequest_Extensions {
  /**
   * NORMAL is used in all cases except Windows.
   *
   * @generated from enum value: NORMAL = 0;
   */
  NORMAL = 0,

  /**
   * WINDOWS adds specific required extensions for SQL Server, similar to Desktop Access.
   *
   * @generated from enum value: WINDOWS_SMARTCARD = 1;
   */
  WINDOWS_SMARTCARD = 1,
}

/**
 * Describes the enum proto.DatabaseCertRequest.Extensions.
 */
export const DatabaseCertRequest_ExtensionsSchema: GenEnum<DatabaseCertRequest_Extensions> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_client_proto_authservice, 76, 1);

/**
 * DatabaseCertResponse contains the signed certificate.
 *
 * @generated from message proto.DatabaseCertResponse
 */
export type DatabaseCertResponse = Message<"proto.DatabaseCertResponse"> & {
  /**
   * Cert is the signed certificate.
   *
   * @generated from field: bytes Cert = 1;
   */
  Cert: Uint8Array;

  /**
   * CACerts is a list of certificate authorities.
   *
   * @generated from field: repeated bytes CACerts = 2;
   */
  CACerts: Uint8Array[];
};

/**
 * Describes the message proto.DatabaseCertResponse.
 * Use `create(DatabaseCertResponseSchema)` to create a new message.
 */
export const DatabaseCertResponseSchema: GenMessage<DatabaseCertResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 77);

/**
 * SnowflakeJWTRequest contains data required to generate Snowflake JWT used for authorization.
 *
 * @generated from message proto.SnowflakeJWTRequest
 */
export type SnowflakeJWTRequest = Message<"proto.SnowflakeJWTRequest"> & {
  /**
   * @generated from field: string AccountName = 1;
   */
  AccountName: string;

  /**
   * @generated from field: string UserName = 2;
   */
  UserName: string;
};

/**
 * Describes the message proto.SnowflakeJWTRequest.
 * Use `create(SnowflakeJWTRequestSchema)` to create a new message.
 */
export const SnowflakeJWTRequestSchema: GenMessage<SnowflakeJWTRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 78);

/**
 * SnowflakeJWTResponse contains signed JWT that can be used for Snowflake authentication.
 *
 * @generated from message proto.SnowflakeJWTResponse
 */
export type SnowflakeJWTResponse = Message<"proto.SnowflakeJWTResponse"> & {
  /**
   * @generated from field: string Token = 1;
   */
  Token: string;
};

/**
 * Describes the message proto.SnowflakeJWTResponse.
 * Use `create(SnowflakeJWTResponseSchema)` to create a new message.
 */
export const SnowflakeJWTResponseSchema: GenMessage<SnowflakeJWTResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 79);

/**
 * GetRoleRequest is a request to query a role.
 *
 * @generated from message proto.GetRoleRequest
 */
export type GetRoleRequest = Message<"proto.GetRoleRequest"> & {
  /**
   * Name is the name of the role to get.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;
};

/**
 * Describes the message proto.GetRoleRequest.
 * Use `create(GetRoleRequestSchema)` to create a new message.
 */
export const GetRoleRequestSchema: GenMessage<GetRoleRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 80);

/**
 * GetRolesResponse is a response to querying for all roles.
 *
 * @generated from message proto.GetRolesResponse
 */
export type GetRolesResponse = Message<"proto.GetRolesResponse"> & {
  /**
   * Roles is a list of roles.
   *
   * @generated from field: repeated types.RoleV6 Roles = 1;
   */
  Roles: RoleV6[];
};

/**
 * Describes the message proto.GetRolesResponse.
 * Use `create(GetRolesResponseSchema)` to create a new message.
 */
export const GetRolesResponseSchema: GenMessage<GetRolesResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 81);

/**
 * ListRolesRequest encodes parameters for paginated role lookup.
 *
 * @generated from message proto.ListRolesRequest
 */
export type ListRolesRequest = Message<"proto.ListRolesRequest"> & {
  /**
   * Limit is the maximum amount of roles per page.
   *
   * @generated from field: int32 Limit = 1;
   */
  Limit: number;

  /**
   * StartKey is used to resume a query in order to enable pagination.
   * If the previous response had LastKey set then this should be
   * set to its value. Otherwise leave empty.
   *
   * @generated from field: string StartKey = 2;
   */
  StartKey: string;

  /**
   * Filter matches roles.
   *
   * @generated from field: types.RoleFilter Filter = 3;
   */
  Filter?: RoleFilter;
};

/**
 * Describes the message proto.ListRolesRequest.
 * Use `create(ListRolesRequestSchema)` to create a new message.
 */
export const ListRolesRequestSchema: GenMessage<ListRolesRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 82);

/**
 * ListRolesResponse is a page of roles.
 *
 * @generated from message proto.ListRolesResponse
 */
export type ListRolesResponse = Message<"proto.ListRolesResponse"> & {
  /**
   * Roles is a page of roles.
   *
   * @generated from field: repeated types.RoleV6 Roles = 1;
   */
  Roles: RoleV6[];

  /**
   * NextKey will serve as the StartKey for the next page of roles.
   *
   * @generated from field: string NextKey = 2;
   */
  NextKey: string;
};

/**
 * Describes the message proto.ListRolesResponse.
 * Use `create(ListRolesResponseSchema)` to create a new message.
 */
export const ListRolesResponseSchema: GenMessage<ListRolesResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 83);

/**
 * Request for CreateRole.
 *
 * @generated from message proto.CreateRoleRequest
 */
export type CreateRoleRequest = Message<"proto.CreateRoleRequest"> & {
  /**
   * Role to be created.
   *
   * @generated from field: types.RoleV6 Role = 1;
   */
  Role?: RoleV6;
};

/**
 * Describes the message proto.CreateRoleRequest.
 * Use `create(CreateRoleRequestSchema)` to create a new message.
 */
export const CreateRoleRequestSchema: GenMessage<CreateRoleRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 84);

/**
 * Request for UpdateRole.
 *
 * @generated from message proto.UpdateRoleRequest
 */
export type UpdateRoleRequest = Message<"proto.UpdateRoleRequest"> & {
  /**
   * Role to be updated.
   *
   * @generated from field: types.RoleV6 Role = 1;
   */
  Role?: RoleV6;
};

/**
 * Describes the message proto.UpdateRoleRequest.
 * Use `create(UpdateRoleRequestSchema)` to create a new message.
 */
export const UpdateRoleRequestSchema: GenMessage<UpdateRoleRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 85);

/**
 * Request for UpsertRole.
 *
 * @generated from message proto.UpsertRoleRequest
 */
export type UpsertRoleRequest = Message<"proto.UpsertRoleRequest"> & {
  /**
   * Role to be upserted.
   *
   * @generated from field: types.RoleV6 Role = 1;
   */
  Role?: RoleV6;
};

/**
 * Describes the message proto.UpsertRoleRequest.
 * Use `create(UpsertRoleRequestSchema)` to create a new message.
 */
export const UpsertRoleRequestSchema: GenMessage<UpsertRoleRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 86);

/**
 * DeleteRoleRequest is a request to delete a role.
 *
 * @generated from message proto.DeleteRoleRequest
 */
export type DeleteRoleRequest = Message<"proto.DeleteRoleRequest"> & {
  /**
   * Name is the role name to delete.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;
};

/**
 * Describes the message proto.DeleteRoleRequest.
 * Use `create(DeleteRoleRequestSchema)` to create a new message.
 */
export const DeleteRoleRequestSchema: GenMessage<DeleteRoleRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 87);

/**
 * MFAAuthenticateChallenge is a challenge for all MFA devices registered for a
 * user.
 *
 * @generated from message proto.MFAAuthenticateChallenge
 */
export type MFAAuthenticateChallenge = Message<"proto.MFAAuthenticateChallenge"> & {
  /**
   * TOTP is a challenge for all TOTP devices registered for a user. When
   * this field is set, any TOTP device a user has registered can be used to
   * respond.
   *
   * @generated from field: proto.TOTPChallenge TOTP = 2;
   */
  TOTP?: TOTPChallenge;

  /**
   * WebauthnChallenge contains a Webauthn credential assertion used for
   * login/authentication ceremonies.
   * Credential assertions hold, among other information, a list of allowed
   * credentials for the ceremony (one for each U2F or Webauthn device
   * registered by the user).
   *
   * @generated from field: webauthn.CredentialAssertion WebauthnChallenge = 3;
   */
  WebauthnChallenge?: CredentialAssertion;

  /**
   * MFRequired indicates whether proceeding with the MFA ceremony will
   * grant access to the resource.
   *
   * If `MFA_REQUIRED_NO` is returned then the server may opt to end ongoing
   * communications, in case of streaming RPCs. It may also return empty
   * challenges for all other fields.
   *
   * @generated from field: proto.MFARequired MFARequired = 4;
   */
  MFARequired: MFARequired;
};

/**
 * Describes the message proto.MFAAuthenticateChallenge.
 * Use `create(MFAAuthenticateChallengeSchema)` to create a new message.
 */
export const MFAAuthenticateChallengeSchema: GenMessage<MFAAuthenticateChallenge> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 88);

/**
 * MFAAuthenticateResponse is a response to MFAAuthenticateChallenge using one
 * of the MFA devices registered for a user.
 *
 * @generated from message proto.MFAAuthenticateResponse
 */
export type MFAAuthenticateResponse = Message<"proto.MFAAuthenticateResponse"> & {
  /**
   * @generated from oneof proto.MFAAuthenticateResponse.Response
   */
  Response: {
    /**
     * Removed: U2FResponse U2F = 1;
     *
     * @generated from field: proto.TOTPResponse TOTP = 2;
     */
    value: TOTPResponse;
    case: "TOTP";
  } | {
    /**
     * @generated from field: webauthn.CredentialAssertionResponse Webauthn = 3;
     */
    value: CredentialAssertionResponse;
    case: "Webauthn";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message proto.MFAAuthenticateResponse.
 * Use `create(MFAAuthenticateResponseSchema)` to create a new message.
 */
export const MFAAuthenticateResponseSchema: GenMessage<MFAAuthenticateResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 89);

/**
 * TOTPChallenge is a challenge for all TOTP devices registered for a user.
 *
 * TOTP protocol has no challenge per se, but the user has to provide a
 * valid token in response. TOTPChallenge exists only to signal to the user
 * that TOTP MFA is supported, which means that the user has a TOTP device
 * registered.
 *
 * @generated from message proto.TOTPChallenge
 */
export type TOTPChallenge = Message<"proto.TOTPChallenge"> & {
};

/**
 * Describes the message proto.TOTPChallenge.
 * Use `create(TOTPChallengeSchema)` to create a new message.
 */
export const TOTPChallengeSchema: GenMessage<TOTPChallenge> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 90);

/**
 * TOTPResponse is a response to TOTPChallenge.
 *
 * @generated from message proto.TOTPResponse
 */
export type TOTPResponse = Message<"proto.TOTPResponse"> & {
  /**
   * @generated from field: string Code = 1;
   */
  Code: string;
};

/**
 * Describes the message proto.TOTPResponse.
 * Use `create(TOTPResponseSchema)` to create a new message.
 */
export const TOTPResponseSchema: GenMessage<TOTPResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 91);

/**
 * MFARegisterChallenge is a challenge for registering a new MFA device.
 *
 * @generated from message proto.MFARegisterChallenge
 */
export type MFARegisterChallenge = Message<"proto.MFARegisterChallenge"> & {
  /**
   * Request depends on the type of the MFA device being registered.
   *
   * @generated from oneof proto.MFARegisterChallenge.Request
   */
  Request: {
    /**
     * Removed: U2FRegisterChallenge U2F = 1;
     *
     * @generated from field: proto.TOTPRegisterChallenge TOTP = 2;
     */
    value: TOTPRegisterChallenge;
    case: "TOTP";
  } | {
    /**
     * @generated from field: webauthn.CredentialCreation Webauthn = 3;
     */
    value: CredentialCreation;
    case: "Webauthn";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message proto.MFARegisterChallenge.
 * Use `create(MFARegisterChallengeSchema)` to create a new message.
 */
export const MFARegisterChallengeSchema: GenMessage<MFARegisterChallenge> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 92);

/**
 * MFARegisterResponse is a response to MFARegisterChallenge.
 *
 * @generated from message proto.MFARegisterResponse
 */
export type MFARegisterResponse = Message<"proto.MFARegisterResponse"> & {
  /**
   * @generated from oneof proto.MFARegisterResponse.Response
   */
  Response: {
    /**
     * Removed: U2FRegisterResponse U2F = 1;
     *
     * @generated from field: proto.TOTPRegisterResponse TOTP = 2;
     */
    value: TOTPRegisterResponse;
    case: "TOTP";
  } | {
    /**
     * @generated from field: webauthn.CredentialCreationResponse Webauthn = 3;
     */
    value: CredentialCreationResponse;
    case: "Webauthn";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message proto.MFARegisterResponse.
 * Use `create(MFARegisterResponseSchema)` to create a new message.
 */
export const MFARegisterResponseSchema: GenMessage<MFARegisterResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 93);

/**
 * TOTPRegisterChallenge is a challenge for registering a new TOTP device.
 *
 * @generated from message proto.TOTPRegisterChallenge
 */
export type TOTPRegisterChallenge = Message<"proto.TOTPRegisterChallenge"> & {
  /**
   * Secret is a secret shared by client and server to generate codes.
   *
   * @generated from field: string Secret = 1;
   */
  Secret: string;

  /**
   * Issuer is the name of the Teleport cluster.
   *
   * @generated from field: string Issuer = 2;
   */
  Issuer: string;

  /**
   * PeriodSeconds is a period for TOTP code rotation, in seconds.
   *
   * @generated from field: uint32 PeriodSeconds = 3;
   */
  PeriodSeconds: number;

  /**
   * Algorithm is the TOTP hashing algorithm.
   *
   * @generated from field: string Algorithm = 4;
   */
  Algorithm: string;

  /**
   * Digits is the number of digits in the TOTP code.
   *
   * @generated from field: uint32 Digits = 5;
   */
  Digits: number;

  /**
   * Account is the account name for this user.
   *
   * @generated from field: string Account = 6;
   */
  Account: string;

  /**
   * QRCode is an optional field for the QR code in PNG format. Used to display a QR code
   * image in the UI.
   *
   * @generated from field: bytes QRCode = 7;
   */
  QRCode: Uint8Array;

  /**
   * ID of the TOTP challenge.
   * Send this back in the TOTPRegisterResponse.
   *
   * @generated from field: string ID = 8;
   */
  ID: string;
};

/**
 * Describes the message proto.TOTPRegisterChallenge.
 * Use `create(TOTPRegisterChallengeSchema)` to create a new message.
 */
export const TOTPRegisterChallengeSchema: GenMessage<TOTPRegisterChallenge> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 94);

/**
 * TOTPRegisterResponse is a response to TOTPRegisterChallenge.
 *
 * @generated from message proto.TOTPRegisterResponse
 */
export type TOTPRegisterResponse = Message<"proto.TOTPRegisterResponse"> & {
  /**
   * @generated from field: string Code = 1;
   */
  Code: string;

  /**
   * ID of the TOTP challenge, as informed by the TOTPRegisterChallenge.
   *
   * @generated from field: string ID = 2;
   */
  ID: string;
};

/**
 * Describes the message proto.TOTPRegisterResponse.
 * Use `create(TOTPRegisterResponseSchema)` to create a new message.
 */
export const TOTPRegisterResponseSchema: GenMessage<TOTPRegisterResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 95);

/**
 * Deprecated: Use [AuthService.AddMFADeviceSync] instead.
 *
 * @generated from message proto.AddMFADeviceRequest
 */
export type AddMFADeviceRequest = Message<"proto.AddMFADeviceRequest"> & {
};

/**
 * Describes the message proto.AddMFADeviceRequest.
 * Use `create(AddMFADeviceRequestSchema)` to create a new message.
 */
export const AddMFADeviceRequestSchema: GenMessage<AddMFADeviceRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 96);

/**
 * Deprecated: Use [AuthService.AddMFADeviceSync] instead.
 *
 * @generated from message proto.AddMFADeviceResponse
 */
export type AddMFADeviceResponse = Message<"proto.AddMFADeviceResponse"> & {
};

/**
 * Describes the message proto.AddMFADeviceResponse.
 * Use `create(AddMFADeviceResponseSchema)` to create a new message.
 */
export const AddMFADeviceResponseSchema: GenMessage<AddMFADeviceResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 97);

/**
 * Deprecated: Use [AuthService.DeleteMFADeviceSync] instead.
 *
 * @generated from message proto.DeleteMFADeviceRequest
 */
export type DeleteMFADeviceRequest = Message<"proto.DeleteMFADeviceRequest"> & {
};

/**
 * Describes the message proto.DeleteMFADeviceRequest.
 * Use `create(DeleteMFADeviceRequestSchema)` to create a new message.
 */
export const DeleteMFADeviceRequestSchema: GenMessage<DeleteMFADeviceRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 98);

/**
 * Deprecated: Use [AuthService.DeleteMFADeviceSync] instead.
 *
 * @generated from message proto.DeleteMFADeviceResponse
 */
export type DeleteMFADeviceResponse = Message<"proto.DeleteMFADeviceResponse"> & {
};

/**
 * Describes the message proto.DeleteMFADeviceResponse.
 * Use `create(DeleteMFADeviceResponseSchema)` to create a new message.
 */
export const DeleteMFADeviceResponseSchema: GenMessage<DeleteMFADeviceResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 99);

/**
 * DeleteMFADeviceSyncRequest is a request to delete a MFA device (nonstream).
 *
 * @generated from message proto.DeleteMFADeviceSyncRequest
 */
export type DeleteMFADeviceSyncRequest = Message<"proto.DeleteMFADeviceSyncRequest"> & {
  /**
   * TokenID is the ID of a user token that will be used to verify this request.
   *
   * Token types accepted are:
   *   - Recovery approved token that is obtained with RPC VerifyAccountRecovery
   *   - Privilege token that is obtained with RPC CreatePrivilegeToken
   *
   * Authenticated users can delete a device by providing an ExistingMFAResponse
   * instead.
   *
   * @generated from field: string TokenID = 1;
   */
  TokenID: string;

  /**
   * DeviceName is the name of the device to delete.
   *
   * @generated from field: string DeviceName = 2;
   */
  DeviceName: string;

  /**
   * ExistingMFAResponse is an MFA response from an existing device.
   *
   * May be provided as an alternative to TokenID.
   *
   * @generated from field: proto.MFAAuthenticateResponse ExistingMFAResponse = 3;
   */
  ExistingMFAResponse?: MFAAuthenticateResponse;
};

/**
 * Describes the message proto.DeleteMFADeviceSyncRequest.
 * Use `create(DeleteMFADeviceSyncRequestSchema)` to create a new message.
 */
export const DeleteMFADeviceSyncRequestSchema: GenMessage<DeleteMFADeviceSyncRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 100);

/**
 * AddMFADeviceSyncRequest is a request to add a MFA device (nonstream).
 *
 * @generated from message proto.AddMFADeviceSyncRequest
 */
export type AddMFADeviceSyncRequest = Message<"proto.AddMFADeviceSyncRequest"> & {
  /**
   * TokenID is the ID of a user token that will be used to verify this request.
   *
   * Token types accepted are:
   *  - Privilege token that is obtained with RPC CreatePrivilegeToken
   *
   * An authenticated user can register a new device using only a
   * NewMFAResponse. See [ContextUser].
   *
   * @generated from field: string TokenID = 1;
   */
  TokenID: string;

  /**
   * ContextUser allows registering a device for the authenticated user.
   *
   * Default option if no other is provided.
   *
   * @generated from field: proto.ContextUser ContextUser = 5;
   */
  ContextUser?: ContextUser;

  /**
   * NewDeviceName is the name of a new mfa device.
   *
   * @generated from field: string NewDeviceName = 2;
   */
  NewDeviceName: string;

  /**
   * NewMFAResponse is a user's new mfa response to a mfa register challenge.
   *
   * @generated from field: proto.MFARegisterResponse NewMFAResponse = 3;
   */
  NewMFAResponse?: MFARegisterResponse;

  /**
   * DeviceUsage is the requested usage for the device.
   * Defaults to DEVICE_USAGE_MFA.
   *
   * @generated from field: proto.DeviceUsage DeviceUsage = 4;
   */
  DeviceUsage: DeviceUsage;
};

/**
 * Describes the message proto.AddMFADeviceSyncRequest.
 * Use `create(AddMFADeviceSyncRequestSchema)` to create a new message.
 */
export const AddMFADeviceSyncRequestSchema: GenMessage<AddMFADeviceSyncRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 101);

/**
 * AddMFADeviceSyncResponse is a response to AddMFADeviceSyncRequest.
 *
 * @generated from message proto.AddMFADeviceSyncResponse
 */
export type AddMFADeviceSyncResponse = Message<"proto.AddMFADeviceSyncResponse"> & {
  /**
   * @generated from field: types.MFADevice Device = 1;
   */
  Device?: MFADevice;
};

/**
 * Describes the message proto.AddMFADeviceSyncResponse.
 * Use `create(AddMFADeviceSyncResponseSchema)` to create a new message.
 */
export const AddMFADeviceSyncResponseSchema: GenMessage<AddMFADeviceSyncResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 102);

/**
 * GetMFADeviceRequest is a request for MFA devices for the calling user.
 *
 * @generated from message proto.GetMFADevicesRequest
 */
export type GetMFADevicesRequest = Message<"proto.GetMFADevicesRequest"> & {
  /**
   * TokenID is an optional field for the ID of a user token that will be used to
   * verify this request. Token is only required if an unauthenticated user wants to view their
   * list of devices eg: during account recovery process. An empty field implies the logged in
   * user wants to view their devices.
   * Token types accepted are:
   *  - Recovery approved token that is obtained after successful invocation of RPC
   *  VerifyAccountRecovery
   *
   * @generated from field: string TokenID = 1;
   */
  TokenID: string;
};

/**
 * Describes the message proto.GetMFADevicesRequest.
 * Use `create(GetMFADevicesRequestSchema)` to create a new message.
 */
export const GetMFADevicesRequestSchema: GenMessage<GetMFADevicesRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 103);

/**
 * GetMFADeviceResponse is a response for GetMFADevices RPC.
 *
 * @generated from message proto.GetMFADevicesResponse
 */
export type GetMFADevicesResponse = Message<"proto.GetMFADevicesResponse"> & {
  /**
   * @generated from field: repeated types.MFADevice Devices = 1;
   */
  Devices: MFADevice[];
};

/**
 * Describes the message proto.GetMFADevicesResponse.
 * Use `create(GetMFADevicesResponseSchema)` to create a new message.
 */
export const GetMFADevicesResponseSchema: GenMessage<GetMFADevicesResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 104);

/**
 * Deprecated: Use [AuthService.GenerateUserCerts] instead.
 *
 * @generated from message proto.UserSingleUseCertsRequest
 */
export type UserSingleUseCertsRequest = Message<"proto.UserSingleUseCertsRequest"> & {
};

/**
 * Describes the message proto.UserSingleUseCertsRequest.
 * Use `create(UserSingleUseCertsRequestSchema)` to create a new message.
 */
export const UserSingleUseCertsRequestSchema: GenMessage<UserSingleUseCertsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 105);

/**
 * Deprecated: Use [AuthService.GenerateUserCerts] instead.
 *
 * @generated from message proto.UserSingleUseCertsResponse
 */
export type UserSingleUseCertsResponse = Message<"proto.UserSingleUseCertsResponse"> & {
};

/**
 * Describes the message proto.UserSingleUseCertsResponse.
 * Use `create(UserSingleUseCertsResponseSchema)` to create a new message.
 */
export const UserSingleUseCertsResponseSchema: GenMessage<UserSingleUseCertsResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 106);

/**
 * IsMFARequiredRequest is a request to check whether MFA is required to access
 * the Target.
 *
 * @generated from message proto.IsMFARequiredRequest
 */
export type IsMFARequiredRequest = Message<"proto.IsMFARequiredRequest"> & {
  /**
   * @generated from oneof proto.IsMFARequiredRequest.Target
   */
  Target: {
    /**
     * KubernetesCluster specifies the target kubernetes cluster.
     *
     * @generated from field: string KubernetesCluster = 1;
     */
    value: string;
    case: "KubernetesCluster";
  } | {
    /**
     * RouteToDatabase specifies the target database proxy name.
     *
     * @generated from field: proto.RouteToDatabase Database = 2;
     */
    value: RouteToDatabase;
    case: "Database";
  } | {
    /**
     * Node specifies the target SSH node.
     *
     * @generated from field: proto.NodeLogin Node = 3;
     */
    value: NodeLogin;
    case: "Node";
  } | {
    /**
     * WindowsDesktop specifies the target Windows Desktop.
     *
     * @generated from field: proto.RouteToWindowsDesktop WindowsDesktop = 4;
     */
    value: RouteToWindowsDesktop;
    case: "WindowsDesktop";
  } | {
    /**
     * AdminAction specifies an admin action.
     *
     * @generated from field: proto.AdminAction AdminAction = 5;
     */
    value: AdminAction;
    case: "AdminAction";
  } | {
    /**
     * App specifies the target App.
     *
     * @generated from field: proto.RouteToApp App = 6;
     */
    value: RouteToApp;
    case: "App";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message proto.IsMFARequiredRequest.
 * Use `create(IsMFARequiredRequestSchema)` to create a new message.
 */
export const IsMFARequiredRequestSchema: GenMessage<IsMFARequiredRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 107);

/**
 * StreamSessionEventsRequest is a request containing needed data to fetch a session recording.
 *
 * @generated from message proto.StreamSessionEventsRequest
 */
export type StreamSessionEventsRequest = Message<"proto.StreamSessionEventsRequest"> & {
  /**
   * SessionID is the ID for a given session in an UUIDv4 format.
   *
   * @generated from field: string SessionID = 1;
   */
  SessionID: string;

  /**
   * StartIndex is the index of the event to resume the stream after.
   * A StartIndex of 0 creates a new stream.
   *
   * @generated from field: int32 StartIndex = 2;
   */
  StartIndex: number;
};

/**
 * Describes the message proto.StreamSessionEventsRequest.
 * Use `create(StreamSessionEventsRequestSchema)` to create a new message.
 */
export const StreamSessionEventsRequestSchema: GenMessage<StreamSessionEventsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 108);

/**
 * NodeLogin specifies an SSH node and OS login.
 *
 * @generated from message proto.NodeLogin
 */
export type NodeLogin = Message<"proto.NodeLogin"> & {
  /**
   * Node can be node's hostname or UUID.
   *
   * @generated from field: string Node = 1;
   */
  Node: string;

  /**
   * Login is the OS login name.
   *
   * @generated from field: string Login = 2;
   */
  Login: string;
};

/**
 * Describes the message proto.NodeLogin.
 * Use `create(NodeLoginSchema)` to create a new message.
 */
export const NodeLoginSchema: GenMessage<NodeLogin> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 109);

/**
 * AdminAction specifies an admin action.
 *
 * @generated from message proto.AdminAction
 */
export type AdminAction = Message<"proto.AdminAction"> & {
};

/**
 * Describes the message proto.AdminAction.
 * Use `create(AdminActionSchema)` to create a new message.
 */
export const AdminActionSchema: GenMessage<AdminAction> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 110);

/**
 * IsMFARequiredResponse is a response for MFA requirement check.
 *
 * @generated from message proto.IsMFARequiredResponse
 */
export type IsMFARequiredResponse = Message<"proto.IsMFARequiredResponse"> & {
  /**
   * Required is a simplified view over [MFARequired].
   *
   * @generated from field: bool Required = 1;
   */
  Required: boolean;

  /**
   * MFARequired informs whether MFA is required to access the corresponding
   * resource.
   *
   * @generated from field: proto.MFARequired MFARequired = 2;
   */
  MFARequired: MFARequired;
};

/**
 * Describes the message proto.IsMFARequiredResponse.
 * Use `create(IsMFARequiredResponseSchema)` to create a new message.
 */
export const IsMFARequiredResponseSchema: GenMessage<IsMFARequiredResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 111);

/**
 * @generated from message proto.GetEventsRequest
 */
export type GetEventsRequest = Message<"proto.GetEventsRequest"> & {
  /**
   * Namespace, if not set, defaults to 'default'
   *
   * @generated from field: string Namespace = 1;
   */
  Namespace: string;

  /**
   * StartDate is the oldest date of returned events
   *
   * @generated from field: google.protobuf.Timestamp StartDate = 2;
   */
  StartDate?: Timestamp;

  /**
   * EndDate is the newest date of returned events
   *
   * @generated from field: google.protobuf.Timestamp EndDate = 3;
   */
  EndDate?: Timestamp;

  /**
   * EventTypes is optional, if not set, returns all events
   *
   * @generated from field: repeated string EventTypes = 4;
   */
  EventTypes: string[];

  /**
   * Limit is the maximum amount of events returned
   *
   * @generated from field: int32 Limit = 5;
   */
  Limit: number;

  /**
   * StartKey is used to resume a query in order to enable pagination.
   * If the previous response had LastKey set then this should be
   * set to its value. Otherwise leave empty.
   *
   * @generated from field: string StartKey = 6;
   */
  StartKey: string;

  /**
   * Order specifies an ascending or descending order of events.
   * A value of 0 means a descending order and a value of 1 means an ascending order.
   *
   * @generated from field: proto.Order Order = 7;
   */
  Order: Order;
};

/**
 * Describes the message proto.GetEventsRequest.
 * Use `create(GetEventsRequestSchema)` to create a new message.
 */
export const GetEventsRequestSchema: GenMessage<GetEventsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 112);

/**
 * @generated from message proto.GetSessionEventsRequest
 */
export type GetSessionEventsRequest = Message<"proto.GetSessionEventsRequest"> & {
  /**
   * StartDate is the oldest date of returned events
   *
   * @generated from field: google.protobuf.Timestamp StartDate = 1;
   */
  StartDate?: Timestamp;

  /**
   * EndDate is the newest date of returned events
   *
   * @generated from field: google.protobuf.Timestamp EndDate = 2;
   */
  EndDate?: Timestamp;

  /**
   * Limit is the maximum amount of events to retrieve.
   *
   * @generated from field: int32 Limit = 3;
   */
  Limit: number;

  /**
   * StartKey is used to resume a query in order to enable pagination.
   * If the previous response had LastKey set then this should be
   * set to its value. Otherwise leave empty.
   *
   * @generated from field: string StartKey = 4;
   */
  StartKey: string;

  /**
   * Order specifies an ascending or descending order of events.
   * A value of 0 means a descending order and a value of 1 means an ascending order.
   *
   * @generated from field: proto.Order Order = 5;
   */
  Order: Order;
};

/**
 * Describes the message proto.GetSessionEventsRequest.
 * Use `create(GetSessionEventsRequestSchema)` to create a new message.
 */
export const GetSessionEventsRequestSchema: GenMessage<GetSessionEventsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 113);

/**
 * @generated from message proto.Events
 */
export type Events = Message<"proto.Events"> & {
  /**
   * Items is a list of typed gRPC formatted audit events.
   *
   * @generated from field: repeated events.OneOf Items = 1;
   */
  Items: OneOf[];

  /**
   * the key of the last event if the returned set did not contain all events found i.e limit <
   * actual amount. this is the key clients can supply in another API request to continue fetching
   * events from the previous last position
   *
   * @generated from field: string LastKey = 2;
   */
  LastKey: string;
};

/**
 * Describes the message proto.Events.
 * Use `create(EventsSchema)` to create a new message.
 */
export const EventsSchema: GenMessage<Events> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 114);

/**
 * @generated from message proto.GetLocksRequest
 */
export type GetLocksRequest = Message<"proto.GetLocksRequest"> & {
  /**
   * Targets is a list of targets. Every returned lock must match at least
   * one of the targets.
   *
   * @generated from field: repeated types.LockTarget Targets = 1;
   */
  Targets: LockTarget[];

  /**
   * InForceOnly specifies whether to return only those locks that are in force.
   *
   * @generated from field: bool InForceOnly = 2;
   */
  InForceOnly: boolean;
};

/**
 * Describes the message proto.GetLocksRequest.
 * Use `create(GetLocksRequestSchema)` to create a new message.
 */
export const GetLocksRequestSchema: GenMessage<GetLocksRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 115);

/**
 * @generated from message proto.GetLocksResponse
 */
export type GetLocksResponse = Message<"proto.GetLocksResponse"> & {
  /**
   * Locks is a list of locks.
   *
   * @generated from field: repeated types.LockV2 Locks = 1;
   */
  Locks: LockV2[];
};

/**
 * Describes the message proto.GetLocksResponse.
 * Use `create(GetLocksResponseSchema)` to create a new message.
 */
export const GetLocksResponseSchema: GenMessage<GetLocksResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 116);

/**
 * @generated from message proto.GetLockRequest
 */
export type GetLockRequest = Message<"proto.GetLockRequest"> & {
  /**
   * Name is the name of the lock to get.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;
};

/**
 * Describes the message proto.GetLockRequest.
 * Use `create(GetLockRequestSchema)` to create a new message.
 */
export const GetLockRequestSchema: GenMessage<GetLockRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 117);

/**
 * @generated from message proto.DeleteLockRequest
 */
export type DeleteLockRequest = Message<"proto.DeleteLockRequest"> & {
  /**
   * Name is the name of the lock to delete.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;
};

/**
 * Describes the message proto.DeleteLockRequest.
 * Use `create(DeleteLockRequestSchema)` to create a new message.
 */
export const DeleteLockRequestSchema: GenMessage<DeleteLockRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 118);

/**
 * @generated from message proto.ReplaceRemoteLocksRequest
 */
export type ReplaceRemoteLocksRequest = Message<"proto.ReplaceRemoteLocksRequest"> & {
  /**
   * ClusterName identifies the cluster from which the locks originate.
   *
   * @generated from field: string ClusterName = 1;
   */
  ClusterName: string;

  /**
   * Locks is a list of new remote locks to store.
   *
   * @generated from field: repeated types.LockV2 Locks = 2;
   */
  Locks: LockV2[];
};

/**
 * Describes the message proto.ReplaceRemoteLocksRequest.
 * Use `create(ReplaceRemoteLocksRequestSchema)` to create a new message.
 */
export const ReplaceRemoteLocksRequestSchema: GenMessage<ReplaceRemoteLocksRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 119);

/**
 * GetWindowsDesktopServicesResponse contains all registered Windows desktop services.
 *
 * @generated from message proto.GetWindowsDesktopServicesResponse
 */
export type GetWindowsDesktopServicesResponse = Message<"proto.GetWindowsDesktopServicesResponse"> & {
  /**
   * Services is a list of Windows desktop services.
   *
   * @generated from field: repeated types.WindowsDesktopServiceV3 services = 1;
   */
  services: WindowsDesktopServiceV3[];
};

/**
 * Describes the message proto.GetWindowsDesktopServicesResponse.
 * Use `create(GetWindowsDesktopServicesResponseSchema)` to create a new message.
 */
export const GetWindowsDesktopServicesResponseSchema: GenMessage<GetWindowsDesktopServicesResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 120);

/**
 * GetWindowsDesktopServiceRequest is a request for a specific Windows Desktop Service.
 *
 * @generated from message proto.GetWindowsDesktopServiceRequest
 */
export type GetWindowsDesktopServiceRequest = Message<"proto.GetWindowsDesktopServiceRequest"> & {
  /**
   * Name is the name of the Windows Desktop Service to be requested.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;
};

/**
 * Describes the message proto.GetWindowsDesktopServiceRequest.
 * Use `create(GetWindowsDesktopServiceRequestSchema)` to create a new message.
 */
export const GetWindowsDesktopServiceRequestSchema: GenMessage<GetWindowsDesktopServiceRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 121);

/**
 * GetWindowsDesktopServiceResponse contains the requested WindowsDesktopService
 *
 * @generated from message proto.GetWindowsDesktopServiceResponse
 */
export type GetWindowsDesktopServiceResponse = Message<"proto.GetWindowsDesktopServiceResponse"> & {
  /**
   * Service is the requested Windows Desktop Service.
   *
   * @generated from field: types.WindowsDesktopServiceV3 service = 1;
   */
  service?: WindowsDesktopServiceV3;
};

/**
 * Describes the message proto.GetWindowsDesktopServiceResponse.
 * Use `create(GetWindowsDesktopServiceResponseSchema)` to create a new message.
 */
export const GetWindowsDesktopServiceResponseSchema: GenMessage<GetWindowsDesktopServiceResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 122);

/**
 * DeleteWindowsDesktopServiceRequest is a request to delete a Windows desktop service.
 *
 * @generated from message proto.DeleteWindowsDesktopServiceRequest
 */
export type DeleteWindowsDesktopServiceRequest = Message<"proto.DeleteWindowsDesktopServiceRequest"> & {
  /**
   * Name is the Windows desktop service name.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;
};

/**
 * Describes the message proto.DeleteWindowsDesktopServiceRequest.
 * Use `create(DeleteWindowsDesktopServiceRequestSchema)` to create a new message.
 */
export const DeleteWindowsDesktopServiceRequestSchema: GenMessage<DeleteWindowsDesktopServiceRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 123);

/**
 * GetWindowsDesktopsResponse contains all registered Windows desktop hosts.
 *
 * @generated from message proto.GetWindowsDesktopsResponse
 */
export type GetWindowsDesktopsResponse = Message<"proto.GetWindowsDesktopsResponse"> & {
  /**
   * Servers is a list of Windows desktop hosts.
   *
   * @generated from field: repeated types.WindowsDesktopV3 Desktops = 1;
   */
  Desktops: WindowsDesktopV3[];
};

/**
 * Describes the message proto.GetWindowsDesktopsResponse.
 * Use `create(GetWindowsDesktopsResponseSchema)` to create a new message.
 */
export const GetWindowsDesktopsResponseSchema: GenMessage<GetWindowsDesktopsResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 124);

/**
 * DeleteWindowsDesktopRequest is a request to delete a Windows
 * desktop host. If HostID is not specified, all Windows desktops with
 * specified Name will be deleted
 *
 * @generated from message proto.DeleteWindowsDesktopRequest
 */
export type DeleteWindowsDesktopRequest = Message<"proto.DeleteWindowsDesktopRequest"> & {
  /**
   * Name is the name of the Windows desktop host.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;

  /**
   * HostID is the ID of the Windows Desktop Service reporting the desktop.
   *
   * @generated from field: string HostID = 2;
   */
  HostID: string;
};

/**
 * Describes the message proto.DeleteWindowsDesktopRequest.
 * Use `create(DeleteWindowsDesktopRequestSchema)` to create a new message.
 */
export const DeleteWindowsDesktopRequestSchema: GenMessage<DeleteWindowsDesktopRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 125);

/**
 * WindowsDesktopCertRequest is a request to generate a client certificate used
 * for Windows RDP authentication.
 *
 * @generated from message proto.WindowsDesktopCertRequest
 */
export type WindowsDesktopCertRequest = Message<"proto.WindowsDesktopCertRequest"> & {
  /**
   * CSR is the request to sign in PEM format.
   *
   * @generated from field: bytes CSR = 1;
   */
  CSR: Uint8Array;

  /**
   * CRLEndpoint is the address of the CRL for this certificate.
   *
   * @generated from field: string CRLEndpoint = 2;
   */
  CRLEndpoint: string;

  /**
   * TTL is the certificate validity period.
   *
   * @generated from field: int64 TTL = 3;
   */
  TTL: bigint;
};

/**
 * Describes the message proto.WindowsDesktopCertRequest.
 * Use `create(WindowsDesktopCertRequestSchema)` to create a new message.
 */
export const WindowsDesktopCertRequestSchema: GenMessage<WindowsDesktopCertRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 126);

/**
 * WindowsDesktopCertResponse contains the signed Windows RDP certificate.
 *
 * @generated from message proto.WindowsDesktopCertResponse
 */
export type WindowsDesktopCertResponse = Message<"proto.WindowsDesktopCertResponse"> & {
  /**
   * Cert is the signed certificate in PEM format.
   *
   * @generated from field: bytes Cert = 1;
   */
  Cert: Uint8Array;
};

/**
 * Describes the message proto.WindowsDesktopCertResponse.
 * Use `create(WindowsDesktopCertResponseSchema)` to create a new message.
 */
export const WindowsDesktopCertResponseSchema: GenMessage<WindowsDesktopCertResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 127);

/**
 * Response message for GetDesktopBootstrapScript.
 *
 * @generated from message proto.DesktopBootstrapScriptResponse
 */
export type DesktopBootstrapScriptResponse = Message<"proto.DesktopBootstrapScriptResponse"> & {
  /**
   * The PowerShell script content.
   *
   * @generated from field: string Script = 1;
   */
  Script: string;
};

/**
 * Describes the message proto.DesktopBootstrapScriptResponse.
 * Use `create(DesktopBootstrapScriptResponseSchema)` to create a new message.
 */
export const DesktopBootstrapScriptResponseSchema: GenMessage<DesktopBootstrapScriptResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 128);

/**
 * ListSAMLIdPServiceProvidersRequest is a request for a paginated list of SAML IdP service providers.
 *
 * @generated from message proto.ListSAMLIdPServiceProvidersRequest
 */
export type ListSAMLIdPServiceProvidersRequest = Message<"proto.ListSAMLIdPServiceProvidersRequest"> & {
  /**
   * Limit is the maximum amount of resources to retrieve.
   *
   * @generated from field: int32 Limit = 1;
   */
  Limit: number;

  /**
   * NextKey is the key for the next page of SAML IdP service providers.
   *
   * @generated from field: string NextKey = 2;
   */
  NextKey: string;
};

/**
 * Describes the message proto.ListSAMLIdPServiceProvidersRequest.
 * Use `create(ListSAMLIdPServiceProvidersRequestSchema)` to create a new message.
 */
export const ListSAMLIdPServiceProvidersRequestSchema: GenMessage<ListSAMLIdPServiceProvidersRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 129);

/**
 * ListSAMLIdPServiceProvidersResponse a paginated list of SAML IdP service providers.
 *
 * @generated from message proto.ListSAMLIdPServiceProvidersResponse
 */
export type ListSAMLIdPServiceProvidersResponse = Message<"proto.ListSAMLIdPServiceProvidersResponse"> & {
  /**
   * Servers is a list of SAML IdP service providers.
   *
   * @generated from field: repeated types.SAMLIdPServiceProviderV1 ServiceProviders = 1;
   */
  ServiceProviders: SAMLIdPServiceProviderV1[];

  /**
   * NextKey is the key for the next page of SAML IdP service providers.
   *
   * @generated from field: string NextKey = 2;
   */
  NextKey: string;

  /**
   * TotalCount is the total number of resources available after filter, if any.
   *
   * @generated from field: int32 TotalCount = 3;
   */
  TotalCount: number;
};

/**
 * Describes the message proto.ListSAMLIdPServiceProvidersResponse.
 * Use `create(ListSAMLIdPServiceProvidersResponseSchema)` to create a new message.
 */
export const ListSAMLIdPServiceProvidersResponseSchema: GenMessage<ListSAMLIdPServiceProvidersResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 130);

/**
 * GetSAMLIdPServiceProviderRequest is a request for a specific SAML IdP service provider resource.
 *
 * @generated from message proto.GetSAMLIdPServiceProviderRequest
 */
export type GetSAMLIdPServiceProviderRequest = Message<"proto.GetSAMLIdPServiceProviderRequest"> & {
  /**
   * Name is the name of the SAML IdP sercice provider to be requested.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;
};

/**
 * Describes the message proto.GetSAMLIdPServiceProviderRequest.
 * Use `create(GetSAMLIdPServiceProviderRequestSchema)` to create a new message.
 */
export const GetSAMLIdPServiceProviderRequestSchema: GenMessage<GetSAMLIdPServiceProviderRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 131);

/**
 * DeleteSAMLIdPServiceProviderRequest is a request for deleting a specific SAML IdP service provider resource.
 *
 * @generated from message proto.DeleteSAMLIdPServiceProviderRequest
 */
export type DeleteSAMLIdPServiceProviderRequest = Message<"proto.DeleteSAMLIdPServiceProviderRequest"> & {
  /**
   * Name is the name of the SAML IdP sercice provider to be deleted.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;
};

/**
 * Describes the message proto.DeleteSAMLIdPServiceProviderRequest.
 * Use `create(DeleteSAMLIdPServiceProviderRequestSchema)` to create a new message.
 */
export const DeleteSAMLIdPServiceProviderRequestSchema: GenMessage<DeleteSAMLIdPServiceProviderRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 132);

/**
 * ListUserGroupsRequest is a request for a paginated list of user groups.
 *
 * @generated from message proto.ListUserGroupsRequest
 */
export type ListUserGroupsRequest = Message<"proto.ListUserGroupsRequest"> & {
  /**
   * Limit is the maximum amount of resources to retrieve.
   *
   * @generated from field: int32 Limit = 1;
   */
  Limit: number;

  /**
   * NextKey is the key for the next page of user groups.
   *
   * @generated from field: string NextKey = 2;
   */
  NextKey: string;
};

/**
 * Describes the message proto.ListUserGroupsRequest.
 * Use `create(ListUserGroupsRequestSchema)` to create a new message.
 */
export const ListUserGroupsRequestSchema: GenMessage<ListUserGroupsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 133);

/**
 * ListUserGroupsResponse a paginated list of user groups.
 *
 * @generated from message proto.ListUserGroupsResponse
 */
export type ListUserGroupsResponse = Message<"proto.ListUserGroupsResponse"> & {
  /**
   * UserGroups is a list of user groups.
   *
   * @generated from field: repeated types.UserGroupV1 UserGroups = 1;
   */
  UserGroups: UserGroupV1[];

  /**
   * NextKey is the key for the next page of user groups.
   *
   * @generated from field: string NextKey = 2;
   */
  NextKey: string;

  /**
   * TotalCount is the total number of resources available after filter, if any.
   *
   * @generated from field: int32 TotalCount = 3;
   */
  TotalCount: number;
};

/**
 * Describes the message proto.ListUserGroupsResponse.
 * Use `create(ListUserGroupsResponseSchema)` to create a new message.
 */
export const ListUserGroupsResponseSchema: GenMessage<ListUserGroupsResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 134);

/**
 * GetUserGroupRequest is a request for a specific user group resource.
 *
 * @generated from message proto.GetUserGroupRequest
 */
export type GetUserGroupRequest = Message<"proto.GetUserGroupRequest"> & {
  /**
   * Name is the name of the user group to be requested.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;
};

/**
 * Describes the message proto.GetUserGroupRequest.
 * Use `create(GetUserGroupRequestSchema)` to create a new message.
 */
export const GetUserGroupRequestSchema: GenMessage<GetUserGroupRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 135);

/**
 * DeleteUserGroupRequest is a request for deleting a specific user group resource.
 *
 * @generated from message proto.DeleteUserGroupRequest
 */
export type DeleteUserGroupRequest = Message<"proto.DeleteUserGroupRequest"> & {
  /**
   * Name is the name of the user group to be deleted.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;
};

/**
 * Describes the message proto.DeleteUserGroupRequest.
 * Use `create(DeleteUserGroupRequestSchema)` to create a new message.
 */
export const DeleteUserGroupRequestSchema: GenMessage<DeleteUserGroupRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 136);

/**
 * CertAuthorityRequest is a request that identifies a Teleport CA.
 *
 * @generated from message proto.CertAuthorityRequest
 */
export type CertAuthorityRequest = Message<"proto.CertAuthorityRequest"> & {
  /**
   * Type is either user or host certificate authority.
   *
   * @generated from field: string Type = 1;
   */
  Type: string;
};

/**
 * Describes the message proto.CertAuthorityRequest.
 * Use `create(CertAuthorityRequestSchema)` to create a new message.
 */
export const CertAuthorityRequestSchema: GenMessage<CertAuthorityRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 137);

/**
 * CRL is the X.509 Certificate Revocation List.
 *
 * @generated from message proto.CRL
 */
export type CRL = Message<"proto.CRL"> & {
  /**
   * CRL is the Certificate Revocation List in DER format.
   *
   * @generated from field: bytes CRL = 1;
   */
  CRL: Uint8Array;
};

/**
 * Describes the message proto.CRL.
 * Use `create(CRLSchema)` to create a new message.
 */
export const CRLSchema: GenMessage<CRL> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 138);

/**
 * ChangeUserAuthenticationRequest defines a request to change a password and if enabled
 * also adds a new MFA device from a user reset or from a new user invite. User can also skip
 * setting a new password if passwordless is enabled and just provide a new webauthn register
 * response.
 *
 * After a successful request a new web session is created.
 *
 * Users may also receive new recovery codes if they meet the necessary requirements. If a user
 * previously had recovery codes, the previous codes become invalid as it is replaced with newly
 * generated ones.
 *
 * @generated from message proto.ChangeUserAuthenticationRequest
 */
export type ChangeUserAuthenticationRequest = Message<"proto.ChangeUserAuthenticationRequest"> & {
  /**
   * TokenID is the ID of a reset or invite token.
   * The token allows the user to change their credentials without being logged
   * in.
   *
   * @generated from field: string TokenID = 1;
   */
  TokenID: string;

  /**
   * NewPassword is the new password in plain text.
   *
   * @generated from field: bytes NewPassword = 2;
   */
  NewPassword: Uint8Array;

  /**
   * NewMFARegisterResponse is a MFA response to a MFA authentication challenge.
   * This field can be empty which implies that user chose not to add a new device (allowable when
   * cluster settings enable optional second factor), or cluster settings disabled second factor.
   *
   * @generated from field: proto.MFARegisterResponse NewMFARegisterResponse = 3;
   */
  NewMFARegisterResponse?: MFARegisterResponse;

  /**
   * NewDeviceName is the name of a new mfa or passwordless device.
   *
   * @generated from field: string NewDeviceName = 4;
   */
  NewDeviceName: string;

  /**
   * LoginIP is an IP that will be embedded in the new client's certificate for web session if successful.
   *
   * @generated from field: string LoginIP = 5;
   */
  LoginIP: string;
};

/**
 * Describes the message proto.ChangeUserAuthenticationRequest.
 * Use `create(ChangeUserAuthenticationRequestSchema)` to create a new message.
 */
export const ChangeUserAuthenticationRequestSchema: GenMessage<ChangeUserAuthenticationRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 139);

/**
 * ChangeUserAuthenticationResponse is a response for ChangeUserAuthentication.
 *
 * @generated from message proto.ChangeUserAuthenticationResponse
 */
export type ChangeUserAuthenticationResponse = Message<"proto.ChangeUserAuthenticationResponse"> & {
  /**
   * WebSession is a user's web sesssion created from successful changing of password.
   *
   * @generated from field: types.WebSessionV2 WebSession = 1;
   */
  WebSession?: WebSessionV2;

  /**
   * Recovery holds user's new recovery related fields. Previous recovery codes become invalid.
   * This field can be empty if a user does not meet the following
   * requirements to receive recovery codes:
   *  - cloud feature is enabled
   *  - username is in valid email format
   *
   * @generated from field: proto.RecoveryCodes Recovery = 2;
   */
  Recovery?: RecoveryCodes;

  /**
   * PrivateKeyPolicyEnabled is a flag that when true means one of the private key policy was
   * set in either through cluster config or through a user's assigned role.
   *
   * @generated from field: bool PrivateKeyPolicyEnabled = 3;
   */
  PrivateKeyPolicyEnabled: boolean;
};

/**
 * Describes the message proto.ChangeUserAuthenticationResponse.
 * Use `create(ChangeUserAuthenticationResponseSchema)` to create a new message.
 */
export const ChangeUserAuthenticationResponseSchema: GenMessage<ChangeUserAuthenticationResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 140);

/**
 * StartAccountRecoveryRequest defines a request to create a recovery start token for a user who is
 * allowed to recover their account. The tokens ID is used as part of a URL that will be emailed to
 * the user (not done in this request). Represents step 1 of the account recovery process, next step
 * is RPC VerifyAccountRecovery.
 *
 * @generated from message proto.StartAccountRecoveryRequest
 */
export type StartAccountRecoveryRequest = Message<"proto.StartAccountRecoveryRequest"> & {
  /**
   * Username is the requesting user. The username must meet the following requirements to be
   * allowed to recover their account:
   *  - cloud feature is enabled
   *  - username is in valid email format
   *
   * @generated from field: string Username = 1;
   */
  Username: string;

  /**
   * RecoveryCode is one of the user's recovery code in plain text.
   *
   * @generated from field: bytes RecoveryCode = 2;
   */
  RecoveryCode: Uint8Array;

  /**
   * RecoverType defines what type of authentication user needs to recover.
   *
   * @generated from field: types.UserTokenUsage RecoverType = 3;
   */
  RecoverType: UserTokenUsage;
};

/**
 * Describes the message proto.StartAccountRecoveryRequest.
 * Use `create(StartAccountRecoveryRequestSchema)` to create a new message.
 */
export const StartAccountRecoveryRequestSchema: GenMessage<StartAccountRecoveryRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 141);

/**
 * VerifyAccountRecoveryRequest is a request to create a recovery approved token that allows users
 * to perform protected actions while not logged in. Represents step 2 of the account recovery
 * process after RPC StartAccountRecovery, next step is RPC CompleteAccountRecovery.
 *
 * @generated from message proto.VerifyAccountRecoveryRequest
 */
export type VerifyAccountRecoveryRequest = Message<"proto.VerifyAccountRecoveryRequest"> & {
  /**
   * RecoveryStartTokenID is the ID of a recovery start token that's required to verify this
   * request.
   *
   * @generated from field: string RecoveryStartTokenID = 1;
   */
  RecoveryStartTokenID: string;

  /**
   * Username is the name of the user that the token belongs to, used to verify that this name
   * is the same as defined in token for use with emails.
   *
   * @generated from field: string Username = 2;
   */
  Username: string;

  /**
   * AuthnCred is the authentication cred that needs to be verified.
   *
   * @generated from oneof proto.VerifyAccountRecoveryRequest.AuthnCred
   */
  AuthnCred: {
    /**
     * Password is users password in plain text.
     *
     * @generated from field: bytes Password = 3;
     */
    value: Uint8Array;
    case: "Password";
  } | {
    /**
     * MFAAuthenticateResponse is a response to a MFA challenge.
     *
     * @generated from field: proto.MFAAuthenticateResponse MFAAuthenticateResponse = 4;
     */
    value: MFAAuthenticateResponse;
    case: "MFAAuthenticateResponse";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message proto.VerifyAccountRecoveryRequest.
 * Use `create(VerifyAccountRecoveryRequestSchema)` to create a new message.
 */
export const VerifyAccountRecoveryRequestSchema: GenMessage<VerifyAccountRecoveryRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 142);

/**
 * CompleteAccountRecoveryRequest is a request to set either a new password or
 * add a new mfa device, allowing the user to regain access to their account with the new
 * credentials. Represents the last step in the account recovery process after RPC's
 * StartAccountRecovery and VerifyAccountRecovery.
 *
 * @generated from message proto.CompleteAccountRecoveryRequest
 */
export type CompleteAccountRecoveryRequest = Message<"proto.CompleteAccountRecoveryRequest"> & {
  /**
   * RecoveryApprovedTokenID is the ID of a recovery approved token that's required to verify this
   * request.
   *
   * @generated from field: string RecoveryApprovedTokenID = 1;
   */
  RecoveryApprovedTokenID: string;

  /**
   * NewDeviceName is the name of a new mfa device.
   * Optional if NewPassword is used.
   *
   * @generated from field: string NewDeviceName = 2;
   */
  NewDeviceName: string;

  /**
   * NewAuthnCred contains the new authentication credential.
   *
   * @generated from oneof proto.CompleteAccountRecoveryRequest.NewAuthnCred
   */
  NewAuthnCred: {
    /**
     * NewPassword is user's new password in plain text.
     *
     * @generated from field: bytes NewPassword = 3;
     */
    value: Uint8Array;
    case: "NewPassword";
  } | {
    /**
     * NewMFAResponse is a user's new mfa response to a mfa register challenge.
     *
     * @generated from field: proto.MFARegisterResponse NewMFAResponse = 4;
     */
    value: MFARegisterResponse;
    case: "NewMFAResponse";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message proto.CompleteAccountRecoveryRequest.
 * Use `create(CompleteAccountRecoveryRequestSchema)` to create a new message.
 */
export const CompleteAccountRecoveryRequestSchema: GenMessage<CompleteAccountRecoveryRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 143);

/**
 * RecoveryCodes describes account recovery fields. Used as a RPC
 * response or as part of a RPC response that requires any of these fields.
 *
 * @generated from message proto.RecoveryCodes
 */
export type RecoveryCodes = Message<"proto.RecoveryCodes"> & {
  /**
   * Codes holds the list of recovery phrase words.
   * Field is only used when new recovery codes are generated and returned to user.
   *
   * @generated from field: repeated string Codes = 1;
   */
  Codes: string[];

  /**
   * Created is the date the recovery codes were created.
   *
   * @generated from field: google.protobuf.Timestamp Created = 2;
   */
  Created?: Timestamp;
};

/**
 * Describes the message proto.RecoveryCodes.
 * Use `create(RecoveryCodesSchema)` to create a new message.
 */
export const RecoveryCodesSchema: GenMessage<RecoveryCodes> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 144);

/**
 * CreateAccountRecoveryCodesRequest is a request to create new set of recovery codes for a user,
 * replacing and invalidating any previously existing codes. Recovery codes can only be given to
 * users who meet the following requirements:
 *  - cloud feature is enabled
 *  - username is in valid email format
 *
 * @generated from message proto.CreateAccountRecoveryCodesRequest
 */
export type CreateAccountRecoveryCodesRequest = Message<"proto.CreateAccountRecoveryCodesRequest"> & {
  /**
   * TokenID is the ID of a user token that will be used to verify this request.
   * Token types accepted are:
   *   - Recovery approved token that is obtained with RPC VerifyAccountRecovery
   *   - Privilege token that is obtained with RPC CreatePrivilegeToken
   *
   * @generated from field: string TokenID = 1;
   */
  TokenID: string;
};

/**
 * Describes the message proto.CreateAccountRecoveryCodesRequest.
 * Use `create(CreateAccountRecoveryCodesRequestSchema)` to create a new message.
 */
export const CreateAccountRecoveryCodesRequestSchema: GenMessage<CreateAccountRecoveryCodesRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 145);

/**
 * GetAccountRecoveryTokenRequest is a request to return a user token resource after verifying that
 * the token in the request is not expired and is of the recovery kind.
 *
 * @generated from message proto.GetAccountRecoveryTokenRequest
 */
export type GetAccountRecoveryTokenRequest = Message<"proto.GetAccountRecoveryTokenRequest"> & {
  /**
   * RecoveryTokenID is the ID of a recovery token to verify.
   * Recovery tokens are obtained with RPC StartAccountRecovery or VerifyAccountRecovery.
   *
   * @generated from field: string RecoveryTokenID = 1;
   */
  RecoveryTokenID: string;
};

/**
 * Describes the message proto.GetAccountRecoveryTokenRequest.
 * Use `create(GetAccountRecoveryTokenRequestSchema)` to create a new message.
 */
export const GetAccountRecoveryTokenRequestSchema: GenMessage<GetAccountRecoveryTokenRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 146);

/**
 * GetAccountRecoveryCodesRequest is a request to return the user in context their
 * recovery codes. This request will not return any secrets (the values of recovery codes).
 *
 * @generated from message proto.GetAccountRecoveryCodesRequest
 */
export type GetAccountRecoveryCodesRequest = Message<"proto.GetAccountRecoveryCodesRequest"> & {
};

/**
 * Describes the message proto.GetAccountRecoveryCodesRequest.
 * Use `create(GetAccountRecoveryCodesRequestSchema)` to create a new message.
 */
export const GetAccountRecoveryCodesRequestSchema: GenMessage<GetAccountRecoveryCodesRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 147);

/**
 * UserCredentials describes fields for a user's username and password.
 *
 * @generated from message proto.UserCredentials
 */
export type UserCredentials = Message<"proto.UserCredentials"> & {
  /**
   * @generated from field: string Username = 1;
   */
  Username: string;

  /**
   * @generated from field: bytes Password = 2;
   */
  Password: Uint8Array;
};

/**
 * Describes the message proto.UserCredentials.
 * Use `create(UserCredentialsSchema)` to create a new message.
 */
export const UserCredentialsSchema: GenMessage<UserCredentials> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 148);

/**
 * ContextUser marks requests that rely in the currently authenticated user.
 *
 * @generated from message proto.ContextUser
 */
export type ContextUser = Message<"proto.ContextUser"> & {
};

/**
 * Describes the message proto.ContextUser.
 * Use `create(ContextUserSchema)` to create a new message.
 */
export const ContextUserSchema: GenMessage<ContextUser> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 149);

/**
 * Passwordless marks requests for passwordless challenges.
 *
 * @generated from message proto.Passwordless
 */
export type Passwordless = Message<"proto.Passwordless"> & {
};

/**
 * Describes the message proto.Passwordless.
 * Use `create(PasswordlessSchema)` to create a new message.
 */
export const PasswordlessSchema: GenMessage<Passwordless> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 150);

/**
 * CreateAuthenticateChallengeRequest is a request for creating MFA authentication challenges for a
 * users mfa devices.
 *
 * @generated from message proto.CreateAuthenticateChallengeRequest
 */
export type CreateAuthenticateChallengeRequest = Message<"proto.CreateAuthenticateChallengeRequest"> & {
  /**
   * Request defines how the request will be verified before creating challenges.
   * An empty Request is equivalent to context_user being set.
   *
   * @generated from oneof proto.CreateAuthenticateChallengeRequest.Request
   */
  Request: {
    /**
     * UserCredentials verifies request with username and password. Used with logins or
     * when the logged in user wants to change their password.
     *
     * @generated from field: proto.UserCredentials UserCredentials = 1;
     */
    value: UserCredentials;
    case: "UserCredentials";
  } | {
    /**
     * RecoveryStartTokenID is the ID of a recovery start token obtained with RPC
     * StartAccountRecovery. This token allows a user to retrieve their MFA challenges for RPC
     * VerifyAccountRecovery (step 2 of the recovery process after RPC StartAccountRecovery).
     *
     * @generated from field: string RecoveryStartTokenID = 2;
     */
    value: string;
    case: "RecoveryStartTokenID";
  } | {
    /**
     * ContextUser issues a challenge for the currently-authenticated user.
     * Default option if no other is provided.
     *
     * @generated from field: proto.ContextUser ContextUser = 3;
     */
    value: ContextUser;
    case: "ContextUser";
  } | {
    /**
     * Passwordless issues a passwordless challenge (authenticated user not
     * required).
     *
     * @generated from field: proto.Passwordless Passwordless = 4;
     */
    value: Passwordless;
    case: "Passwordless";
  } | { case: undefined; value?: undefined };

  /**
   * MFARequiredCheck, if set, is used to verify if MFA is necessary for the
   * request. It's akin to a call to [AuthService.IsMFARequired].
   *
   * If MFA is not required, then no challenges are issued in the
   * [MFAAuthenticateResponse].
   *
   * MFA verification should run in the cluster that holds the target resource.
   * If you are issuing challenges from the root cluster, but accessing a leaf,
   * call [AuthService.IsMFARequired] in the leaf instead of setting this field.
   *
   * @generated from field: proto.IsMFARequiredRequest MFARequiredCheck = 5;
   */
  MFARequiredCheck?: IsMFARequiredRequest;

  /**
   * ChallengeExtensions are extensions that will be apply to the issued MFA challenge.
   * ChallengeExtensions only apply to webauthn challenges currently. Required, except
   * for v15 clients and older.
   *
   * @generated from field: teleport.mfa.v1.ChallengeExtensions ChallengeExtensions = 6;
   */
  ChallengeExtensions?: ChallengeExtensions;
};

/**
 * Describes the message proto.CreateAuthenticateChallengeRequest.
 * Use `create(CreateAuthenticateChallengeRequestSchema)` to create a new message.
 */
export const CreateAuthenticateChallengeRequestSchema: GenMessage<CreateAuthenticateChallengeRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 151);

/**
 * CreatePrivilegeTokenRequest defines a request to obtain a privilege token.
 * Only logged in users are allowed to obtain privilege tokens after they have successfully
 * re-authenticated with their second factor.
 *
 * @generated from message proto.CreatePrivilegeTokenRequest
 */
export type CreatePrivilegeTokenRequest = Message<"proto.CreatePrivilegeTokenRequest"> & {
  /**
   * ExistingMFAResponse is a response to a challenge from the user's existing MFA devices.
   * This field can be empty to create a UserTokenTypePrivilegeException token that
   * allows a user to bypass second factor re-authentication eg: allowing a user
   * with no mfa devices to add a device without re-authenticating.
   *
   * @generated from field: proto.MFAAuthenticateResponse ExistingMFAResponse = 1;
   */
  ExistingMFAResponse?: MFAAuthenticateResponse;
};

/**
 * Describes the message proto.CreatePrivilegeTokenRequest.
 * Use `create(CreatePrivilegeTokenRequestSchema)` to create a new message.
 */
export const CreatePrivilegeTokenRequestSchema: GenMessage<CreatePrivilegeTokenRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 152);

/**
 * CreateRegisterChallengeRequest is a request for creating MFA register challenge for a
 * new MFA device.
 *
 * @generated from message proto.CreateRegisterChallengeRequest
 */
export type CreateRegisterChallengeRequest = Message<"proto.CreateRegisterChallengeRequest"> & {
  /**
   * TokenID is the ID of a user token that will be used to verify this request.
   * Either TokenID or ExistingMFAResponse are required.
   *
   * All user token types are accepted except UserTokenTypeRecoveryStart.
   *
   * An authenticated user can create challenges without a token by supplying an
   * ExistingMFAResponse.
   *
   * @generated from field: string TokenID = 1;
   */
  TokenID: string;

  /**
   * ExistingMFAResponse is a response to ExistingMFAChallenge auth challenge.
   * Either ExistingMFAResponse or TokenID are required.
   *
   * Note that a user with no devices can create the initial register challenge,
   * in the same manner that they could create a privilege token.
   *
   * See the [AuthService.CreateAuthenticateChallenge] RPC.
   *
   * @generated from field: proto.MFAAuthenticateResponse ExistingMFAResponse = 4;
   */
  ExistingMFAResponse?: MFAAuthenticateResponse;

  /**
   * DeviceType is the type of MFA device to make a register challenge for.
   *
   * @generated from field: proto.DeviceType DeviceType = 2;
   */
  DeviceType: DeviceType;

  /**
   * DeviceUsage is the requested usage for the device.
   * Defaults to DEVICE_USAGE_MFA.
   *
   * @generated from field: proto.DeviceUsage DeviceUsage = 3;
   */
  DeviceUsage: DeviceUsage;
};

/**
 * Describes the message proto.CreateRegisterChallengeRequest.
 * Use `create(CreateRegisterChallengeRequestSchema)` to create a new message.
 */
export const CreateRegisterChallengeRequestSchema: GenMessage<CreateRegisterChallengeRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 153);

/**
 * PaginatedResource represents one of the supported resources.
 *
 * @generated from message proto.PaginatedResource
 */
export type PaginatedResource = Message<"proto.PaginatedResource"> & {
  /**
   * Resource is the resource itself.
   *
   * @generated from oneof proto.PaginatedResource.resource
   */
  resource: {
    /**
     * DatabaseServer represents a DatabaseServer resource.
     *
     * @generated from field: types.DatabaseServerV3 DatabaseServer = 1;
     */
    value: DatabaseServerV3;
    case: "DatabaseServer";
  } | {
    /**
     * AppServer represents a AppServer resource.
     *
     * @generated from field: types.AppServerV3 AppServer = 2;
     */
    value: AppServerV3;
    case: "AppServer";
  } | {
    /**
     * Nodes represents a Server resource.
     *
     * @generated from field: types.ServerV2 Node = 3;
     */
    value: ServerV2;
    case: "Node";
  } | {
    /**
     * WindowsDesktop represents a WindowsDesktop resource.
     *
     * @generated from field: types.WindowsDesktopV3 WindowsDesktop = 5;
     */
    value: WindowsDesktopV3;
    case: "WindowsDesktop";
  } | {
    /**
     * KubeCluster represents a KubeCluster resource.
     *
     * @generated from field: types.KubernetesClusterV3 KubeCluster = 6;
     */
    value: KubernetesClusterV3;
    case: "KubeCluster";
  } | {
    /**
     * KubernetesServer represents a Kubernetes Server resource.
     *
     * @generated from field: types.KubernetesServerV3 KubernetesServer = 7;
     */
    value: KubernetesServerV3;
    case: "KubernetesServer";
  } | {
    /**
     * WindowsDesktopService represents a WindowsDesktopServiceV3 resource.
     *
     * @generated from field: types.WindowsDesktopServiceV3 WindowsDesktopService = 8;
     */
    value: WindowsDesktopServiceV3;
    case: "WindowsDesktopService";
  } | {
    /**
     * DatabaseService represents a DatabaseService resource.
     *
     * @generated from field: types.DatabaseServiceV1 DatabaseService = 9;
     */
    value: DatabaseServiceV1;
    case: "DatabaseService";
  } | {
    /**
     * UserGroup represents a UserGroup resource.
     *
     * @generated from field: types.UserGroupV1 UserGroup = 10;
     */
    value: UserGroupV1;
    case: "UserGroup";
  } | {
    /**
     * AppServerOrSAMLIdPServiceProvider represents either an AppServer or a SAML IdP Service Provider resource.
     *
     * DEPRECATED: Use AppServer and SAMLIdPServiceProvider type individually.
     *
     * @generated from field: types.AppServerOrSAMLIdPServiceProviderV1 AppServerOrSAMLIdPServiceProvider = 11 [deprecated = true];
     * @deprecated
     */
    value: AppServerOrSAMLIdPServiceProviderV1;
    case: "AppServerOrSAMLIdPServiceProvider";
  } | {
    /**
     * SAMLIdPServiceProvider represents a SAML IdP service provider resource.
     *
     * @generated from field: types.SAMLIdPServiceProviderV1 SAMLIdPServiceProvider = 12;
     */
    value: SAMLIdPServiceProviderV1;
    case: "SAMLIdPServiceProvider";
  } | { case: undefined; value?: undefined };

  /**
   * Logins allowed for the included resource. Only to be populated for SSH and Desktops.
   *
   * @generated from field: repeated string Logins = 13;
   */
  Logins: string[];

  /**
   * RequiresRequest indicates if a resource requires an access request to access. Only populated with requests
   * that IncludeRequestable.
   *
   * @generated from field: bool RequiresRequest = 14;
   */
  RequiresRequest: boolean;
};

/**
 * Describes the message proto.PaginatedResource.
 * Use `create(PaginatedResourceSchema)` to create a new message.
 */
export const PaginatedResourceSchema: GenMessage<PaginatedResource> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 154);

/**
 * ListUnifiedResourcesRequest is a request to receive a paginated list of unified resources
 *
 * @generated from message proto.ListUnifiedResourcesRequest
 */
export type ListUnifiedResourcesRequest = Message<"proto.ListUnifiedResourcesRequest"> & {
  /**
   * Kinds is a list of kinds to match against a resource's kind. This can be used in a
   * unified resource request that can include multiple types.
   *
   * @generated from field: repeated string Kinds = 1;
   */
  Kinds: string[];

  /**
   * Limit is the maximum amount of resources to retrieve.
   *
   * @generated from field: int32 Limit = 2;
   */
  Limit: number;

  /**
   * StartKey is used to start listing resources from a specific spot. It
   * should be set to the previous NextKey value if using pagination, or
   * left empty.
   *
   * @generated from field: string StartKey = 3;
   */
  StartKey: string;

  /**
   * Labels is a label-based matcher if non-empty.
   *
   * @generated from field: map<string, string> Labels = 4;
   */
  Labels: { [key: string]: string };

  /**
   * PredicateExpression defines boolean conditions that will be matched against the resource.
   *
   * @generated from field: string PredicateExpression = 5;
   */
  PredicateExpression: string;

  /**
   * SearchKeywords is a list of search keywords to match against resource field values.
   *
   * @generated from field: repeated string SearchKeywords = 6;
   */
  SearchKeywords: string[];

  /**
   * SortBy describes which resource field and which direction to sort by.
   *
   * @generated from field: types.SortBy SortBy = 7;
   */
  SortBy?: SortBy;

  /**
   * WindowsDesktopFilter specifies windows desktop specific filters.
   *
   * @generated from field: types.WindowsDesktopFilter WindowsDesktopFilter = 8;
   */
  WindowsDesktopFilter?: WindowsDesktopFilter;

  /**
   * UseSearchAsRoles indicates that the response should include all resources
   * the caller is able to request access to using search_as_roles
   *
   * @generated from field: bool UseSearchAsRoles = 9;
   */
  UseSearchAsRoles: boolean;

  /**
   * UsePreviewAsRoles indicates that the response should include all resources
   * the caller would be able to access with their preview_as_roles
   *
   * @generated from field: bool UsePreviewAsRoles = 10;
   */
  UsePreviewAsRoles: boolean;

  /**
   * PinnedOnly indicates that the request will pull only the pinned resources
   * of the requesting user
   *
   * @generated from field: bool PinnedOnly = 11;
   */
  PinnedOnly: boolean;

  /**
   * IncludeLogins indicates that the response should include a users allowed logins
   * for all returned resources.
   *
   * @generated from field: bool IncludeLogins = 12;
   */
  IncludeLogins: boolean;

  /**
   * IncludeRequestable indicates that the response should include resources that the user must request access to.
   *
   * @generated from field: bool IncludeRequestable = 14;
   */
  IncludeRequestable: boolean;
};

/**
 * Describes the message proto.ListUnifiedResourcesRequest.
 * Use `create(ListUnifiedResourcesRequestSchema)` to create a new message.
 */
export const ListUnifiedResourcesRequestSchema: GenMessage<ListUnifiedResourcesRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 155);

/**
 * ListUnifiedResourceResponse response of ListUnifiedResources.
 *
 * @generated from message proto.ListUnifiedResourcesResponse
 */
export type ListUnifiedResourcesResponse = Message<"proto.ListUnifiedResourcesResponse"> & {
  /**
   * Resources is a list of resource.
   *
   * @generated from field: repeated proto.PaginatedResource Resources = 1;
   */
  Resources: PaginatedResource[];

  /**
   * NextKey is the next Key to use as StartKey in a ListResourcesRequest to
   * continue retrieving pages of resource. If NextKey is empty, there are no
   * more pages.
   *
   * @generated from field: string NextKey = 2;
   */
  NextKey: string;
};

/**
 * Describes the message proto.ListUnifiedResourcesResponse.
 * Use `create(ListUnifiedResourcesResponseSchema)` to create a new message.
 */
export const ListUnifiedResourcesResponseSchema: GenMessage<ListUnifiedResourcesResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 156);

/**
 * ListResourcesRequest defines a request to retrieve resources paginated. Only
 * one type of resource can be retrieved per request.
 *
 * NOTE: There are two paths this request can take:
 *  1. ListResources: the more efficient path that retrieves resources by subset
 *  at a time defined by field 'Limit'. Does NOT de-duplicate matches.
 *  2. listResourcesWithSort: the less efficient path that retrieves all resources
 *  upfront by falling back to the traditional GetXXX calls. Used when sorting (SortBy),
 *  total count of resources (NeedTotalCount), or ResourceType `KindKubernetesCluster`
 *  is requested. Matches are de-duplicated.
 *
 * @generated from message proto.ListResourcesRequest
 */
export type ListResourcesRequest = Message<"proto.ListResourcesRequest"> & {
  /**
   * ResourceType is the resource that is going to be retrieved.
   * This only needs to be set explicitly for the `ListResources` rpc.
   *
   * @generated from field: string ResourceType = 1;
   */
  ResourceType: string;

  /**
   * Namespace is the namespace of resources.
   *
   * @generated from field: string Namespace = 2;
   */
  Namespace: string;

  /**
   * Limit is the maximum amount of resources to retrieve.
   *
   * @generated from field: int32 Limit = 3;
   */
  Limit: number;

  /**
   * StartKey is used to start listing resources from a specific spot. It
   * should be set to the previous NextKey value if using pagination, or
   * left empty.
   *
   * @generated from field: string StartKey = 4;
   */
  StartKey: string;

  /**
   * Labels is a label-based matcher if non-empty.
   *
   * @generated from field: map<string, string> Labels = 5;
   */
  Labels: { [key: string]: string };

  /**
   * PredicateExpression defines boolean conditions that will be matched against the resource.
   *
   * @generated from field: string PredicateExpression = 6;
   */
  PredicateExpression: string;

  /**
   * SearchKeywords is a list of search keywords to match against resource field values.
   *
   * @generated from field: repeated string SearchKeywords = 7;
   */
  SearchKeywords: string[];

  /**
   * SortBy describes which resource field and which direction to sort by.
   *
   * @generated from field: types.SortBy SortBy = 8;
   */
  SortBy?: SortBy;

  /**
   * NeedTotalCount indicates whether or not the caller also wants the total number of resources
   * after filtering.
   *
   * @generated from field: bool NeedTotalCount = 9;
   */
  NeedTotalCount: boolean;

  /**
   * WindowsDesktopFilter specifies windows desktop specific filters.
   *
   * @generated from field: types.WindowsDesktopFilter WindowsDesktopFilter = 10;
   */
  WindowsDesktopFilter?: WindowsDesktopFilter;

  /**
   * UseSearchAsRoles indicates that the response should include all resources
   * the caller is able to request access to using search_as_roles
   *
   * @generated from field: bool UseSearchAsRoles = 11;
   */
  UseSearchAsRoles: boolean;

  /**
   * UsePreviewAsRoles indicates that the response should include all resources
   * the caller would be able to access with their preview_as_roles
   *
   * @generated from field: bool UsePreviewAsRoles = 12;
   */
  UsePreviewAsRoles: boolean;

  /**
   * IncludeLogins indicates that the response should include a users allowed logins
   * for all returned resources.
   *
   * @generated from field: bool IncludeLogins = 13;
   */
  IncludeLogins: boolean;
};

/**
 * Describes the message proto.ListResourcesRequest.
 * Use `create(ListResourcesRequestSchema)` to create a new message.
 */
export const ListResourcesRequestSchema: GenMessage<ListResourcesRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 157);

/**
 * GetSSHTargetsRequest gets all servers that might match an equivalent ssh dial request.
 *
 * @generated from message proto.GetSSHTargetsRequest
 */
export type GetSSHTargetsRequest = Message<"proto.GetSSHTargetsRequest"> & {
  /**
   * Host is the target host as would be sent to the proxy during a dial request.
   *
   * @generated from field: string Host = 1;
   */
  Host: string;

  /**
   * Port is the ssh port. This value is optional, and both empty string and "0" are typically
   * treated as meaning that any port should match.
   *
   * @generated from field: string Port = 2;
   */
  Port: string;
};

/**
 * Describes the message proto.GetSSHTargetsRequest.
 * Use `create(GetSSHTargetsRequestSchema)` to create a new message.
 */
export const GetSSHTargetsRequestSchema: GenMessage<GetSSHTargetsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 158);

/**
 * GetSSHTargetsResponse holds ssh servers that match an ssh targets request.
 *
 * @generated from message proto.GetSSHTargetsResponse
 */
export type GetSSHTargetsResponse = Message<"proto.GetSSHTargetsResponse"> & {
  /**
   * Servers is a list of servers matching the supplied request.
   *
   * @generated from field: repeated types.ServerV2 Servers = 1;
   */
  Servers: ServerV2[];
};

/**
 * Describes the message proto.GetSSHTargetsResponse.
 * Use `create(GetSSHTargetsResponseSchema)` to create a new message.
 */
export const GetSSHTargetsResponseSchema: GenMessage<GetSSHTargetsResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 159);

/**
 * ListResourceResponse response of ListResources.
 *
 * @generated from message proto.ListResourcesResponse
 */
export type ListResourcesResponse = Message<"proto.ListResourcesResponse"> & {
  /**
   * Resources is a list of resource.
   *
   * @generated from field: repeated proto.PaginatedResource Resources = 1;
   */
  Resources: PaginatedResource[];

  /**
   * NextKey is the next Key to use as StartKey in a ListResourcesRequest to
   * continue retrieving pages of resource. If NextKey is empty, there are no
   * more pages.
   *
   * @generated from field: string NextKey = 2;
   */
  NextKey: string;

  /**
   * TotalCount is the total number of resources available after filter, if any.
   *
   * @generated from field: int32 TotalCount = 3;
   */
  TotalCount: number;
};

/**
 * Describes the message proto.ListResourcesResponse.
 * Use `create(ListResourcesResponseSchema)` to create a new message.
 */
export const ListResourcesResponseSchema: GenMessage<ListResourcesResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 160);

/**
 * CreateSessionTrackerRequest is a request to create a new session.
 *
 * This is not specific to any session type. Relevant fields should be set for a given session type.
 *
 * @generated from message proto.CreateSessionTrackerRequest
 */
export type CreateSessionTrackerRequest = Message<"proto.CreateSessionTrackerRequest"> & {
  /**
   * SessionTracker is the session tracker to be created.
   *
   * @generated from field: types.SessionTrackerV1 SessionTracker = 15;
   */
  SessionTracker?: SessionTrackerV1;
};

/**
 * Describes the message proto.CreateSessionTrackerRequest.
 * Use `create(CreateSessionTrackerRequestSchema)` to create a new message.
 */
export const CreateSessionTrackerRequestSchema: GenMessage<CreateSessionTrackerRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 161);

/**
 * GetSessionTrackerRequest is a request to fetch a session resource.
 *
 * @generated from message proto.GetSessionTrackerRequest
 */
export type GetSessionTrackerRequest = Message<"proto.GetSessionTrackerRequest"> & {
  /**
   * SessionID is unique identifier of this session.
   *
   * @generated from field: string SessionID = 1;
   */
  SessionID: string;
};

/**
 * Describes the message proto.GetSessionTrackerRequest.
 * Use `create(GetSessionTrackerRequestSchema)` to create a new message.
 */
export const GetSessionTrackerRequestSchema: GenMessage<GetSessionTrackerRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 162);

/**
 * RemoveSessionTrackerRequest is a request to remove a session.
 *
 * @generated from message proto.RemoveSessionTrackerRequest
 */
export type RemoveSessionTrackerRequest = Message<"proto.RemoveSessionTrackerRequest"> & {
  /**
   * SessionID is unique identifier of this session.
   *
   * @generated from field: string SessionID = 1;
   */
  SessionID: string;
};

/**
 * Describes the message proto.RemoveSessionTrackerRequest.
 * Use `create(RemoveSessionTrackerRequestSchema)` to create a new message.
 */
export const RemoveSessionTrackerRequestSchema: GenMessage<RemoveSessionTrackerRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 163);

/**
 * @generated from message proto.SessionTrackerUpdateState
 */
export type SessionTrackerUpdateState = Message<"proto.SessionTrackerUpdateState"> & {
  /**
   * State is the new state of the session tracker.
   *
   * @generated from field: types.SessionState State = 2;
   */
  State: SessionState;
};

/**
 * Describes the message proto.SessionTrackerUpdateState.
 * Use `create(SessionTrackerUpdateStateSchema)` to create a new message.
 */
export const SessionTrackerUpdateStateSchema: GenMessage<SessionTrackerUpdateState> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 164);

/**
 * @generated from message proto.SessionTrackerAddParticipant
 */
export type SessionTrackerAddParticipant = Message<"proto.SessionTrackerAddParticipant"> & {
  /**
   * Participant is the participant to be added to the session.
   *
   * @generated from field: types.Participant Participant = 2;
   */
  Participant?: Participant;
};

/**
 * Describes the message proto.SessionTrackerAddParticipant.
 * Use `create(SessionTrackerAddParticipantSchema)` to create a new message.
 */
export const SessionTrackerAddParticipantSchema: GenMessage<SessionTrackerAddParticipant> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 165);

/**
 * @generated from message proto.SessionTrackerRemoveParticipant
 */
export type SessionTrackerRemoveParticipant = Message<"proto.SessionTrackerRemoveParticipant"> & {
  /**
   * ParticipantID is unique identifier of the participant.
   *
   * @generated from field: string ParticipantID = 2;
   */
  ParticipantID: string;
};

/**
 * Describes the message proto.SessionTrackerRemoveParticipant.
 * Use `create(SessionTrackerRemoveParticipantSchema)` to create a new message.
 */
export const SessionTrackerRemoveParticipantSchema: GenMessage<SessionTrackerRemoveParticipant> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 166);

/**
 * SessionTrackerUpdateExpiry is used to update the session tracker expiration time.
 *
 * @generated from message proto.SessionTrackerUpdateExpiry
 */
export type SessionTrackerUpdateExpiry = Message<"proto.SessionTrackerUpdateExpiry"> & {
  /**
   * Expires is when the session tracker will expire.
   *
   * @generated from field: google.protobuf.Timestamp Expires = 1;
   */
  Expires?: Timestamp;
};

/**
 * Describes the message proto.SessionTrackerUpdateExpiry.
 * Use `create(SessionTrackerUpdateExpirySchema)` to create a new message.
 */
export const SessionTrackerUpdateExpirySchema: GenMessage<SessionTrackerUpdateExpiry> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 167);

/**
 * UpdateSessionTrackerRequest is a request to update some state of a session.
 *
 * @generated from message proto.UpdateSessionTrackerRequest
 */
export type UpdateSessionTrackerRequest = Message<"proto.UpdateSessionTrackerRequest"> & {
  /**
   * SessionID is unique identifier of this session.
   *
   * @generated from field: string SessionID = 1;
   */
  SessionID: string;

  /**
   * @generated from oneof proto.UpdateSessionTrackerRequest.Update
   */
  Update: {
    /**
     * @generated from field: proto.SessionTrackerUpdateState UpdateState = 2;
     */
    value: SessionTrackerUpdateState;
    case: "UpdateState";
  } | {
    /**
     * @generated from field: proto.SessionTrackerAddParticipant AddParticipant = 3;
     */
    value: SessionTrackerAddParticipant;
    case: "AddParticipant";
  } | {
    /**
     * @generated from field: proto.SessionTrackerRemoveParticipant RemoveParticipant = 4;
     */
    value: SessionTrackerRemoveParticipant;
    case: "RemoveParticipant";
  } | {
    /**
     * @generated from field: proto.SessionTrackerUpdateExpiry UpdateExpiry = 5;
     */
    value: SessionTrackerUpdateExpiry;
    case: "UpdateExpiry";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message proto.UpdateSessionTrackerRequest.
 * Use `create(UpdateSessionTrackerRequestSchema)` to create a new message.
 */
export const UpdateSessionTrackerRequestSchema: GenMessage<UpdateSessionTrackerRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 168);

/**
 * PresenceMFAChallengeRequest is a request for a presence MFA challenge.
 *
 * @generated from message proto.PresenceMFAChallengeRequest
 */
export type PresenceMFAChallengeRequest = Message<"proto.PresenceMFAChallengeRequest"> & {
  /**
   * SessionID is unique identifier of the session you want to request presence for.
   *
   * @generated from field: string SessionID = 1;
   */
  SessionID: string;
};

/**
 * Describes the message proto.PresenceMFAChallengeRequest.
 * Use `create(PresenceMFAChallengeRequestSchema)` to create a new message.
 */
export const PresenceMFAChallengeRequestSchema: GenMessage<PresenceMFAChallengeRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 169);

/**
 * PresenceMFAChallengeSend is a presence challenge request or response.
 *
 * @generated from message proto.PresenceMFAChallengeSend
 */
export type PresenceMFAChallengeSend = Message<"proto.PresenceMFAChallengeSend"> & {
  /**
   * @generated from oneof proto.PresenceMFAChallengeSend.Request
   */
  Request: {
    /**
     * @generated from field: proto.PresenceMFAChallengeRequest ChallengeRequest = 1;
     */
    value: PresenceMFAChallengeRequest;
    case: "ChallengeRequest";
  } | {
    /**
     * @generated from field: proto.MFAAuthenticateResponse ChallengeResponse = 2;
     */
    value: MFAAuthenticateResponse;
    case: "ChallengeResponse";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message proto.PresenceMFAChallengeSend.
 * Use `create(PresenceMFAChallengeSendSchema)` to create a new message.
 */
export const PresenceMFAChallengeSendSchema: GenMessage<PresenceMFAChallengeSend> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 170);

/**
 * GetDomainNameResponse is a response from GetDomainName.
 *
 * @generated from message proto.GetDomainNameResponse
 */
export type GetDomainNameResponse = Message<"proto.GetDomainNameResponse"> & {
  /**
   * DomainName is the local auth domain of the current auth server.
   *
   * @generated from field: string DomainName = 1;
   */
  DomainName: string;
};

/**
 * Describes the message proto.GetDomainNameResponse.
 * Use `create(GetDomainNameResponseSchema)` to create a new message.
 */
export const GetDomainNameResponseSchema: GenMessage<GetDomainNameResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 171);

/**
 * GetClusterCACertResponse is a response from GetClusterCACert.
 *
 * @generated from message proto.GetClusterCACertResponse
 */
export type GetClusterCACertResponse = Message<"proto.GetClusterCACertResponse"> & {
  /**
   * TLSCA is a PEM-encoded TLS certificate authority.
   *
   * @generated from field: bytes TLSCA = 1;
   */
  TLSCA: Uint8Array;
};

/**
 * Describes the message proto.GetClusterCACertResponse.
 * Use `create(GetClusterCACertResponseSchema)` to create a new message.
 */
export const GetClusterCACertResponseSchema: GenMessage<GetClusterCACertResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 172);

/**
 * GetLicenseResponse is a response from GetLicense
 *
 * @generated from message proto.GetLicenseResponse
 */
export type GetLicenseResponse = Message<"proto.GetLicenseResponse"> & {
  /**
   * @generated from field: bytes License = 1;
   */
  License: Uint8Array;
};

/**
 * Describes the message proto.GetLicenseResponse.
 * Use `create(GetLicenseResponseSchema)` to create a new message.
 */
export const GetLicenseResponseSchema: GenMessage<GetLicenseResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 173);

/**
 * ListReleasesResponse is a response from ListReleases
 *
 * @generated from message proto.ListReleasesResponse
 */
export type ListReleasesResponse = Message<"proto.ListReleasesResponse"> & {
  /**
   * @generated from field: repeated types.Release releases = 1;
   */
  releases: Release[];
};

/**
 * Describes the message proto.ListReleasesResponse.
 * Use `create(ListReleasesResponseSchema)` to create a new message.
 */
export const ListReleasesResponseSchema: GenMessage<ListReleasesResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 174);

/**
 * GetOIDCAuthRequestRequest is a request for GetOIDCAuthRequest.
 *
 * @generated from message proto.GetOIDCAuthRequestRequest
 */
export type GetOIDCAuthRequestRequest = Message<"proto.GetOIDCAuthRequestRequest"> & {
  /**
   * StateToken is an oidc auth request state token.
   *
   * @generated from field: string StateToken = 1;
   */
  StateToken: string;
};

/**
 * Describes the message proto.GetOIDCAuthRequestRequest.
 * Use `create(GetOIDCAuthRequestRequestSchema)` to create a new message.
 */
export const GetOIDCAuthRequestRequestSchema: GenMessage<GetOIDCAuthRequestRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 175);

/**
 * GetSAMLAuthRequestRequest is a request for GetSAMLAuthRequest.
 *
 * @generated from message proto.GetSAMLAuthRequestRequest
 */
export type GetSAMLAuthRequestRequest = Message<"proto.GetSAMLAuthRequestRequest"> & {
  /**
   * ID is a saml auth request unique id.
   *
   * @generated from field: string ID = 1;
   */
  ID: string;
};

/**
 * Describes the message proto.GetSAMLAuthRequestRequest.
 * Use `create(GetSAMLAuthRequestRequestSchema)` to create a new message.
 */
export const GetSAMLAuthRequestRequestSchema: GenMessage<GetSAMLAuthRequestRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 176);

/**
 * GetGithubAuthRequestRequest is a request for GetGithubAuthRequest.
 *
 * @generated from message proto.GetGithubAuthRequestRequest
 */
export type GetGithubAuthRequestRequest = Message<"proto.GetGithubAuthRequestRequest"> & {
  /**
   * StateToken is a github auth request state token.
   *
   * @generated from field: string StateToken = 1;
   */
  StateToken: string;
};

/**
 * Describes the message proto.GetGithubAuthRequestRequest.
 * Use `create(GetGithubAuthRequestRequestSchema)` to create a new message.
 */
export const GetGithubAuthRequestRequestSchema: GenMessage<GetGithubAuthRequestRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 177);

/**
 * CreateOIDCConnectorRequest is a request for CreateOIDCConnector.
 *
 * @generated from message proto.CreateOIDCConnectorRequest
 */
export type CreateOIDCConnectorRequest = Message<"proto.CreateOIDCConnectorRequest"> & {
  /**
   * Connector to be created.
   *
   * @generated from field: types.OIDCConnectorV3 Connector = 1;
   */
  Connector?: OIDCConnectorV3;
};

/**
 * Describes the message proto.CreateOIDCConnectorRequest.
 * Use `create(CreateOIDCConnectorRequestSchema)` to create a new message.
 */
export const CreateOIDCConnectorRequestSchema: GenMessage<CreateOIDCConnectorRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 178);

/**
 * UpdateOIDCConnectorRequest is a request for UpdateOIDCConnector.
 *
 * @generated from message proto.UpdateOIDCConnectorRequest
 */
export type UpdateOIDCConnectorRequest = Message<"proto.UpdateOIDCConnectorRequest"> & {
  /**
   * Connector to be updated.
   *
   * @generated from field: types.OIDCConnectorV3 Connector = 1;
   */
  Connector?: OIDCConnectorV3;
};

/**
 * Describes the message proto.UpdateOIDCConnectorRequest.
 * Use `create(UpdateOIDCConnectorRequestSchema)` to create a new message.
 */
export const UpdateOIDCConnectorRequestSchema: GenMessage<UpdateOIDCConnectorRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 179);

/**
 * UpsertOIDCConnectorRequest is a request for UpsertOIDCConnector.
 *
 * @generated from message proto.UpsertOIDCConnectorRequest
 */
export type UpsertOIDCConnectorRequest = Message<"proto.UpsertOIDCConnectorRequest"> & {
  /**
   * Connector to be created or updated.
   *
   * @generated from field: types.OIDCConnectorV3 Connector = 1;
   */
  Connector?: OIDCConnectorV3;
};

/**
 * Describes the message proto.UpsertOIDCConnectorRequest.
 * Use `create(UpsertOIDCConnectorRequestSchema)` to create a new message.
 */
export const UpsertOIDCConnectorRequestSchema: GenMessage<UpsertOIDCConnectorRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 180);

/**
 * CreateSAMLConnectorRequest is a request for CreateSAMLConnector.
 *
 * @generated from message proto.CreateSAMLConnectorRequest
 */
export type CreateSAMLConnectorRequest = Message<"proto.CreateSAMLConnectorRequest"> & {
  /**
   * Connector to be created.
   *
   * @generated from field: types.SAMLConnectorV2 Connector = 1;
   */
  Connector?: SAMLConnectorV2;
};

/**
 * Describes the message proto.CreateSAMLConnectorRequest.
 * Use `create(CreateSAMLConnectorRequestSchema)` to create a new message.
 */
export const CreateSAMLConnectorRequestSchema: GenMessage<CreateSAMLConnectorRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 181);

/**
 * UpdateSAMLConnectorRequest is a request for UpdateSAMLConnector.
 *
 * @generated from message proto.UpdateSAMLConnectorRequest
 */
export type UpdateSAMLConnectorRequest = Message<"proto.UpdateSAMLConnectorRequest"> & {
  /**
   * Connector to be updated.
   *
   * @generated from field: types.SAMLConnectorV2 Connector = 1;
   */
  Connector?: SAMLConnectorV2;
};

/**
 * Describes the message proto.UpdateSAMLConnectorRequest.
 * Use `create(UpdateSAMLConnectorRequestSchema)` to create a new message.
 */
export const UpdateSAMLConnectorRequestSchema: GenMessage<UpdateSAMLConnectorRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 182);

/**
 * UpsertSAMLConnectorRequest is a request for UpsertSAMLConnector.
 *
 * @generated from message proto.UpsertSAMLConnectorRequest
 */
export type UpsertSAMLConnectorRequest = Message<"proto.UpsertSAMLConnectorRequest"> & {
  /**
   * Connector to be created or updated.
   *
   * @generated from field: types.SAMLConnectorV2 Connector = 1;
   */
  Connector?: SAMLConnectorV2;
};

/**
 * Describes the message proto.UpsertSAMLConnectorRequest.
 * Use `create(UpsertSAMLConnectorRequestSchema)` to create a new message.
 */
export const UpsertSAMLConnectorRequestSchema: GenMessage<UpsertSAMLConnectorRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 183);

/**
 * CreateGithubConnectorRequest is a request for CreateGithubConnector.
 *
 * @generated from message proto.CreateGithubConnectorRequest
 */
export type CreateGithubConnectorRequest = Message<"proto.CreateGithubConnectorRequest"> & {
  /**
   * Connector to be created.
   *
   * @generated from field: types.GithubConnectorV3 Connector = 1;
   */
  Connector?: GithubConnectorV3;
};

/**
 * Describes the message proto.CreateGithubConnectorRequest.
 * Use `create(CreateGithubConnectorRequestSchema)` to create a new message.
 */
export const CreateGithubConnectorRequestSchema: GenMessage<CreateGithubConnectorRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 184);

/**
 * UpdateGithubConnectorRequest is a request for UpdateGithubConnector.
 *
 * @generated from message proto.UpdateGithubConnectorRequest
 */
export type UpdateGithubConnectorRequest = Message<"proto.UpdateGithubConnectorRequest"> & {
  /**
   * Connector to be updated.
   *
   * @generated from field: types.GithubConnectorV3 Connector = 1;
   */
  Connector?: GithubConnectorV3;
};

/**
 * Describes the message proto.UpdateGithubConnectorRequest.
 * Use `create(UpdateGithubConnectorRequestSchema)` to create a new message.
 */
export const UpdateGithubConnectorRequestSchema: GenMessage<UpdateGithubConnectorRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 185);

/**
 * UpsertGithubConnectorRequest is a request for UpsertGithubConnector.
 *
 * @generated from message proto.UpsertGithubConnectorRequest
 */
export type UpsertGithubConnectorRequest = Message<"proto.UpsertGithubConnectorRequest"> & {
  /**
   * Connector to be created or updated.
   *
   * @generated from field: types.GithubConnectorV3 Connector = 1;
   */
  Connector?: GithubConnectorV3;
};

/**
 * Describes the message proto.UpsertGithubConnectorRequest.
 * Use `create(UpsertGithubConnectorRequestSchema)` to create a new message.
 */
export const UpsertGithubConnectorRequestSchema: GenMessage<UpsertGithubConnectorRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 186);

/**
 * GetSSODiagnosticInfoRequest is a request for GetSSODiagnosticInfo.
 *
 * @generated from message proto.GetSSODiagnosticInfoRequest
 */
export type GetSSODiagnosticInfoRequest = Message<"proto.GetSSODiagnosticInfoRequest"> & {
  /**
   * AuthRequestKind is the SSO Auth Request kind (oidc, saml, or github).
   *
   * @generated from field: string AuthRequestKind = 1;
   */
  AuthRequestKind: string;

  /**
   * AuthRequestID is the SSO Auth Request id or state token.
   *
   * @generated from field: string AuthRequestID = 2;
   */
  AuthRequestID: string;
};

/**
 * Describes the message proto.GetSSODiagnosticInfoRequest.
 * Use `create(GetSSODiagnosticInfoRequestSchema)` to create a new message.
 */
export const GetSSODiagnosticInfoRequestSchema: GenMessage<GetSSODiagnosticInfoRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 187);

/**
 * SystemRoleAssertion is used by agents to prove that they have a given system role when their
 * credentials originate from multiple separate join tokens so that they can be issued an
 * instance certificate that encompasses all of their capabilities. This type will be
 * deprecated once we have a more comprehensive model for join token joining/replacement.
 *
 * @generated from message proto.SystemRoleAssertion
 */
export type SystemRoleAssertion = Message<"proto.SystemRoleAssertion"> & {
  /**
   * ServerID is the server ID of the instance that the assertion is for. Assertions are
   * only accepted if the calling agent's certificate matches this server id.
   *
   * @generated from field: string ServerID = 1;
   */
  ServerID: string;

  /**
   * AssertionID is a random UUID that uniquely identifies a set of assertions
   * as originating from the same teleport process.
   *
   * @generated from field: string AssertionID = 2;
   */
  AssertionID: string;

  /**
   * SystemRole is the system role being asserted. Assertions are only accepted if
   * the calling agent's certificate authorizes it for this system role.
   *
   * @generated from field: string SystemRole = 3;
   */
  SystemRole: string;
};

/**
 * Describes the message proto.SystemRoleAssertion.
 * Use `create(SystemRoleAssertionSchema)` to create a new message.
 */
export const SystemRoleAssertionSchema: GenMessage<SystemRoleAssertion> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 188);

/**
 * SystemRoleAssertionSet is an aggregate generated as a result of one or more successful
 * assertions. This type will be deprecated once we have a more comprehensive model for
 * join token joining/replacement.
 *
 * @generated from message proto.SystemRoleAssertionSet
 */
export type SystemRoleAssertionSet = Message<"proto.SystemRoleAssertionSet"> & {
  /**
   * ServerID is the server ID of the agent that generated the assertions.
   *
   * @generated from field: string ServerID = 1;
   */
  ServerID: string;

  /**
   * AssertionID is a random UUID that identified all constituent assertions as originating
   * from the same teleport process.
   *
   * @generated from field: string AssertionID = 2;
   */
  AssertionID: string;

  /**
   * SystemRoles is the set of system roles that the agent has successfully asserted.
   *
   * @generated from field: repeated string SystemRoles = 3;
   */
  SystemRoles: string[];
};

/**
 * Describes the message proto.SystemRoleAssertionSet.
 * Use `create(SystemRoleAssertionSetSchema)` to create a new message.
 */
export const SystemRoleAssertionSetSchema: GenMessage<SystemRoleAssertionSet> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 189);

/**
 * UpstreamInventoryOneOf is the upstream message for the inventory control stream,
 * sent from teleport instances to the auth server.
 *
 * @generated from message proto.UpstreamInventoryOneOf
 */
export type UpstreamInventoryOneOf = Message<"proto.UpstreamInventoryOneOf"> & {
  /**
   * @generated from oneof proto.UpstreamInventoryOneOf.Msg
   */
  Msg: {
    /**
     * Hello is the first message sent up the control stream.
     *
     * @generated from field: proto.UpstreamInventoryHello Hello = 1;
     */
    value: UpstreamInventoryHello;
    case: "Hello";
  } | {
    /**
     * Heartbeat advertises instance status/liveness.
     *
     * @generated from field: proto.InventoryHeartbeat Heartbeat = 2;
     */
    value: InventoryHeartbeat;
    case: "Heartbeat";
  } | {
    /**
     * UpstreamInventoryPong is a response to a ping (used for testing/debug).
     *
     * @generated from field: proto.UpstreamInventoryPong Pong = 3;
     */
    value: UpstreamInventoryPong;
    case: "Pong";
  } | {
    /**
     * UpstreamInventoryAgentMetadata advertises instance metadata.
     *
     * @generated from field: proto.UpstreamInventoryAgentMetadata AgentMetadata = 4;
     */
    value: UpstreamInventoryAgentMetadata;
    case: "AgentMetadata";
  } | {
    /**
     * UpstreamInventoryGoodbye advertises that the instance is terminating.
     *
     * @generated from field: proto.UpstreamInventoryGoodbye Goodbye = 5;
     */
    value: UpstreamInventoryGoodbye;
    case: "Goodbye";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message proto.UpstreamInventoryOneOf.
 * Use `create(UpstreamInventoryOneOfSchema)` to create a new message.
 */
export const UpstreamInventoryOneOfSchema: GenMessage<UpstreamInventoryOneOf> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 190);

/**
 * DownstreamInventoryOneOf is the downstream message for the inventory control stream,
 * sent from auth servers to teleport instances.
 *
 * @generated from message proto.DownstreamInventoryOneOf
 */
export type DownstreamInventoryOneOf = Message<"proto.DownstreamInventoryOneOf"> & {
  /**
   * @generated from oneof proto.DownstreamInventoryOneOf.Msg
   */
  Msg: {
    /**
     * Hello is the first message sent down the control stream.
     *
     * @generated from field: proto.DownstreamInventoryHello Hello = 1;
     */
    value: DownstreamInventoryHello;
    case: "Hello";
  } | {
    /**
     * Ping triggers an upstream pong (used for testing/debug).
     *
     * @generated from field: proto.DownstreamInventoryPing Ping = 2;
     */
    value: DownstreamInventoryPing;
    case: "Ping";
  } | {
    /**
     * UpdateLabels updates the instance's labels.
     *
     * @generated from field: proto.DownstreamInventoryUpdateLabels UpdateLabels = 3;
     */
    value: DownstreamInventoryUpdateLabels;
    case: "UpdateLabels";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message proto.DownstreamInventoryOneOf.
 * Use `create(DownstreamInventoryOneOfSchema)` to create a new message.
 */
export const DownstreamInventoryOneOfSchema: GenMessage<DownstreamInventoryOneOf> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 191);

/**
 * DownstreamInventoryPing is sent down the inventory control stream for testing/debug
 * purposes.
 *
 * @generated from message proto.DownstreamInventoryPing
 */
export type DownstreamInventoryPing = Message<"proto.DownstreamInventoryPing"> & {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;
};

/**
 * Describes the message proto.DownstreamInventoryPing.
 * Use `create(DownstreamInventoryPingSchema)` to create a new message.
 */
export const DownstreamInventoryPingSchema: GenMessage<DownstreamInventoryPing> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 192);

/**
 * UpstreamInventoryPong is sent up the inventory control stream in response to a downstream
 * ping (used for testing/debug purposes).
 *
 * @generated from message proto.UpstreamInventoryPong
 */
export type UpstreamInventoryPong = Message<"proto.UpstreamInventoryPong"> & {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;
};

/**
 * Describes the message proto.UpstreamInventoryPong.
 * Use `create(UpstreamInventoryPongSchema)` to create a new message.
 */
export const UpstreamInventoryPongSchema: GenMessage<UpstreamInventoryPong> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 193);

/**
 * UpstreamInventoryHello is the hello message sent up the inventory control stream.
 *
 * @generated from message proto.UpstreamInventoryHello
 */
export type UpstreamInventoryHello = Message<"proto.UpstreamInventoryHello"> & {
  /**
   * Version advertises the teleport version of the instance.
   *
   * @generated from field: string Version = 1;
   */
  Version: string;

  /**
   * ServerID advertises the server ID of the instance.
   *
   * @generated from field: string ServerID = 2;
   */
  ServerID: string;

  /**
   * Services advertises the currently live services of the instance. note: this is
   * distinct from the SystemRoles associated with a certificate in that a service may
   * hold a system role that is not currently in use if it was granted that role by
   * its auth token. i.e. Services is the subset of SystemRoles that are currently
   * active.
   *
   * @generated from field: repeated string Services = 3;
   */
  Services: string[];

  /**
   * Hostname is the hostname associated with the instance. This value is not required or guaranteed
   * to be unique and its validity is not enforceable (i.e. join tokens do not constrain what an
   * instance can claim its hostname to be). This value exists only to assist users in correlating
   * instance resources with hosts.
   *
   * @generated from field: string Hostname = 4;
   */
  Hostname: string;

  /**
   * ExternalUpgrader identifies the external upgrader that the instance is configured to
   * export schedules to (e.g. 'kube'). Empty if no upgrader is defined.
   *
   * @generated from field: string ExternalUpgrader = 5;
   */
  ExternalUpgrader: string;

  /**
   * ExternalUpgraderVersion identifies the external upgrader version. Empty if no upgrader is defined.
   *
   * @generated from field: string ExternalUpgraderVersion = 6;
   */
  ExternalUpgraderVersion: string;
};

/**
 * Describes the message proto.UpstreamInventoryHello.
 * Use `create(UpstreamInventoryHelloSchema)` to create a new message.
 */
export const UpstreamInventoryHelloSchema: GenMessage<UpstreamInventoryHello> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 194);

/**
 * UpstreamInventoryAgentMetadata is the message sent up the inventory control stream containing
 * metadata about the instance.
 *
 * @generated from message proto.UpstreamInventoryAgentMetadata
 */
export type UpstreamInventoryAgentMetadata = Message<"proto.UpstreamInventoryAgentMetadata"> & {
  /**
   * OS advertises the instance OS ("darwin" or "linux").
   *
   * @generated from field: string OS = 1;
   */
  OS: string;

  /**
   * OSVersion advertises the instance OS version (e.g. "ubuntu 22.04").
   *
   * @generated from field: string OSVersion = 2;
   */
  OSVersion: string;

  /**
   * HostArchitecture advertises the instance host architecture (e.g. "x86_64" or "arm64").
   *
   * @generated from field: string HostArchitecture = 3;
   */
  HostArchitecture: string;

  /**
   * GlibcVersion advertises the instance glibc version of linux instances (e.g. "2.35").
   *
   * @generated from field: string GlibcVersion = 4;
   */
  GlibcVersion: string;

  /**
   * InstallMethods advertises the install methods used for the instance (e.g. "dockerfile").
   *
   * @generated from field: repeated string InstallMethods = 5;
   */
  InstallMethods: string[];

  /**
   * ContainerRuntime advertises the container runtime for the instance, if any (e.g. "docker").
   *
   * @generated from field: string ContainerRuntime = 6;
   */
  ContainerRuntime: string;

  /**
   * ContainerOrchestrator advertises the container orchestrator for the instance, if any
   * (e.g. "kubernetes-v1.24.8-eks-ffeb93d").
   *
   * @generated from field: string ContainerOrchestrator = 7;
   */
  ContainerOrchestrator: string;

  /**
   * CloudEnvironment advertises the cloud environment for the instance, if any (e.g. "aws").
   *
   * @generated from field: string CloudEnvironment = 8;
   */
  CloudEnvironment: string;
};

/**
 * Describes the message proto.UpstreamInventoryAgentMetadata.
 * Use `create(UpstreamInventoryAgentMetadataSchema)` to create a new message.
 */
export const UpstreamInventoryAgentMetadataSchema: GenMessage<UpstreamInventoryAgentMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 195);

/**
 * DownstreamInventoryHello is the hello message sent down the inventory control stream.
 *
 * @generated from message proto.DownstreamInventoryHello
 */
export type DownstreamInventoryHello = Message<"proto.DownstreamInventoryHello"> & {
  /**
   * Version advertises the version of the auth server.
   *
   * @generated from field: string Version = 1;
   */
  Version: string;

  /**
   * ServerID advertises the server ID of the auth server.
   *
   * @generated from field: string ServerID = 2;
   */
  ServerID: string;

  /**
   * SupportedCapabilities advertises the supported features of the auth server.
   *
   * @generated from field: proto.DownstreamInventoryHello.SupportedCapabilities Capabilities = 3;
   */
  Capabilities?: DownstreamInventoryHello_SupportedCapabilities;
};

/**
 * Describes the message proto.DownstreamInventoryHello.
 * Use `create(DownstreamInventoryHelloSchema)` to create a new message.
 */
export const DownstreamInventoryHelloSchema: GenMessage<DownstreamInventoryHello> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 196);

/**
 * SupportedCapabilities indicate which features of the ICS that
 * the connect auth server supports. This allows agents to determine
 * how they should interact with the auth server to maintain compatibility.
 *
 * @generated from message proto.DownstreamInventoryHello.SupportedCapabilities
 */
export type DownstreamInventoryHello_SupportedCapabilities = Message<"proto.DownstreamInventoryHello.SupportedCapabilities"> & {
  /**
   * ProxyHeartbeats indicates the ICS supports heartbeating proxy servers.
   *
   * @generated from field: bool ProxyHeartbeats = 1;
   */
  ProxyHeartbeats: boolean;

  /**
   * ProxyCleanup indicates the ICS supports deleting proxies when UpstreamInventoryGoodbye.DeleteResources is set.
   *
   * @generated from field: bool ProxyCleanup = 2;
   */
  ProxyCleanup: boolean;

  /**
   * ProxyHeartbeats indicates the ICS supports heartbeating proxy servers.
   *
   * @generated from field: bool AuthHeartbeats = 3;
   */
  AuthHeartbeats: boolean;

  /**
   * ProxyCleanup indicates the ICS supports deleting proxies when UpstreamInventoryGoodbye.DeleteResources is set.
   *
   * @generated from field: bool AuthCleanup = 4;
   */
  AuthCleanup: boolean;

  /**
   * NodeHeartbeats indicates the ICS supports heartbeating ssh servers.
   *
   * @generated from field: bool NodeHeartbeats = 5;
   */
  NodeHeartbeats: boolean;

  /**
   * NodeCleanup indicates the ICS supports deleting nodes when UpstreamInventoryGoodbye.DeleteResources is set.
   *
   * @generated from field: bool NodeCleanup = 6;
   */
  NodeCleanup: boolean;

  /**
   * AppHeartbeats indicates the ICS supports heartbeating app servers.
   *
   * @generated from field: bool AppHeartbeats = 7;
   */
  AppHeartbeats: boolean;

  /**
   * AppCleanup indicates the ICS supports deleting apps when UpstreamInventoryGoodbye.DeleteResources is set.
   *
   * @generated from field: bool AppCleanup = 8;
   */
  AppCleanup: boolean;

  /**
   * DatabaseHeartbeats indicates the ICS supports heartbeating databases.
   *
   * @generated from field: bool DatabaseHeartbeats = 9;
   */
  DatabaseHeartbeats: boolean;

  /**
   * DatabaseCleanup indicates the ICS supports deleting databases when UpstreamInventoryGoodbye.DeleteResources is set.
   *
   * @generated from field: bool DatabaseCleanup = 10;
   */
  DatabaseCleanup: boolean;

  /**
   * DatabaseServiceHeartbeats indicates the ICS supports heartbeating databse services.
   *
   * @generated from field: bool DatabaseServiceHeartbeats = 11;
   */
  DatabaseServiceHeartbeats: boolean;

  /**
   * DatabaseServiceCleanup indicates the ICS supports deleting database services when UpstreamInventoryGoodbye.DeleteResources is set.
   *
   * @generated from field: bool DatabaseServiceCleanup = 12;
   */
  DatabaseServiceCleanup: boolean;

  /**
   * WindowsDesktopHeartbeats indicates the ICS supports heartbeating windows desktop servers.
   *
   * @generated from field: bool WindowsDesktopHeartbeats = 13;
   */
  WindowsDesktopHeartbeats: boolean;

  /**
   * WindowsDesktopCleanup indicates the ICS supports deleting windows desktops when UpstreamInventoryGoodbye.DeleteResources is set.
   *
   * @generated from field: bool WindowsDesktopCleanup = 14;
   */
  WindowsDesktopCleanup: boolean;

  /**
   * WindowsDesktopHeartbeats indicates the ICS supports heartbeating windows desktop services.
   *
   * @generated from field: bool WindowsDesktopServiceHeartbeats = 15;
   */
  WindowsDesktopServiceHeartbeats: boolean;

  /**
   * WindowsDesktopCleanup indicates the ICS supports deleting windows desktop services when UpstreamInventoryGoodbye.DeleteResources is set.
   *
   * @generated from field: bool WindowsDesktopServiceCleanup = 16;
   */
  WindowsDesktopServiceCleanup: boolean;

  /**
   * KubernetesHeartbeats indicates the ICS supports heartbeating kubernetes clusters.
   *
   * @generated from field: bool KubernetesHeartbeats = 17;
   */
  KubernetesHeartbeats: boolean;

  /**
   * KubernetesCleanup indicates the ICS supports deleting kubernetes clusters when UpstreamInventoryGoodbye.DeleteResources is set.
   *
   * @generated from field: bool KubernetesCleanup = 18;
   */
  KubernetesCleanup: boolean;
};

/**
 * Describes the message proto.DownstreamInventoryHello.SupportedCapabilities.
 * Use `create(DownstreamInventoryHello_SupportedCapabilitiesSchema)` to create a new message.
 */
export const DownstreamInventoryHello_SupportedCapabilitiesSchema: GenMessage<DownstreamInventoryHello_SupportedCapabilities> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 196, 0);

/**
 * InventoryUpdateLabelsRequest is used to request that a specified instance
 * update its labels.
 *
 * @generated from message proto.InventoryUpdateLabelsRequest
 */
export type InventoryUpdateLabelsRequest = Message<"proto.InventoryUpdateLabelsRequest"> & {
  /**
   * ServerID advertises the server ID of the instance.
   *
   * @generated from field: string ServerID = 1;
   */
  ServerID: string;

  /**
   * Kind is the type of service to update labels for.
   *
   * @generated from field: proto.LabelUpdateKind Kind = 2;
   */
  Kind: LabelUpdateKind;

  /**
   * Labels is the new set of labels for the instance.
   *
   * @generated from field: map<string, string> Labels = 3;
   */
  Labels: { [key: string]: string };
};

/**
 * Describes the message proto.InventoryUpdateLabelsRequest.
 * Use `create(InventoryUpdateLabelsRequestSchema)` to create a new message.
 */
export const InventoryUpdateLabelsRequestSchema: GenMessage<InventoryUpdateLabelsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 197);

/**
 * DownstreamInventoryUpdateLabels is the message sent down the inventory
 * control stream to update the instance's labels.
 *
 * @generated from message proto.DownstreamInventoryUpdateLabels
 */
export type DownstreamInventoryUpdateLabels = Message<"proto.DownstreamInventoryUpdateLabels"> & {
  /**
   * Kind is the type of service to update labels for.
   *
   * @generated from field: proto.LabelUpdateKind Kind = 1;
   */
  Kind: LabelUpdateKind;

  /**
   * Labels is the new set of labels for the instance.
   *
   * @generated from field: map<string, string> Labels = 2;
   */
  Labels: { [key: string]: string };
};

/**
 * Describes the message proto.DownstreamInventoryUpdateLabels.
 * Use `create(DownstreamInventoryUpdateLabelsSchema)` to create a new message.
 */
export const DownstreamInventoryUpdateLabelsSchema: GenMessage<DownstreamInventoryUpdateLabels> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 198);

/**
 * InventoryHeartbeat announces information about instance state.
 *
 * @generated from message proto.InventoryHeartbeat
 */
export type InventoryHeartbeat = Message<"proto.InventoryHeartbeat"> & {
  /**
   * SSHServer is a complete ssh server spec to be heartbeated (note: the full spec is heartbeated
   * in the interest of simple conversion from the old logic of heartbeating via UpsertNode, but
   * we should be able to cut down on network usage fairly significantly by moving static values
   * to the hello message and only heartbeating dynamic values here).
   *
   * @generated from field: types.ServerV2 SSHServer = 1;
   */
  SSHServer?: ServerV2;

  /**
   * AppServer is a complete app server spec to be heartbeated.
   *
   * @generated from field: types.AppServerV3 AppServer = 2;
   */
  AppServer?: AppServerV3;

  /**
   * DatabaseServer is a complete db server spec to be heartbeated.
   *
   * @generated from field: types.DatabaseServerV3 DatabaseServer = 3;
   */
  DatabaseServer?: DatabaseServerV3;

  /**
   * KubeServer is a complete kube server spec to be heartbeated.
   *
   * @generated from field: types.KubernetesServerV3 KubernetesServer = 4;
   */
  KubernetesServer?: KubernetesServerV3;
};

/**
 * Describes the message proto.InventoryHeartbeat.
 * Use `create(InventoryHeartbeatSchema)` to create a new message.
 */
export const InventoryHeartbeatSchema: GenMessage<InventoryHeartbeat> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 199);

/**
 * UpstreamInventoryGoodbye informs the upstream service that instance
 * is terminating
 *
 * @generated from message proto.UpstreamInventoryGoodbye
 */
export type UpstreamInventoryGoodbye = Message<"proto.UpstreamInventoryGoodbye"> & {
  /**
   * DeleteResources indicates that any heartbeats received from
   * the instance should be terminated when the stream is closed.
   *
   * @generated from field: bool DeleteResources = 1;
   */
  DeleteResources: boolean;
};

/**
 * Describes the message proto.UpstreamInventoryGoodbye.
 * Use `create(UpstreamInventoryGoodbyeSchema)` to create a new message.
 */
export const UpstreamInventoryGoodbyeSchema: GenMessage<UpstreamInventoryGoodbye> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 200);

/**
 * InventoryStatusRequest requests inventory status info.
 *
 * @generated from message proto.InventoryStatusRequest
 */
export type InventoryStatusRequest = Message<"proto.InventoryStatusRequest"> & {
  /**
   * Connected requests summary of the inventory control streams registered with
   * the auth server that handles the request.
   *
   * @generated from field: bool Connected = 1;
   */
  Connected: boolean;
};

/**
 * Describes the message proto.InventoryStatusRequest.
 * Use `create(InventoryStatusRequestSchema)` to create a new message.
 */
export const InventoryStatusRequestSchema: GenMessage<InventoryStatusRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 201);

/**
 * InventoryStatusSummary is the status summary returned by the GetInventoryStatus rpc.
 *
 * @generated from message proto.InventoryStatusSummary
 */
export type InventoryStatusSummary = Message<"proto.InventoryStatusSummary"> & {
  /**
   * Connected is a summary of the instances connected to the current auth server.  Only set if
   * the Connected flag in the status request is true.
   *
   * @generated from field: repeated proto.UpstreamInventoryHello Connected = 1;
   */
  Connected: UpstreamInventoryHello[];

  /**
   * InstanceCount is the total number of instance resources aggregated.
   *
   * @generated from field: uint32 InstanceCount = 2;
   */
  InstanceCount: number;

  /**
   * VersionCounts aggregates unique version counts.
   *
   * @generated from field: map<string, uint32> VersionCounts = 3;
   */
  VersionCounts: { [key: string]: number };

  /**
   * UpgraderCounts aggregates the unique upgrader counts.
   *
   * @generated from field: map<string, uint32> UpgraderCounts = 4;
   */
  UpgraderCounts: { [key: string]: number };

  /**
   * ServiceCounts aggregates the number of services.
   *
   * @generated from field: map<string, uint32> ServiceCounts = 5;
   */
  ServiceCounts: { [key: string]: number };
};

/**
 * Describes the message proto.InventoryStatusSummary.
 * Use `create(InventoryStatusSummarySchema)` to create a new message.
 */
export const InventoryStatusSummarySchema: GenMessage<InventoryStatusSummary> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 202);

/**
 * InventoryConnectedServiceCountsRequest requests inventory connected service counts.
 *
 * @generated from message proto.InventoryConnectedServiceCountsRequest
 */
export type InventoryConnectedServiceCountsRequest = Message<"proto.InventoryConnectedServiceCountsRequest"> & {
};

/**
 * Describes the message proto.InventoryConnectedServiceCountsRequest.
 * Use `create(InventoryConnectedServiceCountsRequestSchema)` to create a new message.
 */
export const InventoryConnectedServiceCountsRequestSchema: GenMessage<InventoryConnectedServiceCountsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 203);

/**
 * InventoryConnectedServiceCounts is the connected service counts seen in the inventory.
 *
 * @generated from message proto.InventoryConnectedServiceCounts
 */
export type InventoryConnectedServiceCounts = Message<"proto.InventoryConnectedServiceCounts"> & {
  /**
   * ServiceCounts is the count of each connected service seen in the inventory.
   *
   * @generated from field: map<string, uint64> ServiceCounts = 1;
   */
  ServiceCounts: { [key: string]: bigint };
};

/**
 * Describes the message proto.InventoryConnectedServiceCounts.
 * Use `create(InventoryConnectedServiceCountsSchema)` to create a new message.
 */
export const InventoryConnectedServiceCountsSchema: GenMessage<InventoryConnectedServiceCounts> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 204);

/**
 * InventoryPingRequest is used to request that the specified server be sent an inventory ping
 * if it has a control stream registered.
 *
 * @generated from message proto.InventoryPingRequest
 */
export type InventoryPingRequest = Message<"proto.InventoryPingRequest"> & {
  /**
   * ServerID is the ID of the instance to ping.
   *
   * @generated from field: string ServerID = 1;
   */
  ServerID: string;

  /**
   * ControlLog forces the ping to use the standard "commit then act" model of control log synchronization
   * for the ping. This significantly increases the amount of time it takes for the ping request to
   * complete, but is useful for testing/debugging control log issues.
   *
   * @generated from field: bool ControlLog = 2;
   */
  ControlLog: boolean;
};

/**
 * Describes the message proto.InventoryPingRequest.
 * Use `create(InventoryPingRequestSchema)` to create a new message.
 */
export const InventoryPingRequestSchema: GenMessage<InventoryPingRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 205);

/**
 * InventoryPingResponse returns the result of an inventory ping initiated via an
 * inventory ping request.
 *
 * @generated from message proto.InventoryPingResponse
 */
export type InventoryPingResponse = Message<"proto.InventoryPingResponse"> & {
  /**
   * @generated from field: int64 Duration = 1;
   */
  Duration: bigint;
};

/**
 * Describes the message proto.InventoryPingResponse.
 * Use `create(InventoryPingResponseSchema)` to create a new message.
 */
export const InventoryPingResponseSchema: GenMessage<InventoryPingResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 206);

/**
 * GetClusterAlertsResponse contains the result of a cluster alerts query.
 *
 * @generated from message proto.GetClusterAlertsResponse
 */
export type GetClusterAlertsResponse = Message<"proto.GetClusterAlertsResponse"> & {
  /**
   * Alerts is the list of matching alerts.
   *
   * @generated from field: repeated types.ClusterAlert Alerts = 1;
   */
  Alerts: ClusterAlert[];
};

/**
 * Describes the message proto.GetClusterAlertsResponse.
 * Use `create(GetClusterAlertsResponseSchema)` to create a new message.
 */
export const GetClusterAlertsResponseSchema: GenMessage<GetClusterAlertsResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 207);

/**
 * GetAlertAcksRequest returns the currently acknowledged alerts
 *
 * GetAlertAcksRequest currently takes no params
 *
 * @generated from message proto.GetAlertAcksRequest
 */
export type GetAlertAcksRequest = Message<"proto.GetAlertAcksRequest"> & {
};

/**
 * Describes the message proto.GetAlertAcksRequest.
 * Use `create(GetAlertAcksRequestSchema)` to create a new message.
 */
export const GetAlertAcksRequestSchema: GenMessage<GetAlertAcksRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 208);

/**
 * GetAlertAcksResponse contains the set of active cluster alert
 * acknowledgements for this cluster.
 *
 * @generated from message proto.GetAlertAcksResponse
 */
export type GetAlertAcksResponse = Message<"proto.GetAlertAcksResponse"> & {
  /**
   * @generated from field: repeated types.AlertAcknowledgement Acks = 1;
   */
  Acks: AlertAcknowledgement[];
};

/**
 * Describes the message proto.GetAlertAcksResponse.
 * Use `create(GetAlertAcksResponseSchema)` to create a new message.
 */
export const GetAlertAcksResponseSchema: GenMessage<GetAlertAcksResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 209);

/**
 * ClearAlertAcksRequest specifies alerts acknowledgements to clear.
 *
 * @generated from message proto.ClearAlertAcksRequest
 */
export type ClearAlertAcksRequest = Message<"proto.ClearAlertAcksRequest"> & {
  /**
   * AlertID deletes an acknowledgement by ID. Deletes all acknowledgements if
   * the id is '*'.
   *
   * @generated from field: string AlertID = 1;
   */
  AlertID: string;
};

/**
 * Describes the message proto.ClearAlertAcksRequest.
 * Use `create(ClearAlertAcksRequestSchema)` to create a new message.
 */
export const ClearAlertAcksRequestSchema: GenMessage<ClearAlertAcksRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 210);

/**
 * UpsertClusterAlertRequest is used to create a cluster alert.
 *
 * @generated from message proto.UpsertClusterAlertRequest
 */
export type UpsertClusterAlertRequest = Message<"proto.UpsertClusterAlertRequest"> & {
  /**
   * Alert is the alert being created.
   *
   * @generated from field: types.ClusterAlert Alert = 1;
   */
  Alert?: ClusterAlert;
};

/**
 * Describes the message proto.UpsertClusterAlertRequest.
 * Use `create(UpsertClusterAlertRequestSchema)` to create a new message.
 */
export const UpsertClusterAlertRequestSchema: GenMessage<UpsertClusterAlertRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 211);

/**
 * GetConnectionDiagnosticRequest is a request to return a connection diagnostic.
 *
 * @generated from message proto.GetConnectionDiagnosticRequest
 */
export type GetConnectionDiagnosticRequest = Message<"proto.GetConnectionDiagnosticRequest"> & {
  /**
   * Name is the name of the connection diagnostic.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;
};

/**
 * Describes the message proto.GetConnectionDiagnosticRequest.
 * Use `create(GetConnectionDiagnosticRequestSchema)` to create a new message.
 */
export const GetConnectionDiagnosticRequestSchema: GenMessage<GetConnectionDiagnosticRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 212);

/**
 * AppendDiagnosticTraceRequest is a request to append a trace into a DiagnosticConnection.
 *
 * @generated from message proto.AppendDiagnosticTraceRequest
 */
export type AppendDiagnosticTraceRequest = Message<"proto.AppendDiagnosticTraceRequest"> & {
  /**
   * Name is the name of the connection diagnostic.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;

  /**
   * Trace is the ConnectionDiagnosticTrace to append into the DiagnosticConnection.
   *
   * @generated from field: types.ConnectionDiagnosticTrace Trace = 2;
   */
  Trace?: ConnectionDiagnosticTrace;
};

/**
 * Describes the message proto.AppendDiagnosticTraceRequest.
 * Use `create(AppendDiagnosticTraceRequestSchema)` to create a new message.
 */
export const AppendDiagnosticTraceRequestSchema: GenMessage<AppendDiagnosticTraceRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 213);

/**
 * SubmitUsageEventRequest is used to submit an external usage event.
 *
 * @generated from message proto.SubmitUsageEventRequest
 */
export type SubmitUsageEventRequest = Message<"proto.SubmitUsageEventRequest"> & {
  /**
   * @generated from field: teleport.usageevents.v1.UsageEventOneOf Event = 1;
   */
  Event?: UsageEventOneOf;
};

/**
 * Describes the message proto.SubmitUsageEventRequest.
 * Use `create(SubmitUsageEventRequestSchema)` to create a new message.
 */
export const SubmitUsageEventRequestSchema: GenMessage<SubmitUsageEventRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 214);

/**
 * GetLicenseEvent is used to submit an external usage event.
 *
 * GetLicense currently takes no params
 *
 * @generated from message proto.GetLicenseRequest
 */
export type GetLicenseRequest = Message<"proto.GetLicenseRequest"> & {
};

/**
 * Describes the message proto.GetLicenseRequest.
 * Use `create(GetLicenseRequestSchema)` to create a new message.
 */
export const GetLicenseRequestSchema: GenMessage<GetLicenseRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 215);

/**
 * GetLicenseEvent is used to submit an external usage event.
 *
 * ListReleases currently takes no params
 *
 * @generated from message proto.ListReleasesRequest
 */
export type ListReleasesRequest = Message<"proto.ListReleasesRequest"> & {
};

/**
 * Describes the message proto.ListReleasesRequest.
 * Use `create(ListReleasesRequestSchema)` to create a new message.
 */
export const ListReleasesRequestSchema: GenMessage<ListReleasesRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 216);

/**
 * CreateTokenV2Request is used with CreateTokenV2 to create tokens in the
 * backend.
 *
 * @generated from message proto.CreateTokenV2Request
 */
export type CreateTokenV2Request = Message<"proto.CreateTokenV2Request"> & {
  /**
   * @generated from oneof proto.CreateTokenV2Request.Token
   */
  Token: {
    /**
     * @generated from field: types.ProvisionTokenV2 V2 = 1;
     */
    value: ProvisionTokenV2;
    case: "V2";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message proto.CreateTokenV2Request.
 * Use `create(CreateTokenV2RequestSchema)` to create a new message.
 */
export const CreateTokenV2RequestSchema: GenMessage<CreateTokenV2Request> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 217);

/**
 * UpsertTokenV2Request is used with UpsertTokenV2 to upsert tokens in the
 * backend.
 *
 * @generated from message proto.UpsertTokenV2Request
 */
export type UpsertTokenV2Request = Message<"proto.UpsertTokenV2Request"> & {
  /**
   * @generated from oneof proto.UpsertTokenV2Request.Token
   */
  Token: {
    /**
     * @generated from field: types.ProvisionTokenV2 V2 = 1;
     */
    value: ProvisionTokenV2;
    case: "V2";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message proto.UpsertTokenV2Request.
 * Use `create(UpsertTokenV2RequestSchema)` to create a new message.
 */
export const UpsertTokenV2RequestSchema: GenMessage<UpsertTokenV2Request> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 218);

/**
 * Request for GetHeadlessAuthentication.
 *
 * @generated from message proto.GetHeadlessAuthenticationRequest
 */
export type GetHeadlessAuthenticationRequest = Message<"proto.GetHeadlessAuthenticationRequest"> & {
  /**
   * ID is the headless authentication id.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message proto.GetHeadlessAuthenticationRequest.
 * Use `create(GetHeadlessAuthenticationRequestSchema)` to create a new message.
 */
export const GetHeadlessAuthenticationRequestSchema: GenMessage<GetHeadlessAuthenticationRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 219);

/**
 * Request for UpdateHeadlessAuthenticationState.
 *
 * @generated from message proto.UpdateHeadlessAuthenticationStateRequest
 */
export type UpdateHeadlessAuthenticationStateRequest = Message<"proto.UpdateHeadlessAuthenticationStateRequest"> & {
  /**
   * ID is the headless authentication id.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * State is the state that the request will be updated to.
   * MFA verification is required if State=APPROVED.
   *
   * @generated from field: types.HeadlessAuthenticationState state = 2;
   */
  state: HeadlessAuthenticationState;

  /**
   * MFAResponse is an mfa challenge response used to verify the user.
   * MFA Auth Challenges can be created for a user with the
   * authservice.GenerateAuthenticateChallenge rpc.
   *
   * @generated from field: proto.MFAAuthenticateResponse mfa_response = 3;
   */
  mfaResponse?: MFAAuthenticateResponse;
};

/**
 * Describes the message proto.UpdateHeadlessAuthenticationStateRequest.
 * Use `create(UpdateHeadlessAuthenticationStateRequestSchema)` to create a new message.
 */
export const UpdateHeadlessAuthenticationStateRequestSchema: GenMessage<UpdateHeadlessAuthenticationStateRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 220);

/**
 * ExportUpgradeWindowsRequest encodes parameters for loading the
 * upgrader-facing representations of upcoming agent maintenance windows.
 *
 * @generated from message proto.ExportUpgradeWindowsRequest
 */
export type ExportUpgradeWindowsRequest = Message<"proto.ExportUpgradeWindowsRequest"> & {
  /**
   * TeleportVersion is the version of the teleport client making the request.
   *
   * @generated from field: string TeleportVersion = 1;
   */
  TeleportVersion: string;

  /**
   * UpgraderKind represents the kind of upgrader the schedule is intended for.
   *
   * @generated from field: string UpgraderKind = 2;
   */
  UpgraderKind: string;
};

/**
 * Describes the message proto.ExportUpgradeWindowsRequest.
 * Use `create(ExportUpgradeWindowsRequestSchema)` to create a new message.
 */
export const ExportUpgradeWindowsRequestSchema: GenMessage<ExportUpgradeWindowsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 221);

/**
 * ExportUpgradeWindowsResponse encodes an upgrader-facing representation
 * of upcoming agent maintenance windows. Teleport agents periodically export these
 * schedules to external upgraders as part of the externally-managed upgrade system.
 *
 * @generated from message proto.ExportUpgradeWindowsResponse
 */
export type ExportUpgradeWindowsResponse = Message<"proto.ExportUpgradeWindowsResponse"> & {
  /**
   * CanonicalSchedule is the teleport-facing schedule repr.
   *
   * @generated from field: types.AgentUpgradeSchedule CanonicalSchedule = 1;
   */
  CanonicalSchedule?: AgentUpgradeSchedule;

  /**
   * KubeControllerSchedule encodes upcoming upgrade upgrade windows in a format known
   * to the kube upgrade controller. Teleport agents should treat this value as an
   * opaque blob.
   *
   * @generated from field: string KubeControllerSchedule = 2;
   */
  KubeControllerSchedule: string;

  /**
   * SystemdUnitSchedule encodes the upcoming upgrade windows in a format known to
   * the teleport-upgrade systemd unit. Teleport agents should treat this value as an
   * opaque blob.
   *
   * @generated from field: string SystemdUnitSchedule = 3;
   */
  SystemdUnitSchedule: string;
};

/**
 * Describes the message proto.ExportUpgradeWindowsResponse.
 * Use `create(ExportUpgradeWindowsResponseSchema)` to create a new message.
 */
export const ExportUpgradeWindowsResponseSchema: GenMessage<ExportUpgradeWindowsResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 222);

/**
 * ListAccessRequestsRequest encodes the parameters for a paginated access request lookup.
 *
 * @generated from message proto.ListAccessRequestsRequest
 */
export type ListAccessRequestsRequest = Message<"proto.ListAccessRequestsRequest"> & {
  /**
   * Filter matches access requests.
   *
   * @generated from field: types.AccessRequestFilter Filter = 1;
   */
  Filter?: AccessRequestFilter;

  /**
   * Sort determines the sort order of returned access requests.
   *
   * @generated from field: proto.AccessRequestSort Sort = 2;
   */
  Sort: AccessRequestSort;

  /**
   * Descending requests descending sort order if true (teleport APIs generally always
   * defaults to ascending sort order since that is the native sort order used in the
   * teleport backend).
   *
   * @generated from field: bool Descending = 3;
   */
  Descending: boolean;

  /**
   * Limit is the maximum amount of requests per page.
   *
   * @generated from field: int32 Limit = 4;
   */
  Limit: number;

  /**
   * StartKey is used to resume a query in order to enable pagination.
   * If the previous response had NextKey set then this should be
   * set to its value. Otherwise leave empty.
   *
   * @generated from field: string StartKey = 5;
   */
  StartKey: string;
};

/**
 * Describes the message proto.ListAccessRequestsRequest.
 * Use `create(ListAccessRequestsRequestSchema)` to create a new message.
 */
export const ListAccessRequestsRequestSchema: GenMessage<ListAccessRequestsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 223);

/**
 * ListAccessRequestsResponse is a page of access requests.
 *
 * @generated from message proto.ListAccessRequestsResponse
 */
export type ListAccessRequestsResponse = Message<"proto.ListAccessRequestsResponse"> & {
  /**
   * AccessRequests is a page of access requests.
   *
   * @generated from field: repeated types.AccessRequestV3 AccessRequests = 1;
   */
  AccessRequests: AccessRequestV3[];

  /**
   * NextKey will serve as the StartKey for the next page of requests.
   *
   * @generated from field: string NextKey = 2;
   */
  NextKey: string;
};

/**
 * Describes the message proto.ListAccessRequestsResponse.
 * Use `create(ListAccessRequestsResponseSchema)` to create a new message.
 */
export const ListAccessRequestsResponseSchema: GenMessage<ListAccessRequestsResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 224);

/**
 * AccessRequestAllowedPromotionRequest is the request to AccessRequestAllowedPromotion RPC call.
 *
 * @generated from message proto.AccessRequestAllowedPromotionRequest
 */
export type AccessRequestAllowedPromotionRequest = Message<"proto.AccessRequestAllowedPromotionRequest"> & {
  /**
   * AccessRequest is the access request to get promotions for.
   *
   * @generated from field: string accessRequestID = 1;
   */
  accessRequestID: string;
};

/**
 * Describes the message proto.AccessRequestAllowedPromotionRequest.
 * Use `create(AccessRequestAllowedPromotionRequestSchema)` to create a new message.
 */
export const AccessRequestAllowedPromotionRequestSchema: GenMessage<AccessRequestAllowedPromotionRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 225);

/**
 * AccessRequestAllowedPromotionResponse is the response to AccessRequestAllowedPromotion RPC call.
 *
 * @generated from message proto.AccessRequestAllowedPromotionResponse
 */
export type AccessRequestAllowedPromotionResponse = Message<"proto.AccessRequestAllowedPromotionResponse"> & {
  /**
   * allowedPromotions is the list of allowed promotions for the access request.
   *
   * @generated from field: types.AccessRequestAllowedPromotions allowedPromotions = 1;
   */
  allowedPromotions?: AccessRequestAllowedPromotions;
};

/**
 * Describes the message proto.AccessRequestAllowedPromotionResponse.
 * Use `create(AccessRequestAllowedPromotionResponseSchema)` to create a new message.
 */
export const AccessRequestAllowedPromotionResponseSchema: GenMessage<AccessRequestAllowedPromotionResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_authservice, 226);

/**
 * ProductType is the type of product.
 *
 * @generated from enum proto.ProductType
 */
export enum ProductType {
  /**
   * @generated from enum value: PRODUCT_TYPE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * PRODUCT_TYPE_TEAM is Teleport Team product.
   *
   * @generated from enum value: PRODUCT_TYPE_TEAM = 1;
   */
  TEAM = 1,

  /**
   * PRODUCT_TYPE_EUB is Teleport Enterprise Usage Based product.
   *
   * @generated from enum value: PRODUCT_TYPE_EUB = 2;
   */
  EUB = 2,
}

/**
 * Describes the enum proto.ProductType.
 */
export const ProductTypeSchema: GenEnum<ProductType> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_client_proto_authservice, 0);

/**
 * SupportType if the type of support offered.
 *
 * @generated from enum proto.SupportType
 */
export enum SupportType {
  /**
   * @generated from enum value: SUPPORT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * SUPPORT_TYPE_FREE is the free tier support
   *
   * @generated from enum value: SUPPORT_TYPE_FREE = 1;
   */
  FREE = 1,

  /**
   * SUPPORT_TYPE_PREMIUM is the premium tier support
   *
   * @generated from enum value: SUPPORT_TYPE_PREMIUM = 2;
   */
  PREMIUM = 2,
}

/**
 * Describes the enum proto.SupportType.
 */
export const SupportTypeSchema: GenEnum<SupportType> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_client_proto_authservice, 1);

/**
 * DeviceType describes supported MFA device types.
 *
 * @generated from enum proto.DeviceType
 */
export enum DeviceType {
  /**
   * @generated from enum value: DEVICE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * TOTP is a Time-based One-Time Password device.
   *
   * @generated from enum value: DEVICE_TYPE_TOTP = 1;
   */
  TOTP = 1,

  /**
   * Webauthn is a device compatible with the Web Authentication
   * specification, registered via Webauthn APIs.
   * Supports various kinds of devices: U2F/CTAP1, CTAP2, platform
   * authenticators (Touch ID), etc.
   *
   * @generated from enum value: DEVICE_TYPE_WEBAUTHN = 3;
   */
  WEBAUTHN = 3,
}

/**
 * Describes the enum proto.DeviceType.
 */
export const DeviceTypeSchema: GenEnum<DeviceType> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_client_proto_authservice, 2);

/**
 * @generated from enum proto.DeviceUsage
 */
export enum DeviceUsage {
  /**
   * @generated from enum value: DEVICE_USAGE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Device intended for MFA use, but not for passwordless.
   * Allows both FIDO and FIDO2 devices.
   * Resident keys not required.
   *
   * @generated from enum value: DEVICE_USAGE_MFA = 1;
   */
  MFA = 1,

  /**
   * Device intended for both MFA and passwordless.
   * Requires a FIDO2 device and takes a resident key slot.
   *
   * @generated from enum value: DEVICE_USAGE_PASSWORDLESS = 2;
   */
  PASSWORDLESS = 2,
}

/**
 * Describes the enum proto.DeviceUsage.
 */
export const DeviceUsageSchema: GenEnum<DeviceUsage> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_client_proto_authservice, 3);

/**
 * MFARequired indicates if MFA is required to access a
 * resource.
 *
 * @generated from enum proto.MFARequired
 */
export enum MFARequired {
  /**
   * Indicates the client/server are either old and don't support
   * checking if MFA is required during the ceremony or that there
   * was a catastrophic error checking RBAC to determine if completing
   * an MFA ceremony will grant access to a resource.
   *
   * @generated from enum value: MFA_REQUIRED_UNSPECIFIED = 0;
   */
  MFA_REQUIRED_UNSPECIFIED = 0,

  /**
   * Completing an MFA ceremony will grant access to a resource.
   *
   * @generated from enum value: MFA_REQUIRED_YES = 1;
   */
  MFA_REQUIRED_YES = 1,

  /**
   * Completing an MFA ceremony will not grant access to a resource.
   *
   * @generated from enum value: MFA_REQUIRED_NO = 2;
   */
  MFA_REQUIRED_NO = 2,
}

/**
 * Describes the enum proto.MFARequired.
 */
export const MFARequiredSchema: GenEnum<MFARequired> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_client_proto_authservice, 4);

/**
 * Order specifies any ordering of some objects as returned in regards to some aspect
 * of said objects which may be trivially ordered such as a timestamp.
 *
 * @generated from enum proto.Order
 */
export enum Order {
  /**
   * @generated from enum value: DESCENDING = 0;
   */
  DESCENDING = 0,

  /**
   * @generated from enum value: ASCENDING = 1;
   */
  ASCENDING = 1,
}

/**
 * Describes the enum proto.Order.
 */
export const OrderSchema: GenEnum<Order> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_client_proto_authservice, 5);

/**
 * LabelUpdateKind is the type of service to update labels for.
 *
 * @generated from enum proto.LabelUpdateKind
 */
export enum LabelUpdateKind {
  /**
   * SSHServer is a label update for an SSH server.
   *
   * @generated from enum value: SSHServer = 0;
   */
  SSHServer = 0,

  /**
   * SSHServerCloudLabels is a label update for an SSH server coming from a
   * cloud provider.
   *
   * @generated from enum value: SSHServerCloudLabels = 1;
   */
  SSHServerCloudLabels = 1,
}

/**
 * Describes the enum proto.LabelUpdateKind.
 */
export const LabelUpdateKindSchema: GenEnum<LabelUpdateKind> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_client_proto_authservice, 6);

/**
 * AccessRequestSort determines access request sort index.
 *
 * @generated from enum proto.AccessRequestSort
 */
export enum AccessRequestSort {
  /**
   * DEFAULT sorts access requests by their native backend index. this is currently equivalent
   * to sorting by request ID, but that is subject to change.
   *
   * @generated from enum value: DEFAULT = 0;
   */
  DEFAULT = 0,

  /**
   * CREATED sorts access requests by creation time (this is the sort index typically used in
   * user interfaces since most users are looking for recently-created requests).
   *
   * @generated from enum value: CREATED = 1;
   */
  CREATED = 1,

  /**
   * STATE sorts access requests by their state (PENDING, APPROVED, etc).
   *
   * @generated from enum value: STATE = 2;
   */
  STATE = 2,

  /**
   * USER sorts access requests by their creator's teleport username
   *
   * @generated from enum value: USER = 3;
   */
  USER = 3,
}

/**
 * Describes the enum proto.AccessRequestSort.
 */
export const AccessRequestSortSchema: GenEnum<AccessRequestSort> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_client_proto_authservice, 7);

/**
 * AuthService is authentication/authorization service implementation
 *
 * @generated from service proto.AuthService
 */
export const AuthService: GenService<{
  /**
   * InventoryControlStream is the per-instance stream used to advertise teleport instance
   * presence/version/etc to the auth server.
   *
   * @generated from rpc proto.AuthService.InventoryControlStream
   */
  inventoryControlStream: {
    methodKind: "bidi_streaming";
    input: typeof UpstreamInventoryOneOfSchema;
    output: typeof DownstreamInventoryOneOfSchema;
  },
  /**
   * GetInventoryStatus gets information about current instance inventory.
   *
   * @generated from rpc proto.AuthService.GetInventoryStatus
   */
  getInventoryStatus: {
    methodKind: "unary";
    input: typeof InventoryStatusRequestSchema;
    output: typeof InventoryStatusSummarySchema;
  },
  /**
   * GetInventoryConnectedServiceCounts returns the counts of each connected service seen in the inventory.
   *
   * @generated from rpc proto.AuthService.GetInventoryConnectedServiceCounts
   */
  getInventoryConnectedServiceCounts: {
    methodKind: "unary";
    input: typeof InventoryConnectedServiceCountsRequestSchema;
    output: typeof InventoryConnectedServiceCountsSchema;
  },
  /**
   * PingInventory attempts to trigger a downstream inventory ping (used in testing/debug).
   *
   * @generated from rpc proto.AuthService.PingInventory
   */
  pingInventory: {
    methodKind: "unary";
    input: typeof InventoryPingRequestSchema;
    output: typeof InventoryPingResponseSchema;
  },
  /**
   * GetInstances streams all instances matching the specified filter.
   *
   * @generated from rpc proto.AuthService.GetInstances
   */
  getInstances: {
    methodKind: "server_streaming";
    input: typeof InstanceFilterSchema;
    output: typeof InstanceV1Schema;
  },
  /**
   * GetClusterAlerts loads cluster-level alert messages.
   *
   * @generated from rpc proto.AuthService.GetClusterAlerts
   */
  getClusterAlerts: {
    methodKind: "unary";
    input: typeof GetClusterAlertsRequestSchema;
    output: typeof GetClusterAlertsResponseSchema;
  },
  /**
   * UpsertClusterAlert creates a cluster alert.
   *
   * @generated from rpc proto.AuthService.UpsertClusterAlert
   */
  upsertClusterAlert: {
    methodKind: "unary";
    input: typeof UpsertClusterAlertRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * CreateAlertAck marks a cluster alert as acknowledged.
   *
   * @generated from rpc proto.AuthService.CreateAlertAck
   */
  createAlertAck: {
    methodKind: "unary";
    input: typeof AlertAcknowledgementSchema;
    output: typeof EmptySchema;
  },
  /**
   * GetAlertAcks gets active alert ackowledgements.
   *
   * @generated from rpc proto.AuthService.GetAlertAcks
   */
  getAlertAcks: {
    methodKind: "unary";
    input: typeof GetAlertAcksRequestSchema;
    output: typeof GetAlertAcksResponseSchema;
  },
  /**
   * ClearAlertAcks clears alert acknowledgments.
   *
   * @generated from rpc proto.AuthService.ClearAlertAcks
   */
  clearAlertAcks: {
    methodKind: "unary";
    input: typeof ClearAlertAcksRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * MaintainSessionPresence establishes a channel used to continously verify the presence for a
   * session.
   *
   * @generated from rpc proto.AuthService.MaintainSessionPresence
   */
  maintainSessionPresence: {
    methodKind: "bidi_streaming";
    input: typeof PresenceMFAChallengeSendSchema;
    output: typeof MFAAuthenticateChallengeSchema;
  },
  /**
   * CreateSessionTracker creates a new session tracker resource.
   *
   * @generated from rpc proto.AuthService.CreateSessionTracker
   */
  createSessionTracker: {
    methodKind: "unary";
    input: typeof CreateSessionTrackerRequestSchema;
    output: typeof SessionTrackerV1Schema;
  },
  /**
   * GetSessionTracker fetches a session tracker resource.
   *
   * @generated from rpc proto.AuthService.GetSessionTracker
   */
  getSessionTracker: {
    methodKind: "unary";
    input: typeof GetSessionTrackerRequestSchema;
    output: typeof SessionTrackerV1Schema;
  },
  /**
   * GetActiveSessionTrackers returns a list of active sessions.
   *
   * @generated from rpc proto.AuthService.GetActiveSessionTrackers
   */
  getActiveSessionTrackers: {
    methodKind: "server_streaming";
    input: typeof EmptySchema;
    output: typeof SessionTrackerV1Schema;
  },
  /**
   * GetActiveSessionTrackersWithFilter returns a list of active sessions filtered by a filter.
   *
   * @generated from rpc proto.AuthService.GetActiveSessionTrackersWithFilter
   */
  getActiveSessionTrackersWithFilter: {
    methodKind: "server_streaming";
    input: typeof SessionTrackerFilterSchema;
    output: typeof SessionTrackerV1Schema;
  },
  /**
   * RemoveSessionTracker removes a session tracker resource.
   *
   * @generated from rpc proto.AuthService.RemoveSessionTracker
   */
  removeSessionTracker: {
    methodKind: "unary";
    input: typeof RemoveSessionTrackerRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * UpdateSessionTracker updates some state of a session tracker.
   *
   * @generated from rpc proto.AuthService.UpdateSessionTracker
   */
  updateSessionTracker: {
    methodKind: "unary";
    input: typeof UpdateSessionTrackerRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * SendKeepAlives allows node to send a stream of keep alive requests
   *
   * @generated from rpc proto.AuthService.SendKeepAlives
   */
  sendKeepAlives: {
    methodKind: "client_streaming";
    input: typeof KeepAliveSchema;
    output: typeof EmptySchema;
  },
  /**
   * WatchEvents returns a new stream of cluster events
   *
   * @generated from rpc proto.AuthService.WatchEvents
   */
  watchEvents: {
    methodKind: "server_streaming";
    input: typeof WatchSchema;
    output: typeof EventSchema;
  },
  /**
   * GetNode retrieves a node described by the given request.
   *
   * @generated from rpc proto.AuthService.GetNode
   */
  getNode: {
    methodKind: "unary";
    input: typeof ResourceInNamespaceRequestSchema;
    output: typeof ServerV2Schema;
  },
  /**
   * UpsertNode upserts a node in a backend.
   *
   * @generated from rpc proto.AuthService.UpsertNode
   */
  upsertNode: {
    methodKind: "unary";
    input: typeof ServerV2Schema;
    output: typeof KeepAliveSchema;
  },
  /**
   * DeleteNode deletes an existing node in a backend described by the given request.
   *
   * @generated from rpc proto.AuthService.DeleteNode
   */
  deleteNode: {
    methodKind: "unary";
    input: typeof ResourceInNamespaceRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllNodes deletes all nodes.
   *
   * @generated from rpc proto.AuthService.DeleteAllNodes
   */
  deleteAllNodes: {
    methodKind: "unary";
    input: typeof ResourcesInNamespaceRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * GenerateUserCerts generates a set of user certificates.
   *
   * @generated from rpc proto.AuthService.GenerateUserCerts
   */
  generateUserCerts: {
    methodKind: "unary";
    input: typeof UserCertsRequestSchema;
    output: typeof CertsSchema;
  },
  /**
   * GenerateHostCerts generates a set of host certificates.
   *
   * @generated from rpc proto.AuthService.GenerateHostCerts
   */
  generateHostCerts: {
    methodKind: "unary";
    input: typeof HostCertsRequestSchema;
    output: typeof CertsSchema;
  },
  /**
   * Deprecated: Superseded by GenerateUserCerts.
   *
   * @generated from rpc proto.AuthService.GenerateUserSingleUseCerts
   * @deprecated
   */
  generateUserSingleUseCerts: {
    methodKind: "bidi_streaming";
    input: typeof UserSingleUseCertsRequestSchema;
    output: typeof UserSingleUseCertsResponseSchema;
  },
  /**
   * GenerateOpenSSHCert signs a SSH certificate that can be used
   * to connect to Agentless nodes.
   *
   * @generated from rpc proto.AuthService.GenerateOpenSSHCert
   */
  generateOpenSSHCert: {
    methodKind: "unary";
    input: typeof OpenSSHCertRequestSchema;
    output: typeof OpenSSHCertSchema;
  },
  /**
   * IsMFARequired checks whether MFA is required to access the specified
   * target.
   *
   * @generated from rpc proto.AuthService.IsMFARequired
   */
  isMFARequired: {
    methodKind: "unary";
    input: typeof IsMFARequiredRequestSchema;
    output: typeof IsMFARequiredResponseSchema;
  },
  /**
   * GetAccessRequestsV2 gets all pending access requests.
   *
   * @generated from rpc proto.AuthService.GetAccessRequestsV2
   */
  getAccessRequestsV2: {
    methodKind: "server_streaming";
    input: typeof AccessRequestFilterSchema;
    output: typeof AccessRequestV3Schema;
  },
  /**
   * ListAccessRequests gets access requests with pagination and sorting.
   *
   * @generated from rpc proto.AuthService.ListAccessRequests
   */
  listAccessRequests: {
    methodKind: "unary";
    input: typeof ListAccessRequestsRequestSchema;
    output: typeof ListAccessRequestsResponseSchema;
  },
  /**
   * CreateAccessRequest creates a new access request.
   * Deprecated: use CreateAccessRequestV2 instead.
   * DELETE IN v15.0.0.
   *
   * @generated from rpc proto.AuthService.CreateAccessRequest
   */
  createAccessRequest: {
    methodKind: "unary";
    input: typeof AccessRequestV3Schema;
    output: typeof EmptySchema;
  },
  /**
   * CreateAccessRequestV2 creates a new access request.
   *
   * @generated from rpc proto.AuthService.CreateAccessRequestV2
   */
  createAccessRequestV2: {
    methodKind: "unary";
    input: typeof AccessRequestV3Schema;
    output: typeof AccessRequestV3Schema;
  },
  /**
   * DeleteAccessRequest deletes an access request.
   *
   * @generated from rpc proto.AuthService.DeleteAccessRequest
   */
  deleteAccessRequest: {
    methodKind: "unary";
    input: typeof RequestIDSchema;
    output: typeof EmptySchema;
  },
  /**
   * SetAccessRequestState sets the state of an access request.
   *
   * @generated from rpc proto.AuthService.SetAccessRequestState
   */
  setAccessRequestState: {
    methodKind: "unary";
    input: typeof RequestStateSetterSchema;
    output: typeof EmptySchema;
  },
  /**
   * SubmitAccessReview applies a review to a request and returns the post-application state.
   *
   * @generated from rpc proto.AuthService.SubmitAccessReview
   */
  submitAccessReview: {
    methodKind: "unary";
    input: typeof AccessReviewSubmissionSchema;
    output: typeof AccessRequestV3Schema;
  },
  /**
   * GetAccessCapabilities requests the access capabilities of a user.
   *
   * @generated from rpc proto.AuthService.GetAccessCapabilities
   */
  getAccessCapabilities: {
    methodKind: "unary";
    input: typeof AccessCapabilitiesRequestSchema;
    output: typeof AccessCapabilitiesSchema;
  },
  /**
   * GetAccessRequestAllowedPromotions returns a list of allowed promotions from an access request to an access list.
   *
   * @generated from rpc proto.AuthService.GetAccessRequestAllowedPromotions
   */
  getAccessRequestAllowedPromotions: {
    methodKind: "unary";
    input: typeof AccessRequestAllowedPromotionRequestSchema;
    output: typeof AccessRequestAllowedPromotionResponseSchema;
  },
  /**
   * GetPluginData gets all plugin data matching the supplied filter.
   *
   * @generated from rpc proto.AuthService.GetPluginData
   */
  getPluginData: {
    methodKind: "unary";
    input: typeof PluginDataFilterSchema;
    output: typeof PluginDataSeqSchema;
  },
  /**
   * UpdatePluginData updates a plugin's resource-specific datastore.
   *
   * @generated from rpc proto.AuthService.UpdatePluginData
   */
  updatePluginData: {
    methodKind: "unary";
    input: typeof PluginDataUpdateParamsSchema;
    output: typeof EmptySchema;
  },
  /**
   * Ping gets basic info about the auth server. This method is intended
   * to mimic the behavior of the proxy's Ping method, and may be used by
   * clients for verification or configuration on startup.
   *
   * @generated from rpc proto.AuthService.Ping
   */
  ping: {
    methodKind: "unary";
    input: typeof PingRequestSchema;
    output: typeof PingResponseSchema;
  },
  /**
   * GetResetPasswordToken returns a reset password token.
   *
   * @generated from rpc proto.AuthService.GetResetPasswordToken
   */
  getResetPasswordToken: {
    methodKind: "unary";
    input: typeof GetResetPasswordTokenRequestSchema;
    output: typeof UserTokenV3Schema;
  },
  /**
   * CreateResetPasswordToken resets users current password and second factors and creates a reset
   * password token.
   *
   * Only local users may be reset.
   *
   * @generated from rpc proto.AuthService.CreateResetPasswordToken
   */
  createResetPasswordToken: {
    methodKind: "unary";
    input: typeof CreateResetPasswordTokenRequestSchema;
    output: typeof UserTokenV3Schema;
  },
  /**
   * GetUser gets a user resource by name.
   *
   * Deprecated: Use [teleport.users.v1.UsersService] instead.
   *
   * @generated from rpc proto.AuthService.GetUser
   * @deprecated
   */
  getUser: {
    methodKind: "unary";
    input: typeof GetUserRequestSchema;
    output: typeof UserV2Schema;
  },
  /**
   * GetCurrentUser returns current user as seen by the server.
   * Useful especially in the context of remote clusters which perform role and trait mapping.
   *
   * Deprecated: Use [teleport.users.v1.UsersService] instead.
   *
   * @generated from rpc proto.AuthService.GetCurrentUser
   * @deprecated
   */
  getCurrentUser: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof UserV2Schema;
  },
  /**
   * GetCurrentUserRoles returns current user's roles.
   *
   * @generated from rpc proto.AuthService.GetCurrentUserRoles
   */
  getCurrentUserRoles: {
    methodKind: "server_streaming";
    input: typeof EmptySchema;
    output: typeof RoleV6Schema;
  },
  /**
   * GetUsers gets all current user resources.
   *
   * Deprecated: Use [teleport.users.v1.UsersService] instead.
   *
   * @generated from rpc proto.AuthService.GetUsers
   * @deprecated
   */
  getUsers: {
    methodKind: "server_streaming";
    input: typeof GetUsersRequestSchema;
    output: typeof UserV2Schema;
  },
  /**
   * CreateUser inserts a new user entry to a backend.
   *
   * Deprecated: Use [teleport.users.v1.UsersService] instead.
   *
   * @generated from rpc proto.AuthService.CreateUser
   * @deprecated
   */
  createUser: {
    methodKind: "unary";
    input: typeof UserV2Schema;
    output: typeof EmptySchema;
  },
  /**
   * UpdateUser updates an existing user in a backend.
   *
   * Deprecated: Use [teleport.users.v1.UsersService] instead.
   *
   * @generated from rpc proto.AuthService.UpdateUser
   * @deprecated
   */
  updateUser: {
    methodKind: "unary";
    input: typeof UserV2Schema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteUser deletes an existing user in a backend by username.
   *
   * Deprecated: Use [teleport.users.v1.UsersService] instead.
   *
   * @generated from rpc proto.AuthService.DeleteUser
   * @deprecated
   */
  deleteUser: {
    methodKind: "unary";
    input: typeof DeleteUserRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * ChangePassword allows a user to change their own password.
   *
   * Only local users may change their password.
   *
   * @generated from rpc proto.AuthService.ChangePassword
   */
  changePassword: {
    methodKind: "unary";
    input: typeof ChangePasswordRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * AcquireSemaphore acquires lease with requested resources from semaphore.
   *
   * @generated from rpc proto.AuthService.AcquireSemaphore
   */
  acquireSemaphore: {
    methodKind: "unary";
    input: typeof AcquireSemaphoreRequestSchema;
    output: typeof SemaphoreLeaseSchema;
  },
  /**
   * KeepAliveSemaphoreLease updates semaphore lease.
   *
   * @generated from rpc proto.AuthService.KeepAliveSemaphoreLease
   */
  keepAliveSemaphoreLease: {
    methodKind: "unary";
    input: typeof SemaphoreLeaseSchema;
    output: typeof EmptySchema;
  },
  /**
   * CancelSemaphoreLease cancels semaphore lease early.
   *
   * @generated from rpc proto.AuthService.CancelSemaphoreLease
   */
  cancelSemaphoreLease: {
    methodKind: "unary";
    input: typeof SemaphoreLeaseSchema;
    output: typeof EmptySchema;
  },
  /**
   * GetSemaphores returns a list of all semaphores matching the supplied filter.
   *
   * @generated from rpc proto.AuthService.GetSemaphores
   */
  getSemaphores: {
    methodKind: "unary";
    input: typeof SemaphoreFilterSchema;
    output: typeof SemaphoresSchema;
  },
  /**
   * DeleteSemaphore deletes a semaphore matching the supplied filter.
   *
   * @generated from rpc proto.AuthService.DeleteSemaphore
   */
  deleteSemaphore: {
    methodKind: "unary";
    input: typeof SemaphoreFilterSchema;
    output: typeof EmptySchema;
  },
  /**
   * EmitAuditEvent emits audit event
   *
   * @generated from rpc proto.AuthService.EmitAuditEvent
   */
  emitAuditEvent: {
    methodKind: "unary";
    input: typeof OneOfSchema;
    output: typeof EmptySchema;
  },
  /**
   * CreateAuditStream creates or resumes audit events streams
   *
   * @generated from rpc proto.AuthService.CreateAuditStream
   */
  createAuditStream: {
    methodKind: "bidi_streaming";
    input: typeof AuditStreamRequestSchema;
    output: typeof StreamStatusSchema;
  },
  /**
   * UpsertApplicationServer adds an application server.
   *
   * @generated from rpc proto.AuthService.UpsertApplicationServer
   */
  upsertApplicationServer: {
    methodKind: "unary";
    input: typeof UpsertApplicationServerRequestSchema;
    output: typeof KeepAliveSchema;
  },
  /**
   * DeleteApplicationServer removes an application server.
   *
   * @generated from rpc proto.AuthService.DeleteApplicationServer
   */
  deleteApplicationServer: {
    methodKind: "unary";
    input: typeof DeleteApplicationServerRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllApplicationServers removes all application servers.
   *
   * @generated from rpc proto.AuthService.DeleteAllApplicationServers
   */
  deleteAllApplicationServers: {
    methodKind: "unary";
    input: typeof DeleteAllApplicationServersRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * GenerateAppToken will generate a JWT token for application access.
   *
   * @generated from rpc proto.AuthService.GenerateAppToken
   */
  generateAppToken: {
    methodKind: "unary";
    input: typeof GenerateAppTokenRequestSchema;
    output: typeof GenerateAppTokenResponseSchema;
  },
  /**
   * GetAppSession gets an application web session.
   *
   * @generated from rpc proto.AuthService.GetAppSession
   */
  getAppSession: {
    methodKind: "unary";
    input: typeof GetAppSessionRequestSchema;
    output: typeof GetAppSessionResponseSchema;
  },
  /**
   * ListAppSessions gets all application web sessions.
   *
   * @generated from rpc proto.AuthService.ListAppSessions
   */
  listAppSessions: {
    methodKind: "unary";
    input: typeof ListAppSessionsRequestSchema;
    output: typeof ListAppSessionsResponseSchema;
  },
  /**
   * CreateAppSession creates an application web session. Application web
   * sessions represent a browser session the client holds.
   *
   * @generated from rpc proto.AuthService.CreateAppSession
   */
  createAppSession: {
    methodKind: "unary";
    input: typeof CreateAppSessionRequestSchema;
    output: typeof CreateAppSessionResponseSchema;
  },
  /**
   * DeleteAppSession removes an application web session.
   *
   * @generated from rpc proto.AuthService.DeleteAppSession
   */
  deleteAppSession: {
    methodKind: "unary";
    input: typeof DeleteAppSessionRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllAppSessions removes all application web sessions.
   *
   * @generated from rpc proto.AuthService.DeleteAllAppSessions
   */
  deleteAllAppSessions: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteUserAppSessions deletes all user’s application sessions.
   *
   * @generated from rpc proto.AuthService.DeleteUserAppSessions
   */
  deleteUserAppSessions: {
    methodKind: "unary";
    input: typeof DeleteUserAppSessionsRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * CreateSnowflakeSession creates web session with sub kind Snowflake used by Database access
   * Snowflake integration.
   *
   * @generated from rpc proto.AuthService.CreateSnowflakeSession
   */
  createSnowflakeSession: {
    methodKind: "unary";
    input: typeof CreateSnowflakeSessionRequestSchema;
    output: typeof CreateSnowflakeSessionResponseSchema;
  },
  /**
   * GetSnowflakeSession returns a web session with sub kind Snowflake.
   *
   * @generated from rpc proto.AuthService.GetSnowflakeSession
   */
  getSnowflakeSession: {
    methodKind: "unary";
    input: typeof GetSnowflakeSessionRequestSchema;
    output: typeof GetSnowflakeSessionResponseSchema;
  },
  /**
   * GetSnowflakeSessions gets all Snowflake web sessions.
   *
   * @generated from rpc proto.AuthService.GetSnowflakeSessions
   */
  getSnowflakeSessions: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof GetSnowflakeSessionsResponseSchema;
  },
  /**
   * DeleteSnowflakeSession removes a Snowflake web session.
   *
   * @generated from rpc proto.AuthService.DeleteSnowflakeSession
   */
  deleteSnowflakeSession: {
    methodKind: "unary";
    input: typeof DeleteSnowflakeSessionRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllSnowflakeSessions removes all Snowflake web sessions.
   *
   * @generated from rpc proto.AuthService.DeleteAllSnowflakeSessions
   */
  deleteAllSnowflakeSessions: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * CreateSAMLIdPSession creates web session with sub kind saml_idp used by the SAML IdP.
   *
   * @generated from rpc proto.AuthService.CreateSAMLIdPSession
   * @deprecated
   */
  createSAMLIdPSession: {
    methodKind: "unary";
    input: typeof CreateSAMLIdPSessionRequestSchema;
    output: typeof CreateSAMLIdPSessionResponseSchema;
  },
  /**
   * GetSAMLIdPSession returns a SAML IdP session with sub kind saml_idp.
   *
   * @generated from rpc proto.AuthService.GetSAMLIdPSession
   * @deprecated
   */
  getSAMLIdPSession: {
    methodKind: "unary";
    input: typeof GetSAMLIdPSessionRequestSchema;
    output: typeof GetSAMLIdPSessionResponseSchema;
  },
  /**
   * ListSAMLIdPSessions gets all SAML IdP sessions.
   *
   * @generated from rpc proto.AuthService.ListSAMLIdPSessions
   * @deprecated
   */
  listSAMLIdPSessions: {
    methodKind: "unary";
    input: typeof ListSAMLIdPSessionsRequestSchema;
    output: typeof ListSAMLIdPSessionsResponseSchema;
  },
  /**
   * DeleteSAMLIdPSession removes a SAML IdP session.
   *
   * @generated from rpc proto.AuthService.DeleteSAMLIdPSession
   * @deprecated
   */
  deleteSAMLIdPSession: {
    methodKind: "unary";
    input: typeof DeleteSAMLIdPSessionRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllSAMLIdPSessions removes all SAML IdP sessions.
   *
   * @generated from rpc proto.AuthService.DeleteAllSAMLIdPSessions
   * @deprecated
   */
  deleteAllSAMLIdPSessions: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteUserSAMLIdPSessions deletes all user’s SAML IdP sessions.
   *
   * @generated from rpc proto.AuthService.DeleteUserSAMLIdPSessions
   * @deprecated
   */
  deleteUserSAMLIdPSessions: {
    methodKind: "unary";
    input: typeof DeleteUserSAMLIdPSessionsRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * GetWebSession gets a web session.
   *
   * @generated from rpc proto.AuthService.GetWebSession
   */
  getWebSession: {
    methodKind: "unary";
    input: typeof GetWebSessionRequestSchema;
    output: typeof GetWebSessionResponseSchema;
  },
  /**
   * GetWebSessions gets all web sessions.
   *
   * @generated from rpc proto.AuthService.GetWebSessions
   */
  getWebSessions: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof GetWebSessionsResponseSchema;
  },
  /**
   * DeleteWebSession deletes a web session.
   *
   * @generated from rpc proto.AuthService.DeleteWebSession
   */
  deleteWebSession: {
    methodKind: "unary";
    input: typeof DeleteWebSessionRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllWebSessions deletes all web sessions.
   *
   * @generated from rpc proto.AuthService.DeleteAllWebSessions
   */
  deleteAllWebSessions: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * GetWebToken gets a web token.
   *
   * @generated from rpc proto.AuthService.GetWebToken
   */
  getWebToken: {
    methodKind: "unary";
    input: typeof GetWebTokenRequestSchema;
    output: typeof GetWebTokenResponseSchema;
  },
  /**
   * GetWebTokens gets all web tokens.
   *
   * @generated from rpc proto.AuthService.GetWebTokens
   */
  getWebTokens: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof GetWebTokensResponseSchema;
  },
  /**
   * DeleteWebToken deletes a web token.
   *
   * @generated from rpc proto.AuthService.DeleteWebToken
   */
  deleteWebToken: {
    methodKind: "unary";
    input: typeof DeleteWebTokenRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllWebTokens deletes all web tokens.
   *
   * @generated from rpc proto.AuthService.DeleteAllWebTokens
   */
  deleteAllWebTokens: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * UpdateRemoteCluster updates remote cluster
   *
   * @generated from rpc proto.AuthService.UpdateRemoteCluster
   */
  updateRemoteCluster: {
    methodKind: "unary";
    input: typeof RemoteClusterV3Schema;
    output: typeof EmptySchema;
  },
  /**
   * UpsertKubernetesServer adds or updates a kubernetes server.
   *
   * @generated from rpc proto.AuthService.UpsertKubernetesServer
   */
  upsertKubernetesServer: {
    methodKind: "unary";
    input: typeof UpsertKubernetesServerRequestSchema;
    output: typeof KeepAliveSchema;
  },
  /**
   * DeleteKubernetesServer removes a kubernetes server.
   *
   * @generated from rpc proto.AuthService.DeleteKubernetesServer
   */
  deleteKubernetesServer: {
    methodKind: "unary";
    input: typeof DeleteKubernetesServerRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllKubernetesServers removes all kubernetes servers.
   *
   * @generated from rpc proto.AuthService.DeleteAllKubernetesServers
   */
  deleteAllKubernetesServers: {
    methodKind: "unary";
    input: typeof DeleteAllKubernetesServersRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * UpsertDatabaseServer registers a new database proxy server.
   *
   * @generated from rpc proto.AuthService.UpsertDatabaseServer
   */
  upsertDatabaseServer: {
    methodKind: "unary";
    input: typeof UpsertDatabaseServerRequestSchema;
    output: typeof KeepAliveSchema;
  },
  /**
   * DeleteDatabaseServer removes the specified database proxy server.
   *
   * @generated from rpc proto.AuthService.DeleteDatabaseServer
   */
  deleteDatabaseServer: {
    methodKind: "unary";
    input: typeof DeleteDatabaseServerRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllDatabaseServers removes all registered database proxy servers.
   *
   * @generated from rpc proto.AuthService.DeleteAllDatabaseServers
   */
  deleteAllDatabaseServers: {
    methodKind: "unary";
    input: typeof DeleteAllDatabaseServersRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * UpsertDatabaseService registers a new DatabaseService.
   *
   * @generated from rpc proto.AuthService.UpsertDatabaseService
   */
  upsertDatabaseService: {
    methodKind: "unary";
    input: typeof UpsertDatabaseServiceRequestSchema;
    output: typeof KeepAliveSchema;
  },
  /**
   * DeleteDatabaseService removes the specified DatabaseService.
   *
   * @generated from rpc proto.AuthService.DeleteDatabaseService
   */
  deleteDatabaseService: {
    methodKind: "unary";
    input: typeof ResourceRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllDatabaseServices removes all registered DatabaseServices.
   * If there's an error deleting the resources, there's no guarantee of a rollback.
   * A subset of resources might be deleted while others still exist.
   *
   * @generated from rpc proto.AuthService.DeleteAllDatabaseServices
   */
  deleteAllDatabaseServices: {
    methodKind: "unary";
    input: typeof DeleteAllDatabaseServicesRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * SignDatabaseCSR generates client certificate used by proxy to
   * authenticate with a remote database service.
   *
   * @generated from rpc proto.AuthService.SignDatabaseCSR
   */
  signDatabaseCSR: {
    methodKind: "unary";
    input: typeof DatabaseCSRRequestSchema;
    output: typeof DatabaseCSRResponseSchema;
  },
  /**
   * GenerateDatabaseCert generates client certificate used by a database
   * service to authenticate with the database instance.
   *
   * @generated from rpc proto.AuthService.GenerateDatabaseCert
   */
  generateDatabaseCert: {
    methodKind: "unary";
    input: typeof DatabaseCertRequestSchema;
    output: typeof DatabaseCertResponseSchema;
  },
  /**
   * / GenerateSnowflakeJWT generates JWT in the format required by Snowflake.
   *
   * @generated from rpc proto.AuthService.GenerateSnowflakeJWT
   */
  generateSnowflakeJWT: {
    methodKind: "unary";
    input: typeof SnowflakeJWTRequestSchema;
    output: typeof SnowflakeJWTResponseSchema;
  },
  /**
   * GetRole retrieves a role described by the given request.
   *
   * @generated from rpc proto.AuthService.GetRole
   */
  getRole: {
    methodKind: "unary";
    input: typeof GetRoleRequestSchema;
    output: typeof RoleV6Schema;
  },
  /**
   * GetRole retrieves all roles.
   *
   * DELETE IN 17.0
   *
   * @generated from rpc proto.AuthService.GetRoles
   */
  getRoles: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof GetRolesResponseSchema;
  },
  /**
   * ListRoles is a paginated role getter.
   *
   * @generated from rpc proto.AuthService.ListRoles
   */
  listRoles: {
    methodKind: "unary";
    input: typeof ListRolesRequestSchema;
    output: typeof ListRolesResponseSchema;
  },
  /**
   * CreateRole creates a new role.
   *
   * @generated from rpc proto.AuthService.CreateRole
   */
  createRole: {
    methodKind: "unary";
    input: typeof CreateRoleRequestSchema;
    output: typeof RoleV6Schema;
  },
  /**
   * UpdateRole updates an existing role.
   *
   * @generated from rpc proto.AuthService.UpdateRole
   */
  updateRole: {
    methodKind: "unary";
    input: typeof UpdateRoleRequestSchema;
    output: typeof RoleV6Schema;
  },
  /**
   * UpsertRoleV2 creates or overwrites an existing role.
   *
   * @generated from rpc proto.AuthService.UpsertRoleV2
   */
  upsertRoleV2: {
    methodKind: "unary";
    input: typeof UpsertRoleRequestSchema;
    output: typeof RoleV6Schema;
  },
  /**
   * UpsertRole upserts a role in a backend.
   *
   * Deprecated: use UpsertRoleV2 instead.
   *
   * @generated from rpc proto.AuthService.UpsertRole
   * @deprecated
   */
  upsertRole: {
    methodKind: "unary";
    input: typeof RoleV6Schema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteRole deletes an existing role in a backend described by the given request.
   *
   * @generated from rpc proto.AuthService.DeleteRole
   */
  deleteRole: {
    methodKind: "unary";
    input: typeof DeleteRoleRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * AddMFADevice adds an MFA device for the user calling this RPC.
   *
   * The RPC is streaming both ways and the message sequence is:
   * (-> means client-to-server, <- means server-to-client)
   * -> Init
   * <- ExistingMFAChallenge
   * -> ExistingMFAResponse
   * <- NewMFARegisterChallenge
   * -> NewMFARegisterResponse
   * <- Ack
   *
   * Deprecated: Use [AddMFADeviceSync] instead.
   *
   * @generated from rpc proto.AuthService.AddMFADevice
   * @deprecated
   */
  addMFADevice: {
    methodKind: "bidi_streaming";
    input: typeof AddMFADeviceRequestSchema;
    output: typeof AddMFADeviceResponseSchema;
  },
  /**
   * DeleteMFADevice deletes an MFA device for the user calling this RPC.
   *
   * The RPC is streaming both ways and the message sequence is:
   * (-> means client-to-server, <- means server-to-client)
   * -> Init
   * <- MFAChallenge
   * -> MFAResponse
   * <- Ack
   *
   * Deprecated: Use [DeleteMFADeviceSync] instead.
   *
   * @generated from rpc proto.AuthService.DeleteMFADevice
   * @deprecated
   */
  deleteMFADevice: {
    methodKind: "bidi_streaming";
    input: typeof DeleteMFADeviceRequestSchema;
    output: typeof DeleteMFADeviceResponseSchema;
  },
  /**
   * AddMFADeviceSync adds a new MFA device.
   *
   * A typical MFA registration sequence calls the following RPCs:
   *
   * 1. CreateAuthenticateChallenge (necessary for registration challenge)
   * 2. (optional) CreatePrivilegeToken
   * 3. CreateRegisterChallenge (uses authn challenge and optionally a token)
   * 4. AddMFADeviceSync
   *
   * @generated from rpc proto.AuthService.AddMFADeviceSync
   */
  addMFADeviceSync: {
    methodKind: "unary";
    input: typeof AddMFADeviceSyncRequestSchema;
    output: typeof AddMFADeviceSyncResponseSchema;
  },
  /**
   * DeleteMFADeviceSync deletes a users MFA device (nonstream).
   *
   * A typical MFA deletion sequence calls the following RPCs:
   *
   * 1. (optional) CreateAuthenticateChallenge
   *    (may be skipped depending on the token used, but is usually called
   *    regardless)
   * 2. (optional) CreatePrivilegeToken
   * 3. DeleteMFADeviceSync (using either authn challenge or token)
   *
   * @generated from rpc proto.AuthService.DeleteMFADeviceSync
   */
  deleteMFADeviceSync: {
    methodKind: "unary";
    input: typeof DeleteMFADeviceSyncRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * GetMFADevices returns all MFA devices registered for the user calling
   * this RPC.
   *
   * @generated from rpc proto.AuthService.GetMFADevices
   */
  getMFADevices: {
    methodKind: "unary";
    input: typeof GetMFADevicesRequestSchema;
    output: typeof GetMFADevicesResponseSchema;
  },
  /**
   * CreateAuthenticateChallenge creates and returns MFA challenges for a users registered MFA
   * devices.
   *
   * @generated from rpc proto.AuthService.CreateAuthenticateChallenge
   */
  createAuthenticateChallenge: {
    methodKind: "unary";
    input: typeof CreateAuthenticateChallengeRequestSchema;
    output: typeof MFAAuthenticateChallengeSchema;
  },
  /**
   * CreateRegisterChallenge creates and returns MFA register challenge for a new MFA device.
   *
   * @generated from rpc proto.AuthService.CreateRegisterChallenge
   */
  createRegisterChallenge: {
    methodKind: "unary";
    input: typeof CreateRegisterChallengeRequestSchema;
    output: typeof MFARegisterChallengeSchema;
  },
  /**
   * GetOIDCConnector gets an OIDC connector resource by name.
   *
   * @generated from rpc proto.AuthService.GetOIDCConnector
   */
  getOIDCConnector: {
    methodKind: "unary";
    input: typeof ResourceWithSecretsRequestSchema;
    output: typeof OIDCConnectorV3Schema;
  },
  /**
   * GetOIDCConnectors gets all current OIDC connector resources.
   *
   * @generated from rpc proto.AuthService.GetOIDCConnectors
   */
  getOIDCConnectors: {
    methodKind: "unary";
    input: typeof ResourcesWithSecretsRequestSchema;
    output: typeof OIDCConnectorV3ListSchema;
  },
  /**
   * UpsertOIDCConnector creates a new OIDC connector in the backend.
   *
   * @generated from rpc proto.AuthService.CreateOIDCConnector
   */
  createOIDCConnector: {
    methodKind: "unary";
    input: typeof CreateOIDCConnectorRequestSchema;
    output: typeof OIDCConnectorV3Schema;
  },
  /**
   * UpsertOIDCConnector updates an existing OIDC connector in the backend.
   *
   * @generated from rpc proto.AuthService.UpdateOIDCConnector
   */
  updateOIDCConnector: {
    methodKind: "unary";
    input: typeof UpdateOIDCConnectorRequestSchema;
    output: typeof OIDCConnectorV3Schema;
  },
  /**
   * UpsertOIDCConnector upserts an OIDC connector in a backend.
   *
   * Deprecated: Use UpsertOIDCConnectorV2 instead.
   *
   * @generated from rpc proto.AuthService.UpsertOIDCConnector
   * @deprecated
   */
  upsertOIDCConnector: {
    methodKind: "unary";
    input: typeof OIDCConnectorV3Schema;
    output: typeof EmptySchema;
  },
  /**
   * UpsertOIDCConnectorV2 upserts an OIDC connector in the backend.
   *
   * @generated from rpc proto.AuthService.UpsertOIDCConnectorV2
   */
  upsertOIDCConnectorV2: {
    methodKind: "unary";
    input: typeof UpsertOIDCConnectorRequestSchema;
    output: typeof OIDCConnectorV3Schema;
  },
  /**
   * DeleteOIDCConnector deletes an existing OIDC connector in a backend by name.
   *
   * @generated from rpc proto.AuthService.DeleteOIDCConnector
   */
  deleteOIDCConnector: {
    methodKind: "unary";
    input: typeof ResourceRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * CreateOIDCAuthRequest creates OIDCAuthRequest.
   *
   * @generated from rpc proto.AuthService.CreateOIDCAuthRequest
   */
  createOIDCAuthRequest: {
    methodKind: "unary";
    input: typeof OIDCAuthRequestSchema;
    output: typeof OIDCAuthRequestSchema;
  },
  /**
   * GetOIDCAuthRequest returns OIDC auth request if found.
   *
   * @generated from rpc proto.AuthService.GetOIDCAuthRequest
   */
  getOIDCAuthRequest: {
    methodKind: "unary";
    input: typeof GetOIDCAuthRequestRequestSchema;
    output: typeof OIDCAuthRequestSchema;
  },
  /**
   * GetSAMLConnector gets a SAML connector resource by name.
   *
   * @generated from rpc proto.AuthService.GetSAMLConnector
   */
  getSAMLConnector: {
    methodKind: "unary";
    input: typeof ResourceWithSecretsRequestSchema;
    output: typeof SAMLConnectorV2Schema;
  },
  /**
   * GetSAMLConnectors gets all current SAML connector resources.
   *
   * @generated from rpc proto.AuthService.GetSAMLConnectors
   */
  getSAMLConnectors: {
    methodKind: "unary";
    input: typeof ResourcesWithSecretsRequestSchema;
    output: typeof SAMLConnectorV2ListSchema;
  },
  /**
   * CreateSAMLConnector creates a new SAML connector in the backend.
   *
   * @generated from rpc proto.AuthService.CreateSAMLConnector
   */
  createSAMLConnector: {
    methodKind: "unary";
    input: typeof CreateSAMLConnectorRequestSchema;
    output: typeof SAMLConnectorV2Schema;
  },
  /**
   * UpdateSAMLConnector updates an existing SAML connector in the backend.
   *
   * @generated from rpc proto.AuthService.UpdateSAMLConnector
   */
  updateSAMLConnector: {
    methodKind: "unary";
    input: typeof UpdateSAMLConnectorRequestSchema;
    output: typeof SAMLConnectorV2Schema;
  },
  /**
   * UpsertSAMLConnector upserts a SAML connector in a backend.
   *
   * Deprecated: Use UpsertSAMLConnectorV2 instead.
   *
   * @generated from rpc proto.AuthService.UpsertSAMLConnector
   * @deprecated
   */
  upsertSAMLConnector: {
    methodKind: "unary";
    input: typeof SAMLConnectorV2Schema;
    output: typeof EmptySchema;
  },
  /**
   * UpsertSAMLConnectorV2 upserts a SAML connector in a backend.
   *
   * @generated from rpc proto.AuthService.UpsertSAMLConnectorV2
   */
  upsertSAMLConnectorV2: {
    methodKind: "unary";
    input: typeof UpsertSAMLConnectorRequestSchema;
    output: typeof SAMLConnectorV2Schema;
  },
  /**
   * DeleteSAMLConnector deletes an existing SAML connector in a backend by name.
   *
   * @generated from rpc proto.AuthService.DeleteSAMLConnector
   */
  deleteSAMLConnector: {
    methodKind: "unary";
    input: typeof ResourceRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * CreateSAMLAuthRequest creates SAMLAuthRequest.
   *
   * @generated from rpc proto.AuthService.CreateSAMLAuthRequest
   */
  createSAMLAuthRequest: {
    methodKind: "unary";
    input: typeof SAMLAuthRequestSchema;
    output: typeof SAMLAuthRequestSchema;
  },
  /**
   * GetSAMLAuthRequest returns SAML auth request if found.
   *
   * @generated from rpc proto.AuthService.GetSAMLAuthRequest
   */
  getSAMLAuthRequest: {
    methodKind: "unary";
    input: typeof GetSAMLAuthRequestRequestSchema;
    output: typeof SAMLAuthRequestSchema;
  },
  /**
   * GetGithubConnector gets a Github connector resource by name.
   *
   * @generated from rpc proto.AuthService.GetGithubConnector
   */
  getGithubConnector: {
    methodKind: "unary";
    input: typeof ResourceWithSecretsRequestSchema;
    output: typeof GithubConnectorV3Schema;
  },
  /**
   * GetGithubConnectors gets all current Github connector resources.
   *
   * @generated from rpc proto.AuthService.GetGithubConnectors
   */
  getGithubConnectors: {
    methodKind: "unary";
    input: typeof ResourcesWithSecretsRequestSchema;
    output: typeof GithubConnectorV3ListSchema;
  },
  /**
   * CreateGithubConnector creates a new Github connector in the backend.
   *
   * @generated from rpc proto.AuthService.CreateGithubConnector
   */
  createGithubConnector: {
    methodKind: "unary";
    input: typeof CreateGithubConnectorRequestSchema;
    output: typeof GithubConnectorV3Schema;
  },
  /**
   * UpdateGithubConnector updates an existing Github connector in the backend.
   *
   * @generated from rpc proto.AuthService.UpdateGithubConnector
   */
  updateGithubConnector: {
    methodKind: "unary";
    input: typeof UpdateGithubConnectorRequestSchema;
    output: typeof GithubConnectorV3Schema;
  },
  /**
   * UpsertGithubConnector upserts a Github connector in a backend.
   *
   * Deprecated: Use UpsertGithubConnectorV2 instead.
   *
   * @generated from rpc proto.AuthService.UpsertGithubConnector
   * @deprecated
   */
  upsertGithubConnector: {
    methodKind: "unary";
    input: typeof GithubConnectorV3Schema;
    output: typeof EmptySchema;
  },
  /**
   * UpsertGithubConnectorV2 upserts a Github connector in a backend.
   *
   * @generated from rpc proto.AuthService.UpsertGithubConnectorV2
   */
  upsertGithubConnectorV2: {
    methodKind: "unary";
    input: typeof UpsertGithubConnectorRequestSchema;
    output: typeof GithubConnectorV3Schema;
  },
  /**
   * DeleteGithubConnector deletes an existing Github connector in a backend by name.
   *
   * @generated from rpc proto.AuthService.DeleteGithubConnector
   */
  deleteGithubConnector: {
    methodKind: "unary";
    input: typeof ResourceRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * CreateGithubAuthRequest creates GithubAuthRequest.
   *
   * @generated from rpc proto.AuthService.CreateGithubAuthRequest
   */
  createGithubAuthRequest: {
    methodKind: "unary";
    input: typeof GithubAuthRequestSchema;
    output: typeof GithubAuthRequestSchema;
  },
  /**
   * GetGithubAuthRequest returns Github auth request if found.
   *
   * @generated from rpc proto.AuthService.GetGithubAuthRequest
   */
  getGithubAuthRequest: {
    methodKind: "unary";
    input: typeof GetGithubAuthRequestRequestSchema;
    output: typeof GithubAuthRequestSchema;
  },
  /**
   * GetSSODiagnosticInfo returns SSO diagnostic info records.
   *
   * @generated from rpc proto.AuthService.GetSSODiagnosticInfo
   */
  getSSODiagnosticInfo: {
    methodKind: "unary";
    input: typeof GetSSODiagnosticInfoRequestSchema;
    output: typeof SSODiagnosticInfoSchema;
  },
  /**
   * GetServerInfos returns a stream of ServerInfos.
   *
   * @generated from rpc proto.AuthService.GetServerInfos
   */
  getServerInfos: {
    methodKind: "server_streaming";
    input: typeof EmptySchema;
    output: typeof ServerInfoV1Schema;
  },
  /**
   * GetServerInfo returns a ServerInfo by name.
   *
   * @generated from rpc proto.AuthService.GetServerInfo
   */
  getServerInfo: {
    methodKind: "unary";
    input: typeof ResourceRequestSchema;
    output: typeof ServerInfoV1Schema;
  },
  /**
   * UpsertServerInfo upserts a ServerInfo.
   *
   * @generated from rpc proto.AuthService.UpsertServerInfo
   */
  upsertServerInfo: {
    methodKind: "unary";
    input: typeof ServerInfoV1Schema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteServerInfo deletes a ServerInfo by name.
   *
   * @generated from rpc proto.AuthService.DeleteServerInfo
   */
  deleteServerInfo: {
    methodKind: "unary";
    input: typeof ResourceRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllServerInfos deletes all ServerInfos.
   *
   * @generated from rpc proto.AuthService.DeleteAllServerInfos
   */
  deleteAllServerInfos: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * GetTrustedCluster gets a Trusted Cluster resource by name.
   *
   * @generated from rpc proto.AuthService.GetTrustedCluster
   */
  getTrustedCluster: {
    methodKind: "unary";
    input: typeof ResourceRequestSchema;
    output: typeof TrustedClusterV2Schema;
  },
  /**
   * GetTrustedClusters gets all current Trusted Cluster resources.
   *
   * @generated from rpc proto.AuthService.GetTrustedClusters
   */
  getTrustedClusters: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof TrustedClusterV2ListSchema;
  },
  /**
   * UpsertTrustedCluster upserts a Trusted Cluster in a backend.
   *
   * @generated from rpc proto.AuthService.UpsertTrustedCluster
   */
  upsertTrustedCluster: {
    methodKind: "unary";
    input: typeof TrustedClusterV2Schema;
    output: typeof TrustedClusterV2Schema;
  },
  /**
   * DeleteTrustedCluster deletes an existing Trusted Cluster in a backend by name.
   *
   * @generated from rpc proto.AuthService.DeleteTrustedCluster
   */
  deleteTrustedCluster: {
    methodKind: "unary";
    input: typeof ResourceRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * GetToken retrieves a token described by the given request.
   *
   * @generated from rpc proto.AuthService.GetToken
   */
  getToken: {
    methodKind: "unary";
    input: typeof ResourceRequestSchema;
    output: typeof ProvisionTokenV2Schema;
  },
  /**
   * GetToken retrieves all tokens.
   *
   * @generated from rpc proto.AuthService.GetTokens
   */
  getTokens: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof ProvisionTokenV2ListSchema;
  },
  /**
   * CreateTokenV2 creates a token in a backend.
   *
   * @generated from rpc proto.AuthService.CreateTokenV2
   */
  createTokenV2: {
    methodKind: "unary";
    input: typeof CreateTokenV2RequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * UpsertTokenV2 upserts a token in a backend.
   *
   * @generated from rpc proto.AuthService.UpsertTokenV2
   */
  upsertTokenV2: {
    methodKind: "unary";
    input: typeof UpsertTokenV2RequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteToken deletes an existing token in a backend described by the given request.
   *
   * @generated from rpc proto.AuthService.DeleteToken
   */
  deleteToken: {
    methodKind: "unary";
    input: typeof ResourceRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * GetClusterAuditConfig gets cluster audit configuration.
   *
   * @generated from rpc proto.AuthService.GetClusterAuditConfig
   */
  getClusterAuditConfig: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof ClusterAuditConfigV2Schema;
  },
  /**
   * GetClusterNetworkingConfig gets cluster networking configuration.
   * Deprecated: Use clusterconfigv1.Service.GetClusterNetworkingConfig instead.
   *
   * @generated from rpc proto.AuthService.GetClusterNetworkingConfig
   * @deprecated
   */
  getClusterNetworkingConfig: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof ClusterNetworkingConfigV2Schema;
  },
  /**
   * SetClusterNetworkingConfig sets cluster networking configuration.
   * Deprecated: Use clusterconfigv1.Service.Update/UpsertClusterNetworkingConfig instead.
   *
   * @generated from rpc proto.AuthService.SetClusterNetworkingConfig
   * @deprecated
   */
  setClusterNetworkingConfig: {
    methodKind: "unary";
    input: typeof ClusterNetworkingConfigV2Schema;
    output: typeof EmptySchema;
  },
  /**
   * ResetClusterNetworkingConfig resets cluster networking configuration to defaults.
   * Deprecated: Use clusterconfigv1.Service.ResetClusterNetworkingConfig instead.
   *
   * @generated from rpc proto.AuthService.ResetClusterNetworkingConfig
   * @deprecated
   */
  resetClusterNetworkingConfig: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * GetSessionRecordingConfig gets session recording configuration.
   * Deprecated: Use clusterconfigv1.Service.GetSessionRecordingConfig instead.
   *
   * @generated from rpc proto.AuthService.GetSessionRecordingConfig
   * @deprecated
   */
  getSessionRecordingConfig: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof SessionRecordingConfigV2Schema;
  },
  /**
   * SetSessionRecordingConfig sets session recording configuration.
   * Deprecated: Use clusterconfigv1.Service.Upsert/UpdateSessionRecordingConfig instead.
   *
   * @generated from rpc proto.AuthService.SetSessionRecordingConfig
   * @deprecated
   */
  setSessionRecordingConfig: {
    methodKind: "unary";
    input: typeof SessionRecordingConfigV2Schema;
    output: typeof EmptySchema;
  },
  /**
   * ResetSessionRecordingConfig resets session recording configuration to defaults.
   * Deprecated: Use clusterconfigv1.Service.ResetSessionRecordingConfig instead.
   *
   * @generated from rpc proto.AuthService.ResetSessionRecordingConfig
   * @deprecated
   */
  resetSessionRecordingConfig: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * GetAuthPreference gets cluster auth preference.
   * Deprecated: Use clusterconfigv1.Service.GetAuthPreference instead.
   *
   * @generated from rpc proto.AuthService.GetAuthPreference
   * @deprecated
   */
  getAuthPreference: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof AuthPreferenceV2Schema;
  },
  /**
   * SetAuthPreference sets cluster auth preference.
   * Deprecated: Use clusterconfigv1.Service.Create/Update/UpsertAuthPreference instead.
   *
   * @generated from rpc proto.AuthService.SetAuthPreference
   * @deprecated
   */
  setAuthPreference: {
    methodKind: "unary";
    input: typeof AuthPreferenceV2Schema;
    output: typeof EmptySchema;
  },
  /**
   * ResetAuthPreference resets cluster auth preference to defaults.
   * Deprecated: Use clusterconfigv1.Service.ResetAuthPreference instead.
   *
   * @generated from rpc proto.AuthService.ResetAuthPreference
   * @deprecated
   */
  resetAuthPreference: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * GetUIConfig gets the configuration for the UI served by the proxy service
   *
   * @generated from rpc proto.AuthService.GetUIConfig
   */
  getUIConfig: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof UIConfigV1Schema;
  },
  /**
   * SetUIConfig sets the configuration for the UI served by the proxy service
   *
   * @generated from rpc proto.AuthService.SetUIConfig
   */
  setUIConfig: {
    methodKind: "unary";
    input: typeof UIConfigV1Schema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteUIConfig deletes the custom configuration for the UI served by the proxy service
   *
   * @generated from rpc proto.AuthService.DeleteUIConfig
   */
  deleteUIConfig: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * GetEvents gets events from the audit log.
   *
   * @generated from rpc proto.AuthService.GetEvents
   */
  getEvents: {
    methodKind: "unary";
    input: typeof GetEventsRequestSchema;
    output: typeof EventsSchema;
  },
  /**
   * GetSessionEvents gets completed session events from the audit log.
   *
   * @generated from rpc proto.AuthService.GetSessionEvents
   */
  getSessionEvents: {
    methodKind: "unary";
    input: typeof GetSessionEventsRequestSchema;
    output: typeof EventsSchema;
  },
  /**
   * GetLock gets a lock by name.
   *
   * @generated from rpc proto.AuthService.GetLock
   */
  getLock: {
    methodKind: "unary";
    input: typeof GetLockRequestSchema;
    output: typeof LockV2Schema;
  },
  /**
   * GetLocks gets all/in-force locks that match at least one of the targets when specified.
   *
   * @generated from rpc proto.AuthService.GetLocks
   */
  getLocks: {
    methodKind: "unary";
    input: typeof GetLocksRequestSchema;
    output: typeof GetLocksResponseSchema;
  },
  /**
   * UpsertLock upserts a lock.
   *
   * @generated from rpc proto.AuthService.UpsertLock
   */
  upsertLock: {
    methodKind: "unary";
    input: typeof LockV2Schema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteLock deletes a lock.
   *
   * @generated from rpc proto.AuthService.DeleteLock
   */
  deleteLock: {
    methodKind: "unary";
    input: typeof DeleteLockRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * ReplaceRemoteLocks replaces the set of locks associated with a remote cluster.
   *
   * @generated from rpc proto.AuthService.ReplaceRemoteLocks
   */
  replaceRemoteLocks: {
    methodKind: "unary";
    input: typeof ReplaceRemoteLocksRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * StreamSessionEvents streams audit events from a given session recording.
   *
   * @generated from rpc proto.AuthService.StreamSessionEvents
   */
  streamSessionEvents: {
    methodKind: "server_streaming";
    input: typeof StreamSessionEventsRequestSchema;
    output: typeof OneOfSchema;
  },
  /**
   * GetNetworkRestrictions retrieves all the network restrictions (allow/deny lists).
   *
   * @generated from rpc proto.AuthService.GetNetworkRestrictions
   */
  getNetworkRestrictions: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof NetworkRestrictionsV4Schema;
  },
  /**
   * SetNetworkRestrictions updates the network restrictions.
   *
   * @generated from rpc proto.AuthService.SetNetworkRestrictions
   */
  setNetworkRestrictions: {
    methodKind: "unary";
    input: typeof NetworkRestrictionsV4Schema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteNetworkRestrictions delete the network restrictions.
   *
   * @generated from rpc proto.AuthService.DeleteNetworkRestrictions
   */
  deleteNetworkRestrictions: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * GetApps returns all registered applications.
   *
   * @generated from rpc proto.AuthService.GetApps
   */
  getApps: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof AppV3ListSchema;
  },
  /**
   * GetApp returns an application by name.
   *
   * @generated from rpc proto.AuthService.GetApp
   */
  getApp: {
    methodKind: "unary";
    input: typeof ResourceRequestSchema;
    output: typeof AppV3Schema;
  },
  /**
   * CreateApp creates a new application resource.
   *
   * @generated from rpc proto.AuthService.CreateApp
   */
  createApp: {
    methodKind: "unary";
    input: typeof AppV3Schema;
    output: typeof EmptySchema;
  },
  /**
   * UpdateApp updates existing application resource.
   *
   * @generated from rpc proto.AuthService.UpdateApp
   */
  updateApp: {
    methodKind: "unary";
    input: typeof AppV3Schema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteApp removes specified application resource.
   *
   * @generated from rpc proto.AuthService.DeleteApp
   */
  deleteApp: {
    methodKind: "unary";
    input: typeof ResourceRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllApps removes all application resources.
   *
   * @generated from rpc proto.AuthService.DeleteAllApps
   */
  deleteAllApps: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * GetDatabases returns all registered databases.
   *
   * @generated from rpc proto.AuthService.GetDatabases
   */
  getDatabases: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof DatabaseV3ListSchema;
  },
  /**
   * GetDatabase returns a database by name.
   *
   * @generated from rpc proto.AuthService.GetDatabase
   */
  getDatabase: {
    methodKind: "unary";
    input: typeof ResourceRequestSchema;
    output: typeof DatabaseV3Schema;
  },
  /**
   * CreateDatabase creates a new database resource.
   *
   * @generated from rpc proto.AuthService.CreateDatabase
   */
  createDatabase: {
    methodKind: "unary";
    input: typeof DatabaseV3Schema;
    output: typeof EmptySchema;
  },
  /**
   * UpdateDatabase updates existing database resource.
   *
   * @generated from rpc proto.AuthService.UpdateDatabase
   */
  updateDatabase: {
    methodKind: "unary";
    input: typeof DatabaseV3Schema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteDatabase removes specified database resource.
   *
   * @generated from rpc proto.AuthService.DeleteDatabase
   */
  deleteDatabase: {
    methodKind: "unary";
    input: typeof ResourceRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllDatabases removes all database resources.
   *
   * @generated from rpc proto.AuthService.DeleteAllDatabases
   */
  deleteAllDatabases: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * GetKubernetesClusters returns all registered kubernetes clusters.
   *
   * @generated from rpc proto.AuthService.GetKubernetesClusters
   */
  getKubernetesClusters: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof KubernetesClusterV3ListSchema;
  },
  /**
   * GetKubernetesCluster returns a kubernetes cluster by name.
   *
   * @generated from rpc proto.AuthService.GetKubernetesCluster
   */
  getKubernetesCluster: {
    methodKind: "unary";
    input: typeof ResourceRequestSchema;
    output: typeof KubernetesClusterV3Schema;
  },
  /**
   * CreateKubernetesCluster creates a new kubernetes cluster resource.
   *
   * @generated from rpc proto.AuthService.CreateKubernetesCluster
   */
  createKubernetesCluster: {
    methodKind: "unary";
    input: typeof KubernetesClusterV3Schema;
    output: typeof EmptySchema;
  },
  /**
   * UpdateKubernetesCluster updates existing kubernetes cluster resource.
   *
   * @generated from rpc proto.AuthService.UpdateKubernetesCluster
   */
  updateKubernetesCluster: {
    methodKind: "unary";
    input: typeof KubernetesClusterV3Schema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteKubernetesCluster removes specified kubernetes cluster resource.
   *
   * @generated from rpc proto.AuthService.DeleteKubernetesCluster
   */
  deleteKubernetesCluster: {
    methodKind: "unary";
    input: typeof ResourceRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllKubernetesClusters removes all kubernetes cluster resources.
   *
   * @generated from rpc proto.AuthService.DeleteAllKubernetesClusters
   */
  deleteAllKubernetesClusters: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * GetWindowsDesktopServices returns all registered Windows desktop services.
   *
   * @generated from rpc proto.AuthService.GetWindowsDesktopServices
   */
  getWindowsDesktopServices: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof GetWindowsDesktopServicesResponseSchema;
  },
  /**
   * GetWindowsDesktopService gets a Windows desktop service by name.
   *
   * @generated from rpc proto.AuthService.GetWindowsDesktopService
   */
  getWindowsDesktopService: {
    methodKind: "unary";
    input: typeof GetWindowsDesktopServiceRequestSchema;
    output: typeof GetWindowsDesktopServiceResponseSchema;
  },
  /**
   * UpsertWindowsDesktopService registers a new Windows desktop service.
   *
   * @generated from rpc proto.AuthService.UpsertWindowsDesktopService
   */
  upsertWindowsDesktopService: {
    methodKind: "unary";
    input: typeof WindowsDesktopServiceV3Schema;
    output: typeof KeepAliveSchema;
  },
  /**
   * DeleteWindowsDesktopService removes the specified Windows desktop service.
   *
   * @generated from rpc proto.AuthService.DeleteWindowsDesktopService
   */
  deleteWindowsDesktopService: {
    methodKind: "unary";
    input: typeof DeleteWindowsDesktopServiceRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllWindowsDesktopServices removes all registered Windows desktop services.
   *
   * @generated from rpc proto.AuthService.DeleteAllWindowsDesktopServices
   */
  deleteAllWindowsDesktopServices: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * GetWindowsDesktops returns all registered Windows desktop hosts matching the supplied filter.
   *
   * @generated from rpc proto.AuthService.GetWindowsDesktops
   */
  getWindowsDesktops: {
    methodKind: "unary";
    input: typeof WindowsDesktopFilterSchema;
    output: typeof GetWindowsDesktopsResponseSchema;
  },
  /**
   * CreateWindowsDesktop registers a new Windows desktop host.
   *
   * @generated from rpc proto.AuthService.CreateWindowsDesktop
   */
  createWindowsDesktop: {
    methodKind: "unary";
    input: typeof WindowsDesktopV3Schema;
    output: typeof EmptySchema;
  },
  /**
   * UpdateWindowsDesktop updates an existing Windows desktop host.
   *
   * @generated from rpc proto.AuthService.UpdateWindowsDesktop
   */
  updateWindowsDesktop: {
    methodKind: "unary";
    input: typeof WindowsDesktopV3Schema;
    output: typeof EmptySchema;
  },
  /**
   * UpsertWindowsDesktop updates a Windows desktop host, creating it if it doesn't exist.
   *
   * @generated from rpc proto.AuthService.UpsertWindowsDesktop
   */
  upsertWindowsDesktop: {
    methodKind: "unary";
    input: typeof WindowsDesktopV3Schema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteWindowsDesktop removes the specified Windows desktop host.
   * Unlike GetWindowsDesktops, this call will delete at-most 1 desktop.
   * To delete all desktops, use DeleteAllWindowsDesktops.
   *
   * @generated from rpc proto.AuthService.DeleteWindowsDesktop
   */
  deleteWindowsDesktop: {
    methodKind: "unary";
    input: typeof DeleteWindowsDesktopRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllWindowsDesktops removes all registered Windows desktop hosts.
   *
   * @generated from rpc proto.AuthService.DeleteAllWindowsDesktops
   */
  deleteAllWindowsDesktops: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * GenerateWindowsDesktopCert generates client smartcard certificate used
   * by an RDP client to authenticate with Windows.
   *
   * @generated from rpc proto.AuthService.GenerateWindowsDesktopCert
   */
  generateWindowsDesktopCert: {
    methodKind: "unary";
    input: typeof WindowsDesktopCertRequestSchema;
    output: typeof WindowsDesktopCertResponseSchema;
  },
  /**
   * GenerateCertAuthorityCRL creates an empty CRL for the specified CA.
   *
   * @generated from rpc proto.AuthService.GenerateCertAuthorityCRL
   */
  generateCertAuthorityCRL: {
    methodKind: "unary";
    input: typeof CertAuthorityRequestSchema;
    output: typeof CRLSchema;
  },
  /**
   * GetDesktopBootstrapScript returns a PowerShell script to bootstrap Active Directory.
   *
   * @generated from rpc proto.AuthService.GetDesktopBootstrapScript
   */
  getDesktopBootstrapScript: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof DesktopBootstrapScriptResponseSchema;
  },
  /**
   * CreateConnectionDiagnostic creates a new connection diagnostic.
   *
   * @generated from rpc proto.AuthService.CreateConnectionDiagnostic
   */
  createConnectionDiagnostic: {
    methodKind: "unary";
    input: typeof ConnectionDiagnosticV1Schema;
    output: typeof EmptySchema;
  },
  /**
   * UpdateConnectionDiagnostic updates a connection diagnostic.
   *
   * @generated from rpc proto.AuthService.UpdateConnectionDiagnostic
   */
  updateConnectionDiagnostic: {
    methodKind: "unary";
    input: typeof ConnectionDiagnosticV1Schema;
    output: typeof EmptySchema;
  },
  /**
   * GetConnectionDiagnostic reads a connection diagnostic.
   *
   * @generated from rpc proto.AuthService.GetConnectionDiagnostic
   */
  getConnectionDiagnostic: {
    methodKind: "unary";
    input: typeof GetConnectionDiagnosticRequestSchema;
    output: typeof ConnectionDiagnosticV1Schema;
  },
  /**
   * AppendDiagnosticTrace appends a Trace to the ConnectionDiagnostic.
   *
   * @generated from rpc proto.AuthService.AppendDiagnosticTrace
   */
  appendDiagnosticTrace: {
    methodKind: "unary";
    input: typeof AppendDiagnosticTraceRequestSchema;
    output: typeof ConnectionDiagnosticV1Schema;
  },
  /**
   * ChangeUserAuthentication allows a user to change their password and if enabled,
   * also adds a new MFA device. After successful invocation, a new web session is created as well
   * as a new set of recovery codes (if user meets the requirements to receive them), invalidating
   * any existing codes the user previously had.
   *
   * Only local users may be targeted by this RPC.
   *
   * @generated from rpc proto.AuthService.ChangeUserAuthentication
   */
  changeUserAuthentication: {
    methodKind: "unary";
    input: typeof ChangeUserAuthenticationRequestSchema;
    output: typeof ChangeUserAuthenticationResponseSchema;
  },
  /**
   * StartAccountRecovery (exclusive to cloud users) is the first out of two step user
   * verification needed to allow a user to recover their account. The first form of verification
   * is a user's username and a recovery code. After successful verification, a recovery start
   * token is created for the user which its ID will be used as part of a URL that will be emailed
   * to the user (not done in this request). The user will be able to finish their second form of
   * verification by clicking on this URL and following the prompts.
   *
   * If a valid user fails to provide correct recovery code for MaxAccountRecoveryAttempts,
   * user account gets temporarily locked from further recovery attempts and from logging in.
   *
   * Start tokens last RecoveryStartTokenTTL.
   *
   * Only local users may perform account recovery
   *
   * @generated from rpc proto.AuthService.StartAccountRecovery
   */
  startAccountRecovery: {
    methodKind: "unary";
    input: typeof StartAccountRecoveryRequestSchema;
    output: typeof UserTokenV3Schema;
  },
  /**
   * VerifyAccountRecovery (exclusive to cloud users) is the second step of the two step
   * verification needed to allow a user to recover their account, after RPC StartAccountRecovery.
   * The second form of verification is a user's password or their second factor (depending on
   * what authentication they needed to recover). After successful verification, a recovery
   * approved token is created which allows a user to request protected actions while not logged
   * in e.g: setting a new password or a mfa device, viewing their MFA devices, deleting their MFA
   * devices, and generating new recovery codes.
   *
   * The recovery start token to verify this request becomes deleted before
   * creating a recovery approved token, which invalidates the recovery link users received
   * to finish their verification.
   *
   * If user fails to verify themselves for MaxAccountRecoveryAttempts
   * (combined attempts with RPC StartAccountRecovery), users account will be temporarily locked
   * from logging in. If users still have unused recovery codes left, they still have
   * opportunities to recover their account. To allow this, users recovery attempts are also
   * deleted along with all user tokens which will force the user to restart the recovery process
   * from step 1 (RPC StartAccountRecovery).
   *
   * Recovery approved tokens last RecoveryApprovedTokenTTL.
   *
   * @generated from rpc proto.AuthService.VerifyAccountRecovery
   */
  verifyAccountRecovery: {
    methodKind: "unary";
    input: typeof VerifyAccountRecoveryRequestSchema;
    output: typeof UserTokenV3Schema;
  },
  /**
   * CompleteAccountRecovery (exclusive to cloud users) is the last step in account
   * recovery, after RPC's StartAccountRecovery and VerifyAccountRecovery. This step sets a new
   * password or adds a new mfa device, allowing the user to regain access to their account with
   * the new credentials. When the new authentication is successfully set, any user lock is
   * removed so the user can login immediately afterwards.
   *
   * @generated from rpc proto.AuthService.CompleteAccountRecovery
   */
  completeAccountRecovery: {
    methodKind: "unary";
    input: typeof CompleteAccountRecoveryRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * CreateAccountRecoveryCodes (exclusive to cloud users) creates new set of recovery codes for a
   * user, replacing and invalidating any previously owned codes. Users can only get recovery
   * codes if their username is in a valid email format.
   *
   * @generated from rpc proto.AuthService.CreateAccountRecoveryCodes
   */
  createAccountRecoveryCodes: {
    methodKind: "unary";
    input: typeof CreateAccountRecoveryCodesRequestSchema;
    output: typeof RecoveryCodesSchema;
  },
  /**
   * GetAccountRecoveryToken (exclusive to cloud users) returns a user token resource after
   * verifying that the token requested has not expired and is of the correct recovery kind.
   * Besides checking for validity of a token ID, it is also used to get basic information from
   * the token e.g: username, state of recovery (started or approved) and the type of recovery
   * requested (password or second factor).
   *
   * @generated from rpc proto.AuthService.GetAccountRecoveryToken
   */
  getAccountRecoveryToken: {
    methodKind: "unary";
    input: typeof GetAccountRecoveryTokenRequestSchema;
    output: typeof UserTokenV3Schema;
  },
  /**
   * GetAccountRecoveryCodes (exclusive to cloud users) is a request to return the user in context
   * their recovery codes. This request will not return any secrets (the values of recovery
   * codes), but instead returns non-sensitive data eg. when the recovery codes were created.
   *
   * @generated from rpc proto.AuthService.GetAccountRecoveryCodes
   */
  getAccountRecoveryCodes: {
    methodKind: "unary";
    input: typeof GetAccountRecoveryCodesRequestSchema;
    output: typeof RecoveryCodesSchema;
  },
  /**
   * CreatePrivilegeToken returns a new privilege token after a logged in user successfully
   * re-authenticates with their second factor device. Privilege token lasts PrivilegeTokenTTL and
   * is used to gain access to privileged actions eg: deleting/adding a MFA device.
   *
   * @generated from rpc proto.AuthService.CreatePrivilegeToken
   */
  createPrivilegeToken: {
    methodKind: "unary";
    input: typeof CreatePrivilegeTokenRequestSchema;
    output: typeof UserTokenV3Schema;
  },
  /**
   * GetInstaller retrieves the installer script resource
   *
   * @generated from rpc proto.AuthService.GetInstaller
   */
  getInstaller: {
    methodKind: "unary";
    input: typeof ResourceRequestSchema;
    output: typeof InstallerV1Schema;
  },
  /**
   * GetInstallers retrieves all of installer script resources.
   *
   * @generated from rpc proto.AuthService.GetInstallers
   */
  getInstallers: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof InstallerV1ListSchema;
  },
  /**
   * SetInstaller sets the installer script resource
   *
   * @generated from rpc proto.AuthService.SetInstaller
   */
  setInstaller: {
    methodKind: "unary";
    input: typeof InstallerV1Schema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteInstaller removes the specified installer script resource
   *
   * @generated from rpc proto.AuthService.DeleteInstaller
   */
  deleteInstaller: {
    methodKind: "unary";
    input: typeof ResourceRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllInstallers removes all installer script resources
   *
   * @generated from rpc proto.AuthService.DeleteAllInstallers
   */
  deleteAllInstallers: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * ListResources retrieves a paginated list of resources.
   *
   * @generated from rpc proto.AuthService.ListResources
   */
  listResources: {
    methodKind: "unary";
    input: typeof ListResourcesRequestSchema;
    output: typeof ListResourcesResponseSchema;
  },
  /**
   * ListUnifiedResources retrieves a paginated list of all resource types displayable in the UI.
   *
   * @generated from rpc proto.AuthService.ListUnifiedResources
   */
  listUnifiedResources: {
    methodKind: "unary";
    input: typeof ListUnifiedResourcesRequestSchema;
    output: typeof ListUnifiedResourcesResponseSchema;
  },
  /**
   * GetSSHTargets gets all servers that would match an equivalent ssh dial request. Note that this method
   * returns all resources directly accessible to the user *and* all resources available via 'SearchAsRoles',
   * which is what we want when handling things like ambiguous host errors and resource-based access requests,
   * but may result in confusing behavior if it is used outside of those contexts.
   *
   * @generated from rpc proto.AuthService.GetSSHTargets
   */
  getSSHTargets: {
    methodKind: "unary";
    input: typeof GetSSHTargetsRequestSchema;
    output: typeof GetSSHTargetsResponseSchema;
  },
  /**
   * GetDomainName returns local auth domain of the current auth server
   *
   * @generated from rpc proto.AuthService.GetDomainName
   */
  getDomainName: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof GetDomainNameResponseSchema;
  },
  /**
   * GetClusterCACert returns the PEM-encoded TLS certs for the local cluster
   * without signing keys. If the cluster has multiple TLS certs, they will
   * all be appended.
   *
   * @generated from rpc proto.AuthService.GetClusterCACert
   */
  getClusterCACert: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof GetClusterCACertResponseSchema;
  },
  /**
   * AssertSystemRole is used by agents to prove that they have a given system role when their
   * credentials originate from multiple separate join tokens so that they can be issued an instance
   * certificate that encompasses all of their capabilities. This method will be deprecated once we
   * have a more comprehensive model for join token joining/replacement.
   *
   * @generated from rpc proto.AuthService.AssertSystemRole
   */
  assertSystemRole: {
    methodKind: "unary";
    input: typeof SystemRoleAssertionSchema;
    output: typeof EmptySchema;
  },
  /**
   * SubmitUsageEvent submits an external usage event.
   *
   * @generated from rpc proto.AuthService.SubmitUsageEvent
   */
  submitUsageEvent: {
    methodKind: "unary";
    input: typeof SubmitUsageEventRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * GetLicense returns the license used to start the auth server.
   *
   * @generated from rpc proto.AuthService.GetLicense
   */
  getLicense: {
    methodKind: "unary";
    input: typeof GetLicenseRequestSchema;
    output: typeof GetLicenseResponseSchema;
  },
  /**
   * ListReleases returns a list of Teleport Enterprise releases.
   *
   * @generated from rpc proto.AuthService.ListReleases
   */
  listReleases: {
    methodKind: "unary";
    input: typeof ListReleasesRequestSchema;
    output: typeof ListReleasesResponseSchema;
  },
  /**
   * ListSAMLIdPServiceProviders returns a paginated list of SAML IdP service provider resources.
   *
   * @generated from rpc proto.AuthService.ListSAMLIdPServiceProviders
   */
  listSAMLIdPServiceProviders: {
    methodKind: "unary";
    input: typeof ListSAMLIdPServiceProvidersRequestSchema;
    output: typeof ListSAMLIdPServiceProvidersResponseSchema;
  },
  /**
   * GetSAMLIdPServiceProvider returns the specified SAML IdP service provider resources.
   *
   * @generated from rpc proto.AuthService.GetSAMLIdPServiceProvider
   */
  getSAMLIdPServiceProvider: {
    methodKind: "unary";
    input: typeof GetSAMLIdPServiceProviderRequestSchema;
    output: typeof SAMLIdPServiceProviderV1Schema;
  },
  /**
   * CreateSAMLIdPServiceProvider creates a new SAML IdP service provider resource.
   *
   * @generated from rpc proto.AuthService.CreateSAMLIdPServiceProvider
   */
  createSAMLIdPServiceProvider: {
    methodKind: "unary";
    input: typeof SAMLIdPServiceProviderV1Schema;
    output: typeof EmptySchema;
  },
  /**
   * UpdateSAMLIdPServiceProvider updates an existing SAML IdP service provider resource.
   *
   * @generated from rpc proto.AuthService.UpdateSAMLIdPServiceProvider
   */
  updateSAMLIdPServiceProvider: {
    methodKind: "unary";
    input: typeof SAMLIdPServiceProviderV1Schema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteSAMLIdPServiceProvider removes the specified SAML IdP service provider resource.
   *
   * @generated from rpc proto.AuthService.DeleteSAMLIdPServiceProvider
   */
  deleteSAMLIdPServiceProvider: {
    methodKind: "unary";
    input: typeof DeleteSAMLIdPServiceProviderRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllSAMLIdPServiceProviders removes all SAML IdP service providers.
   *
   * @generated from rpc proto.AuthService.DeleteAllSAMLIdPServiceProviders
   */
  deleteAllSAMLIdPServiceProviders: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * ListUserGroups returns a paginated list of user group resources.
   *
   * @generated from rpc proto.AuthService.ListUserGroups
   */
  listUserGroups: {
    methodKind: "unary";
    input: typeof ListUserGroupsRequestSchema;
    output: typeof ListUserGroupsResponseSchema;
  },
  /**
   * GetUserGroup returns the specified user group resource.
   *
   * @generated from rpc proto.AuthService.GetUserGroup
   */
  getUserGroup: {
    methodKind: "unary";
    input: typeof GetUserGroupRequestSchema;
    output: typeof UserGroupV1Schema;
  },
  /**
   * CreateUserGroup creates a new user group resource.
   *
   * @generated from rpc proto.AuthService.CreateUserGroup
   */
  createUserGroup: {
    methodKind: "unary";
    input: typeof UserGroupV1Schema;
    output: typeof EmptySchema;
  },
  /**
   * UpdateUserGroup updates an existing user group resource.
   *
   * @generated from rpc proto.AuthService.UpdateUserGroup
   */
  updateUserGroup: {
    methodKind: "unary";
    input: typeof UserGroupV1Schema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteUserGroup removes the specified user group resource.
   *
   * @generated from rpc proto.AuthService.DeleteUserGroup
   */
  deleteUserGroup: {
    methodKind: "unary";
    input: typeof DeleteUserGroupRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteAllUserGroups removes all user groups.
   *
   * @generated from rpc proto.AuthService.DeleteAllUserGroups
   */
  deleteAllUserGroups: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
  /**
   * GetHeadlessAuthentication is a request to retrieve a headless authentication from the backend.
   *
   * @generated from rpc proto.AuthService.GetHeadlessAuthentication
   */
  getHeadlessAuthentication: {
    methodKind: "unary";
    input: typeof GetHeadlessAuthenticationRequestSchema;
    output: typeof HeadlessAuthenticationSchema;
  },
  /**
   * WatchPendingHeadlessAuthentications watches the backend for pending headless authentication requests for the user.
   *
   * @generated from rpc proto.AuthService.WatchPendingHeadlessAuthentications
   */
  watchPendingHeadlessAuthentications: {
    methodKind: "server_streaming";
    input: typeof EmptySchema;
    output: typeof EventSchema;
  },
  /**
   * UpdateHeadlessAuthenticationState is a request to update a headless authentication's state.
   *
   * @generated from rpc proto.AuthService.UpdateHeadlessAuthenticationState
   */
  updateHeadlessAuthenticationState: {
    methodKind: "unary";
    input: typeof UpdateHeadlessAuthenticationStateRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * ExportUpgradeWindows is used to load derived maintenance window values for agents that
   * need to export schedules to external upgraders.
   *
   * @generated from rpc proto.AuthService.ExportUpgradeWindows
   */
  exportUpgradeWindows: {
    methodKind: "unary";
    input: typeof ExportUpgradeWindowsRequestSchema;
    output: typeof ExportUpgradeWindowsResponseSchema;
  },
  /**
   * GetClusterMaintenanceConfig gets the current maintenance window config singleton.
   *
   * @generated from rpc proto.AuthService.GetClusterMaintenanceConfig
   */
  getClusterMaintenanceConfig: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof ClusterMaintenanceConfigV1Schema;
  },
  /**
   * UpdateClusterMaintenanceConfig updates the current maintenance window config singleton.
   *
   * @generated from rpc proto.AuthService.UpdateClusterMaintenanceConfig
   */
  updateClusterMaintenanceConfig: {
    methodKind: "unary";
    input: typeof ClusterMaintenanceConfigV1Schema;
    output: typeof EmptySchema;
  },
  /**
   * DeleteClusterMaintenanceConfig deletes the current maintenance window config singleton.
   *
   * @generated from rpc proto.AuthService.DeleteClusterMaintenanceConfig
   */
  deleteClusterMaintenanceConfig: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_teleport_legacy_client_proto_authservice, 0);

