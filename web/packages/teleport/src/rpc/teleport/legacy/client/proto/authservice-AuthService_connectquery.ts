// Copyright 2021-2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts"
// @generated from file teleport/legacy/client/proto/authservice.proto (package proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { AccessRequestAllowedPromotionRequest, AccessRequestAllowedPromotionResponse, AddMFADeviceSyncRequest, AddMFADeviceSyncResponse, AppendDiagnosticTraceRequest, CertAuthorityRequest, ChangePasswordRequest, ChangeUserAuthenticationRequest, ChangeUserAuthenticationResponse, ClearAlertAcksRequest, CompleteAccountRecoveryRequest, CreateAccountRecoveryCodesRequest, CreateAppSessionRequest, CreateAppSessionResponse, CreateAuthenticateChallengeRequest, CreateGithubConnectorRequest, CreateOIDCConnectorRequest, CreatePrivilegeTokenRequest, CreateRegisterChallengeRequest, CreateResetPasswordTokenRequest, CreateRoleRequest, CreateSAMLConnectorRequest, CreateSAMLIdPSessionRequest, CreateSAMLIdPSessionResponse, CreateSessionTrackerRequest, CreateSnowflakeSessionRequest, CreateSnowflakeSessionResponse, CreateTokenV2Request, CRL, DatabaseCertRequest, DatabaseCertResponse, DatabaseCSRRequest, DatabaseCSRResponse, DeleteAllApplicationServersRequest, DeleteAllDatabaseServersRequest, DeleteAllDatabaseServicesRequest, DeleteAllKubernetesServersRequest, DeleteApplicationServerRequest, DeleteAppSessionRequest, DeleteDatabaseServerRequest, DeleteKubernetesServerRequest, DeleteLockRequest, DeleteMFADeviceSyncRequest, DeleteRoleRequest, DeleteSAMLIdPServiceProviderRequest, DeleteSAMLIdPSessionRequest, DeleteSnowflakeSessionRequest, DeleteUserAppSessionsRequest, DeleteUserGroupRequest, DeleteUserRequest, DeleteUserSAMLIdPSessionsRequest, DeleteWindowsDesktopRequest, DeleteWindowsDesktopServiceRequest, DesktopBootstrapScriptResponse, Events, ExportUpgradeWindowsRequest, ExportUpgradeWindowsResponse, GenerateAppTokenRequest, GenerateAppTokenResponse, GetAccountRecoveryCodesRequest, GetAccountRecoveryTokenRequest, GetAlertAcksRequest, GetAlertAcksResponse, GetAppSessionRequest, GetAppSessionResponse, GetClusterAlertsResponse, GetClusterCACertResponse, GetConnectionDiagnosticRequest, GetDomainNameResponse, GetEventsRequest, GetGithubAuthRequestRequest, GetHeadlessAuthenticationRequest, GetLicenseRequest, GetLicenseResponse, GetLockRequest, GetLocksRequest, GetLocksResponse, GetMFADevicesRequest, GetMFADevicesResponse, GetOIDCAuthRequestRequest, GetResetPasswordTokenRequest, GetRoleRequest, GetRolesResponse, GetSAMLAuthRequestRequest, GetSAMLIdPServiceProviderRequest, GetSAMLIdPSessionRequest, GetSAMLIdPSessionResponse, GetSessionEventsRequest, GetSessionTrackerRequest, GetSnowflakeSessionRequest, GetSnowflakeSessionResponse, GetSnowflakeSessionsResponse, GetSSHTargetsRequest, GetSSHTargetsResponse, GetSSODiagnosticInfoRequest, GetUserGroupRequest, GetUserRequest, GetWebSessionResponse, GetWebSessionsResponse, GetWebTokenResponse, GetWebTokensResponse, GetWindowsDesktopServiceRequest, GetWindowsDesktopServiceResponse, GetWindowsDesktopServicesResponse, GetWindowsDesktopsResponse, HostCertsRequest, InventoryConnectedServiceCounts, InventoryConnectedServiceCountsRequest, InventoryPingRequest, InventoryPingResponse, InventoryStatusRequest, InventoryStatusSummary, IsMFARequiredRequest, IsMFARequiredResponse, ListAccessRequestsRequest, ListAccessRequestsResponse, ListAppSessionsRequest, ListAppSessionsResponse, ListReleasesRequest, ListReleasesResponse, ListResourcesRequest, ListResourcesResponse, ListRolesRequest, ListRolesResponse, ListSAMLIdPServiceProvidersRequest, ListSAMLIdPServiceProvidersResponse, ListSAMLIdPSessionsRequest, ListSAMLIdPSessionsResponse, ListUnifiedResourcesRequest, ListUnifiedResourcesResponse, ListUserGroupsRequest, ListUserGroupsResponse, MFAAuthenticateChallenge, MFARegisterChallenge, OpenSSHCert, OpenSSHCertRequest, PingRequest, PingResponse, PluginDataSeq, RecoveryCodes, RemoveSessionTrackerRequest, ReplaceRemoteLocksRequest, RequestID, RequestStateSetter, Semaphores, SnowflakeJWTRequest, SnowflakeJWTResponse, StartAccountRecoveryRequest, SubmitUsageEventRequest, SystemRoleAssertion, UpdateGithubConnectorRequest, UpdateHeadlessAuthenticationStateRequest, UpdateOIDCConnectorRequest, UpdateRoleRequest, UpdateSAMLConnectorRequest, UpdateSessionTrackerRequest, UpsertApplicationServerRequest, UpsertClusterAlertRequest, UpsertDatabaseServerRequest, UpsertDatabaseServiceRequest, UpsertGithubConnectorRequest, UpsertKubernetesServerRequest, UpsertOIDCConnectorRequest, UpsertRoleRequest, UpsertSAMLConnectorRequest, UpsertTokenV2Request, UserCertsRequest, VerifyAccountRecoveryRequest, WindowsDesktopCertRequest, WindowsDesktopCertResponse } from "./authservice_pb.js";
import { AccessCapabilities, AccessCapabilitiesRequest, AccessRequestV3, AccessReviewSubmission, AcquireSemaphoreRequest, AlertAcknowledgement, AppV3, AppV3List, AuthPreferenceV2, ClusterAuditConfigV2, ClusterMaintenanceConfigV1, ClusterNetworkingConfigV2, ConnectionDiagnosticV1, DatabaseV3, DatabaseV3List, DeleteWebSessionRequest, DeleteWebTokenRequest, GetClusterAlertsRequest, GetWebSessionRequest, GetWebTokenRequest, GithubAuthRequest, GithubConnectorV3, GithubConnectorV3List, HeadlessAuthentication, InstallerV1, InstallerV1List, KeepAlive, KubernetesClusterV3, KubernetesClusterV3List, LockV2, NetworkRestrictionsV4, OIDCAuthRequest, OIDCConnectorV3, OIDCConnectorV3List, PluginDataFilter, PluginDataUpdateParams, ProvisionTokenV2, ProvisionTokenV2List, RemoteClusterV3, ResourceInNamespaceRequest, ResourceRequest, ResourcesInNamespaceRequest, ResourcesWithSecretsRequest, ResourceWithSecretsRequest, RoleV6, SAMLAuthRequest, SAMLConnectorV2, SAMLConnectorV2List, SAMLIdPServiceProviderV1, SemaphoreFilter, SemaphoreLease, ServerInfoV1, ServerV2, SessionRecordingConfigV2, SessionTrackerV1, SSODiagnosticInfo, TrustedClusterV2, TrustedClusterV2List, UIConfigV1, UserGroupV1, UserTokenV3, UserV2, WindowsDesktopFilter, WindowsDesktopServiceV3, WindowsDesktopV3 } from "../../types/types_pb.js";
import { Certs } from "./certs_pb.js";
import { OneOf } from "../../types/events/events_pb.js";

/**
 * GetInventoryStatus gets information about current instance inventory.
 *
 * @generated from rpc proto.AuthService.GetInventoryStatus
 */
export const getInventoryStatus = {
  localName: "getInventoryStatus",
  name: "GetInventoryStatus",
  kind: MethodKind.Unary,
  I: InventoryStatusRequest,
  O: InventoryStatusSummary,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetInventoryConnectedServiceCounts returns the counts of each connected service seen in the inventory.
 *
 * @generated from rpc proto.AuthService.GetInventoryConnectedServiceCounts
 */
export const getInventoryConnectedServiceCounts = {
  localName: "getInventoryConnectedServiceCounts",
  name: "GetInventoryConnectedServiceCounts",
  kind: MethodKind.Unary,
  I: InventoryConnectedServiceCountsRequest,
  O: InventoryConnectedServiceCounts,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * PingInventory attempts to trigger a downstream inventory ping (used in testing/debug).
 *
 * @generated from rpc proto.AuthService.PingInventory
 */
export const pingInventory = {
  localName: "pingInventory",
  name: "PingInventory",
  kind: MethodKind.Unary,
  I: InventoryPingRequest,
  O: InventoryPingResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetClusterAlerts loads cluster-level alert messages.
 *
 * @generated from rpc proto.AuthService.GetClusterAlerts
 */
export const getClusterAlerts = {
  localName: "getClusterAlerts",
  name: "GetClusterAlerts",
  kind: MethodKind.Unary,
  I: GetClusterAlertsRequest,
  O: GetClusterAlertsResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertClusterAlert creates a cluster alert.
 *
 * @generated from rpc proto.AuthService.UpsertClusterAlert
 */
export const upsertClusterAlert = {
  localName: "upsertClusterAlert",
  name: "UpsertClusterAlert",
  kind: MethodKind.Unary,
  I: UpsertClusterAlertRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateAlertAck marks a cluster alert as acknowledged.
 *
 * @generated from rpc proto.AuthService.CreateAlertAck
 */
export const createAlertAck = {
  localName: "createAlertAck",
  name: "CreateAlertAck",
  kind: MethodKind.Unary,
  I: AlertAcknowledgement,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetAlertAcks gets active alert ackowledgements.
 *
 * @generated from rpc proto.AuthService.GetAlertAcks
 */
export const getAlertAcks = {
  localName: "getAlertAcks",
  name: "GetAlertAcks",
  kind: MethodKind.Unary,
  I: GetAlertAcksRequest,
  O: GetAlertAcksResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * ClearAlertAcks clears alert acknowledgments.
 *
 * @generated from rpc proto.AuthService.ClearAlertAcks
 */
export const clearAlertAcks = {
  localName: "clearAlertAcks",
  name: "ClearAlertAcks",
  kind: MethodKind.Unary,
  I: ClearAlertAcksRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateSessionTracker creates a new session tracker resource.
 *
 * @generated from rpc proto.AuthService.CreateSessionTracker
 */
export const createSessionTracker = {
  localName: "createSessionTracker",
  name: "CreateSessionTracker",
  kind: MethodKind.Unary,
  I: CreateSessionTrackerRequest,
  O: SessionTrackerV1,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetSessionTracker fetches a session tracker resource.
 *
 * @generated from rpc proto.AuthService.GetSessionTracker
 */
export const getSessionTracker = {
  localName: "getSessionTracker",
  name: "GetSessionTracker",
  kind: MethodKind.Unary,
  I: GetSessionTrackerRequest,
  O: SessionTrackerV1,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * RemoveSessionTracker removes a session tracker resource.
 *
 * @generated from rpc proto.AuthService.RemoveSessionTracker
 */
export const removeSessionTracker = {
  localName: "removeSessionTracker",
  name: "RemoveSessionTracker",
  kind: MethodKind.Unary,
  I: RemoveSessionTrackerRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpdateSessionTracker updates some state of a session tracker.
 *
 * @generated from rpc proto.AuthService.UpdateSessionTracker
 */
export const updateSessionTracker = {
  localName: "updateSessionTracker",
  name: "UpdateSessionTracker",
  kind: MethodKind.Unary,
  I: UpdateSessionTrackerRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetNode retrieves a node described by the given request.
 *
 * @generated from rpc proto.AuthService.GetNode
 */
export const getNode = {
  localName: "getNode",
  name: "GetNode",
  kind: MethodKind.Unary,
  I: ResourceInNamespaceRequest,
  O: ServerV2,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertNode upserts a node in a backend.
 *
 * @generated from rpc proto.AuthService.UpsertNode
 */
export const upsertNode = {
  localName: "upsertNode",
  name: "UpsertNode",
  kind: MethodKind.Unary,
  I: ServerV2,
  O: KeepAlive,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteNode deletes an existing node in a backend described by the given request.
 *
 * @generated from rpc proto.AuthService.DeleteNode
 */
export const deleteNode = {
  localName: "deleteNode",
  name: "DeleteNode",
  kind: MethodKind.Unary,
  I: ResourceInNamespaceRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllNodes deletes all nodes.
 *
 * @generated from rpc proto.AuthService.DeleteAllNodes
 */
export const deleteAllNodes = {
  localName: "deleteAllNodes",
  name: "DeleteAllNodes",
  kind: MethodKind.Unary,
  I: ResourcesInNamespaceRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GenerateUserCerts generates a set of user certificates.
 *
 * @generated from rpc proto.AuthService.GenerateUserCerts
 */
export const generateUserCerts = {
  localName: "generateUserCerts",
  name: "GenerateUserCerts",
  kind: MethodKind.Unary,
  I: UserCertsRequest,
  O: Certs,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GenerateHostCerts generates a set of host certificates.
 *
 * @generated from rpc proto.AuthService.GenerateHostCerts
 */
export const generateHostCerts = {
  localName: "generateHostCerts",
  name: "GenerateHostCerts",
  kind: MethodKind.Unary,
  I: HostCertsRequest,
  O: Certs,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GenerateOpenSSHCert signs a SSH certificate that can be used
 * to connect to Agentless nodes.
 *
 * @generated from rpc proto.AuthService.GenerateOpenSSHCert
 */
export const generateOpenSSHCert = {
  localName: "generateOpenSSHCert",
  name: "GenerateOpenSSHCert",
  kind: MethodKind.Unary,
  I: OpenSSHCertRequest,
  O: OpenSSHCert,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * IsMFARequired checks whether MFA is required to access the specified
 * target.
 *
 * @generated from rpc proto.AuthService.IsMFARequired
 */
export const isMFARequired = {
  localName: "isMFARequired",
  name: "IsMFARequired",
  kind: MethodKind.Unary,
  I: IsMFARequiredRequest,
  O: IsMFARequiredResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * ListAccessRequests gets access requests with pagination and sorting.
 *
 * @generated from rpc proto.AuthService.ListAccessRequests
 */
export const listAccessRequests = {
  localName: "listAccessRequests",
  name: "ListAccessRequests",
  kind: MethodKind.Unary,
  I: ListAccessRequestsRequest,
  O: ListAccessRequestsResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateAccessRequest creates a new access request.
 * Deprecated: use CreateAccessRequestV2 instead.
 * DELETE IN v15.0.0.
 *
 * @generated from rpc proto.AuthService.CreateAccessRequest
 */
export const createAccessRequest = {
  localName: "createAccessRequest",
  name: "CreateAccessRequest",
  kind: MethodKind.Unary,
  I: AccessRequestV3,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateAccessRequestV2 creates a new access request.
 *
 * @generated from rpc proto.AuthService.CreateAccessRequestV2
 */
export const createAccessRequestV2 = {
  localName: "createAccessRequestV2",
  name: "CreateAccessRequestV2",
  kind: MethodKind.Unary,
  I: AccessRequestV3,
  O: AccessRequestV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAccessRequest deletes an access request.
 *
 * @generated from rpc proto.AuthService.DeleteAccessRequest
 */
export const deleteAccessRequest = {
  localName: "deleteAccessRequest",
  name: "DeleteAccessRequest",
  kind: MethodKind.Unary,
  I: RequestID,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * SetAccessRequestState sets the state of an access request.
 *
 * @generated from rpc proto.AuthService.SetAccessRequestState
 */
export const setAccessRequestState = {
  localName: "setAccessRequestState",
  name: "SetAccessRequestState",
  kind: MethodKind.Unary,
  I: RequestStateSetter,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * SubmitAccessReview applies a review to a request and returns the post-application state.
 *
 * @generated from rpc proto.AuthService.SubmitAccessReview
 */
export const submitAccessReview = {
  localName: "submitAccessReview",
  name: "SubmitAccessReview",
  kind: MethodKind.Unary,
  I: AccessReviewSubmission,
  O: AccessRequestV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetAccessCapabilities requests the access capabilities of a user.
 *
 * @generated from rpc proto.AuthService.GetAccessCapabilities
 */
export const getAccessCapabilities = {
  localName: "getAccessCapabilities",
  name: "GetAccessCapabilities",
  kind: MethodKind.Unary,
  I: AccessCapabilitiesRequest,
  O: AccessCapabilities,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetAccessRequestAllowedPromotions returns a list of allowed promotions from an access request to an access list.
 *
 * @generated from rpc proto.AuthService.GetAccessRequestAllowedPromotions
 */
export const getAccessRequestAllowedPromotions = {
  localName: "getAccessRequestAllowedPromotions",
  name: "GetAccessRequestAllowedPromotions",
  kind: MethodKind.Unary,
  I: AccessRequestAllowedPromotionRequest,
  O: AccessRequestAllowedPromotionResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetPluginData gets all plugin data matching the supplied filter.
 *
 * @generated from rpc proto.AuthService.GetPluginData
 */
export const getPluginData = {
  localName: "getPluginData",
  name: "GetPluginData",
  kind: MethodKind.Unary,
  I: PluginDataFilter,
  O: PluginDataSeq,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpdatePluginData updates a plugin's resource-specific datastore.
 *
 * @generated from rpc proto.AuthService.UpdatePluginData
 */
export const updatePluginData = {
  localName: "updatePluginData",
  name: "UpdatePluginData",
  kind: MethodKind.Unary,
  I: PluginDataUpdateParams,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * Ping gets basic info about the auth server. This method is intended
 * to mimic the behavior of the proxy's Ping method, and may be used by
 * clients for verification or configuration on startup.
 *
 * @generated from rpc proto.AuthService.Ping
 */
export const ping = {
  localName: "ping",
  name: "Ping",
  kind: MethodKind.Unary,
  I: PingRequest,
  O: PingResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetResetPasswordToken returns a reset password token.
 *
 * @generated from rpc proto.AuthService.GetResetPasswordToken
 */
export const getResetPasswordToken = {
  localName: "getResetPasswordToken",
  name: "GetResetPasswordToken",
  kind: MethodKind.Unary,
  I: GetResetPasswordTokenRequest,
  O: UserTokenV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateResetPasswordToken resets users current password and second factors and creates a reset
 * password token.
 *
 * Only local users may be reset.
 *
 * @generated from rpc proto.AuthService.CreateResetPasswordToken
 */
export const createResetPasswordToken = {
  localName: "createResetPasswordToken",
  name: "CreateResetPasswordToken",
  kind: MethodKind.Unary,
  I: CreateResetPasswordTokenRequest,
  O: UserTokenV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetUser gets a user resource by name.
 *
 * Deprecated: Use [teleport.users.v1.UsersService] instead.
 *
 * @generated from rpc proto.AuthService.GetUser
 * @deprecated
 */
export const getUser = {
  localName: "getUser",
  name: "GetUser",
  kind: MethodKind.Unary,
  I: GetUserRequest,
  O: UserV2,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetCurrentUser returns current user as seen by the server.
 * Useful especially in the context of remote clusters which perform role and trait mapping.
 *
 * Deprecated: Use [teleport.users.v1.UsersService] instead.
 *
 * @generated from rpc proto.AuthService.GetCurrentUser
 * @deprecated
 */
export const getCurrentUser = {
  localName: "getCurrentUser",
  name: "GetCurrentUser",
  kind: MethodKind.Unary,
  I: Empty,
  O: UserV2,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateUser inserts a new user entry to a backend.
 *
 * Deprecated: Use [teleport.users.v1.UsersService] instead.
 *
 * @generated from rpc proto.AuthService.CreateUser
 * @deprecated
 */
export const createUser = {
  localName: "createUser",
  name: "CreateUser",
  kind: MethodKind.Unary,
  I: UserV2,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpdateUser updates an existing user in a backend.
 *
 * Deprecated: Use [teleport.users.v1.UsersService] instead.
 *
 * @generated from rpc proto.AuthService.UpdateUser
 * @deprecated
 */
export const updateUser = {
  localName: "updateUser",
  name: "UpdateUser",
  kind: MethodKind.Unary,
  I: UserV2,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteUser deletes an existing user in a backend by username.
 *
 * Deprecated: Use [teleport.users.v1.UsersService] instead.
 *
 * @generated from rpc proto.AuthService.DeleteUser
 * @deprecated
 */
export const deleteUser = {
  localName: "deleteUser",
  name: "DeleteUser",
  kind: MethodKind.Unary,
  I: DeleteUserRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * ChangePassword allows a user to change their own password.
 *
 * Only local users may change their password.
 *
 * @generated from rpc proto.AuthService.ChangePassword
 */
export const changePassword = {
  localName: "changePassword",
  name: "ChangePassword",
  kind: MethodKind.Unary,
  I: ChangePasswordRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * AcquireSemaphore acquires lease with requested resources from semaphore.
 *
 * @generated from rpc proto.AuthService.AcquireSemaphore
 */
export const acquireSemaphore = {
  localName: "acquireSemaphore",
  name: "AcquireSemaphore",
  kind: MethodKind.Unary,
  I: AcquireSemaphoreRequest,
  O: SemaphoreLease,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * KeepAliveSemaphoreLease updates semaphore lease.
 *
 * @generated from rpc proto.AuthService.KeepAliveSemaphoreLease
 */
export const keepAliveSemaphoreLease = {
  localName: "keepAliveSemaphoreLease",
  name: "KeepAliveSemaphoreLease",
  kind: MethodKind.Unary,
  I: SemaphoreLease,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CancelSemaphoreLease cancels semaphore lease early.
 *
 * @generated from rpc proto.AuthService.CancelSemaphoreLease
 */
export const cancelSemaphoreLease = {
  localName: "cancelSemaphoreLease",
  name: "CancelSemaphoreLease",
  kind: MethodKind.Unary,
  I: SemaphoreLease,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetSemaphores returns a list of all semaphores matching the supplied filter.
 *
 * @generated from rpc proto.AuthService.GetSemaphores
 */
export const getSemaphores = {
  localName: "getSemaphores",
  name: "GetSemaphores",
  kind: MethodKind.Unary,
  I: SemaphoreFilter,
  O: Semaphores,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteSemaphore deletes a semaphore matching the supplied filter.
 *
 * @generated from rpc proto.AuthService.DeleteSemaphore
 */
export const deleteSemaphore = {
  localName: "deleteSemaphore",
  name: "DeleteSemaphore",
  kind: MethodKind.Unary,
  I: SemaphoreFilter,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * EmitAuditEvent emits audit event
 *
 * @generated from rpc proto.AuthService.EmitAuditEvent
 */
export const emitAuditEvent = {
  localName: "emitAuditEvent",
  name: "EmitAuditEvent",
  kind: MethodKind.Unary,
  I: OneOf,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertApplicationServer adds an application server.
 *
 * @generated from rpc proto.AuthService.UpsertApplicationServer
 */
export const upsertApplicationServer = {
  localName: "upsertApplicationServer",
  name: "UpsertApplicationServer",
  kind: MethodKind.Unary,
  I: UpsertApplicationServerRequest,
  O: KeepAlive,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteApplicationServer removes an application server.
 *
 * @generated from rpc proto.AuthService.DeleteApplicationServer
 */
export const deleteApplicationServer = {
  localName: "deleteApplicationServer",
  name: "DeleteApplicationServer",
  kind: MethodKind.Unary,
  I: DeleteApplicationServerRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllApplicationServers removes all application servers.
 *
 * @generated from rpc proto.AuthService.DeleteAllApplicationServers
 */
export const deleteAllApplicationServers = {
  localName: "deleteAllApplicationServers",
  name: "DeleteAllApplicationServers",
  kind: MethodKind.Unary,
  I: DeleteAllApplicationServersRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GenerateAppToken will generate a JWT token for application access.
 *
 * @generated from rpc proto.AuthService.GenerateAppToken
 */
export const generateAppToken = {
  localName: "generateAppToken",
  name: "GenerateAppToken",
  kind: MethodKind.Unary,
  I: GenerateAppTokenRequest,
  O: GenerateAppTokenResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetAppSession gets an application web session.
 *
 * @generated from rpc proto.AuthService.GetAppSession
 */
export const getAppSession = {
  localName: "getAppSession",
  name: "GetAppSession",
  kind: MethodKind.Unary,
  I: GetAppSessionRequest,
  O: GetAppSessionResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * ListAppSessions gets all application web sessions.
 *
 * @generated from rpc proto.AuthService.ListAppSessions
 */
export const listAppSessions = {
  localName: "listAppSessions",
  name: "ListAppSessions",
  kind: MethodKind.Unary,
  I: ListAppSessionsRequest,
  O: ListAppSessionsResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateAppSession creates an application web session. Application web
 * sessions represent a browser session the client holds.
 *
 * @generated from rpc proto.AuthService.CreateAppSession
 */
export const createAppSession = {
  localName: "createAppSession",
  name: "CreateAppSession",
  kind: MethodKind.Unary,
  I: CreateAppSessionRequest,
  O: CreateAppSessionResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAppSession removes an application web session.
 *
 * @generated from rpc proto.AuthService.DeleteAppSession
 */
export const deleteAppSession = {
  localName: "deleteAppSession",
  name: "DeleteAppSession",
  kind: MethodKind.Unary,
  I: DeleteAppSessionRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllAppSessions removes all application web sessions.
 *
 * @generated from rpc proto.AuthService.DeleteAllAppSessions
 */
export const deleteAllAppSessions = {
  localName: "deleteAllAppSessions",
  name: "DeleteAllAppSessions",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteUserAppSessions deletes all user’s application sessions.
 *
 * @generated from rpc proto.AuthService.DeleteUserAppSessions
 */
export const deleteUserAppSessions = {
  localName: "deleteUserAppSessions",
  name: "DeleteUserAppSessions",
  kind: MethodKind.Unary,
  I: DeleteUserAppSessionsRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateSnowflakeSession creates web session with sub kind Snowflake used by Database access
 * Snowflake integration.
 *
 * @generated from rpc proto.AuthService.CreateSnowflakeSession
 */
export const createSnowflakeSession = {
  localName: "createSnowflakeSession",
  name: "CreateSnowflakeSession",
  kind: MethodKind.Unary,
  I: CreateSnowflakeSessionRequest,
  O: CreateSnowflakeSessionResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetSnowflakeSession returns a web session with sub kind Snowflake.
 *
 * @generated from rpc proto.AuthService.GetSnowflakeSession
 */
export const getSnowflakeSession = {
  localName: "getSnowflakeSession",
  name: "GetSnowflakeSession",
  kind: MethodKind.Unary,
  I: GetSnowflakeSessionRequest,
  O: GetSnowflakeSessionResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetSnowflakeSessions gets all Snowflake web sessions.
 *
 * @generated from rpc proto.AuthService.GetSnowflakeSessions
 */
export const getSnowflakeSessions = {
  localName: "getSnowflakeSessions",
  name: "GetSnowflakeSessions",
  kind: MethodKind.Unary,
  I: Empty,
  O: GetSnowflakeSessionsResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteSnowflakeSession removes a Snowflake web session.
 *
 * @generated from rpc proto.AuthService.DeleteSnowflakeSession
 */
export const deleteSnowflakeSession = {
  localName: "deleteSnowflakeSession",
  name: "DeleteSnowflakeSession",
  kind: MethodKind.Unary,
  I: DeleteSnowflakeSessionRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllSnowflakeSessions removes all Snowflake web sessions.
 *
 * @generated from rpc proto.AuthService.DeleteAllSnowflakeSessions
 */
export const deleteAllSnowflakeSessions = {
  localName: "deleteAllSnowflakeSessions",
  name: "DeleteAllSnowflakeSessions",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateSAMLIdPSession creates web session with sub kind saml_idp used by the SAML IdP.
 *
 * @generated from rpc proto.AuthService.CreateSAMLIdPSession
 * @deprecated
 */
export const createSAMLIdPSession = {
  localName: "createSAMLIdPSession",
  name: "CreateSAMLIdPSession",
  kind: MethodKind.Unary,
  I: CreateSAMLIdPSessionRequest,
  O: CreateSAMLIdPSessionResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetSAMLIdPSession returns a SAML IdP session with sub kind saml_idp.
 *
 * @generated from rpc proto.AuthService.GetSAMLIdPSession
 * @deprecated
 */
export const getSAMLIdPSession = {
  localName: "getSAMLIdPSession",
  name: "GetSAMLIdPSession",
  kind: MethodKind.Unary,
  I: GetSAMLIdPSessionRequest,
  O: GetSAMLIdPSessionResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * ListSAMLIdPSessions gets all SAML IdP sessions.
 *
 * @generated from rpc proto.AuthService.ListSAMLIdPSessions
 * @deprecated
 */
export const listSAMLIdPSessions = {
  localName: "listSAMLIdPSessions",
  name: "ListSAMLIdPSessions",
  kind: MethodKind.Unary,
  I: ListSAMLIdPSessionsRequest,
  O: ListSAMLIdPSessionsResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteSAMLIdPSession removes a SAML IdP session.
 *
 * @generated from rpc proto.AuthService.DeleteSAMLIdPSession
 * @deprecated
 */
export const deleteSAMLIdPSession = {
  localName: "deleteSAMLIdPSession",
  name: "DeleteSAMLIdPSession",
  kind: MethodKind.Unary,
  I: DeleteSAMLIdPSessionRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllSAMLIdPSessions removes all SAML IdP sessions.
 *
 * @generated from rpc proto.AuthService.DeleteAllSAMLIdPSessions
 * @deprecated
 */
export const deleteAllSAMLIdPSessions = {
  localName: "deleteAllSAMLIdPSessions",
  name: "DeleteAllSAMLIdPSessions",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteUserSAMLIdPSessions deletes all user’s SAML IdP sessions.
 *
 * @generated from rpc proto.AuthService.DeleteUserSAMLIdPSessions
 * @deprecated
 */
export const deleteUserSAMLIdPSessions = {
  localName: "deleteUserSAMLIdPSessions",
  name: "DeleteUserSAMLIdPSessions",
  kind: MethodKind.Unary,
  I: DeleteUserSAMLIdPSessionsRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetWebSession gets a web session.
 *
 * @generated from rpc proto.AuthService.GetWebSession
 */
export const getWebSession = {
  localName: "getWebSession",
  name: "GetWebSession",
  kind: MethodKind.Unary,
  I: GetWebSessionRequest,
  O: GetWebSessionResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetWebSessions gets all web sessions.
 *
 * @generated from rpc proto.AuthService.GetWebSessions
 */
export const getWebSessions = {
  localName: "getWebSessions",
  name: "GetWebSessions",
  kind: MethodKind.Unary,
  I: Empty,
  O: GetWebSessionsResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteWebSession deletes a web session.
 *
 * @generated from rpc proto.AuthService.DeleteWebSession
 */
export const deleteWebSession = {
  localName: "deleteWebSession",
  name: "DeleteWebSession",
  kind: MethodKind.Unary,
  I: DeleteWebSessionRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllWebSessions deletes all web sessions.
 *
 * @generated from rpc proto.AuthService.DeleteAllWebSessions
 */
export const deleteAllWebSessions = {
  localName: "deleteAllWebSessions",
  name: "DeleteAllWebSessions",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetWebToken gets a web token.
 *
 * @generated from rpc proto.AuthService.GetWebToken
 */
export const getWebToken = {
  localName: "getWebToken",
  name: "GetWebToken",
  kind: MethodKind.Unary,
  I: GetWebTokenRequest,
  O: GetWebTokenResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetWebTokens gets all web tokens.
 *
 * @generated from rpc proto.AuthService.GetWebTokens
 */
export const getWebTokens = {
  localName: "getWebTokens",
  name: "GetWebTokens",
  kind: MethodKind.Unary,
  I: Empty,
  O: GetWebTokensResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteWebToken deletes a web token.
 *
 * @generated from rpc proto.AuthService.DeleteWebToken
 */
export const deleteWebToken = {
  localName: "deleteWebToken",
  name: "DeleteWebToken",
  kind: MethodKind.Unary,
  I: DeleteWebTokenRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllWebTokens deletes all web tokens.
 *
 * @generated from rpc proto.AuthService.DeleteAllWebTokens
 */
export const deleteAllWebTokens = {
  localName: "deleteAllWebTokens",
  name: "DeleteAllWebTokens",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpdateRemoteCluster updates remote cluster
 *
 * @generated from rpc proto.AuthService.UpdateRemoteCluster
 */
export const updateRemoteCluster = {
  localName: "updateRemoteCluster",
  name: "UpdateRemoteCluster",
  kind: MethodKind.Unary,
  I: RemoteClusterV3,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertKubernetesServer adds or updates a kubernetes server.
 *
 * @generated from rpc proto.AuthService.UpsertKubernetesServer
 */
export const upsertKubernetesServer = {
  localName: "upsertKubernetesServer",
  name: "UpsertKubernetesServer",
  kind: MethodKind.Unary,
  I: UpsertKubernetesServerRequest,
  O: KeepAlive,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteKubernetesServer removes a kubernetes server.
 *
 * @generated from rpc proto.AuthService.DeleteKubernetesServer
 */
export const deleteKubernetesServer = {
  localName: "deleteKubernetesServer",
  name: "DeleteKubernetesServer",
  kind: MethodKind.Unary,
  I: DeleteKubernetesServerRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllKubernetesServers removes all kubernetes servers.
 *
 * @generated from rpc proto.AuthService.DeleteAllKubernetesServers
 */
export const deleteAllKubernetesServers = {
  localName: "deleteAllKubernetesServers",
  name: "DeleteAllKubernetesServers",
  kind: MethodKind.Unary,
  I: DeleteAllKubernetesServersRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertDatabaseServer registers a new database proxy server.
 *
 * @generated from rpc proto.AuthService.UpsertDatabaseServer
 */
export const upsertDatabaseServer = {
  localName: "upsertDatabaseServer",
  name: "UpsertDatabaseServer",
  kind: MethodKind.Unary,
  I: UpsertDatabaseServerRequest,
  O: KeepAlive,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteDatabaseServer removes the specified database proxy server.
 *
 * @generated from rpc proto.AuthService.DeleteDatabaseServer
 */
export const deleteDatabaseServer = {
  localName: "deleteDatabaseServer",
  name: "DeleteDatabaseServer",
  kind: MethodKind.Unary,
  I: DeleteDatabaseServerRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllDatabaseServers removes all registered database proxy servers.
 *
 * @generated from rpc proto.AuthService.DeleteAllDatabaseServers
 */
export const deleteAllDatabaseServers = {
  localName: "deleteAllDatabaseServers",
  name: "DeleteAllDatabaseServers",
  kind: MethodKind.Unary,
  I: DeleteAllDatabaseServersRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertDatabaseService registers a new DatabaseService.
 *
 * @generated from rpc proto.AuthService.UpsertDatabaseService
 */
export const upsertDatabaseService = {
  localName: "upsertDatabaseService",
  name: "UpsertDatabaseService",
  kind: MethodKind.Unary,
  I: UpsertDatabaseServiceRequest,
  O: KeepAlive,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteDatabaseService removes the specified DatabaseService.
 *
 * @generated from rpc proto.AuthService.DeleteDatabaseService
 */
export const deleteDatabaseService = {
  localName: "deleteDatabaseService",
  name: "DeleteDatabaseService",
  kind: MethodKind.Unary,
  I: ResourceRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllDatabaseServices removes all registered DatabaseServices.
 * If there's an error deleting the resources, there's no guarantee of a rollback.
 * A subset of resources might be deleted while others still exist.
 *
 * @generated from rpc proto.AuthService.DeleteAllDatabaseServices
 */
export const deleteAllDatabaseServices = {
  localName: "deleteAllDatabaseServices",
  name: "DeleteAllDatabaseServices",
  kind: MethodKind.Unary,
  I: DeleteAllDatabaseServicesRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * SignDatabaseCSR generates client certificate used by proxy to
 * authenticate with a remote database service.
 *
 * @generated from rpc proto.AuthService.SignDatabaseCSR
 */
export const signDatabaseCSR = {
  localName: "signDatabaseCSR",
  name: "SignDatabaseCSR",
  kind: MethodKind.Unary,
  I: DatabaseCSRRequest,
  O: DatabaseCSRResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GenerateDatabaseCert generates client certificate used by a database
 * service to authenticate with the database instance.
 *
 * @generated from rpc proto.AuthService.GenerateDatabaseCert
 */
export const generateDatabaseCert = {
  localName: "generateDatabaseCert",
  name: "GenerateDatabaseCert",
  kind: MethodKind.Unary,
  I: DatabaseCertRequest,
  O: DatabaseCertResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * / GenerateSnowflakeJWT generates JWT in the format required by Snowflake.
 *
 * @generated from rpc proto.AuthService.GenerateSnowflakeJWT
 */
export const generateSnowflakeJWT = {
  localName: "generateSnowflakeJWT",
  name: "GenerateSnowflakeJWT",
  kind: MethodKind.Unary,
  I: SnowflakeJWTRequest,
  O: SnowflakeJWTResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetRole retrieves a role described by the given request.
 *
 * @generated from rpc proto.AuthService.GetRole
 */
export const getRole = {
  localName: "getRole",
  name: "GetRole",
  kind: MethodKind.Unary,
  I: GetRoleRequest,
  O: RoleV6,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetRole retrieves all roles.
 *
 * DELETE IN 17.0
 *
 * @generated from rpc proto.AuthService.GetRoles
 */
export const getRoles = {
  localName: "getRoles",
  name: "GetRoles",
  kind: MethodKind.Unary,
  I: Empty,
  O: GetRolesResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * ListRoles is a paginated role getter.
 *
 * @generated from rpc proto.AuthService.ListRoles
 */
export const listRoles = {
  localName: "listRoles",
  name: "ListRoles",
  kind: MethodKind.Unary,
  I: ListRolesRequest,
  O: ListRolesResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateRole creates a new role.
 *
 * @generated from rpc proto.AuthService.CreateRole
 */
export const createRole = {
  localName: "createRole",
  name: "CreateRole",
  kind: MethodKind.Unary,
  I: CreateRoleRequest,
  O: RoleV6,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpdateRole updates an existing role.
 *
 * @generated from rpc proto.AuthService.UpdateRole
 */
export const updateRole = {
  localName: "updateRole",
  name: "UpdateRole",
  kind: MethodKind.Unary,
  I: UpdateRoleRequest,
  O: RoleV6,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertRoleV2 creates or overwrites an existing role.
 *
 * @generated from rpc proto.AuthService.UpsertRoleV2
 */
export const upsertRoleV2 = {
  localName: "upsertRoleV2",
  name: "UpsertRoleV2",
  kind: MethodKind.Unary,
  I: UpsertRoleRequest,
  O: RoleV6,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertRole upserts a role in a backend.
 *
 * Deprecated: use UpsertRoleV2 instead.
 *
 * @generated from rpc proto.AuthService.UpsertRole
 * @deprecated
 */
export const upsertRole = {
  localName: "upsertRole",
  name: "UpsertRole",
  kind: MethodKind.Unary,
  I: RoleV6,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteRole deletes an existing role in a backend described by the given request.
 *
 * @generated from rpc proto.AuthService.DeleteRole
 */
export const deleteRole = {
  localName: "deleteRole",
  name: "DeleteRole",
  kind: MethodKind.Unary,
  I: DeleteRoleRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * AddMFADeviceSync adds a new MFA device.
 *
 * A typical MFA registration sequence calls the following RPCs:
 *
 * 1. CreateAuthenticateChallenge (necessary for registration challenge)
 * 2. (optional) CreatePrivilegeToken
 * 3. CreateRegisterChallenge (uses authn challenge and optionally a token)
 * 4. AddMFADeviceSync
 *
 * @generated from rpc proto.AuthService.AddMFADeviceSync
 */
export const addMFADeviceSync = {
  localName: "addMFADeviceSync",
  name: "AddMFADeviceSync",
  kind: MethodKind.Unary,
  I: AddMFADeviceSyncRequest,
  O: AddMFADeviceSyncResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteMFADeviceSync deletes a users MFA device (nonstream).
 *
 * A typical MFA deletion sequence calls the following RPCs:
 *
 * 1. (optional) CreateAuthenticateChallenge
 *    (may be skipped depending on the token used, but is usually called
 *    regardless)
 * 2. (optional) CreatePrivilegeToken
 * 3. DeleteMFADeviceSync (using either authn challenge or token)
 *
 * @generated from rpc proto.AuthService.DeleteMFADeviceSync
 */
export const deleteMFADeviceSync = {
  localName: "deleteMFADeviceSync",
  name: "DeleteMFADeviceSync",
  kind: MethodKind.Unary,
  I: DeleteMFADeviceSyncRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetMFADevices returns all MFA devices registered for the user calling
 * this RPC.
 *
 * @generated from rpc proto.AuthService.GetMFADevices
 */
export const getMFADevices = {
  localName: "getMFADevices",
  name: "GetMFADevices",
  kind: MethodKind.Unary,
  I: GetMFADevicesRequest,
  O: GetMFADevicesResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateAuthenticateChallenge creates and returns MFA challenges for a users registered MFA
 * devices.
 *
 * @generated from rpc proto.AuthService.CreateAuthenticateChallenge
 */
export const createAuthenticateChallenge = {
  localName: "createAuthenticateChallenge",
  name: "CreateAuthenticateChallenge",
  kind: MethodKind.Unary,
  I: CreateAuthenticateChallengeRequest,
  O: MFAAuthenticateChallenge,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateRegisterChallenge creates and returns MFA register challenge for a new MFA device.
 *
 * @generated from rpc proto.AuthService.CreateRegisterChallenge
 */
export const createRegisterChallenge = {
  localName: "createRegisterChallenge",
  name: "CreateRegisterChallenge",
  kind: MethodKind.Unary,
  I: CreateRegisterChallengeRequest,
  O: MFARegisterChallenge,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetOIDCConnector gets an OIDC connector resource by name.
 *
 * @generated from rpc proto.AuthService.GetOIDCConnector
 */
export const getOIDCConnector = {
  localName: "getOIDCConnector",
  name: "GetOIDCConnector",
  kind: MethodKind.Unary,
  I: ResourceWithSecretsRequest,
  O: OIDCConnectorV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetOIDCConnectors gets all current OIDC connector resources.
 *
 * @generated from rpc proto.AuthService.GetOIDCConnectors
 */
export const getOIDCConnectors = {
  localName: "getOIDCConnectors",
  name: "GetOIDCConnectors",
  kind: MethodKind.Unary,
  I: ResourcesWithSecretsRequest,
  O: OIDCConnectorV3List,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertOIDCConnector creates a new OIDC connector in the backend.
 *
 * @generated from rpc proto.AuthService.CreateOIDCConnector
 */
export const createOIDCConnector = {
  localName: "createOIDCConnector",
  name: "CreateOIDCConnector",
  kind: MethodKind.Unary,
  I: CreateOIDCConnectorRequest,
  O: OIDCConnectorV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertOIDCConnector updates an existing OIDC connector in the backend.
 *
 * @generated from rpc proto.AuthService.UpdateOIDCConnector
 */
export const updateOIDCConnector = {
  localName: "updateOIDCConnector",
  name: "UpdateOIDCConnector",
  kind: MethodKind.Unary,
  I: UpdateOIDCConnectorRequest,
  O: OIDCConnectorV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertOIDCConnector upserts an OIDC connector in a backend.
 *
 * Deprecated: Use UpsertOIDCConnectorV2 instead.
 *
 * @generated from rpc proto.AuthService.UpsertOIDCConnector
 * @deprecated
 */
export const upsertOIDCConnector = {
  localName: "upsertOIDCConnector",
  name: "UpsertOIDCConnector",
  kind: MethodKind.Unary,
  I: OIDCConnectorV3,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertOIDCConnectorV2 upserts an OIDC connector in the backend.
 *
 * @generated from rpc proto.AuthService.UpsertOIDCConnectorV2
 */
export const upsertOIDCConnectorV2 = {
  localName: "upsertOIDCConnectorV2",
  name: "UpsertOIDCConnectorV2",
  kind: MethodKind.Unary,
  I: UpsertOIDCConnectorRequest,
  O: OIDCConnectorV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteOIDCConnector deletes an existing OIDC connector in a backend by name.
 *
 * @generated from rpc proto.AuthService.DeleteOIDCConnector
 */
export const deleteOIDCConnector = {
  localName: "deleteOIDCConnector",
  name: "DeleteOIDCConnector",
  kind: MethodKind.Unary,
  I: ResourceRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateOIDCAuthRequest creates OIDCAuthRequest.
 *
 * @generated from rpc proto.AuthService.CreateOIDCAuthRequest
 */
export const createOIDCAuthRequest = {
  localName: "createOIDCAuthRequest",
  name: "CreateOIDCAuthRequest",
  kind: MethodKind.Unary,
  I: OIDCAuthRequest,
  O: OIDCAuthRequest,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetOIDCAuthRequest returns OIDC auth request if found.
 *
 * @generated from rpc proto.AuthService.GetOIDCAuthRequest
 */
export const getOIDCAuthRequest = {
  localName: "getOIDCAuthRequest",
  name: "GetOIDCAuthRequest",
  kind: MethodKind.Unary,
  I: GetOIDCAuthRequestRequest,
  O: OIDCAuthRequest,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetSAMLConnector gets a SAML connector resource by name.
 *
 * @generated from rpc proto.AuthService.GetSAMLConnector
 */
export const getSAMLConnector = {
  localName: "getSAMLConnector",
  name: "GetSAMLConnector",
  kind: MethodKind.Unary,
  I: ResourceWithSecretsRequest,
  O: SAMLConnectorV2,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetSAMLConnectors gets all current SAML connector resources.
 *
 * @generated from rpc proto.AuthService.GetSAMLConnectors
 */
export const getSAMLConnectors = {
  localName: "getSAMLConnectors",
  name: "GetSAMLConnectors",
  kind: MethodKind.Unary,
  I: ResourcesWithSecretsRequest,
  O: SAMLConnectorV2List,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateSAMLConnector creates a new SAML connector in the backend.
 *
 * @generated from rpc proto.AuthService.CreateSAMLConnector
 */
export const createSAMLConnector = {
  localName: "createSAMLConnector",
  name: "CreateSAMLConnector",
  kind: MethodKind.Unary,
  I: CreateSAMLConnectorRequest,
  O: SAMLConnectorV2,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpdateSAMLConnector updates an existing SAML connector in the backend.
 *
 * @generated from rpc proto.AuthService.UpdateSAMLConnector
 */
export const updateSAMLConnector = {
  localName: "updateSAMLConnector",
  name: "UpdateSAMLConnector",
  kind: MethodKind.Unary,
  I: UpdateSAMLConnectorRequest,
  O: SAMLConnectorV2,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertSAMLConnector upserts a SAML connector in a backend.
 *
 * Deprecated: Use UpsertSAMLConnectorV2 instead.
 *
 * @generated from rpc proto.AuthService.UpsertSAMLConnector
 * @deprecated
 */
export const upsertSAMLConnector = {
  localName: "upsertSAMLConnector",
  name: "UpsertSAMLConnector",
  kind: MethodKind.Unary,
  I: SAMLConnectorV2,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertSAMLConnectorV2 upserts a SAML connector in a backend.
 *
 * @generated from rpc proto.AuthService.UpsertSAMLConnectorV2
 */
export const upsertSAMLConnectorV2 = {
  localName: "upsertSAMLConnectorV2",
  name: "UpsertSAMLConnectorV2",
  kind: MethodKind.Unary,
  I: UpsertSAMLConnectorRequest,
  O: SAMLConnectorV2,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteSAMLConnector deletes an existing SAML connector in a backend by name.
 *
 * @generated from rpc proto.AuthService.DeleteSAMLConnector
 */
export const deleteSAMLConnector = {
  localName: "deleteSAMLConnector",
  name: "DeleteSAMLConnector",
  kind: MethodKind.Unary,
  I: ResourceRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateSAMLAuthRequest creates SAMLAuthRequest.
 *
 * @generated from rpc proto.AuthService.CreateSAMLAuthRequest
 */
export const createSAMLAuthRequest = {
  localName: "createSAMLAuthRequest",
  name: "CreateSAMLAuthRequest",
  kind: MethodKind.Unary,
  I: SAMLAuthRequest,
  O: SAMLAuthRequest,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetSAMLAuthRequest returns SAML auth request if found.
 *
 * @generated from rpc proto.AuthService.GetSAMLAuthRequest
 */
export const getSAMLAuthRequest = {
  localName: "getSAMLAuthRequest",
  name: "GetSAMLAuthRequest",
  kind: MethodKind.Unary,
  I: GetSAMLAuthRequestRequest,
  O: SAMLAuthRequest,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetGithubConnector gets a Github connector resource by name.
 *
 * @generated from rpc proto.AuthService.GetGithubConnector
 */
export const getGithubConnector = {
  localName: "getGithubConnector",
  name: "GetGithubConnector",
  kind: MethodKind.Unary,
  I: ResourceWithSecretsRequest,
  O: GithubConnectorV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetGithubConnectors gets all current Github connector resources.
 *
 * @generated from rpc proto.AuthService.GetGithubConnectors
 */
export const getGithubConnectors = {
  localName: "getGithubConnectors",
  name: "GetGithubConnectors",
  kind: MethodKind.Unary,
  I: ResourcesWithSecretsRequest,
  O: GithubConnectorV3List,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateGithubConnector creates a new Github connector in the backend.
 *
 * @generated from rpc proto.AuthService.CreateGithubConnector
 */
export const createGithubConnector = {
  localName: "createGithubConnector",
  name: "CreateGithubConnector",
  kind: MethodKind.Unary,
  I: CreateGithubConnectorRequest,
  O: GithubConnectorV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpdateGithubConnector updates an existing Github connector in the backend.
 *
 * @generated from rpc proto.AuthService.UpdateGithubConnector
 */
export const updateGithubConnector = {
  localName: "updateGithubConnector",
  name: "UpdateGithubConnector",
  kind: MethodKind.Unary,
  I: UpdateGithubConnectorRequest,
  O: GithubConnectorV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertGithubConnector upserts a Github connector in a backend.
 *
 * Deprecated: Use UpsertGithubConnectorV2 instead.
 *
 * @generated from rpc proto.AuthService.UpsertGithubConnector
 * @deprecated
 */
export const upsertGithubConnector = {
  localName: "upsertGithubConnector",
  name: "UpsertGithubConnector",
  kind: MethodKind.Unary,
  I: GithubConnectorV3,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertGithubConnectorV2 upserts a Github connector in a backend.
 *
 * @generated from rpc proto.AuthService.UpsertGithubConnectorV2
 */
export const upsertGithubConnectorV2 = {
  localName: "upsertGithubConnectorV2",
  name: "UpsertGithubConnectorV2",
  kind: MethodKind.Unary,
  I: UpsertGithubConnectorRequest,
  O: GithubConnectorV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteGithubConnector deletes an existing Github connector in a backend by name.
 *
 * @generated from rpc proto.AuthService.DeleteGithubConnector
 */
export const deleteGithubConnector = {
  localName: "deleteGithubConnector",
  name: "DeleteGithubConnector",
  kind: MethodKind.Unary,
  I: ResourceRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateGithubAuthRequest creates GithubAuthRequest.
 *
 * @generated from rpc proto.AuthService.CreateGithubAuthRequest
 */
export const createGithubAuthRequest = {
  localName: "createGithubAuthRequest",
  name: "CreateGithubAuthRequest",
  kind: MethodKind.Unary,
  I: GithubAuthRequest,
  O: GithubAuthRequest,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetGithubAuthRequest returns Github auth request if found.
 *
 * @generated from rpc proto.AuthService.GetGithubAuthRequest
 */
export const getGithubAuthRequest = {
  localName: "getGithubAuthRequest",
  name: "GetGithubAuthRequest",
  kind: MethodKind.Unary,
  I: GetGithubAuthRequestRequest,
  O: GithubAuthRequest,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetSSODiagnosticInfo returns SSO diagnostic info records.
 *
 * @generated from rpc proto.AuthService.GetSSODiagnosticInfo
 */
export const getSSODiagnosticInfo = {
  localName: "getSSODiagnosticInfo",
  name: "GetSSODiagnosticInfo",
  kind: MethodKind.Unary,
  I: GetSSODiagnosticInfoRequest,
  O: SSODiagnosticInfo,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetServerInfo returns a ServerInfo by name.
 *
 * @generated from rpc proto.AuthService.GetServerInfo
 */
export const getServerInfo = {
  localName: "getServerInfo",
  name: "GetServerInfo",
  kind: MethodKind.Unary,
  I: ResourceRequest,
  O: ServerInfoV1,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertServerInfo upserts a ServerInfo.
 *
 * @generated from rpc proto.AuthService.UpsertServerInfo
 */
export const upsertServerInfo = {
  localName: "upsertServerInfo",
  name: "UpsertServerInfo",
  kind: MethodKind.Unary,
  I: ServerInfoV1,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteServerInfo deletes a ServerInfo by name.
 *
 * @generated from rpc proto.AuthService.DeleteServerInfo
 */
export const deleteServerInfo = {
  localName: "deleteServerInfo",
  name: "DeleteServerInfo",
  kind: MethodKind.Unary,
  I: ResourceRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllServerInfos deletes all ServerInfos.
 *
 * @generated from rpc proto.AuthService.DeleteAllServerInfos
 */
export const deleteAllServerInfos = {
  localName: "deleteAllServerInfos",
  name: "DeleteAllServerInfos",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetTrustedCluster gets a Trusted Cluster resource by name.
 *
 * @generated from rpc proto.AuthService.GetTrustedCluster
 */
export const getTrustedCluster = {
  localName: "getTrustedCluster",
  name: "GetTrustedCluster",
  kind: MethodKind.Unary,
  I: ResourceRequest,
  O: TrustedClusterV2,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetTrustedClusters gets all current Trusted Cluster resources.
 *
 * @generated from rpc proto.AuthService.GetTrustedClusters
 */
export const getTrustedClusters = {
  localName: "getTrustedClusters",
  name: "GetTrustedClusters",
  kind: MethodKind.Unary,
  I: Empty,
  O: TrustedClusterV2List,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertTrustedCluster upserts a Trusted Cluster in a backend.
 *
 * @generated from rpc proto.AuthService.UpsertTrustedCluster
 */
export const upsertTrustedCluster = {
  localName: "upsertTrustedCluster",
  name: "UpsertTrustedCluster",
  kind: MethodKind.Unary,
  I: TrustedClusterV2,
  O: TrustedClusterV2,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteTrustedCluster deletes an existing Trusted Cluster in a backend by name.
 *
 * @generated from rpc proto.AuthService.DeleteTrustedCluster
 */
export const deleteTrustedCluster = {
  localName: "deleteTrustedCluster",
  name: "DeleteTrustedCluster",
  kind: MethodKind.Unary,
  I: ResourceRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetToken retrieves a token described by the given request.
 *
 * @generated from rpc proto.AuthService.GetToken
 */
export const getToken = {
  localName: "getToken",
  name: "GetToken",
  kind: MethodKind.Unary,
  I: ResourceRequest,
  O: ProvisionTokenV2,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetToken retrieves all tokens.
 *
 * @generated from rpc proto.AuthService.GetTokens
 */
export const getTokens = {
  localName: "getTokens",
  name: "GetTokens",
  kind: MethodKind.Unary,
  I: Empty,
  O: ProvisionTokenV2List,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateTokenV2 creates a token in a backend.
 *
 * @generated from rpc proto.AuthService.CreateTokenV2
 */
export const createTokenV2 = {
  localName: "createTokenV2",
  name: "CreateTokenV2",
  kind: MethodKind.Unary,
  I: CreateTokenV2Request,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertTokenV2 upserts a token in a backend.
 *
 * @generated from rpc proto.AuthService.UpsertTokenV2
 */
export const upsertTokenV2 = {
  localName: "upsertTokenV2",
  name: "UpsertTokenV2",
  kind: MethodKind.Unary,
  I: UpsertTokenV2Request,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteToken deletes an existing token in a backend described by the given request.
 *
 * @generated from rpc proto.AuthService.DeleteToken
 */
export const deleteToken = {
  localName: "deleteToken",
  name: "DeleteToken",
  kind: MethodKind.Unary,
  I: ResourceRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetClusterAuditConfig gets cluster audit configuration.
 *
 * @generated from rpc proto.AuthService.GetClusterAuditConfig
 */
export const getClusterAuditConfig = {
  localName: "getClusterAuditConfig",
  name: "GetClusterAuditConfig",
  kind: MethodKind.Unary,
  I: Empty,
  O: ClusterAuditConfigV2,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetClusterNetworkingConfig gets cluster networking configuration.
 * Deprecated: Use clusterconfigv1.Service.GetClusterNetworkingConfig instead.
 *
 * @generated from rpc proto.AuthService.GetClusterNetworkingConfig
 * @deprecated
 */
export const getClusterNetworkingConfig = {
  localName: "getClusterNetworkingConfig",
  name: "GetClusterNetworkingConfig",
  kind: MethodKind.Unary,
  I: Empty,
  O: ClusterNetworkingConfigV2,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * SetClusterNetworkingConfig sets cluster networking configuration.
 * Deprecated: Use clusterconfigv1.Service.Update/UpsertClusterNetworkingConfig instead.
 *
 * @generated from rpc proto.AuthService.SetClusterNetworkingConfig
 * @deprecated
 */
export const setClusterNetworkingConfig = {
  localName: "setClusterNetworkingConfig",
  name: "SetClusterNetworkingConfig",
  kind: MethodKind.Unary,
  I: ClusterNetworkingConfigV2,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * ResetClusterNetworkingConfig resets cluster networking configuration to defaults.
 * Deprecated: Use clusterconfigv1.Service.ResetClusterNetworkingConfig instead.
 *
 * @generated from rpc proto.AuthService.ResetClusterNetworkingConfig
 * @deprecated
 */
export const resetClusterNetworkingConfig = {
  localName: "resetClusterNetworkingConfig",
  name: "ResetClusterNetworkingConfig",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetSessionRecordingConfig gets session recording configuration.
 * Deprecated: Use clusterconfigv1.Service.GetSessionRecordingConfig instead.
 *
 * @generated from rpc proto.AuthService.GetSessionRecordingConfig
 * @deprecated
 */
export const getSessionRecordingConfig = {
  localName: "getSessionRecordingConfig",
  name: "GetSessionRecordingConfig",
  kind: MethodKind.Unary,
  I: Empty,
  O: SessionRecordingConfigV2,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * SetSessionRecordingConfig sets session recording configuration.
 * Deprecated: Use clusterconfigv1.Service.Upsert/UpdateSessionRecordingConfig instead.
 *
 * @generated from rpc proto.AuthService.SetSessionRecordingConfig
 * @deprecated
 */
export const setSessionRecordingConfig = {
  localName: "setSessionRecordingConfig",
  name: "SetSessionRecordingConfig",
  kind: MethodKind.Unary,
  I: SessionRecordingConfigV2,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * ResetSessionRecordingConfig resets session recording configuration to defaults.
 * Deprecated: Use clusterconfigv1.Service.ResetSessionRecordingConfig instead.
 *
 * @generated from rpc proto.AuthService.ResetSessionRecordingConfig
 * @deprecated
 */
export const resetSessionRecordingConfig = {
  localName: "resetSessionRecordingConfig",
  name: "ResetSessionRecordingConfig",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetAuthPreference gets cluster auth preference.
 * Deprecated: Use clusterconfigv1.Service.GetAuthPreference instead.
 *
 * @generated from rpc proto.AuthService.GetAuthPreference
 * @deprecated
 */
export const getAuthPreference = {
  localName: "getAuthPreference",
  name: "GetAuthPreference",
  kind: MethodKind.Unary,
  I: Empty,
  O: AuthPreferenceV2,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * SetAuthPreference sets cluster auth preference.
 * Deprecated: Use clusterconfigv1.Service.Create/Update/UpsertAuthPreference instead.
 *
 * @generated from rpc proto.AuthService.SetAuthPreference
 * @deprecated
 */
export const setAuthPreference = {
  localName: "setAuthPreference",
  name: "SetAuthPreference",
  kind: MethodKind.Unary,
  I: AuthPreferenceV2,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * ResetAuthPreference resets cluster auth preference to defaults.
 * Deprecated: Use clusterconfigv1.Service.ResetAuthPreference instead.
 *
 * @generated from rpc proto.AuthService.ResetAuthPreference
 * @deprecated
 */
export const resetAuthPreference = {
  localName: "resetAuthPreference",
  name: "ResetAuthPreference",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetUIConfig gets the configuration for the UI served by the proxy service
 *
 * @generated from rpc proto.AuthService.GetUIConfig
 */
export const getUIConfig = {
  localName: "getUIConfig",
  name: "GetUIConfig",
  kind: MethodKind.Unary,
  I: Empty,
  O: UIConfigV1,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * SetUIConfig sets the configuration for the UI served by the proxy service
 *
 * @generated from rpc proto.AuthService.SetUIConfig
 */
export const setUIConfig = {
  localName: "setUIConfig",
  name: "SetUIConfig",
  kind: MethodKind.Unary,
  I: UIConfigV1,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteUIConfig deletes the custom configuration for the UI served by the proxy service
 *
 * @generated from rpc proto.AuthService.DeleteUIConfig
 */
export const deleteUIConfig = {
  localName: "deleteUIConfig",
  name: "DeleteUIConfig",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetEvents gets events from the audit log.
 *
 * @generated from rpc proto.AuthService.GetEvents
 */
export const getEvents = {
  localName: "getEvents",
  name: "GetEvents",
  kind: MethodKind.Unary,
  I: GetEventsRequest,
  O: Events,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetSessionEvents gets completed session events from the audit log.
 *
 * @generated from rpc proto.AuthService.GetSessionEvents
 */
export const getSessionEvents = {
  localName: "getSessionEvents",
  name: "GetSessionEvents",
  kind: MethodKind.Unary,
  I: GetSessionEventsRequest,
  O: Events,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetLock gets a lock by name.
 *
 * @generated from rpc proto.AuthService.GetLock
 */
export const getLock = {
  localName: "getLock",
  name: "GetLock",
  kind: MethodKind.Unary,
  I: GetLockRequest,
  O: LockV2,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetLocks gets all/in-force locks that match at least one of the targets when specified.
 *
 * @generated from rpc proto.AuthService.GetLocks
 */
export const getLocks = {
  localName: "getLocks",
  name: "GetLocks",
  kind: MethodKind.Unary,
  I: GetLocksRequest,
  O: GetLocksResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertLock upserts a lock.
 *
 * @generated from rpc proto.AuthService.UpsertLock
 */
export const upsertLock = {
  localName: "upsertLock",
  name: "UpsertLock",
  kind: MethodKind.Unary,
  I: LockV2,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteLock deletes a lock.
 *
 * @generated from rpc proto.AuthService.DeleteLock
 */
export const deleteLock = {
  localName: "deleteLock",
  name: "DeleteLock",
  kind: MethodKind.Unary,
  I: DeleteLockRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * ReplaceRemoteLocks replaces the set of locks associated with a remote cluster.
 *
 * @generated from rpc proto.AuthService.ReplaceRemoteLocks
 */
export const replaceRemoteLocks = {
  localName: "replaceRemoteLocks",
  name: "ReplaceRemoteLocks",
  kind: MethodKind.Unary,
  I: ReplaceRemoteLocksRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetNetworkRestrictions retrieves all the network restrictions (allow/deny lists).
 *
 * @generated from rpc proto.AuthService.GetNetworkRestrictions
 */
export const getNetworkRestrictions = {
  localName: "getNetworkRestrictions",
  name: "GetNetworkRestrictions",
  kind: MethodKind.Unary,
  I: Empty,
  O: NetworkRestrictionsV4,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * SetNetworkRestrictions updates the network restrictions.
 *
 * @generated from rpc proto.AuthService.SetNetworkRestrictions
 */
export const setNetworkRestrictions = {
  localName: "setNetworkRestrictions",
  name: "SetNetworkRestrictions",
  kind: MethodKind.Unary,
  I: NetworkRestrictionsV4,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteNetworkRestrictions delete the network restrictions.
 *
 * @generated from rpc proto.AuthService.DeleteNetworkRestrictions
 */
export const deleteNetworkRestrictions = {
  localName: "deleteNetworkRestrictions",
  name: "DeleteNetworkRestrictions",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetApps returns all registered applications.
 *
 * @generated from rpc proto.AuthService.GetApps
 */
export const getApps = {
  localName: "getApps",
  name: "GetApps",
  kind: MethodKind.Unary,
  I: Empty,
  O: AppV3List,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetApp returns an application by name.
 *
 * @generated from rpc proto.AuthService.GetApp
 */
export const getApp = {
  localName: "getApp",
  name: "GetApp",
  kind: MethodKind.Unary,
  I: ResourceRequest,
  O: AppV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateApp creates a new application resource.
 *
 * @generated from rpc proto.AuthService.CreateApp
 */
export const createApp = {
  localName: "createApp",
  name: "CreateApp",
  kind: MethodKind.Unary,
  I: AppV3,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpdateApp updates existing application resource.
 *
 * @generated from rpc proto.AuthService.UpdateApp
 */
export const updateApp = {
  localName: "updateApp",
  name: "UpdateApp",
  kind: MethodKind.Unary,
  I: AppV3,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteApp removes specified application resource.
 *
 * @generated from rpc proto.AuthService.DeleteApp
 */
export const deleteApp = {
  localName: "deleteApp",
  name: "DeleteApp",
  kind: MethodKind.Unary,
  I: ResourceRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllApps removes all application resources.
 *
 * @generated from rpc proto.AuthService.DeleteAllApps
 */
export const deleteAllApps = {
  localName: "deleteAllApps",
  name: "DeleteAllApps",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetDatabases returns all registered databases.
 *
 * @generated from rpc proto.AuthService.GetDatabases
 */
export const getDatabases = {
  localName: "getDatabases",
  name: "GetDatabases",
  kind: MethodKind.Unary,
  I: Empty,
  O: DatabaseV3List,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetDatabase returns a database by name.
 *
 * @generated from rpc proto.AuthService.GetDatabase
 */
export const getDatabase = {
  localName: "getDatabase",
  name: "GetDatabase",
  kind: MethodKind.Unary,
  I: ResourceRequest,
  O: DatabaseV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateDatabase creates a new database resource.
 *
 * @generated from rpc proto.AuthService.CreateDatabase
 */
export const createDatabase = {
  localName: "createDatabase",
  name: "CreateDatabase",
  kind: MethodKind.Unary,
  I: DatabaseV3,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpdateDatabase updates existing database resource.
 *
 * @generated from rpc proto.AuthService.UpdateDatabase
 */
export const updateDatabase = {
  localName: "updateDatabase",
  name: "UpdateDatabase",
  kind: MethodKind.Unary,
  I: DatabaseV3,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteDatabase removes specified database resource.
 *
 * @generated from rpc proto.AuthService.DeleteDatabase
 */
export const deleteDatabase = {
  localName: "deleteDatabase",
  name: "DeleteDatabase",
  kind: MethodKind.Unary,
  I: ResourceRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllDatabases removes all database resources.
 *
 * @generated from rpc proto.AuthService.DeleteAllDatabases
 */
export const deleteAllDatabases = {
  localName: "deleteAllDatabases",
  name: "DeleteAllDatabases",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetKubernetesClusters returns all registered kubernetes clusters.
 *
 * @generated from rpc proto.AuthService.GetKubernetesClusters
 */
export const getKubernetesClusters = {
  localName: "getKubernetesClusters",
  name: "GetKubernetesClusters",
  kind: MethodKind.Unary,
  I: Empty,
  O: KubernetesClusterV3List,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetKubernetesCluster returns a kubernetes cluster by name.
 *
 * @generated from rpc proto.AuthService.GetKubernetesCluster
 */
export const getKubernetesCluster = {
  localName: "getKubernetesCluster",
  name: "GetKubernetesCluster",
  kind: MethodKind.Unary,
  I: ResourceRequest,
  O: KubernetesClusterV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateKubernetesCluster creates a new kubernetes cluster resource.
 *
 * @generated from rpc proto.AuthService.CreateKubernetesCluster
 */
export const createKubernetesCluster = {
  localName: "createKubernetesCluster",
  name: "CreateKubernetesCluster",
  kind: MethodKind.Unary,
  I: KubernetesClusterV3,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpdateKubernetesCluster updates existing kubernetes cluster resource.
 *
 * @generated from rpc proto.AuthService.UpdateKubernetesCluster
 */
export const updateKubernetesCluster = {
  localName: "updateKubernetesCluster",
  name: "UpdateKubernetesCluster",
  kind: MethodKind.Unary,
  I: KubernetesClusterV3,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteKubernetesCluster removes specified kubernetes cluster resource.
 *
 * @generated from rpc proto.AuthService.DeleteKubernetesCluster
 */
export const deleteKubernetesCluster = {
  localName: "deleteKubernetesCluster",
  name: "DeleteKubernetesCluster",
  kind: MethodKind.Unary,
  I: ResourceRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllKubernetesClusters removes all kubernetes cluster resources.
 *
 * @generated from rpc proto.AuthService.DeleteAllKubernetesClusters
 */
export const deleteAllKubernetesClusters = {
  localName: "deleteAllKubernetesClusters",
  name: "DeleteAllKubernetesClusters",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetWindowsDesktopServices returns all registered Windows desktop services.
 *
 * @generated from rpc proto.AuthService.GetWindowsDesktopServices
 */
export const getWindowsDesktopServices = {
  localName: "getWindowsDesktopServices",
  name: "GetWindowsDesktopServices",
  kind: MethodKind.Unary,
  I: Empty,
  O: GetWindowsDesktopServicesResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetWindowsDesktopService gets a Windows desktop service by name.
 *
 * @generated from rpc proto.AuthService.GetWindowsDesktopService
 */
export const getWindowsDesktopService = {
  localName: "getWindowsDesktopService",
  name: "GetWindowsDesktopService",
  kind: MethodKind.Unary,
  I: GetWindowsDesktopServiceRequest,
  O: GetWindowsDesktopServiceResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertWindowsDesktopService registers a new Windows desktop service.
 *
 * @generated from rpc proto.AuthService.UpsertWindowsDesktopService
 */
export const upsertWindowsDesktopService = {
  localName: "upsertWindowsDesktopService",
  name: "UpsertWindowsDesktopService",
  kind: MethodKind.Unary,
  I: WindowsDesktopServiceV3,
  O: KeepAlive,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteWindowsDesktopService removes the specified Windows desktop service.
 *
 * @generated from rpc proto.AuthService.DeleteWindowsDesktopService
 */
export const deleteWindowsDesktopService = {
  localName: "deleteWindowsDesktopService",
  name: "DeleteWindowsDesktopService",
  kind: MethodKind.Unary,
  I: DeleteWindowsDesktopServiceRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllWindowsDesktopServices removes all registered Windows desktop services.
 *
 * @generated from rpc proto.AuthService.DeleteAllWindowsDesktopServices
 */
export const deleteAllWindowsDesktopServices = {
  localName: "deleteAllWindowsDesktopServices",
  name: "DeleteAllWindowsDesktopServices",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetWindowsDesktops returns all registered Windows desktop hosts matching the supplied filter.
 *
 * @generated from rpc proto.AuthService.GetWindowsDesktops
 */
export const getWindowsDesktops = {
  localName: "getWindowsDesktops",
  name: "GetWindowsDesktops",
  kind: MethodKind.Unary,
  I: WindowsDesktopFilter,
  O: GetWindowsDesktopsResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateWindowsDesktop registers a new Windows desktop host.
 *
 * @generated from rpc proto.AuthService.CreateWindowsDesktop
 */
export const createWindowsDesktop = {
  localName: "createWindowsDesktop",
  name: "CreateWindowsDesktop",
  kind: MethodKind.Unary,
  I: WindowsDesktopV3,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpdateWindowsDesktop updates an existing Windows desktop host.
 *
 * @generated from rpc proto.AuthService.UpdateWindowsDesktop
 */
export const updateWindowsDesktop = {
  localName: "updateWindowsDesktop",
  name: "UpdateWindowsDesktop",
  kind: MethodKind.Unary,
  I: WindowsDesktopV3,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpsertWindowsDesktop updates a Windows desktop host, creating it if it doesn't exist.
 *
 * @generated from rpc proto.AuthService.UpsertWindowsDesktop
 */
export const upsertWindowsDesktop = {
  localName: "upsertWindowsDesktop",
  name: "UpsertWindowsDesktop",
  kind: MethodKind.Unary,
  I: WindowsDesktopV3,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteWindowsDesktop removes the specified Windows desktop host.
 * Unlike GetWindowsDesktops, this call will delete at-most 1 desktop.
 * To delete all desktops, use DeleteAllWindowsDesktops.
 *
 * @generated from rpc proto.AuthService.DeleteWindowsDesktop
 */
export const deleteWindowsDesktop = {
  localName: "deleteWindowsDesktop",
  name: "DeleteWindowsDesktop",
  kind: MethodKind.Unary,
  I: DeleteWindowsDesktopRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllWindowsDesktops removes all registered Windows desktop hosts.
 *
 * @generated from rpc proto.AuthService.DeleteAllWindowsDesktops
 */
export const deleteAllWindowsDesktops = {
  localName: "deleteAllWindowsDesktops",
  name: "DeleteAllWindowsDesktops",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GenerateWindowsDesktopCert generates client smartcard certificate used
 * by an RDP client to authenticate with Windows.
 *
 * @generated from rpc proto.AuthService.GenerateWindowsDesktopCert
 */
export const generateWindowsDesktopCert = {
  localName: "generateWindowsDesktopCert",
  name: "GenerateWindowsDesktopCert",
  kind: MethodKind.Unary,
  I: WindowsDesktopCertRequest,
  O: WindowsDesktopCertResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GenerateCertAuthorityCRL creates an empty CRL for the specified CA.
 *
 * @generated from rpc proto.AuthService.GenerateCertAuthorityCRL
 */
export const generateCertAuthorityCRL = {
  localName: "generateCertAuthorityCRL",
  name: "GenerateCertAuthorityCRL",
  kind: MethodKind.Unary,
  I: CertAuthorityRequest,
  O: CRL,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetDesktopBootstrapScript returns a PowerShell script to bootstrap Active Directory.
 *
 * @generated from rpc proto.AuthService.GetDesktopBootstrapScript
 */
export const getDesktopBootstrapScript = {
  localName: "getDesktopBootstrapScript",
  name: "GetDesktopBootstrapScript",
  kind: MethodKind.Unary,
  I: Empty,
  O: DesktopBootstrapScriptResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateConnectionDiagnostic creates a new connection diagnostic.
 *
 * @generated from rpc proto.AuthService.CreateConnectionDiagnostic
 */
export const createConnectionDiagnostic = {
  localName: "createConnectionDiagnostic",
  name: "CreateConnectionDiagnostic",
  kind: MethodKind.Unary,
  I: ConnectionDiagnosticV1,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpdateConnectionDiagnostic updates a connection diagnostic.
 *
 * @generated from rpc proto.AuthService.UpdateConnectionDiagnostic
 */
export const updateConnectionDiagnostic = {
  localName: "updateConnectionDiagnostic",
  name: "UpdateConnectionDiagnostic",
  kind: MethodKind.Unary,
  I: ConnectionDiagnosticV1,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetConnectionDiagnostic reads a connection diagnostic.
 *
 * @generated from rpc proto.AuthService.GetConnectionDiagnostic
 */
export const getConnectionDiagnostic = {
  localName: "getConnectionDiagnostic",
  name: "GetConnectionDiagnostic",
  kind: MethodKind.Unary,
  I: GetConnectionDiagnosticRequest,
  O: ConnectionDiagnosticV1,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * AppendDiagnosticTrace appends a Trace to the ConnectionDiagnostic.
 *
 * @generated from rpc proto.AuthService.AppendDiagnosticTrace
 */
export const appendDiagnosticTrace = {
  localName: "appendDiagnosticTrace",
  name: "AppendDiagnosticTrace",
  kind: MethodKind.Unary,
  I: AppendDiagnosticTraceRequest,
  O: ConnectionDiagnosticV1,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * ChangeUserAuthentication allows a user to change their password and if enabled,
 * also adds a new MFA device. After successful invocation, a new web session is created as well
 * as a new set of recovery codes (if user meets the requirements to receive them), invalidating
 * any existing codes the user previously had.
 *
 * Only local users may be targeted by this RPC.
 *
 * @generated from rpc proto.AuthService.ChangeUserAuthentication
 */
export const changeUserAuthentication = {
  localName: "changeUserAuthentication",
  name: "ChangeUserAuthentication",
  kind: MethodKind.Unary,
  I: ChangeUserAuthenticationRequest,
  O: ChangeUserAuthenticationResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * StartAccountRecovery (exclusive to cloud users) is the first out of two step user
 * verification needed to allow a user to recover their account. The first form of verification
 * is a user's username and a recovery code. After successful verification, a recovery start
 * token is created for the user which its ID will be used as part of a URL that will be emailed
 * to the user (not done in this request). The user will be able to finish their second form of
 * verification by clicking on this URL and following the prompts.
 *
 * If a valid user fails to provide correct recovery code for MaxAccountRecoveryAttempts,
 * user account gets temporarily locked from further recovery attempts and from logging in.
 *
 * Start tokens last RecoveryStartTokenTTL.
 *
 * Only local users may perform account recovery
 *
 * @generated from rpc proto.AuthService.StartAccountRecovery
 */
export const startAccountRecovery = {
  localName: "startAccountRecovery",
  name: "StartAccountRecovery",
  kind: MethodKind.Unary,
  I: StartAccountRecoveryRequest,
  O: UserTokenV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * VerifyAccountRecovery (exclusive to cloud users) is the second step of the two step
 * verification needed to allow a user to recover their account, after RPC StartAccountRecovery.
 * The second form of verification is a user's password or their second factor (depending on
 * what authentication they needed to recover). After successful verification, a recovery
 * approved token is created which allows a user to request protected actions while not logged
 * in e.g: setting a new password or a mfa device, viewing their MFA devices, deleting their MFA
 * devices, and generating new recovery codes.
 *
 * The recovery start token to verify this request becomes deleted before
 * creating a recovery approved token, which invalidates the recovery link users received
 * to finish their verification.
 *
 * If user fails to verify themselves for MaxAccountRecoveryAttempts
 * (combined attempts with RPC StartAccountRecovery), users account will be temporarily locked
 * from logging in. If users still have unused recovery codes left, they still have
 * opportunities to recover their account. To allow this, users recovery attempts are also
 * deleted along with all user tokens which will force the user to restart the recovery process
 * from step 1 (RPC StartAccountRecovery).
 *
 * Recovery approved tokens last RecoveryApprovedTokenTTL.
 *
 * @generated from rpc proto.AuthService.VerifyAccountRecovery
 */
export const verifyAccountRecovery = {
  localName: "verifyAccountRecovery",
  name: "VerifyAccountRecovery",
  kind: MethodKind.Unary,
  I: VerifyAccountRecoveryRequest,
  O: UserTokenV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CompleteAccountRecovery (exclusive to cloud users) is the last step in account
 * recovery, after RPC's StartAccountRecovery and VerifyAccountRecovery. This step sets a new
 * password or adds a new mfa device, allowing the user to regain access to their account with
 * the new credentials. When the new authentication is successfully set, any user lock is
 * removed so the user can login immediately afterwards.
 *
 * @generated from rpc proto.AuthService.CompleteAccountRecovery
 */
export const completeAccountRecovery = {
  localName: "completeAccountRecovery",
  name: "CompleteAccountRecovery",
  kind: MethodKind.Unary,
  I: CompleteAccountRecoveryRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateAccountRecoveryCodes (exclusive to cloud users) creates new set of recovery codes for a
 * user, replacing and invalidating any previously owned codes. Users can only get recovery
 * codes if their username is in a valid email format.
 *
 * @generated from rpc proto.AuthService.CreateAccountRecoveryCodes
 */
export const createAccountRecoveryCodes = {
  localName: "createAccountRecoveryCodes",
  name: "CreateAccountRecoveryCodes",
  kind: MethodKind.Unary,
  I: CreateAccountRecoveryCodesRequest,
  O: RecoveryCodes,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetAccountRecoveryToken (exclusive to cloud users) returns a user token resource after
 * verifying that the token requested has not expired and is of the correct recovery kind.
 * Besides checking for validity of a token ID, it is also used to get basic information from
 * the token e.g: username, state of recovery (started or approved) and the type of recovery
 * requested (password or second factor).
 *
 * @generated from rpc proto.AuthService.GetAccountRecoveryToken
 */
export const getAccountRecoveryToken = {
  localName: "getAccountRecoveryToken",
  name: "GetAccountRecoveryToken",
  kind: MethodKind.Unary,
  I: GetAccountRecoveryTokenRequest,
  O: UserTokenV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetAccountRecoveryCodes (exclusive to cloud users) is a request to return the user in context
 * their recovery codes. This request will not return any secrets (the values of recovery
 * codes), but instead returns non-sensitive data eg. when the recovery codes were created.
 *
 * @generated from rpc proto.AuthService.GetAccountRecoveryCodes
 */
export const getAccountRecoveryCodes = {
  localName: "getAccountRecoveryCodes",
  name: "GetAccountRecoveryCodes",
  kind: MethodKind.Unary,
  I: GetAccountRecoveryCodesRequest,
  O: RecoveryCodes,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreatePrivilegeToken returns a new privilege token after a logged in user successfully
 * re-authenticates with their second factor device. Privilege token lasts PrivilegeTokenTTL and
 * is used to gain access to privileged actions eg: deleting/adding a MFA device.
 *
 * @generated from rpc proto.AuthService.CreatePrivilegeToken
 */
export const createPrivilegeToken = {
  localName: "createPrivilegeToken",
  name: "CreatePrivilegeToken",
  kind: MethodKind.Unary,
  I: CreatePrivilegeTokenRequest,
  O: UserTokenV3,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetInstaller retrieves the installer script resource
 *
 * @generated from rpc proto.AuthService.GetInstaller
 */
export const getInstaller = {
  localName: "getInstaller",
  name: "GetInstaller",
  kind: MethodKind.Unary,
  I: ResourceRequest,
  O: InstallerV1,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetInstallers retrieves all of installer script resources.
 *
 * @generated from rpc proto.AuthService.GetInstallers
 */
export const getInstallers = {
  localName: "getInstallers",
  name: "GetInstallers",
  kind: MethodKind.Unary,
  I: Empty,
  O: InstallerV1List,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * SetInstaller sets the installer script resource
 *
 * @generated from rpc proto.AuthService.SetInstaller
 */
export const setInstaller = {
  localName: "setInstaller",
  name: "SetInstaller",
  kind: MethodKind.Unary,
  I: InstallerV1,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteInstaller removes the specified installer script resource
 *
 * @generated from rpc proto.AuthService.DeleteInstaller
 */
export const deleteInstaller = {
  localName: "deleteInstaller",
  name: "DeleteInstaller",
  kind: MethodKind.Unary,
  I: ResourceRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllInstallers removes all installer script resources
 *
 * @generated from rpc proto.AuthService.DeleteAllInstallers
 */
export const deleteAllInstallers = {
  localName: "deleteAllInstallers",
  name: "DeleteAllInstallers",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * ListResources retrieves a paginated list of resources.
 *
 * @generated from rpc proto.AuthService.ListResources
 */
export const listResources = {
  localName: "listResources",
  name: "ListResources",
  kind: MethodKind.Unary,
  I: ListResourcesRequest,
  O: ListResourcesResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * ListUnifiedResources retrieves a paginated list of all resource types displayable in the UI.
 *
 * @generated from rpc proto.AuthService.ListUnifiedResources
 */
export const listUnifiedResources = {
  localName: "listUnifiedResources",
  name: "ListUnifiedResources",
  kind: MethodKind.Unary,
  I: ListUnifiedResourcesRequest,
  O: ListUnifiedResourcesResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetSSHTargets gets all servers that would match an equivalent ssh dial request. Note that this method
 * returns all resources directly accessible to the user *and* all resources available via 'SearchAsRoles',
 * which is what we want when handling things like ambiguous host errors and resource-based access requests,
 * but may result in confusing behavior if it is used outside of those contexts.
 *
 * @generated from rpc proto.AuthService.GetSSHTargets
 */
export const getSSHTargets = {
  localName: "getSSHTargets",
  name: "GetSSHTargets",
  kind: MethodKind.Unary,
  I: GetSSHTargetsRequest,
  O: GetSSHTargetsResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetDomainName returns local auth domain of the current auth server
 *
 * @generated from rpc proto.AuthService.GetDomainName
 */
export const getDomainName = {
  localName: "getDomainName",
  name: "GetDomainName",
  kind: MethodKind.Unary,
  I: Empty,
  O: GetDomainNameResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetClusterCACert returns the PEM-encoded TLS certs for the local cluster
 * without signing keys. If the cluster has multiple TLS certs, they will
 * all be appended.
 *
 * @generated from rpc proto.AuthService.GetClusterCACert
 */
export const getClusterCACert = {
  localName: "getClusterCACert",
  name: "GetClusterCACert",
  kind: MethodKind.Unary,
  I: Empty,
  O: GetClusterCACertResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * AssertSystemRole is used by agents to prove that they have a given system role when their
 * credentials originate from multiple separate join tokens so that they can be issued an instance
 * certificate that encompasses all of their capabilities. This method will be deprecated once we
 * have a more comprehensive model for join token joining/replacement.
 *
 * @generated from rpc proto.AuthService.AssertSystemRole
 */
export const assertSystemRole = {
  localName: "assertSystemRole",
  name: "AssertSystemRole",
  kind: MethodKind.Unary,
  I: SystemRoleAssertion,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * SubmitUsageEvent submits an external usage event.
 *
 * @generated from rpc proto.AuthService.SubmitUsageEvent
 */
export const submitUsageEvent = {
  localName: "submitUsageEvent",
  name: "SubmitUsageEvent",
  kind: MethodKind.Unary,
  I: SubmitUsageEventRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetLicense returns the license used to start the auth server.
 *
 * @generated from rpc proto.AuthService.GetLicense
 */
export const getLicense = {
  localName: "getLicense",
  name: "GetLicense",
  kind: MethodKind.Unary,
  I: GetLicenseRequest,
  O: GetLicenseResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * ListReleases returns a list of Teleport Enterprise releases.
 *
 * @generated from rpc proto.AuthService.ListReleases
 */
export const listReleases = {
  localName: "listReleases",
  name: "ListReleases",
  kind: MethodKind.Unary,
  I: ListReleasesRequest,
  O: ListReleasesResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * ListSAMLIdPServiceProviders returns a paginated list of SAML IdP service provider resources.
 *
 * @generated from rpc proto.AuthService.ListSAMLIdPServiceProviders
 */
export const listSAMLIdPServiceProviders = {
  localName: "listSAMLIdPServiceProviders",
  name: "ListSAMLIdPServiceProviders",
  kind: MethodKind.Unary,
  I: ListSAMLIdPServiceProvidersRequest,
  O: ListSAMLIdPServiceProvidersResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetSAMLIdPServiceProvider returns the specified SAML IdP service provider resources.
 *
 * @generated from rpc proto.AuthService.GetSAMLIdPServiceProvider
 */
export const getSAMLIdPServiceProvider = {
  localName: "getSAMLIdPServiceProvider",
  name: "GetSAMLIdPServiceProvider",
  kind: MethodKind.Unary,
  I: GetSAMLIdPServiceProviderRequest,
  O: SAMLIdPServiceProviderV1,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateSAMLIdPServiceProvider creates a new SAML IdP service provider resource.
 *
 * @generated from rpc proto.AuthService.CreateSAMLIdPServiceProvider
 */
export const createSAMLIdPServiceProvider = {
  localName: "createSAMLIdPServiceProvider",
  name: "CreateSAMLIdPServiceProvider",
  kind: MethodKind.Unary,
  I: SAMLIdPServiceProviderV1,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpdateSAMLIdPServiceProvider updates an existing SAML IdP service provider resource.
 *
 * @generated from rpc proto.AuthService.UpdateSAMLIdPServiceProvider
 */
export const updateSAMLIdPServiceProvider = {
  localName: "updateSAMLIdPServiceProvider",
  name: "UpdateSAMLIdPServiceProvider",
  kind: MethodKind.Unary,
  I: SAMLIdPServiceProviderV1,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteSAMLIdPServiceProvider removes the specified SAML IdP service provider resource.
 *
 * @generated from rpc proto.AuthService.DeleteSAMLIdPServiceProvider
 */
export const deleteSAMLIdPServiceProvider = {
  localName: "deleteSAMLIdPServiceProvider",
  name: "DeleteSAMLIdPServiceProvider",
  kind: MethodKind.Unary,
  I: DeleteSAMLIdPServiceProviderRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllSAMLIdPServiceProviders removes all SAML IdP service providers.
 *
 * @generated from rpc proto.AuthService.DeleteAllSAMLIdPServiceProviders
 */
export const deleteAllSAMLIdPServiceProviders = {
  localName: "deleteAllSAMLIdPServiceProviders",
  name: "DeleteAllSAMLIdPServiceProviders",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * ListUserGroups returns a paginated list of user group resources.
 *
 * @generated from rpc proto.AuthService.ListUserGroups
 */
export const listUserGroups = {
  localName: "listUserGroups",
  name: "ListUserGroups",
  kind: MethodKind.Unary,
  I: ListUserGroupsRequest,
  O: ListUserGroupsResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetUserGroup returns the specified user group resource.
 *
 * @generated from rpc proto.AuthService.GetUserGroup
 */
export const getUserGroup = {
  localName: "getUserGroup",
  name: "GetUserGroup",
  kind: MethodKind.Unary,
  I: GetUserGroupRequest,
  O: UserGroupV1,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * CreateUserGroup creates a new user group resource.
 *
 * @generated from rpc proto.AuthService.CreateUserGroup
 */
export const createUserGroup = {
  localName: "createUserGroup",
  name: "CreateUserGroup",
  kind: MethodKind.Unary,
  I: UserGroupV1,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpdateUserGroup updates an existing user group resource.
 *
 * @generated from rpc proto.AuthService.UpdateUserGroup
 */
export const updateUserGroup = {
  localName: "updateUserGroup",
  name: "UpdateUserGroup",
  kind: MethodKind.Unary,
  I: UserGroupV1,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteUserGroup removes the specified user group resource.
 *
 * @generated from rpc proto.AuthService.DeleteUserGroup
 */
export const deleteUserGroup = {
  localName: "deleteUserGroup",
  name: "DeleteUserGroup",
  kind: MethodKind.Unary,
  I: DeleteUserGroupRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteAllUserGroups removes all user groups.
 *
 * @generated from rpc proto.AuthService.DeleteAllUserGroups
 */
export const deleteAllUserGroups = {
  localName: "deleteAllUserGroups",
  name: "DeleteAllUserGroups",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetHeadlessAuthentication is a request to retrieve a headless authentication from the backend.
 *
 * @generated from rpc proto.AuthService.GetHeadlessAuthentication
 */
export const getHeadlessAuthentication = {
  localName: "getHeadlessAuthentication",
  name: "GetHeadlessAuthentication",
  kind: MethodKind.Unary,
  I: GetHeadlessAuthenticationRequest,
  O: HeadlessAuthentication,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpdateHeadlessAuthenticationState is a request to update a headless authentication's state.
 *
 * @generated from rpc proto.AuthService.UpdateHeadlessAuthenticationState
 */
export const updateHeadlessAuthenticationState = {
  localName: "updateHeadlessAuthenticationState",
  name: "UpdateHeadlessAuthenticationState",
  kind: MethodKind.Unary,
  I: UpdateHeadlessAuthenticationStateRequest,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * ExportUpgradeWindows is used to load derived maintenance window values for agents that
 * need to export schedules to external upgraders.
 *
 * @generated from rpc proto.AuthService.ExportUpgradeWindows
 */
export const exportUpgradeWindows = {
  localName: "exportUpgradeWindows",
  name: "ExportUpgradeWindows",
  kind: MethodKind.Unary,
  I: ExportUpgradeWindowsRequest,
  O: ExportUpgradeWindowsResponse,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * GetClusterMaintenanceConfig gets the current maintenance window config singleton.
 *
 * @generated from rpc proto.AuthService.GetClusterMaintenanceConfig
 */
export const getClusterMaintenanceConfig = {
  localName: "getClusterMaintenanceConfig",
  name: "GetClusterMaintenanceConfig",
  kind: MethodKind.Unary,
  I: Empty,
  O: ClusterMaintenanceConfigV1,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * UpdateClusterMaintenanceConfig updates the current maintenance window config singleton.
 *
 * @generated from rpc proto.AuthService.UpdateClusterMaintenanceConfig
 */
export const updateClusterMaintenanceConfig = {
  localName: "updateClusterMaintenanceConfig",
  name: "UpdateClusterMaintenanceConfig",
  kind: MethodKind.Unary,
  I: ClusterMaintenanceConfigV1,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;

/**
 * DeleteClusterMaintenanceConfig deletes the current maintenance window config singleton.
 *
 * @generated from rpc proto.AuthService.DeleteClusterMaintenanceConfig
 */
export const deleteClusterMaintenanceConfig = {
  localName: "deleteClusterMaintenanceConfig",
  name: "DeleteClusterMaintenanceConfig",
  kind: MethodKind.Unary,
  I: Empty,
  O: Empty,
  service: {
    typeName: "proto.AuthService"
  }
} as const;
