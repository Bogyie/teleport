// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/legacy/types/events/athena.proto (package events, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * AthenaS3EventPayload is used as payload for sending large events to SQS.
 *
 * @generated from message events.AthenaS3EventPayload
 */
export class AthenaS3EventPayload extends Message<AthenaS3EventPayload> {
  /**
   * Path on S3.
   *
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * VersionID is versionID of file on s3, if versioning is enabled.
   *
   * @generated from field: string version_id = 2;
   */
  versionId = "";

  /**
   * Custom KMS key for server-side encryption.
   *
   * @generated from field: string ckms = 3;
   */
  ckms = "";

  constructor(data?: PartialMessage<AthenaS3EventPayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "events.AthenaS3EventPayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ckms", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AthenaS3EventPayload {
    return new AthenaS3EventPayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AthenaS3EventPayload {
    return new AthenaS3EventPayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AthenaS3EventPayload {
    return new AthenaS3EventPayload().fromJsonString(jsonString, options);
  }

  static equals(a: AthenaS3EventPayload | PlainMessage<AthenaS3EventPayload> | undefined, b: AthenaS3EventPayload | PlainMessage<AthenaS3EventPayload> | undefined): boolean {
    return proto3.util.equals(AthenaS3EventPayload, a, b);
  }
}

