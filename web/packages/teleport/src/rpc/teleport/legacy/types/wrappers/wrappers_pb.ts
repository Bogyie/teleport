// Copyright 2021 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/legacy/types/wrappers/wrappers.proto (package wrappers, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * StringValues is a list of strings.
 *
 * @generated from message wrappers.StringValues
 */
export class StringValues extends Message<StringValues> {
  /**
   * @generated from field: repeated string Values = 1;
   */
  Values: string[] = [];

  constructor(data?: PartialMessage<StringValues>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wrappers.StringValues";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StringValues {
    return new StringValues().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StringValues {
    return new StringValues().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StringValues {
    return new StringValues().fromJsonString(jsonString, options);
  }

  static equals(a: StringValues | PlainMessage<StringValues> | undefined, b: StringValues | PlainMessage<StringValues> | undefined): boolean {
    return proto3.util.equals(StringValues, a, b);
  }
}

/**
 * LabelValues is a list of key value pairs, where key is a string
 * and value is a list of string values.
 *
 * @generated from message wrappers.LabelValues
 */
export class LabelValues extends Message<LabelValues> {
  /**
   * Values contains key value pairs.
   *
   * @generated from field: map<string, wrappers.StringValues> Values = 1;
   */
  Values: { [key: string]: StringValues } = {};

  constructor(data?: PartialMessage<LabelValues>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wrappers.LabelValues";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Values", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: StringValues} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LabelValues {
    return new LabelValues().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LabelValues {
    return new LabelValues().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LabelValues {
    return new LabelValues().fromJsonString(jsonString, options);
  }

  static equals(a: LabelValues | PlainMessage<LabelValues> | undefined, b: LabelValues | PlainMessage<LabelValues> | undefined): boolean {
    return proto3.util.equals(LabelValues, a, b);
  }
}

/**
 * CustomType is a json protobuf representation of a Go struct. This is
 * useful when defining customtypes for use with the (gogoproto.customtype) extension.
 *
 * @generated from message wrappers.CustomType
 */
export class CustomType extends Message<CustomType> {
  /**
   * Bytes is the marshalled json data of a struct.
   *
   * @generated from field: bytes Bytes = 1;
   */
  Bytes = new Uint8Array(0);

  constructor(data?: PartialMessage<CustomType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wrappers.CustomType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomType {
    return new CustomType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomType {
    return new CustomType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomType {
    return new CustomType().fromJsonString(jsonString, options);
  }

  static equals(a: CustomType | PlainMessage<CustomType> | undefined, b: CustomType | PlainMessage<CustomType> | undefined): boolean {
    return proto3.util.equals(CustomType, a, b);
  }
}

