// Copyright 2021 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/legacy/types/webauthn/webauthn.proto (package webauthn, syntax proto3)
/* eslint-disable */

// Package WebAuthn maps WebAuthn messages to protocol buffers.
//
// The mapping is designed to match both the WebAuthn specification and the
// capabilities of current browser implementations.
//
// REST-based Teleport APIs will make an effort to transmit or embed JSON
// messages matching the github.com/go-webauthn/webauthn reference implementation,
// to allow for easy browser integration. gRPC APIs are not meant for REST use
// and thus make no such promises, although the correspondence should be
// obvious.
//
// Note that, ordinarily, various fields in WebAuthn messages are encoded using
// "RawURLEncoding" (aka, base64 URL encoding without padding). This is not the
// case for _any_ of the fields mapped here, all bytes fields are transmitted
// raw/unencoded.

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../../gogoproto/gogo_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/legacy/types/webauthn/webauthn.proto.
 */
export const file_teleport_legacy_types_webauthn_webauthn: GenFile = /*@__PURE__*/
  fileDesc("Ci10ZWxlcG9ydC9sZWdhY3kvdHlwZXMvd2ViYXV0aG4vd2ViYXV0aG4ucHJvdG8SCHdlYmF1dGhuIlYKE0NyZWRlbnRpYWxBc3NlcnRpb24SPwoKcHVibGljX2tleRgBIAEoCzIrLndlYmF1dGhuLlB1YmxpY0tleUNyZWRlbnRpYWxSZXF1ZXN0T3B0aW9ucyLzAQohUHVibGljS2V5Q3JlZGVudGlhbFJlcXVlc3RPcHRpb25zEhEKCWNoYWxsZW5nZRgBIAEoDBISCgp0aW1lb3V0X21zGAIgASgDEg0KBXJwX2lkGAMgASgJEjkKEWFsbG93X2NyZWRlbnRpYWxzGAQgAygLMh4ud2ViYXV0aG4uQ3JlZGVudGlhbERlc2NyaXB0b3ISQgoKZXh0ZW5zaW9ucxgFIAEoCzIuLndlYmF1dGhuLkF1dGhlbnRpY2F0aW9uRXh0ZW5zaW9uc0NsaWVudElucHV0cxIZChF1c2VyX3ZlcmlmaWNhdGlvbhgGIAEoCSK8AQobQ3JlZGVudGlhbEFzc2VydGlvblJlc3BvbnNlEgwKBHR5cGUYASABKAkSDgoGcmF3X2lkGAIgASgMEjoKCHJlc3BvbnNlGAMgASgLMigud2ViYXV0aG4uQXV0aGVudGljYXRvckFzc2VydGlvblJlc3BvbnNlEkMKCmV4dGVuc2lvbnMYBCABKAsyLy53ZWJhdXRobi5BdXRoZW50aWNhdGlvbkV4dGVuc2lvbnNDbGllbnRPdXRwdXRzIn4KHkF1dGhlbnRpY2F0b3JBc3NlcnRpb25SZXNwb25zZRIYChBjbGllbnRfZGF0YV9qc29uGAEgASgMEhoKEmF1dGhlbnRpY2F0b3JfZGF0YRgCIAEoDBIRCglzaWduYXR1cmUYAyABKAwSEwoLdXNlcl9oYW5kbGUYBCABKAwiVgoSQ3JlZGVudGlhbENyZWF0aW9uEkAKCnB1YmxpY19rZXkYASABKAsyLC53ZWJhdXRobi5QdWJsaWNLZXlDcmVkZW50aWFsQ3JlYXRpb25PcHRpb25zIrADCiJQdWJsaWNLZXlDcmVkZW50aWFsQ3JlYXRpb25PcHRpb25zEhEKCWNoYWxsZW5nZRgBIAEoDBIoCgJycBgCIAEoCzIcLndlYmF1dGhuLlJlbHlpbmdQYXJ0eUVudGl0eRIiCgR1c2VyGAMgASgLMhQud2ViYXV0aG4uVXNlckVudGl0eRI8ChVjcmVkZW50aWFsX3BhcmFtZXRlcnMYBCADKAsyHS53ZWJhdXRobi5DcmVkZW50aWFsUGFyYW1ldGVyEhIKCnRpbWVvdXRfbXMYBSABKAMSOwoTZXhjbHVkZV9jcmVkZW50aWFscxgGIAMoCzIeLndlYmF1dGhuLkNyZWRlbnRpYWxEZXNjcmlwdG9yEhMKC2F0dGVzdGF0aW9uGAcgASgJEkIKCmV4dGVuc2lvbnMYCCABKAsyLi53ZWJhdXRobi5BdXRoZW50aWNhdGlvbkV4dGVuc2lvbnNDbGllbnRJbnB1dHMSQQoXYXV0aGVudGljYXRvcl9zZWxlY3Rpb24YCSABKAsyIC53ZWJhdXRobi5BdXRoZW50aWNhdG9yU2VsZWN0aW9uIr0BChpDcmVkZW50aWFsQ3JlYXRpb25SZXNwb25zZRIMCgR0eXBlGAEgASgJEg4KBnJhd19pZBgCIAEoDBI8CghyZXNwb25zZRgDIAEoCzIqLndlYmF1dGhuLkF1dGhlbnRpY2F0b3JBdHRlc3RhdGlvblJlc3BvbnNlEkMKCmV4dGVuc2lvbnMYBCABKAsyLy53ZWJhdXRobi5BdXRoZW50aWNhdGlvbkV4dGVuc2lvbnNDbGllbnRPdXRwdXRzIlgKIEF1dGhlbnRpY2F0b3JBdHRlc3RhdGlvblJlc3BvbnNlEhgKEGNsaWVudF9kYXRhX2pzb24YASABKAwSGgoSYXR0ZXN0YXRpb25fb2JqZWN0GAIgASgMIkoKJEF1dGhlbnRpY2F0aW9uRXh0ZW5zaW9uc0NsaWVudElucHV0cxIOCgZhcHBfaWQYASABKAkSEgoKY3JlZF9wcm9wcxgCIAEoCCJxCiVBdXRoZW50aWNhdGlvbkV4dGVuc2lvbnNDbGllbnRPdXRwdXRzEg4KBmFwcF9pZBgBIAEoCBI4CgpjcmVkX3Byb3BzGAIgASgLMiQud2ViYXV0aG4uQ3JlZGVudGlhbFByb3BlcnRpZXNPdXRwdXQiKAoaQ3JlZGVudGlhbFByb3BlcnRpZXNPdXRwdXQSCgoCcmsYASABKAgicwoWQXV0aGVudGljYXRvclNlbGVjdGlvbhIgChhhdXRoZW50aWNhdG9yX2F0dGFjaG1lbnQYASABKAkSHAoUcmVxdWlyZV9yZXNpZGVudF9rZXkYAiABKAgSGQoRdXNlcl92ZXJpZmljYXRpb24YAyABKAkiMAoUQ3JlZGVudGlhbERlc2NyaXB0b3ISDAoEdHlwZRgBIAEoCRIKCgJpZBgCIAEoDCIwChNDcmVkZW50aWFsUGFyYW1ldGVyEgwKBHR5cGUYASABKAkSCwoDYWxnGAIgASgFIjoKElJlbHlpbmdQYXJ0eUVudGl0eRIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJSgQIAxAEUgRpY29uIkgKClVzZXJFbnRpdHkSCgoCaWQYASABKAwSDAoEbmFtZRgCIAEoCRIUCgxkaXNwbGF5X25hbWUYAyABKAlKBAgEEAVSBGljb25CTVo/Z2l0aHViLmNvbS9ncmF2aXRhdGlvbmFsL3RlbGVwb3J0L2FwaS90eXBlcy93ZWJhdXRobjt3ZWJhdXRobnBiyOIeAdDiHgHA4x4BYgZwcm90bzM", [file_gogoproto_gogo]);

/**
 * Credential assertion used for login ceremonies.
 *
 * @generated from message webauthn.CredentialAssertion
 */
export type CredentialAssertion = Message<"webauthn.CredentialAssertion"> & {
  /**
   * @generated from field: webauthn.PublicKeyCredentialRequestOptions public_key = 1;
   */
  publicKey?: PublicKeyCredentialRequestOptions;
};

/**
 * Describes the message webauthn.CredentialAssertion.
 * Use `create(CredentialAssertionSchema)` to create a new message.
 */
export const CredentialAssertionSchema: GenMessage<CredentialAssertion> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_webauthn_webauthn, 0);

/**
 * Request options necessary for credential assertions, aka login ceremonies.
 * See https://www.w3.org/TR/webauthn-2/#dictionary-assertion-options or
 * refer to navigator.credentials.get in your browser.
 *
 * @generated from message webauthn.PublicKeyCredentialRequestOptions
 */
export type PublicKeyCredentialRequestOptions = Message<"webauthn.PublicKeyCredentialRequestOptions"> & {
  /**
   * Raw challenge used for assertion.
   *
   * @generated from field: bytes challenge = 1;
   */
  challenge: Uint8Array;

  /**
   * Timeout in milliseconds.
   *
   * @generated from field: int64 timeout_ms = 2;
   */
  timeoutMs: bigint;

  /**
   * Relying Party ID.
   *
   * @generated from field: string rp_id = 3;
   */
  rpId: string;

  /**
   * Allowed credentials for assertion.
   *
   * @generated from field: repeated webauthn.CredentialDescriptor allow_credentials = 4;
   */
  allowCredentials: CredentialDescriptor[];

  /**
   * Extensions supplied by the Relying Party.
   *
   * @generated from field: webauthn.AuthenticationExtensionsClientInputs extensions = 5;
   */
  extensions?: AuthenticationExtensionsClientInputs;

  /**
   * User verification requirement.
   *
   * @generated from field: string user_verification = 6;
   */
  userVerification: string;
};

/**
 * Describes the message webauthn.PublicKeyCredentialRequestOptions.
 * Use `create(PublicKeyCredentialRequestOptionsSchema)` to create a new message.
 */
export const PublicKeyCredentialRequestOptionsSchema: GenMessage<PublicKeyCredentialRequestOptions> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_webauthn_webauthn, 1);

/**
 * Assertion response returned by the authenticator.
 * Refer to navigator.credentials.get in your browser.
 *
 * Note: assertion responses return both "rawId" and "id" (RawURLEncoding of
 * "id"), but it seemed pointless to have both here.
 *
 * @generated from message webauthn.CredentialAssertionResponse
 */
export type CredentialAssertionResponse = Message<"webauthn.CredentialAssertionResponse"> & {
  /**
   * Type of the credential, usually "public-key".
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * Raw Credential ID.
   *
   * @generated from field: bytes raw_id = 2;
   */
  rawId: Uint8Array;

  /**
   * Assertion response from the authenticator.
   *
   * @generated from field: webauthn.AuthenticatorAssertionResponse response = 3;
   */
  response?: AuthenticatorAssertionResponse;

  /**
   * Extensions supplied by the authenticator.
   *
   * @generated from field: webauthn.AuthenticationExtensionsClientOutputs extensions = 4;
   */
  extensions?: AuthenticationExtensionsClientOutputs;
};

/**
 * Describes the message webauthn.CredentialAssertionResponse.
 * Use `create(CredentialAssertionResponseSchema)` to create a new message.
 */
export const CredentialAssertionResponseSchema: GenMessage<CredentialAssertionResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_webauthn_webauthn, 2);

/**
 * Authenticator assertion response.
 * https://www.w3.org/TR/webauthn-2/#authenticatorassertionresponse
 *
 * @generated from message webauthn.AuthenticatorAssertionResponse
 */
export type AuthenticatorAssertionResponse = Message<"webauthn.AuthenticatorAssertionResponse"> & {
  /**
   * Raw client data JSON, exactly as signed by the authenticator.
   * https://www.w3.org/TR/webauthn-2/#dictdef-collectedclientdata.
   *
   * @generated from field: bytes client_data_json = 1;
   */
  clientDataJson: Uint8Array;

  /**
   * Raw authenticator data, exactly as signed by the authenticator.
   * https://www.w3.org/TR/webauthn-2/#sctn-authenticator-data.
   *
   * @generated from field: bytes authenticator_data = 2;
   */
  authenticatorData: Uint8Array;

  /**
   * Raw assertion signature performed authenticatorData|clientDataJSON.
   * https://www.w3.org/TR/webauthn-2/#assertion-signature.
   *
   * @generated from field: bytes signature = 3;
   */
  signature: Uint8Array;

  /**
   * Raw user handle returned by the authenticator, if any.
   *
   * @generated from field: bytes user_handle = 4;
   */
  userHandle: Uint8Array;
};

/**
 * Describes the message webauthn.AuthenticatorAssertionResponse.
 * Use `create(AuthenticatorAssertionResponseSchema)` to create a new message.
 */
export const AuthenticatorAssertionResponseSchema: GenMessage<AuthenticatorAssertionResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_webauthn_webauthn, 3);

/**
 * Credential creation used for registration ceremonies.
 *
 * @generated from message webauthn.CredentialCreation
 */
export type CredentialCreation = Message<"webauthn.CredentialCreation"> & {
  /**
   * @generated from field: webauthn.PublicKeyCredentialCreationOptions public_key = 1;
   */
  publicKey?: PublicKeyCredentialCreationOptions;
};

/**
 * Describes the message webauthn.CredentialCreation.
 * Use `create(CredentialCreationSchema)` to create a new message.
 */
export const CredentialCreationSchema: GenMessage<CredentialCreation> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_webauthn_webauthn, 4);

/**
 * Request options necessary for credential creation, aka registration
 * ceremonies.
 * See
 * https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialcreationoptions
 * or refer to navigator.credentials.create in your browser.
 *
 * @generated from message webauthn.PublicKeyCredentialCreationOptions
 */
export type PublicKeyCredentialCreationOptions = Message<"webauthn.PublicKeyCredentialCreationOptions"> & {
  /**
   * Raw challenge used for creation.
   *
   * @generated from field: bytes challenge = 1;
   */
  challenge: Uint8Array;

  /**
   * Relying party information.
   *
   * @generated from field: webauthn.RelyingPartyEntity rp = 2;
   */
  rp?: RelyingPartyEntity;

  /**
   * User information.
   *
   * @generated from field: webauthn.UserEntity user = 3;
   */
  user?: UserEntity;

  /**
   * Desired properties for the credential to be created, from most to least
   * preferred.
   *
   * @generated from field: repeated webauthn.CredentialParameter credential_parameters = 4;
   */
  credentialParameters: CredentialParameter[];

  /**
   * Timeout in milliseconds.
   *
   * @generated from field: int64 timeout_ms = 5;
   */
  timeoutMs: bigint;

  /**
   * Credentials excluded from the ceremony.
   *
   * @generated from field: repeated webauthn.CredentialDescriptor exclude_credentials = 6;
   */
  excludeCredentials: CredentialDescriptor[];

  /**
   * Attestation requested, defaulting to "none".
   * https://www.w3.org/TR/webauthn-2/#enumdef-attestationconveyancepreference.
   *
   * @generated from field: string attestation = 7;
   */
  attestation: string;

  /**
   * Extensions supplied by the Relying Party.
   *
   * @generated from field: webauthn.AuthenticationExtensionsClientInputs extensions = 8;
   */
  extensions?: AuthenticationExtensionsClientInputs;

  /**
   * Authenticator selection criteria for the new credential.
   *
   * @generated from field: webauthn.AuthenticatorSelection authenticator_selection = 9;
   */
  authenticatorSelection?: AuthenticatorSelection;
};

/**
 * Describes the message webauthn.PublicKeyCredentialCreationOptions.
 * Use `create(PublicKeyCredentialCreationOptionsSchema)` to create a new message.
 */
export const PublicKeyCredentialCreationOptionsSchema: GenMessage<PublicKeyCredentialCreationOptions> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_webauthn_webauthn, 5);

/**
 * Credential creation response returned by the authenticator.
 * Refer to navigator.credentials.create in your browser.
 *
 * Note: creation responses return both "rawId" and "id" (RawURLEncoding of
 * "id"), but it seemed pointless to have both here.
 *
 * @generated from message webauthn.CredentialCreationResponse
 */
export type CredentialCreationResponse = Message<"webauthn.CredentialCreationResponse"> & {
  /**
   * Type of the credential, usually "public-key".
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * Raw Credential ID.
   *
   * @generated from field: bytes raw_id = 2;
   */
  rawId: Uint8Array;

  /**
   * Attestation response from the authenticator.
   *
   * @generated from field: webauthn.AuthenticatorAttestationResponse response = 3;
   */
  response?: AuthenticatorAttestationResponse;

  /**
   * Extensions supplied by the authenticator.
   *
   * @generated from field: webauthn.AuthenticationExtensionsClientOutputs extensions = 4;
   */
  extensions?: AuthenticationExtensionsClientOutputs;
};

/**
 * Describes the message webauthn.CredentialCreationResponse.
 * Use `create(CredentialCreationResponseSchema)` to create a new message.
 */
export const CredentialCreationResponseSchema: GenMessage<CredentialCreationResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_webauthn_webauthn, 6);

/**
 * Attestation response from the authentication, ie, the response to a
 * credential creation request.
 * https://www.w3.org/TR/webauthn-2/#authenticatorattestationresponse.
 *
 * @generated from message webauthn.AuthenticatorAttestationResponse
 */
export type AuthenticatorAttestationResponse = Message<"webauthn.AuthenticatorAttestationResponse"> & {
  /**
   * Raw client data JSON, exactly as signed by the authenticator.
   * https://www.w3.org/TR/webauthn-2/#dictdef-collectedclientdata.
   *
   * @generated from field: bytes client_data_json = 1;
   */
  clientDataJson: Uint8Array;

  /**
   * Raw attestation object.
   * https://www.w3.org/TR/webauthn-2/#attestation-object
   *
   * @generated from field: bytes attestation_object = 2;
   */
  attestationObject: Uint8Array;
};

/**
 * Describes the message webauthn.AuthenticatorAttestationResponse.
 * Use `create(AuthenticatorAttestationResponseSchema)` to create a new message.
 */
export const AuthenticatorAttestationResponseSchema: GenMessage<AuthenticatorAttestationResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_webauthn_webauthn, 7);

/**
 * Extensions supplied by the Relying Party during credential assertion or
 * creation.
 * https://www.w3.org/TR/webauthn-2/#client-extension-input
 *
 * @generated from message webauthn.AuthenticationExtensionsClientInputs
 */
export type AuthenticationExtensionsClientInputs = Message<"webauthn.AuthenticationExtensionsClientInputs"> & {
  /**
   * U2F application ID to be used by the authenticator, if any.
   * Only available if using U2F compatibility mode.
   * https://www.w3.org/TR/webauthn-2/#sctn-appid-extension.
   *
   * @generated from field: string app_id = 1;
   */
  appId: string;

  /**
   * Enables the credProps extension.
   * https://w3c.github.io/webauthn/#sctn-authenticator-credential-properties-extension
   *
   * @generated from field: bool cred_props = 2;
   */
  credProps: boolean;
};

/**
 * Describes the message webauthn.AuthenticationExtensionsClientInputs.
 * Use `create(AuthenticationExtensionsClientInputsSchema)` to create a new message.
 */
export const AuthenticationExtensionsClientInputsSchema: GenMessage<AuthenticationExtensionsClientInputs> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_webauthn_webauthn, 8);

/**
 * Extensions supplied by the authenticator to the Relying Party, during
 * credential assertion or creation.
 * https://www.w3.org/TR/webauthn-2/#client-extension-output.
 *
 * @generated from message webauthn.AuthenticationExtensionsClientOutputs
 */
export type AuthenticationExtensionsClientOutputs = Message<"webauthn.AuthenticationExtensionsClientOutputs"> & {
  /**
   * If true, the AppID extension was used by the authenticator, which changes
   * the rpIdHash accordingly.
   * https://www.w3.org/TR/webauthn-2/#sctn-appid-extension.
   *
   * @generated from field: bool app_id = 1;
   */
  appId: boolean;

  /**
   * Credential properties per credProps extension.
   * https://w3c.github.io/webauthn/#sctn-authenticator-credential-properties-extension.
   *
   * @generated from field: webauthn.CredentialPropertiesOutput cred_props = 2;
   */
  credProps?: CredentialPropertiesOutput;
};

/**
 * Describes the message webauthn.AuthenticationExtensionsClientOutputs.
 * Use `create(AuthenticationExtensionsClientOutputsSchema)` to create a new message.
 */
export const AuthenticationExtensionsClientOutputsSchema: GenMessage<AuthenticationExtensionsClientOutputs> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_webauthn_webauthn, 9);

/**
 * CredentialPropertiesOutput is the output of the credProps extension.
 *
 * @generated from message webauthn.CredentialPropertiesOutput
 */
export type CredentialPropertiesOutput = Message<"webauthn.CredentialPropertiesOutput"> & {
  /**
   * If true, the created credential is a resident key (regardless of the
   * AuthenticatorSelection.require_resident_key value).
   * OPTIONAL by specification.
   *
   * @generated from field: bool rk = 1;
   */
  rk: boolean;
};

/**
 * Describes the message webauthn.CredentialPropertiesOutput.
 * Use `create(CredentialPropertiesOutputSchema)` to create a new message.
 */
export const CredentialPropertiesOutputSchema: GenMessage<CredentialPropertiesOutput> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_webauthn_webauthn, 10);

/**
 * Authenticator selection criteria.
 * Restricts the choice of authenticator for credential creation.
 *
 * @generated from message webauthn.AuthenticatorSelection
 */
export type AuthenticatorSelection = Message<"webauthn.AuthenticatorSelection"> & {
  /**
   * Authenticator attachment, empty means no particular attachment is
   * required.
   *
   * @generated from field: string authenticator_attachment = 1;
   */
  authenticatorAttachment: string;

  /**
   * Resident key requirement, if true the authenticator must create a resident
   * key.
   *
   * @generated from field: bool require_resident_key = 2;
   */
  requireResidentKey: boolean;

  /**
   * User verification requirement for authenticators.
   *
   * @generated from field: string user_verification = 3;
   */
  userVerification: string;
};

/**
 * Describes the message webauthn.AuthenticatorSelection.
 * Use `create(AuthenticatorSelectionSchema)` to create a new message.
 */
export const AuthenticatorSelectionSchema: GenMessage<AuthenticatorSelection> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_webauthn_webauthn, 11);

/**
 * Public key credential descriptor.
 * https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialdescriptor.
 *
 * @generated from message webauthn.CredentialDescriptor
 */
export type CredentialDescriptor = Message<"webauthn.CredentialDescriptor"> & {
  /**
   * Type of the credential, usually "public-key".
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * Raw Credential ID.
   *
   * @generated from field: bytes id = 2;
   */
  id: Uint8Array;
};

/**
 * Describes the message webauthn.CredentialDescriptor.
 * Use `create(CredentialDescriptorSchema)` to create a new message.
 */
export const CredentialDescriptorSchema: GenMessage<CredentialDescriptor> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_webauthn_webauthn, 12);

/**
 * Parameters for credential creation.
 * https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialparameters.
 *
 * @generated from message webauthn.CredentialParameter
 */
export type CredentialParameter = Message<"webauthn.CredentialParameter"> & {
  /**
   * Credential type, usually "public-key".
   * https://www.w3.org/TR/webauthn-2/#enumdef-publickeycredentialtype.
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * COSE algorithm specifier.
   * Most authenticators support exclusively ES256(-7).
   * https://www.w3.org/TR/webauthn-2/#typedefdef-cosealgorithmidentifier.
   *
   * @generated from field: int32 alg = 2;
   */
  alg: number;
};

/**
 * Describes the message webauthn.CredentialParameter.
 * Use `create(CredentialParameterSchema)` to create a new message.
 */
export const CredentialParameterSchema: GenMessage<CredentialParameter> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_webauthn_webauthn, 13);

/**
 * Relying Party information.
 * See https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrpentity and
 * https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/rp.
 *
 * @generated from message webauthn.RelyingPartyEntity
 */
export type RelyingPartyEntity = Message<"webauthn.RelyingPartyEntity"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message webauthn.RelyingPartyEntity.
 * Use `create(RelyingPartyEntitySchema)` to create a new message.
 */
export const RelyingPartyEntitySchema: GenMessage<RelyingPartyEntity> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_webauthn_webauthn, 14);

/**
 * User information.
 * See https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialuserentity
 * and
 * https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/user.
 *
 * @generated from message webauthn.UserEntity
 */
export type UserEntity = Message<"webauthn.UserEntity"> & {
  /**
   * Raw ID of the user.
   *
   * @generated from field: bytes id = 1;
   */
  id: Uint8Array;

  /**
   * Human-palatable name for a user account.
   * The Relying Party _may_ let the user choose this value.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Human-palatable name for the user account, intended only for display.
   * The Relying Party _should_ let the user choose this value.
   *
   * @generated from field: string display_name = 3;
   */
  displayName: string;
};

/**
 * Describes the message webauthn.UserEntity.
 * Use `create(UserEntitySchema)` to create a new message.
 */
export const UserEntitySchema: GenMessage<UserEntity> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_webauthn_webauthn, 15);

