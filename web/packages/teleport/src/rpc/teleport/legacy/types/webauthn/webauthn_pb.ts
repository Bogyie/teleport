// Copyright 2021 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/legacy/types/webauthn/webauthn.proto (package webauthn, syntax proto3)
/* eslint-disable */
// @ts-nocheck

// Package WebAuthn maps WebAuthn messages to protocol buffers.
//
// The mapping is designed to match both the WebAuthn specification and the
// capabilities of current browser implementations.
//
// REST-based Teleport APIs will make an effort to transmit or embed JSON
// messages matching the github.com/go-webauthn/webauthn reference implementation,
// to allow for easy browser integration. gRPC APIs are not meant for REST use
// and thus make no such promises, although the correspondence should be
// obvious.
//
// Note that, ordinarily, various fields in WebAuthn messages are encoded using
// "RawURLEncoding" (aka, base64 URL encoding without padding). This is not the
// case for _any_ of the fields mapped here, all bytes fields are transmitted
// raw/unencoded.

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Credential assertion used for login ceremonies.
 *
 * @generated from message webauthn.CredentialAssertion
 */
export class CredentialAssertion extends Message<CredentialAssertion> {
  /**
   * @generated from field: webauthn.PublicKeyCredentialRequestOptions public_key = 1;
   */
  publicKey?: PublicKeyCredentialRequestOptions;

  constructor(data?: PartialMessage<CredentialAssertion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webauthn.CredentialAssertion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "message", T: PublicKeyCredentialRequestOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CredentialAssertion {
    return new CredentialAssertion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CredentialAssertion {
    return new CredentialAssertion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CredentialAssertion {
    return new CredentialAssertion().fromJsonString(jsonString, options);
  }

  static equals(a: CredentialAssertion | PlainMessage<CredentialAssertion> | undefined, b: CredentialAssertion | PlainMessage<CredentialAssertion> | undefined): boolean {
    return proto3.util.equals(CredentialAssertion, a, b);
  }
}

/**
 * Request options necessary for credential assertions, aka login ceremonies.
 * See https://www.w3.org/TR/webauthn-2/#dictionary-assertion-options or
 * refer to navigator.credentials.get in your browser.
 *
 * @generated from message webauthn.PublicKeyCredentialRequestOptions
 */
export class PublicKeyCredentialRequestOptions extends Message<PublicKeyCredentialRequestOptions> {
  /**
   * Raw challenge used for assertion.
   *
   * @generated from field: bytes challenge = 1;
   */
  challenge = new Uint8Array(0);

  /**
   * Timeout in milliseconds.
   *
   * @generated from field: int64 timeout_ms = 2;
   */
  timeoutMs = protoInt64.zero;

  /**
   * Relying Party ID.
   *
   * @generated from field: string rp_id = 3;
   */
  rpId = "";

  /**
   * Allowed credentials for assertion.
   *
   * @generated from field: repeated webauthn.CredentialDescriptor allow_credentials = 4;
   */
  allowCredentials: CredentialDescriptor[] = [];

  /**
   * Extensions supplied by the Relying Party.
   *
   * @generated from field: webauthn.AuthenticationExtensionsClientInputs extensions = 5;
   */
  extensions?: AuthenticationExtensionsClientInputs;

  /**
   * User verification requirement.
   *
   * @generated from field: string user_verification = 6;
   */
  userVerification = "";

  constructor(data?: PartialMessage<PublicKeyCredentialRequestOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webauthn.PublicKeyCredentialRequestOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "challenge", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "timeout_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "rp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "allow_credentials", kind: "message", T: CredentialDescriptor, repeated: true },
    { no: 5, name: "extensions", kind: "message", T: AuthenticationExtensionsClientInputs },
    { no: 6, name: "user_verification", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublicKeyCredentialRequestOptions {
    return new PublicKeyCredentialRequestOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublicKeyCredentialRequestOptions {
    return new PublicKeyCredentialRequestOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublicKeyCredentialRequestOptions {
    return new PublicKeyCredentialRequestOptions().fromJsonString(jsonString, options);
  }

  static equals(a: PublicKeyCredentialRequestOptions | PlainMessage<PublicKeyCredentialRequestOptions> | undefined, b: PublicKeyCredentialRequestOptions | PlainMessage<PublicKeyCredentialRequestOptions> | undefined): boolean {
    return proto3.util.equals(PublicKeyCredentialRequestOptions, a, b);
  }
}

/**
 * Assertion response returned by the authenticator.
 * Refer to navigator.credentials.get in your browser.
 *
 * Note: assertion responses return both "rawId" and "id" (RawURLEncoding of
 * "id"), but it seemed pointless to have both here.
 *
 * @generated from message webauthn.CredentialAssertionResponse
 */
export class CredentialAssertionResponse extends Message<CredentialAssertionResponse> {
  /**
   * Type of the credential, usually "public-key".
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * Raw Credential ID.
   *
   * @generated from field: bytes raw_id = 2;
   */
  rawId = new Uint8Array(0);

  /**
   * Assertion response from the authenticator.
   *
   * @generated from field: webauthn.AuthenticatorAssertionResponse response = 3;
   */
  response?: AuthenticatorAssertionResponse;

  /**
   * Extensions supplied by the authenticator.
   *
   * @generated from field: webauthn.AuthenticationExtensionsClientOutputs extensions = 4;
   */
  extensions?: AuthenticationExtensionsClientOutputs;

  constructor(data?: PartialMessage<CredentialAssertionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webauthn.CredentialAssertionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "raw_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "response", kind: "message", T: AuthenticatorAssertionResponse },
    { no: 4, name: "extensions", kind: "message", T: AuthenticationExtensionsClientOutputs },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CredentialAssertionResponse {
    return new CredentialAssertionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CredentialAssertionResponse {
    return new CredentialAssertionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CredentialAssertionResponse {
    return new CredentialAssertionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CredentialAssertionResponse | PlainMessage<CredentialAssertionResponse> | undefined, b: CredentialAssertionResponse | PlainMessage<CredentialAssertionResponse> | undefined): boolean {
    return proto3.util.equals(CredentialAssertionResponse, a, b);
  }
}

/**
 * Authenticator assertion response.
 * https://www.w3.org/TR/webauthn-2/#authenticatorassertionresponse
 *
 * @generated from message webauthn.AuthenticatorAssertionResponse
 */
export class AuthenticatorAssertionResponse extends Message<AuthenticatorAssertionResponse> {
  /**
   * Raw client data JSON, exactly as signed by the authenticator.
   * https://www.w3.org/TR/webauthn-2/#dictdef-collectedclientdata.
   *
   * @generated from field: bytes client_data_json = 1;
   */
  clientDataJson = new Uint8Array(0);

  /**
   * Raw authenticator data, exactly as signed by the authenticator.
   * https://www.w3.org/TR/webauthn-2/#sctn-authenticator-data.
   *
   * @generated from field: bytes authenticator_data = 2;
   */
  authenticatorData = new Uint8Array(0);

  /**
   * Raw assertion signature performed authenticatorData|clientDataJSON.
   * https://www.w3.org/TR/webauthn-2/#assertion-signature.
   *
   * @generated from field: bytes signature = 3;
   */
  signature = new Uint8Array(0);

  /**
   * Raw user handle returned by the authenticator, if any.
   *
   * @generated from field: bytes user_handle = 4;
   */
  userHandle = new Uint8Array(0);

  constructor(data?: PartialMessage<AuthenticatorAssertionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webauthn.AuthenticatorAssertionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_data_json", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "authenticator_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "user_handle", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthenticatorAssertionResponse {
    return new AuthenticatorAssertionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthenticatorAssertionResponse {
    return new AuthenticatorAssertionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthenticatorAssertionResponse {
    return new AuthenticatorAssertionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AuthenticatorAssertionResponse | PlainMessage<AuthenticatorAssertionResponse> | undefined, b: AuthenticatorAssertionResponse | PlainMessage<AuthenticatorAssertionResponse> | undefined): boolean {
    return proto3.util.equals(AuthenticatorAssertionResponse, a, b);
  }
}

/**
 * Credential creation used for registration ceremonies.
 *
 * @generated from message webauthn.CredentialCreation
 */
export class CredentialCreation extends Message<CredentialCreation> {
  /**
   * @generated from field: webauthn.PublicKeyCredentialCreationOptions public_key = 1;
   */
  publicKey?: PublicKeyCredentialCreationOptions;

  constructor(data?: PartialMessage<CredentialCreation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webauthn.CredentialCreation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "message", T: PublicKeyCredentialCreationOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CredentialCreation {
    return new CredentialCreation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CredentialCreation {
    return new CredentialCreation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CredentialCreation {
    return new CredentialCreation().fromJsonString(jsonString, options);
  }

  static equals(a: CredentialCreation | PlainMessage<CredentialCreation> | undefined, b: CredentialCreation | PlainMessage<CredentialCreation> | undefined): boolean {
    return proto3.util.equals(CredentialCreation, a, b);
  }
}

/**
 * Request options necessary for credential creation, aka registration
 * ceremonies.
 * See
 * https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialcreationoptions
 * or refer to navigator.credentials.create in your browser.
 *
 * @generated from message webauthn.PublicKeyCredentialCreationOptions
 */
export class PublicKeyCredentialCreationOptions extends Message<PublicKeyCredentialCreationOptions> {
  /**
   * Raw challenge used for creation.
   *
   * @generated from field: bytes challenge = 1;
   */
  challenge = new Uint8Array(0);

  /**
   * Relying party information.
   *
   * @generated from field: webauthn.RelyingPartyEntity rp = 2;
   */
  rp?: RelyingPartyEntity;

  /**
   * User information.
   *
   * @generated from field: webauthn.UserEntity user = 3;
   */
  user?: UserEntity;

  /**
   * Desired properties for the credential to be created, from most to least
   * preferred.
   *
   * @generated from field: repeated webauthn.CredentialParameter credential_parameters = 4;
   */
  credentialParameters: CredentialParameter[] = [];

  /**
   * Timeout in milliseconds.
   *
   * @generated from field: int64 timeout_ms = 5;
   */
  timeoutMs = protoInt64.zero;

  /**
   * Credentials excluded from the ceremony.
   *
   * @generated from field: repeated webauthn.CredentialDescriptor exclude_credentials = 6;
   */
  excludeCredentials: CredentialDescriptor[] = [];

  /**
   * Attestation requested, defaulting to "none".
   * https://www.w3.org/TR/webauthn-2/#enumdef-attestationconveyancepreference.
   *
   * @generated from field: string attestation = 7;
   */
  attestation = "";

  /**
   * Extensions supplied by the Relying Party.
   *
   * @generated from field: webauthn.AuthenticationExtensionsClientInputs extensions = 8;
   */
  extensions?: AuthenticationExtensionsClientInputs;

  /**
   * Authenticator selection criteria for the new credential.
   *
   * @generated from field: webauthn.AuthenticatorSelection authenticator_selection = 9;
   */
  authenticatorSelection?: AuthenticatorSelection;

  constructor(data?: PartialMessage<PublicKeyCredentialCreationOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webauthn.PublicKeyCredentialCreationOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "challenge", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "rp", kind: "message", T: RelyingPartyEntity },
    { no: 3, name: "user", kind: "message", T: UserEntity },
    { no: 4, name: "credential_parameters", kind: "message", T: CredentialParameter, repeated: true },
    { no: 5, name: "timeout_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "exclude_credentials", kind: "message", T: CredentialDescriptor, repeated: true },
    { no: 7, name: "attestation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "extensions", kind: "message", T: AuthenticationExtensionsClientInputs },
    { no: 9, name: "authenticator_selection", kind: "message", T: AuthenticatorSelection },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublicKeyCredentialCreationOptions {
    return new PublicKeyCredentialCreationOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublicKeyCredentialCreationOptions {
    return new PublicKeyCredentialCreationOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublicKeyCredentialCreationOptions {
    return new PublicKeyCredentialCreationOptions().fromJsonString(jsonString, options);
  }

  static equals(a: PublicKeyCredentialCreationOptions | PlainMessage<PublicKeyCredentialCreationOptions> | undefined, b: PublicKeyCredentialCreationOptions | PlainMessage<PublicKeyCredentialCreationOptions> | undefined): boolean {
    return proto3.util.equals(PublicKeyCredentialCreationOptions, a, b);
  }
}

/**
 * Credential creation response returned by the authenticator.
 * Refer to navigator.credentials.create in your browser.
 *
 * Note: creation responses return both "rawId" and "id" (RawURLEncoding of
 * "id"), but it seemed pointless to have both here.
 *
 * @generated from message webauthn.CredentialCreationResponse
 */
export class CredentialCreationResponse extends Message<CredentialCreationResponse> {
  /**
   * Type of the credential, usually "public-key".
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * Raw Credential ID.
   *
   * @generated from field: bytes raw_id = 2;
   */
  rawId = new Uint8Array(0);

  /**
   * Attestation response from the authenticator.
   *
   * @generated from field: webauthn.AuthenticatorAttestationResponse response = 3;
   */
  response?: AuthenticatorAttestationResponse;

  /**
   * Extensions supplied by the authenticator.
   *
   * @generated from field: webauthn.AuthenticationExtensionsClientOutputs extensions = 4;
   */
  extensions?: AuthenticationExtensionsClientOutputs;

  constructor(data?: PartialMessage<CredentialCreationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webauthn.CredentialCreationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "raw_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "response", kind: "message", T: AuthenticatorAttestationResponse },
    { no: 4, name: "extensions", kind: "message", T: AuthenticationExtensionsClientOutputs },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CredentialCreationResponse {
    return new CredentialCreationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CredentialCreationResponse {
    return new CredentialCreationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CredentialCreationResponse {
    return new CredentialCreationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CredentialCreationResponse | PlainMessage<CredentialCreationResponse> | undefined, b: CredentialCreationResponse | PlainMessage<CredentialCreationResponse> | undefined): boolean {
    return proto3.util.equals(CredentialCreationResponse, a, b);
  }
}

/**
 * Attestation response from the authentication, ie, the response to a
 * credential creation request.
 * https://www.w3.org/TR/webauthn-2/#authenticatorattestationresponse.
 *
 * @generated from message webauthn.AuthenticatorAttestationResponse
 */
export class AuthenticatorAttestationResponse extends Message<AuthenticatorAttestationResponse> {
  /**
   * Raw client data JSON, exactly as signed by the authenticator.
   * https://www.w3.org/TR/webauthn-2/#dictdef-collectedclientdata.
   *
   * @generated from field: bytes client_data_json = 1;
   */
  clientDataJson = new Uint8Array(0);

  /**
   * Raw attestation object.
   * https://www.w3.org/TR/webauthn-2/#attestation-object
   *
   * @generated from field: bytes attestation_object = 2;
   */
  attestationObject = new Uint8Array(0);

  constructor(data?: PartialMessage<AuthenticatorAttestationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webauthn.AuthenticatorAttestationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_data_json", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "attestation_object", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthenticatorAttestationResponse {
    return new AuthenticatorAttestationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthenticatorAttestationResponse {
    return new AuthenticatorAttestationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthenticatorAttestationResponse {
    return new AuthenticatorAttestationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AuthenticatorAttestationResponse | PlainMessage<AuthenticatorAttestationResponse> | undefined, b: AuthenticatorAttestationResponse | PlainMessage<AuthenticatorAttestationResponse> | undefined): boolean {
    return proto3.util.equals(AuthenticatorAttestationResponse, a, b);
  }
}

/**
 * Extensions supplied by the Relying Party during credential assertion or
 * creation.
 * https://www.w3.org/TR/webauthn-2/#client-extension-input
 *
 * @generated from message webauthn.AuthenticationExtensionsClientInputs
 */
export class AuthenticationExtensionsClientInputs extends Message<AuthenticationExtensionsClientInputs> {
  /**
   * U2F application ID to be used by the authenticator, if any.
   * Only available if using U2F compatibility mode.
   * https://www.w3.org/TR/webauthn-2/#sctn-appid-extension.
   *
   * @generated from field: string app_id = 1;
   */
  appId = "";

  /**
   * Enables the credProps extension.
   * https://w3c.github.io/webauthn/#sctn-authenticator-credential-properties-extension
   *
   * @generated from field: bool cred_props = 2;
   */
  credProps = false;

  constructor(data?: PartialMessage<AuthenticationExtensionsClientInputs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webauthn.AuthenticationExtensionsClientInputs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cred_props", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthenticationExtensionsClientInputs {
    return new AuthenticationExtensionsClientInputs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthenticationExtensionsClientInputs {
    return new AuthenticationExtensionsClientInputs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthenticationExtensionsClientInputs {
    return new AuthenticationExtensionsClientInputs().fromJsonString(jsonString, options);
  }

  static equals(a: AuthenticationExtensionsClientInputs | PlainMessage<AuthenticationExtensionsClientInputs> | undefined, b: AuthenticationExtensionsClientInputs | PlainMessage<AuthenticationExtensionsClientInputs> | undefined): boolean {
    return proto3.util.equals(AuthenticationExtensionsClientInputs, a, b);
  }
}

/**
 * Extensions supplied by the authenticator to the Relying Party, during
 * credential assertion or creation.
 * https://www.w3.org/TR/webauthn-2/#client-extension-output.
 *
 * @generated from message webauthn.AuthenticationExtensionsClientOutputs
 */
export class AuthenticationExtensionsClientOutputs extends Message<AuthenticationExtensionsClientOutputs> {
  /**
   * If true, the AppID extension was used by the authenticator, which changes
   * the rpIdHash accordingly.
   * https://www.w3.org/TR/webauthn-2/#sctn-appid-extension.
   *
   * @generated from field: bool app_id = 1;
   */
  appId = false;

  /**
   * Credential properties per credProps extension.
   * https://w3c.github.io/webauthn/#sctn-authenticator-credential-properties-extension.
   *
   * @generated from field: webauthn.CredentialPropertiesOutput cred_props = 2;
   */
  credProps?: CredentialPropertiesOutput;

  constructor(data?: PartialMessage<AuthenticationExtensionsClientOutputs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webauthn.AuthenticationExtensionsClientOutputs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app_id", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "cred_props", kind: "message", T: CredentialPropertiesOutput },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthenticationExtensionsClientOutputs {
    return new AuthenticationExtensionsClientOutputs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthenticationExtensionsClientOutputs {
    return new AuthenticationExtensionsClientOutputs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthenticationExtensionsClientOutputs {
    return new AuthenticationExtensionsClientOutputs().fromJsonString(jsonString, options);
  }

  static equals(a: AuthenticationExtensionsClientOutputs | PlainMessage<AuthenticationExtensionsClientOutputs> | undefined, b: AuthenticationExtensionsClientOutputs | PlainMessage<AuthenticationExtensionsClientOutputs> | undefined): boolean {
    return proto3.util.equals(AuthenticationExtensionsClientOutputs, a, b);
  }
}

/**
 * CredentialPropertiesOutput is the output of the credProps extension.
 *
 * @generated from message webauthn.CredentialPropertiesOutput
 */
export class CredentialPropertiesOutput extends Message<CredentialPropertiesOutput> {
  /**
   * If true, the created credential is a resident key (regardless of the
   * AuthenticatorSelection.require_resident_key value).
   * OPTIONAL by specification.
   *
   * @generated from field: bool rk = 1;
   */
  rk = false;

  constructor(data?: PartialMessage<CredentialPropertiesOutput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webauthn.CredentialPropertiesOutput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rk", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CredentialPropertiesOutput {
    return new CredentialPropertiesOutput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CredentialPropertiesOutput {
    return new CredentialPropertiesOutput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CredentialPropertiesOutput {
    return new CredentialPropertiesOutput().fromJsonString(jsonString, options);
  }

  static equals(a: CredentialPropertiesOutput | PlainMessage<CredentialPropertiesOutput> | undefined, b: CredentialPropertiesOutput | PlainMessage<CredentialPropertiesOutput> | undefined): boolean {
    return proto3.util.equals(CredentialPropertiesOutput, a, b);
  }
}

/**
 * Authenticator selection criteria.
 * Restricts the choice of authenticator for credential creation.
 *
 * @generated from message webauthn.AuthenticatorSelection
 */
export class AuthenticatorSelection extends Message<AuthenticatorSelection> {
  /**
   * Authenticator attachment, empty means no particular attachment is
   * required.
   *
   * @generated from field: string authenticator_attachment = 1;
   */
  authenticatorAttachment = "";

  /**
   * Resident key requirement, if true the authenticator must create a resident
   * key.
   *
   * @generated from field: bool require_resident_key = 2;
   */
  requireResidentKey = false;

  /**
   * User verification requirement for authenticators.
   *
   * @generated from field: string user_verification = 3;
   */
  userVerification = "";

  constructor(data?: PartialMessage<AuthenticatorSelection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webauthn.AuthenticatorSelection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authenticator_attachment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "require_resident_key", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "user_verification", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthenticatorSelection {
    return new AuthenticatorSelection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthenticatorSelection {
    return new AuthenticatorSelection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthenticatorSelection {
    return new AuthenticatorSelection().fromJsonString(jsonString, options);
  }

  static equals(a: AuthenticatorSelection | PlainMessage<AuthenticatorSelection> | undefined, b: AuthenticatorSelection | PlainMessage<AuthenticatorSelection> | undefined): boolean {
    return proto3.util.equals(AuthenticatorSelection, a, b);
  }
}

/**
 * Public key credential descriptor.
 * https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialdescriptor.
 *
 * @generated from message webauthn.CredentialDescriptor
 */
export class CredentialDescriptor extends Message<CredentialDescriptor> {
  /**
   * Type of the credential, usually "public-key".
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * Raw Credential ID.
   *
   * @generated from field: bytes id = 2;
   */
  id = new Uint8Array(0);

  constructor(data?: PartialMessage<CredentialDescriptor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webauthn.CredentialDescriptor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CredentialDescriptor {
    return new CredentialDescriptor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CredentialDescriptor {
    return new CredentialDescriptor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CredentialDescriptor {
    return new CredentialDescriptor().fromJsonString(jsonString, options);
  }

  static equals(a: CredentialDescriptor | PlainMessage<CredentialDescriptor> | undefined, b: CredentialDescriptor | PlainMessage<CredentialDescriptor> | undefined): boolean {
    return proto3.util.equals(CredentialDescriptor, a, b);
  }
}

/**
 * Parameters for credential creation.
 * https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialparameters.
 *
 * @generated from message webauthn.CredentialParameter
 */
export class CredentialParameter extends Message<CredentialParameter> {
  /**
   * Credential type, usually "public-key".
   * https://www.w3.org/TR/webauthn-2/#enumdef-publickeycredentialtype.
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * COSE algorithm specifier.
   * Most authenticators support exclusively ES256(-7).
   * https://www.w3.org/TR/webauthn-2/#typedefdef-cosealgorithmidentifier.
   *
   * @generated from field: int32 alg = 2;
   */
  alg = 0;

  constructor(data?: PartialMessage<CredentialParameter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webauthn.CredentialParameter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "alg", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CredentialParameter {
    return new CredentialParameter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CredentialParameter {
    return new CredentialParameter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CredentialParameter {
    return new CredentialParameter().fromJsonString(jsonString, options);
  }

  static equals(a: CredentialParameter | PlainMessage<CredentialParameter> | undefined, b: CredentialParameter | PlainMessage<CredentialParameter> | undefined): boolean {
    return proto3.util.equals(CredentialParameter, a, b);
  }
}

/**
 * Relying Party information.
 * See https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrpentity and
 * https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/rp.
 *
 * @generated from message webauthn.RelyingPartyEntity
 */
export class RelyingPartyEntity extends Message<RelyingPartyEntity> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<RelyingPartyEntity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webauthn.RelyingPartyEntity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RelyingPartyEntity {
    return new RelyingPartyEntity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RelyingPartyEntity {
    return new RelyingPartyEntity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RelyingPartyEntity {
    return new RelyingPartyEntity().fromJsonString(jsonString, options);
  }

  static equals(a: RelyingPartyEntity | PlainMessage<RelyingPartyEntity> | undefined, b: RelyingPartyEntity | PlainMessage<RelyingPartyEntity> | undefined): boolean {
    return proto3.util.equals(RelyingPartyEntity, a, b);
  }
}

/**
 * User information.
 * See https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialuserentity
 * and
 * https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/user.
 *
 * @generated from message webauthn.UserEntity
 */
export class UserEntity extends Message<UserEntity> {
  /**
   * Raw ID of the user.
   *
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * Human-palatable name for a user account.
   * The Relying Party _may_ let the user choose this value.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Human-palatable name for the user account, intended only for display.
   * The Relying Party _should_ let the user choose this value.
   *
   * @generated from field: string display_name = 3;
   */
  displayName = "";

  constructor(data?: PartialMessage<UserEntity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webauthn.UserEntity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserEntity {
    return new UserEntity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserEntity {
    return new UserEntity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserEntity {
    return new UserEntity().fromJsonString(jsonString, options);
  }

  static equals(a: UserEntity | PlainMessage<UserEntity> | undefined, b: UserEntity | PlainMessage<UserEntity> | undefined): boolean {
    return proto3.util.equals(UserEntity, a, b);
  }
}

