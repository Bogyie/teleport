// Copyright 2021 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/legacy/types/events/events.proto (package events, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../../gogoproto/gogo_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_struct, file_google_protobuf_timestamp, file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { LockTarget, SAMLConnectorV2 } from "../types_pb";
import { file_teleport_legacy_types_types } from "../types_pb";
import type { LabelValues } from "../wrappers/wrappers_pb";
import { file_teleport_legacy_types_wrappers_wrappers } from "../wrappers/wrappers_pb";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/legacy/types/events/events.proto.
 */
export const file_teleport_legacy_types_events_events: GenFile = /*@__PURE__*/
  fileDesc("", [file_gogoproto_gogo, file_google_protobuf_struct, file_google_protobuf_timestamp, file_google_protobuf_wrappers, file_teleport_legacy_types_types, file_teleport_legacy_types_wrappers_wrappers]);

/**
 * Metadata is a common event metadata
 *
 * @generated from message events.Metadata
 */
export type Metadata = Message<"events.Metadata"> & {
  /**
   * Index is a monotonically incremented index in the event sequence
   *
   * @generated from field: int64 Index = 1;
   */
  Index: bigint;

  /**
   * Type is the event type
   *
   * @generated from field: string Type = 2;
   */
  Type: string;

  /**
   * ID is a unique event identifier
   *
   * @generated from field: string ID = 3;
   */
  ID: string;

  /**
   * Code is a unique event code
   *
   * @generated from field: string Code = 4;
   */
  Code: string;

  /**
   * Time is event time
   *
   * @generated from field: google.protobuf.Timestamp Time = 5;
   */
  Time?: Timestamp;

  /**
   * ClusterName identifies the originating teleport cluster
   *
   * @generated from field: string ClusterName = 6;
   */
  ClusterName: string;
};

/**
 * Describes the message events.Metadata.
 * Use `create(MetadataSchema)` to create a new message.
 */
export const MetadataSchema: GenMessage<Metadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 0);

/**
 * SessionMetadata is a common session event metadata
 *
 * @generated from message events.SessionMetadata
 */
export type SessionMetadata = Message<"events.SessionMetadata"> & {
  /**
   * SessionID is a unique UUID of the session.
   *
   * @generated from field: string SessionID = 1;
   */
  SessionID: string;

  /**
   * WithMFA is a UUID of an MFA device used to start this session.
   *
   * @generated from field: string WithMFA = 2;
   */
  WithMFA: string;

  /**
   * PrivateKeyPolicy is the private key policy of the private key used to start this session.
   *
   * @generated from field: string PrivateKeyPolicy = 3;
   */
  PrivateKeyPolicy: string;
};

/**
 * Describes the message events.SessionMetadata.
 * Use `create(SessionMetadataSchema)` to create a new message.
 */
export const SessionMetadataSchema: GenMessage<SessionMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 1);

/**
 * UserMetadata is a common user event metadata
 *
 * @generated from message events.UserMetadata
 */
export type UserMetadata = Message<"events.UserMetadata"> & {
  /**
   * User is teleport user name
   *
   * @generated from field: string User = 1;
   */
  User: string;

  /**
   * Login is OS login
   *
   * @generated from field: string Login = 2;
   */
  Login: string;

  /**
   * Impersonator is a user acting on behalf of another user
   *
   * @generated from field: string Impersonator = 3;
   */
  Impersonator: string;

  /**
   * AWSRoleARN is AWS IAM role user assumes when accessing AWS console.
   *
   * @generated from field: string AWSRoleARN = 4;
   */
  AWSRoleARN: string;

  /**
   * AccessRequests are the IDs of access requests created by the user
   *
   * @generated from field: repeated string AccessRequests = 5;
   */
  AccessRequests: string[];

  /**
   * AzureIdentity is the Azure identity user assumes when accessing Azure API.
   *
   * @generated from field: string AzureIdentity = 6;
   */
  AzureIdentity: string;

  /**
   * GCPServiceAccount is the GCP service account user assumes when accessing GCP API.
   *
   * @generated from field: string GCPServiceAccount = 7;
   */
  GCPServiceAccount: string;

  /**
   * TrustedDevice contains information about the users' trusted device.
   * Requires a registered and enrolled device to be used during authentication.
   *
   * @generated from field: events.DeviceMetadata TrustedDevice = 8;
   */
  TrustedDevice?: DeviceMetadata;

  /**
   * RequiredPrivateKeyPolicy is the private key policy enforced for this login.
   *
   * @generated from field: string RequiredPrivateKeyPolicy = 9;
   */
  RequiredPrivateKeyPolicy: string;

  /**
   * UserKind indicates what type of user this is, e.g. a human or Machine ID
   * bot user.
   *
   * @generated from field: events.UserKind UserKind = 10;
   */
  UserKind: UserKind;

  /**
   * BotName is the name of the Bot if this action is associated with one.
   *
   * @generated from field: string BotName = 11;
   */
  BotName: string;

  /**
   * BotInstanceID is the ID of the Bot Instance if this action is associated
   * with one.
   *
   * @generated from field: string BotInstanceID = 12;
   */
  BotInstanceID: string;
};

/**
 * Describes the message events.UserMetadata.
 * Use `create(UserMetadataSchema)` to create a new message.
 */
export const UserMetadataSchema: GenMessage<UserMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 2);

/**
 * Server is a server metadata
 *
 * @generated from message events.ServerMetadata
 */
export type ServerMetadata = Message<"events.ServerMetadata"> & {
  /**
   * ServerNamespace is a namespace of the server event
   *
   * @generated from field: string ServerNamespace = 1;
   */
  ServerNamespace: string;

  /**
   * ServerID is the UUID of the server the session occurred on.
   *
   * @generated from field: string ServerID = 2;
   */
  ServerID: string;

  /**
   * ServerHostname is the hostname of the server the session occurred on.
   *
   * @generated from field: string ServerHostname = 3;
   */
  ServerHostname: string;

  /**
   * ServerAddr is the address of the server the session occurred on.
   *
   * @generated from field: string ServerAddr = 4;
   */
  ServerAddr: string;

  /**
   * ServerLabels are the labels (static and dynamic) of the server the
   * session occurred on.
   *
   * @generated from field: map<string, string> ServerLabels = 5;
   */
  ServerLabels: { [key: string]: string };

  /**
   * ForwardedBy tells us if the metadata was sent by the node itself or by another node in it's
   * place. We can't verify emit permissions fully for these events so care should be taken with
   * them.
   *
   * @generated from field: string ForwardedBy = 6;
   */
  ForwardedBy: string;

  /**
   * ServerSubKind is the sub kind of the server the session occurred on.
   *
   * @generated from field: string ServerSubKind = 7;
   */
  ServerSubKind: string;

  /**
   * ServerVersion is the component version the session occurred on.
   *
   * @generated from field: string ServerVersion = 8;
   */
  ServerVersion: string;
};

/**
 * Describes the message events.ServerMetadata.
 * Use `create(ServerMetadataSchema)` to create a new message.
 */
export const ServerMetadataSchema: GenMessage<ServerMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 3);

/**
 * Connection contains connection info
 *
 * @generated from message events.ConnectionMetadata
 */
export type ConnectionMetadata = Message<"events.ConnectionMetadata"> & {
  /**
   * LocalAddr is a target address on the host
   *
   * @generated from field: string LocalAddr = 1;
   */
  LocalAddr: string;

  /**
   * RemoteAddr is a client (user's) address
   *
   * @generated from field: string RemoteAddr = 2;
   */
  RemoteAddr: string;

  /**
   * Protocol specifies protocol that was captured
   *
   * @generated from field: string Protocol = 3;
   */
  Protocol: string;
};

/**
 * Describes the message events.ConnectionMetadata.
 * Use `create(ConnectionMetadataSchema)` to create a new message.
 */
export const ConnectionMetadataSchema: GenMessage<ConnectionMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 4);

/**
 * ClientMetadata identifies the originating client for an event.
 *
 * @generated from message events.ClientMetadata
 */
export type ClientMetadata = Message<"events.ClientMetadata"> & {
  /**
   * UserAgent identifies the type of client that attempted the event.
   *
   * @generated from field: string UserAgent = 1;
   */
  UserAgent: string;
};

/**
 * Describes the message events.ClientMetadata.
 * Use `create(ClientMetadataSchema)` to create a new message.
 */
export const ClientMetadataSchema: GenMessage<ClientMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 5);

/**
 * KubernetesClusterMetadata contains common metadata for kubernetes-related
 * events.
 *
 * @generated from message events.KubernetesClusterMetadata
 */
export type KubernetesClusterMetadata = Message<"events.KubernetesClusterMetadata"> & {
  /**
   * KubernetesCluster is a kubernetes cluster name.
   *
   * @generated from field: string KubernetesCluster = 1;
   */
  KubernetesCluster: string;

  /**
   * KubernetesUsers is a list of kubernetes usernames for the user.
   *
   * @generated from field: repeated string KubernetesUsers = 2;
   */
  KubernetesUsers: string[];

  /**
   * KubernetesGroups is a list of kubernetes groups for the user.
   *
   * @generated from field: repeated string KubernetesGroups = 3;
   */
  KubernetesGroups: string[];

  /**
   * KubernetesLabels are the labels (static and dynamic) of the kubernetes cluster the
   * session occurred on.
   *
   * @generated from field: map<string, string> KubernetesLabels = 4;
   */
  KubernetesLabels: { [key: string]: string };
};

/**
 * Describes the message events.KubernetesClusterMetadata.
 * Use `create(KubernetesClusterMetadataSchema)` to create a new message.
 */
export const KubernetesClusterMetadataSchema: GenMessage<KubernetesClusterMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 6);

/**
 * KubernetesPodMetadata contains common metadata for kubernetes pod-related
 * events.
 *
 * @generated from message events.KubernetesPodMetadata
 */
export type KubernetesPodMetadata = Message<"events.KubernetesPodMetadata"> & {
  /**
   * KubernetesPodName is the name of the pod.
   *
   * @generated from field: string KubernetesPodName = 1;
   */
  KubernetesPodName: string;

  /**
   * KubernetesPodNamespace is the namespace of the pod.
   *
   * @generated from field: string KubernetesPodNamespace = 2;
   */
  KubernetesPodNamespace: string;

  /**
   * KubernetesContainerName is the name of the container within the pod.
   *
   * @generated from field: string KubernetesContainerName = 3;
   */
  KubernetesContainerName: string;

  /**
   * KubernetesContainerImage is the image of the container within the pod.
   *
   * @generated from field: string KubernetesContainerImage = 4;
   */
  KubernetesContainerImage: string;

  /**
   * KubernetesNodeName is the node that runs the pod.
   *
   * @generated from field: string KubernetesNodeName = 5;
   */
  KubernetesNodeName: string;
};

/**
 * Describes the message events.KubernetesPodMetadata.
 * Use `create(KubernetesPodMetadataSchema)` to create a new message.
 */
export const KubernetesPodMetadataSchema: GenMessage<KubernetesPodMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 7);

/**
 * SAMLIdPServiceProviderMetadata contains common metadata for SAML IdP service provider
 * events.
 *
 * @generated from message events.SAMLIdPServiceProviderMetadata
 */
export type SAMLIdPServiceProviderMetadata = Message<"events.SAMLIdPServiceProviderMetadata"> & {
  /**
   * ServiceProviderEntityID is the entity ID of the service provider.
   *
   * @generated from field: string ServiceProviderEntityID = 1;
   */
  ServiceProviderEntityID: string;

  /**
   * ServiceProviderShortcut is the shortcut name of a service provider.
   *
   * @generated from field: string ServiceProviderShortcut = 2;
   */
  ServiceProviderShortcut: string;

  /**
   * AttributeMapping is a map of attribute name and value which will be asserted in SAML response.
   *
   * @generated from field: map<string, string> AttributeMapping = 3;
   */
  AttributeMapping: { [key: string]: string };
};

/**
 * Describes the message events.SAMLIdPServiceProviderMetadata.
 * Use `create(SAMLIdPServiceProviderMetadataSchema)` to create a new message.
 */
export const SAMLIdPServiceProviderMetadataSchema: GenMessage<SAMLIdPServiceProviderMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 8);

/**
 * OktaResourcesUpdatedMetadata contains common metadata for Okta resources updated events.
 *
 * @generated from message events.OktaResourcesUpdatedMetadata
 */
export type OktaResourcesUpdatedMetadata = Message<"events.OktaResourcesUpdatedMetadata"> & {
  /**
   * Added is the number of resources added.
   *
   * @generated from field: int32 Added = 1;
   */
  Added: number;

  /**
   * Updated is the number of resources updated.
   *
   * @generated from field: int32 Updated = 2;
   */
  Updated: number;

  /**
   * Deleted is the number of resources deleted.
   *
   * @generated from field: int32 Deleted = 3;
   */
  Deleted: number;

  /**
   * AddedResources is a list of the actual resources that were added.
   *
   * @generated from field: repeated events.OktaResource AddedResources = 4;
   */
  AddedResources: OktaResource[];

  /**
   * UpdatedResources is a list of the actual resources that were updated.
   *
   * @generated from field: repeated events.OktaResource UpdatedResources = 5;
   */
  UpdatedResources: OktaResource[];

  /**
   * DeletedResources is a list of the actual resources that were deleted.
   *
   * @generated from field: repeated events.OktaResource DeletedResources = 6;
   */
  DeletedResources: OktaResource[];
};

/**
 * Describes the message events.OktaResourcesUpdatedMetadata.
 * Use `create(OktaResourcesUpdatedMetadataSchema)` to create a new message.
 */
export const OktaResourcesUpdatedMetadataSchema: GenMessage<OktaResourcesUpdatedMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 9);

/**
 * OktaResource is a descriptor of an Okta resource.
 *
 * @generated from message events.OktaResource
 */
export type OktaResource = Message<"events.OktaResource"> & {
  /**
   * ID is the identifier of the Okta resource.
   *
   * @generated from field: string ID = 1;
   */
  ID: string;

  /**
   * Description is the description of the Okta resource.
   *
   * @generated from field: string Description = 2;
   */
  Description: string;
};

/**
 * Describes the message events.OktaResource.
 * Use `create(OktaResourceSchema)` to create a new message.
 */
export const OktaResourceSchema: GenMessage<OktaResource> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 10);

/**
 * OktaAssignmentMetadata contains common metadata for Okta assignment events.
 *
 * @generated from message events.OktaAssignmentMetadata
 */
export type OktaAssignmentMetadata = Message<"events.OktaAssignmentMetadata"> & {
  /**
   * Source is the source of the Okta assignment.
   *
   * @generated from field: string Source = 1;
   */
  Source: string;

  /**
   * User is the user the Okta assignment is for.
   *
   * @generated from field: string User = 2;
   */
  User: string;

  /**
   * StartingStatus is the starting status of the assignment.
   *
   * @generated from field: string StartingStatus = 3;
   */
  StartingStatus: string;

  /**
   * EndingStatus is the ending status of the assignment.
   *
   * @generated from field: string EndingStatus = 4;
   */
  EndingStatus: string;
};

/**
 * Describes the message events.OktaAssignmentMetadata.
 * Use `create(OktaAssignmentMetadataSchema)` to create a new message.
 */
export const OktaAssignmentMetadataSchema: GenMessage<OktaAssignmentMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 11);

/**
 * AccessListMemberMetadata contains common metadata for access list member resource events.
 *
 * @generated from message events.AccessListMemberMetadata
 */
export type AccessListMemberMetadata = Message<"events.AccessListMemberMetadata"> & {
  /**
   * AccessListName is the name of the access list the members are being added to or removed from.
   *
   * @generated from field: string AccessListName = 1;
   */
  AccessListName: string;

  /**
   * Members are all members affected by the access list membership change.
   *
   * @generated from field: repeated events.AccessListMember Members = 2;
   */
  Members: AccessListMember[];
};

/**
 * Describes the message events.AccessListMemberMetadata.
 * Use `create(AccessListMemberMetadataSchema)` to create a new message.
 */
export const AccessListMemberMetadataSchema: GenMessage<AccessListMemberMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 12);

/**
 * AccessListMember is metadata surrounding an individual access list member.
 *
 * @generated from message events.AccessListMember
 */
export type AccessListMember = Message<"events.AccessListMember"> & {
  /**
   * JoinedOn is the date that the member joined.
   *
   * @generated from field: google.protobuf.Timestamp JoinedOn = 1;
   */
  JoinedOn?: Timestamp;

  /**
   * RemovedOn is the date that the access list member was removed. Will only be populated for deletion.
   *
   * @generated from field: google.protobuf.Timestamp RemovedOn = 2;
   */
  RemovedOn?: Timestamp;

  /**
   * Reason is the reason that the member was added, modified, or removed.
   *
   * @generated from field: string Reason = 3;
   */
  Reason: string;

  /**
   * MemberName is the name of the member.
   *
   * @generated from field: string MemberName = 4;
   */
  MemberName: string;
};

/**
 * Describes the message events.AccessListMember.
 * Use `create(AccessListMemberSchema)` to create a new message.
 */
export const AccessListMemberSchema: GenMessage<AccessListMember> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 13);

/**
 * AccessListReviewMembershipRequirementsChanged contains information for when membership requirements change as part of a review.
 *
 * @generated from message events.AccessListReviewMembershipRequirementsChanged
 */
export type AccessListReviewMembershipRequirementsChanged = Message<"events.AccessListReviewMembershipRequirementsChanged"> & {
  /**
   * Roles are the roles that changed as part of a review.
   *
   * @generated from field: repeated string Roles = 1;
   */
  Roles: string[];

  /**
   * Traits are the traits that changed as part of a review.
   *
   * @generated from field: map<string, string> Traits = 2;
   */
  Traits: { [key: string]: string };
};

/**
 * Describes the message events.AccessListReviewMembershipRequirementsChanged.
 * Use `create(AccessListReviewMembershipRequirementsChangedSchema)` to create a new message.
 */
export const AccessListReviewMembershipRequirementsChangedSchema: GenMessage<AccessListReviewMembershipRequirementsChanged> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 14);

/**
 * AccessListReviewMetadata contains metadata for access list review events.
 *
 * @generated from message events.AccessListReviewMetadata
 */
export type AccessListReviewMetadata = Message<"events.AccessListReviewMetadata"> & {
  /**
   * Message is the message that was supplied during the review.
   *
   * @generated from field: string Message = 1;
   */
  Message: string;

  /**
   * ReviewID is the ID of the review.
   *
   * @generated from field: string ReviewID = 2;
   */
  ReviewID: string;

  /**
   * MembershipRequirementsChanged is populated if the memrship requirements have changed..
   *
   * @generated from field: events.AccessListReviewMembershipRequirementsChanged MembershipRequirementsChanged = 3;
   */
  MembershipRequirementsChanged?: AccessListReviewMembershipRequirementsChanged;

  /**
   * ReviewFrequencyChanged is populated if the review frequency has changed.
   *
   * @generated from field: string ReviewFrequencyChanged = 4;
   */
  ReviewFrequencyChanged: string;

  /**
   * ReviewDayOfMonthChanged is populated if the review day of month has changed.
   *
   * @generated from field: string ReviewDayOfMonthChanged = 5;
   */
  ReviewDayOfMonthChanged: string;

  /**
   * RemovedMembers are the members that were removed as part of the review.
   *
   * @generated from field: repeated string RemovedMembers = 6;
   */
  RemovedMembers: string[];
};

/**
 * Describes the message events.AccessListReviewMetadata.
 * Use `create(AccessListReviewMetadataSchema)` to create a new message.
 */
export const AccessListReviewMetadataSchema: GenMessage<AccessListReviewMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 15);

/**
 * LockMetadata contains common metadata for lock resource events.
 *
 * @generated from message events.LockMetadata
 */
export type LockMetadata = Message<"events.LockMetadata"> & {
  /**
   * Target describes the set of interactions that the lock applies to
   *
   * @generated from field: types.LockTarget Target = 4;
   */
  Target?: LockTarget;
};

/**
 * Describes the message events.LockMetadata.
 * Use `create(LockMetadataSchema)` to create a new message.
 */
export const LockMetadataSchema: GenMessage<LockMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 16);

/**
 * SessionStart is a session start event
 *
 * @generated from message events.SessionStart
 */
export type SessionStart = Message<"events.SessionStart"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * ServerMetadata is a common server metadata
   *
   * @generated from field: events.ServerMetadata Server = 4;
   */
  Server?: ServerMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 5;
   */
  Connection?: ConnectionMetadata;

  /**
   * TerminalSize is expressed as 'W:H'
   *
   * @generated from field: string TerminalSize = 6;
   */
  TerminalSize: string;

  /**
   * KubernetesCluster has information about a kubernetes cluster, if
   * applicable.
   *
   * @generated from field: events.KubernetesClusterMetadata KubernetesCluster = 7;
   */
  KubernetesCluster?: KubernetesClusterMetadata;

  /**
   * KubernetesPod has information about a kubernetes pod, if applicable.
   *
   * @generated from field: events.KubernetesPodMetadata KubernetesPod = 8;
   */
  KubernetesPod?: KubernetesPodMetadata;

  /**
   * InitialCommand is the command used to start this session.
   *
   * @generated from field: repeated string InitialCommand = 9;
   */
  InitialCommand: string[];

  /**
   * SessionRecording is the type of session recording.
   *
   * @generated from field: string SessionRecording = 10;
   */
  SessionRecording: string;
};

/**
 * Describes the message events.SessionStart.
 * Use `create(SessionStartSchema)` to create a new message.
 */
export const SessionStartSchema: GenMessage<SessionStart> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 17);

/**
 * SessionJoin emitted when another user joins a session
 *
 * @generated from message events.SessionJoin
 */
export type SessionJoin = Message<"events.SessionJoin"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * ServerMetadata is a common server metadata
   *
   * @generated from field: events.ServerMetadata Server = 4;
   */
  Server?: ServerMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 5;
   */
  Connection?: ConnectionMetadata;

  /**
   * KubernetesCluster has information about a kubernetes cluster, if
   * applicable.
   *
   * @generated from field: events.KubernetesClusterMetadata KubernetesCluster = 6;
   */
  KubernetesCluster?: KubernetesClusterMetadata;
};

/**
 * Describes the message events.SessionJoin.
 * Use `create(SessionJoinSchema)` to create a new message.
 */
export const SessionJoinSchema: GenMessage<SessionJoin> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 18);

/**
 * SessionPrint event happens every time a write occurs to
 * terminal I/O during a session
 *
 * @generated from message events.SessionPrint
 */
export type SessionPrint = Message<"events.SessionPrint"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ChunkIndex is a monotonically incremented index for ordering print events
   *
   * @generated from field: int64 ChunkIndex = 2;
   */
  ChunkIndex: bigint;

  /**
   * Data is data transferred, it is not marshaled to JSON format
   *
   * @generated from field: bytes Data = 3;
   */
  Data: Uint8Array;

  /**
   * Bytes says how many bytes have been written into the session
   * during "print" event
   *
   * @generated from field: int64 Bytes = 4;
   */
  Bytes: bigint;

  /**
   * DelayMilliseconds is the delay in milliseconds from the start of the session
   *
   * @generated from field: int64 DelayMilliseconds = 5;
   */
  DelayMilliseconds: bigint;

  /**
   * Offset is the offset in bytes in the session file
   *
   * @generated from field: int64 Offset = 6;
   */
  Offset: bigint;
};

/**
 * Describes the message events.SessionPrint.
 * Use `create(SessionPrintSchema)` to create a new message.
 */
export const SessionPrintSchema: GenMessage<SessionPrint> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 19);

/**
 * DesktopRecording happens when a Teleport Desktop Protocol message
 * is captured during a Desktop Access Session.
 *
 * @generated from message events.DesktopRecording
 */
export type DesktopRecording = Message<"events.DesktopRecording"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Message is the encoded TDP message.
   *
   * @generated from field: bytes Message = 2;
   */
  Message: Uint8Array;

  /**
   * DelayMilliseconds is the delay in milliseconds from the start of the session
   *
   * JSON tag intentionally matches SessionPrintEvent
   *
   * @generated from field: int64 DelayMilliseconds = 3;
   */
  DelayMilliseconds: bigint;
};

/**
 * Describes the message events.DesktopRecording.
 * Use `create(DesktopRecordingSchema)` to create a new message.
 */
export const DesktopRecordingSchema: GenMessage<DesktopRecording> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 20);

/**
 * DesktopClipboardReceive is emitted when Teleport receives
 * clipboard data from a remote desktop.
 *
 * @generated from message events.DesktopClipboardReceive
 */
export type DesktopClipboardReceive = Message<"events.DesktopClipboardReceive"> & {
  /**
   * Metadata is common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * Session is common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Connection holds information about the connection.
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;

  /**
   * DesktopAddr is the address of the desktop being accessed.
   *
   * @generated from field: string DesktopAddr = 5;
   */
  DesktopAddr: string;

  /**
   * Length is the number of bytes of data received from the remote clipboard.
   *
   * @generated from field: int32 Length = 6;
   */
  Length: number;
};

/**
 * Describes the message events.DesktopClipboardReceive.
 * Use `create(DesktopClipboardReceiveSchema)` to create a new message.
 */
export const DesktopClipboardReceiveSchema: GenMessage<DesktopClipboardReceive> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 21);

/**
 * DesktopClipboardSend is emitted when clipboard data is
 * sent from a user's workstation to Teleport.
 *
 * @generated from message events.DesktopClipboardSend
 */
export type DesktopClipboardSend = Message<"events.DesktopClipboardSend"> & {
  /**
   * Metadata is common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * Session is common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Connection holds information about the connection.
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;

  /**
   * DesktopAddr is the address of the desktop being accessed.
   *
   * @generated from field: string DesktopAddr = 5;
   */
  DesktopAddr: string;

  /**
   * Length is the number of bytes of data sent.
   *
   * @generated from field: int32 Length = 6;
   */
  Length: number;
};

/**
 * Describes the message events.DesktopClipboardSend.
 * Use `create(DesktopClipboardSendSchema)` to create a new message.
 */
export const DesktopClipboardSendSchema: GenMessage<DesktopClipboardSend> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 22);

/**
 * DesktopSharedDirectoryStart is emitted when Teleport
 * successfully begins sharing a new directory to a remote desktop.
 *
 * @generated from message events.DesktopSharedDirectoryStart
 */
export type DesktopSharedDirectoryStart = Message<"events.DesktopSharedDirectoryStart"> & {
  /**
   * Metadata is common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * Session is common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Connection holds information about the connection.
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;

  /**
   * Status indicates whether the directory sharing initialization was successful.
   *
   * @generated from field: events.Status Status = 5;
   */
  Status?: Status;

  /**
   * DesktopAddr is the address of the desktop being accessed.
   *
   * @generated from field: string DesktopAddr = 6;
   */
  DesktopAddr: string;

  /**
   * DirectoryName is the name of the directory being shared.
   *
   * @generated from field: string DirectoryName = 7;
   */
  DirectoryName: string;

  /**
   * DirectoryID is the ID of the directory being shared (unique to the Windows Desktop Session).
   *
   * @generated from field: uint32 DirectoryID = 8;
   */
  DirectoryID: number;
};

/**
 * Describes the message events.DesktopSharedDirectoryStart.
 * Use `create(DesktopSharedDirectoryStartSchema)` to create a new message.
 */
export const DesktopSharedDirectoryStartSchema: GenMessage<DesktopSharedDirectoryStart> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 23);

/**
 * DesktopSharedDirectoryRead is emitted when Teleport
 * attempts to read from a file in a shared directory at
 * the behest of the remote desktop.
 *
 * @generated from message events.DesktopSharedDirectoryRead
 */
export type DesktopSharedDirectoryRead = Message<"events.DesktopSharedDirectoryRead"> & {
  /**
   * Metadata is common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * Session is common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Connection holds information about the connection.
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;

  /**
   * Status indicates whether the read was successful.
   *
   * @generated from field: events.Status Status = 5;
   */
  Status?: Status;

  /**
   * DesktopAddr is the address of the desktop being accessed.
   *
   * @generated from field: string DesktopAddr = 6;
   */
  DesktopAddr: string;

  /**
   * DirectoryName is the name of the directory being shared.
   *
   * @generated from field: string DirectoryName = 7;
   */
  DirectoryName: string;

  /**
   * DirectoryID is the ID of the directory being shared (unique to the Windows Desktop Session).
   *
   * @generated from field: uint32 DirectoryID = 8;
   */
  DirectoryID: number;

  /**
   * Path is the path within the shared directory where the file is located.
   *
   * @generated from field: string Path = 9;
   */
  Path: string;

  /**
   * Length is the number of bytes read.
   *
   * @generated from field: uint32 Length = 10;
   */
  Length: number;

  /**
   * Offset is the offset the bytes were read from.
   *
   * @generated from field: uint64 Offset = 11;
   */
  Offset: bigint;
};

/**
 * Describes the message events.DesktopSharedDirectoryRead.
 * Use `create(DesktopSharedDirectoryReadSchema)` to create a new message.
 */
export const DesktopSharedDirectoryReadSchema: GenMessage<DesktopSharedDirectoryRead> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 24);

/**
 * DesktopSharedDirectoryWrite is emitted when Teleport
 * attempts to write to a file in a shared directory at
 * the behest of the remote desktop.
 *
 * @generated from message events.DesktopSharedDirectoryWrite
 */
export type DesktopSharedDirectoryWrite = Message<"events.DesktopSharedDirectoryWrite"> & {
  /**
   * Metadata is common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * Session is common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Connection holds information about the connection.
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;

  /**
   * Status indicates whether the write was successful.
   *
   * @generated from field: events.Status Status = 5;
   */
  Status?: Status;

  /**
   * DesktopAddr is the address of the desktop being accessed.
   *
   * @generated from field: string DesktopAddr = 6;
   */
  DesktopAddr: string;

  /**
   * DirectoryName is the name of the directory being shared.
   *
   * @generated from field: string DirectoryName = 7;
   */
  DirectoryName: string;

  /**
   * DirectoryID is the ID of the directory being shared (unique to the Windows Desktop Session).
   *
   * @generated from field: uint32 DirectoryID = 8;
   */
  DirectoryID: number;

  /**
   * Path is the path within the shared directory where the file is located.
   *
   * @generated from field: string Path = 9;
   */
  Path: string;

  /**
   * Length is the number of bytes written.
   *
   * @generated from field: uint32 Length = 10;
   */
  Length: number;

  /**
   * Offset is the offset the bytes were written to.
   *
   * @generated from field: uint64 Offset = 11;
   */
  Offset: bigint;
};

/**
 * Describes the message events.DesktopSharedDirectoryWrite.
 * Use `create(DesktopSharedDirectoryWriteSchema)` to create a new message.
 */
export const DesktopSharedDirectoryWriteSchema: GenMessage<DesktopSharedDirectoryWrite> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 25);

/**
 * SessionReject event happens when a user hits a session control restriction.
 *
 * @generated from message events.SessionReject
 */
export type SessionReject = Message<"events.SessionReject"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ServerMetadata is a common server metadata
   *
   * @generated from field: events.ServerMetadata Server = 3;
   */
  Server?: ServerMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;

  /**
   * Reason is a field that specifies reason for event, e.g. in disconnect
   * event it explains why server disconnected the client
   *
   * @generated from field: string Reason = 5;
   */
  Reason: string;

  /**
   * Maximum is an event field specifying a maximal value (e.g. the value
   * of `max_connections` for a `session.rejected` event).
   *
   * @generated from field: int64 Maximum = 6;
   */
  Maximum: bigint;
};

/**
 * Describes the message events.SessionReject.
 * Use `create(SessionRejectSchema)` to create a new message.
 */
export const SessionRejectSchema: GenMessage<SessionReject> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 26);

/**
 * SessionConnect is emitted when a non-Teleport connection is made over net.Dial.
 *
 * @generated from message events.SessionConnect
 */
export type SessionConnect = Message<"events.SessionConnect"> & {
  /**
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * @generated from field: events.ServerMetadata Server = 2;
   */
  Server?: ServerMetadata;

  /**
   * @generated from field: events.ConnectionMetadata Connection = 3;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.SessionConnect.
 * Use `create(SessionConnectSchema)` to create a new message.
 */
export const SessionConnectSchema: GenMessage<SessionConnect> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 27);

/**
 * FileTransferRequestEvent happens when a FileTransferRequest is created, updated, approved, or denied.
 *
 * @generated from message events.FileTransferRequestEvent
 */
export type FileTransferRequestEvent = Message<"events.FileTransferRequestEvent"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * SessionMetadata is a common event session metadata
   *
   * @generated from field: events.SessionMetadata Session = 2;
   */
  Session?: SessionMetadata;

  /**
   * RequestID is the ID for the FileTransferRequest
   *
   * @generated from field: string RequestID = 3;
   */
  RequestID: string;

  /**
   * Approvers is a slice containing the Teleport users who have approved the request
   *
   * @generated from field: repeated string Approvers = 4;
   */
  Approvers: string[];

  /**
   * Requester is the Teleport user who requested the file transfer
   *
   * @generated from field: string Requester = 5;
   */
  Requester: string;

  /**
   * Location is the location of the file to be downloaded, or the directory of the upload
   *
   * @generated from field: string Location = 6;
   */
  Location: string;

  /**
   * Download is true if the requested file transfer is a download, false if an upload
   *
   * @generated from field: bool Download = 7;
   */
  Download: boolean;

  /**
   * Filename is the name of the file to be uploaded to the Location. Only present in uploads.
   *
   * @generated from field: string Filename = 8;
   */
  Filename: string;
};

/**
 * Describes the message events.FileTransferRequestEvent.
 * Use `create(FileTransferRequestEventSchema)` to create a new message.
 */
export const FileTransferRequestEventSchema: GenMessage<FileTransferRequestEvent> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 28);

/**
 * Resize means that some user resized PTY on the client
 *
 * @generated from message events.Resize
 */
export type Resize = Message<"events.Resize"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;

  /**
   * ServerMetadata is a common server metadata
   *
   * @generated from field: events.ServerMetadata Server = 5;
   */
  Server?: ServerMetadata;

  /**
   * TerminalSize is expressed as 'W:H'
   *
   * @generated from field: string TerminalSize = 6;
   */
  TerminalSize: string;

  /**
   * KubernetesCluster has information about a kubernetes cluster, if
   * applicable.
   *
   * @generated from field: events.KubernetesClusterMetadata KubernetesCluster = 7;
   */
  KubernetesCluster?: KubernetesClusterMetadata;

  /**
   * KubernetesPod has information about a kubernetes pod, if applicable.
   *
   * @generated from field: events.KubernetesPodMetadata KubernetesPod = 8;
   */
  KubernetesPod?: KubernetesPodMetadata;
};

/**
 * Describes the message events.Resize.
 * Use `create(ResizeSchema)` to create a new message.
 */
export const ResizeSchema: GenMessage<Resize> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 29);

/**
 * SessionEnd is a session end event
 *
 * @generated from message events.SessionEnd
 */
export type SessionEnd = Message<"events.SessionEnd"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;

  /**
   * ServerMetadata is a common server metadata
   *
   * @generated from field: events.ServerMetadata Server = 5;
   */
  Server?: ServerMetadata;

  /**
   * EnhancedRecording is used to indicate if the recording was an
   * enhanced recording or not.
   *
   * @generated from field: bool EnhancedRecording = 6;
   */
  EnhancedRecording: boolean;

  /**
   * Interactive is used to indicate if the session was interactive
   * (has PTY attached) or not (exec session).
   *
   * @generated from field: bool Interactive = 7;
   */
  Interactive: boolean;

  /**
   * Participants is a list of participants in the session.
   *
   * @generated from field: repeated string Participants = 8;
   */
  Participants: string[];

  /**
   * StartTime is the timestamp at which the session began.
   *
   * @generated from field: google.protobuf.Timestamp StartTime = 9;
   */
  StartTime?: Timestamp;

  /**
   * EndTime is the timestamp at which the session ended.
   *
   * @generated from field: google.protobuf.Timestamp EndTime = 10;
   */
  EndTime?: Timestamp;

  /**
   * KubernetesCluster has information about a kubernetes cluster, if
   * applicable.
   *
   * @generated from field: events.KubernetesClusterMetadata KubernetesCluster = 11;
   */
  KubernetesCluster?: KubernetesClusterMetadata;

  /**
   * KubernetesPod has information about a kubernetes pod, if applicable.
   *
   * @generated from field: events.KubernetesPodMetadata KubernetesPod = 12;
   */
  KubernetesPod?: KubernetesPodMetadata;

  /**
   * InitialCommand is the command used to start this session.
   *
   * @generated from field: repeated string InitialCommand = 13;
   */
  InitialCommand: string[];

  /**
   * SessionRecording is the type of session recording.
   *
   * @generated from field: string SessionRecording = 14;
   */
  SessionRecording: string;
};

/**
 * Describes the message events.SessionEnd.
 * Use `create(SessionEndSchema)` to create a new message.
 */
export const SessionEndSchema: GenMessage<SessionEnd> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 30);

/**
 * BPFMetadata is a common BPF process metadata
 *
 * @generated from message events.BPFMetadata
 */
export type BPFMetadata = Message<"events.BPFMetadata"> & {
  /**
   * PID is the ID of the process.
   *
   * @generated from field: uint64 PID = 1;
   */
  PID: bigint;

  /**
   * CgroupID is the internal cgroupv2 ID of the event.
   *
   * @generated from field: uint64 CgroupID = 2;
   */
  CgroupID: bigint;

  /**
   * Program is name of the executable.
   *
   * @generated from field: string Program = 3;
   */
  Program: string;
};

/**
 * Describes the message events.BPFMetadata.
 * Use `create(BPFMetadataSchema)` to create a new message.
 */
export const BPFMetadataSchema: GenMessage<BPFMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 31);

/**
 * Status contains common command or operation status fields
 *
 * @generated from message events.Status
 */
export type Status = Message<"events.Status"> & {
  /**
   * Success indicates the success or failure of the operation
   *
   * @generated from field: bool Success = 1;
   */
  Success: boolean;

  /**
   * Error includes system error message for the failed attempt
   *
   * @generated from field: string Error = 2;
   */
  Error: string;

  /**
   * UserMessage is a user-friendly message for successfull or unsuccessfull auth attempt
   *
   * @generated from field: string UserMessage = 3;
   */
  UserMessage: string;
};

/**
 * Describes the message events.Status.
 * Use `create(StatusSchema)` to create a new message.
 */
export const StatusSchema: GenMessage<Status> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 32);

/**
 * SessionCommand is a session command event
 *
 * @generated from message events.SessionCommand
 */
export type SessionCommand = Message<"events.SessionCommand"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * ServerMetadata is a common server metadata
   *
   * @generated from field: events.ServerMetadata Server = 4;
   */
  Server?: ServerMetadata;

  /**
   * BPFMetadata is a common BPF subsystem metadata
   *
   * @generated from field: events.BPFMetadata BPF = 5;
   */
  BPF?: BPFMetadata;

  /**
   * PPID is the PID of the parent process.
   *
   * @generated from field: uint64 PPID = 6;
   */
  PPID: bigint;

  /**
   * Path is the full path to the executable.
   *
   * @generated from field: string Path = 7;
   */
  Path: string;

  /**
   * Argv is the list of arguments to the program. Note, the first element does
   * not contain the name of the process.
   *
   * @generated from field: repeated string Argv = 8;
   */
  Argv: string[];

  /**
   * ReturnCode is the return code of execve.
   *
   * @generated from field: int32 ReturnCode = 9;
   */
  ReturnCode: number;
};

/**
 * Describes the message events.SessionCommand.
 * Use `create(SessionCommandSchema)` to create a new message.
 */
export const SessionCommandSchema: GenMessage<SessionCommand> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 33);

/**
 * SessionDisk is a session disk access event
 *
 * @generated from message events.SessionDisk
 */
export type SessionDisk = Message<"events.SessionDisk"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * ServerMetadata is a common server metadata
   *
   * @generated from field: events.ServerMetadata Server = 4;
   */
  Server?: ServerMetadata;

  /**
   * BPFMetadata is a common BPF subsystem metadata
   *
   * @generated from field: events.BPFMetadata BPF = 5;
   */
  BPF?: BPFMetadata;

  /**
   * Path is the full path to the executable.
   *
   * @generated from field: string Path = 6;
   */
  Path: string;

  /**
   * Flags are the flags passed to open.
   *
   * @generated from field: int32 Flags = 7;
   */
  Flags: number;

  /**
   * ReturnCode is the return code of disk open
   *
   * @generated from field: int32 ReturnCode = 8;
   */
  ReturnCode: number;
};

/**
 * Describes the message events.SessionDisk.
 * Use `create(SessionDiskSchema)` to create a new message.
 */
export const SessionDiskSchema: GenMessage<SessionDisk> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 34);

/**
 * SessionNetwork is a network event
 *
 * @generated from message events.SessionNetwork
 */
export type SessionNetwork = Message<"events.SessionNetwork"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * ServerMetadata is a common server metadata
   *
   * @generated from field: events.ServerMetadata Server = 4;
   */
  Server?: ServerMetadata;

  /**
   * BPFMetadata is a common BPF subsystem metadata
   *
   * @generated from field: events.BPFMetadata BPF = 5;
   */
  BPF?: BPFMetadata;

  /**
   * SrcAddr is the source IP address of the connection.
   *
   * @generated from field: string SrcAddr = 6;
   */
  SrcAddr: string;

  /**
   * DstAddr is the destination IP address of the connection.
   *
   * @generated from field: string DstAddr = 7;
   */
  DstAddr: string;

  /**
   * DstPort is the destination port of the connection.
   *
   * @generated from field: int32 DstPort = 8;
   */
  DstPort: number;

  /**
   * TCPVersion is the version of TCP (4 or 6).
   *
   * @generated from field: int32 TCPVersion = 9;
   */
  TCPVersion: number;

  /**
   * Operation denotes what network operation was performed (e.g. connect)
   *
   * @generated from field: events.SessionNetwork.NetworkOperation Operation = 10;
   */
  Operation: SessionNetwork_NetworkOperation;

  /**
   * Action denotes what happened in response to the event
   *
   * @generated from field: events.EventAction Action = 11;
   */
  Action: EventAction;
};

/**
 * Describes the message events.SessionNetwork.
 * Use `create(SessionNetworkSchema)` to create a new message.
 */
export const SessionNetworkSchema: GenMessage<SessionNetwork> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 35);

/**
 * Operation is the network operation that was performed or attempted
 *
 * @generated from enum events.SessionNetwork.NetworkOperation
 */
export enum SessionNetwork_NetworkOperation {
  /**
   * TCP connection establishment or binding a UDP socket to a remote address
   *
   * @generated from enum value: CONNECT = 0;
   */
  CONNECT = 0,

  /**
   * Transmission of data to a remote endpoint
   *
   * @generated from enum value: SEND = 1;
   */
  SEND = 1,
}

/**
 * Describes the enum events.SessionNetwork.NetworkOperation.
 */
export const SessionNetwork_NetworkOperationSchema: GenEnum<SessionNetwork_NetworkOperation> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_types_events_events, 35, 0);

/**
 * SessionData is emitted to report session data usage.
 *
 * @generated from message events.SessionData
 */
export type SessionData = Message<"events.SessionData"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * ServerMetadata is a common server metadata
   *
   * @generated from field: events.ServerMetadata Server = 4;
   */
  Server?: ServerMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 5;
   */
  Connection?: ConnectionMetadata;

  /**
   * BytesTransmitted is the amount of bytes transmitted
   *
   * @generated from field: uint64 BytesTransmitted = 6;
   */
  BytesTransmitted: bigint;

  /**
   * BytesReceived is the amount of bytes received
   *
   * @generated from field: uint64 BytesReceived = 7;
   */
  BytesReceived: bigint;
};

/**
 * Describes the message events.SessionData.
 * Use `create(SessionDataSchema)` to create a new message.
 */
export const SessionDataSchema: GenMessage<SessionData> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 36);

/**
 * SessionLeave is emitted to report that a user left the session
 *
 * @generated from message events.SessionLeave
 */
export type SessionLeave = Message<"events.SessionLeave"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * ServerMetadata is a common server metadata
   *
   * @generated from field: events.ServerMetadata Server = 4;
   */
  Server?: ServerMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 5;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.SessionLeave.
 * Use `create(SessionLeaveSchema)` to create a new message.
 */
export const SessionLeaveSchema: GenMessage<SessionLeave> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 37);

/**
 * UserLogin records a successfully or failed user login event
 *
 * @generated from message events.UserLogin
 */
export type UserLogin = Message<"events.UserLogin"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * Status contains common command or operation status fields
   *
   * @generated from field: events.Status Status = 3;
   */
  Status?: Status;

  /**
   * Method is the event field indicating how the login was performed
   *
   * @generated from field: string Method = 4;
   */
  Method: string;

  /**
   * IdentityAttributes is a map of user attributes received from identity provider
   *
   * @generated from field: google.protobuf.Struct IdentityAttributes = 5;
   */
  IdentityAttributes?: JsonObject;

  /**
   * MFA is the MFA device used during the login.
   *
   * @generated from field: events.MFADeviceMetadata MFADevice = 6;
   */
  MFADevice?: MFADeviceMetadata;

  /**
   * Client is the common client event metadata
   *
   * @generated from field: events.ClientMetadata Client = 7;
   */
  Client?: ClientMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 8;
   */
  Connection?: ConnectionMetadata;

  /**
   * AppliedLoginRules stores the name of each login rule that was applied
   * during the login.
   *
   * @generated from field: repeated string AppliedLoginRules = 9;
   */
  AppliedLoginRules: string[];
};

/**
 * Describes the message events.UserLogin.
 * Use `create(UserLoginSchema)` to create a new message.
 */
export const UserLoginSchema: GenMessage<UserLogin> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 38);

/**
 * CreateMFAAuthChallenge records the creation of an MFA auth challenge.
 *
 * @generated from message events.CreateMFAAuthChallenge
 */
export type CreateMFAAuthChallenge = Message<"events.CreateMFAAuthChallenge"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * Scope is the authorization scope for this MFA challenge.
   * Only applies to WebAuthn challenges.
   *
   * @generated from field: string ChallengeScope = 3;
   */
  ChallengeScope: string;

  /**
   * ChallengeAllowReuse defines whether the MFA challenge allows reuse.
   *
   * @generated from field: bool ChallengeAllowReuse = 4;
   */
  ChallengeAllowReuse: boolean;
};

/**
 * Describes the message events.CreateMFAAuthChallenge.
 * Use `create(CreateMFAAuthChallengeSchema)` to create a new message.
 */
export const CreateMFAAuthChallengeSchema: GenMessage<CreateMFAAuthChallenge> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 39);

/**
 * ValidateMFAAuthResponse records the validation of an MFA auth callenge response.
 *
 * @generated from message events.ValidateMFAAuthResponse
 */
export type ValidateMFAAuthResponse = Message<"events.ValidateMFAAuthResponse"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * Status contains common command or operation status fields
   *
   * @generated from field: events.Status Status = 3;
   */
  Status?: Status;

  /**
   * MFADevice is the MFA device used.
   *
   * @generated from field: events.MFADeviceMetadata MFADevice = 4;
   */
  MFADevice?: MFADeviceMetadata;

  /**
   * ChallengeScope is the authorization scope of the MFA challenge used for authentication.
   * Only applies to WebAuthn challenges.
   *
   * @generated from field: string ChallengeScope = 5;
   */
  ChallengeScope: string;

  /**
   * ChallengeAllowReuse defines whether the MFA challenge used for authentication can be reused.
   *
   * @generated from field: bool ChallengeAllowReuse = 6;
   */
  ChallengeAllowReuse: boolean;
};

/**
 * Describes the message events.ValidateMFAAuthResponse.
 * Use `create(ValidateMFAAuthResponseSchema)` to create a new message.
 */
export const ValidateMFAAuthResponseSchema: GenMessage<ValidateMFAAuthResponse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 40);

/**
 * ResourceMetadata is a common resource metadata
 *
 * @generated from message events.ResourceMetadata
 */
export type ResourceMetadata = Message<"events.ResourceMetadata"> & {
  /**
   * ResourceName is a resource name
   *
   * @generated from field: string Name = 1;
   */
  Name: string;

  /**
   * Expires is set if resource expires
   *
   * @generated from field: google.protobuf.Timestamp Expires = 2;
   */
  Expires?: Timestamp;

  /**
   * UpdatedBy if set indicates the user who modified the resource
   *
   * @generated from field: string UpdatedBy = 3;
   */
  UpdatedBy: string;

  /**
   * TTL is a TTL of reset password token represented as duration, e.g. "10m"
   * used for compatibility purposes for some events, Expires should be used instead
   * as it's more useful (contains exact expiration date/time)
   *
   * @generated from field: string TTL = 4;
   */
  TTL: string;
};

/**
 * Describes the message events.ResourceMetadata.
 * Use `create(ResourceMetadataSchema)` to create a new message.
 */
export const ResourceMetadataSchema: GenMessage<ResourceMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 41);

/**
 * UserCreate is emitted when the user is created or upserted.
 *
 * @generated from message events.UserCreate
 */
export type UserCreate = Message<"events.UserCreate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * Roles is a list of roles for the user.
   *
   * @generated from field: repeated string Roles = 4;
   */
  Roles: string[];

  /**
   * Connector is the connector used to create the user.
   *
   * @generated from field: string Connector = 5;
   */
  Connector: string;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 6;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.UserCreate.
 * Use `create(UserCreateSchema)` to create a new message.
 */
export const UserCreateSchema: GenMessage<UserCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 42);

/**
 * UserUpdate is emitted when the user is updated.
 *
 * @generated from message events.UserUpdate
 */
export type UserUpdate = Message<"events.UserUpdate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * Roles is a list of roles for the user.
   *
   * @generated from field: repeated string Roles = 4;
   */
  Roles: string[];

  /**
   * Connector is the connector used to create the user.
   *
   * @generated from field: string Connector = 5;
   */
  Connector: string;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 6;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.UserUpdate.
 * Use `create(UserUpdateSchema)` to create a new message.
 */
export const UserUpdateSchema: GenMessage<UserUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 43);

/**
 * UserDelete is emitted when a user gets deleted
 *
 * @generated from message events.UserDelete
 */
export type UserDelete = Message<"events.UserDelete"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.UserDelete.
 * Use `create(UserDeleteSchema)` to create a new message.
 */
export const UserDeleteSchema: GenMessage<UserDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 44);

/**
 * UserPasswordChange is emitted when the user changes their own password.
 *
 * @generated from message events.UserPasswordChange
 */
export type UserPasswordChange = Message<"events.UserPasswordChange"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 3;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.UserPasswordChange.
 * Use `create(UserPasswordChangeSchema)` to create a new message.
 */
export const UserPasswordChangeSchema: GenMessage<UserPasswordChange> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 45);

/**
 * AccessRequestCreate is emitted when access request has been created or updated
 *
 * @generated from message events.AccessRequestCreate
 */
export type AccessRequestCreate = Message<"events.AccessRequestCreate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * Roles is a list of roles for the user.
   *
   * @generated from field: repeated string Roles = 4;
   */
  Roles: string[];

  /**
   * RequestID is access request ID
   *
   * @generated from field: string RequestID = 5;
   */
  RequestID: string;

  /**
   * RequestState is access request state (in the access_request.review variant of
   * the event this represents the post-review state of the request).
   *
   * @generated from field: string RequestState = 6;
   */
  RequestState: string;

  /**
   * Delegator is used by teleport plugins to indicate the identity
   * which caused them to update state.
   *
   * @generated from field: string Delegator = 7;
   */
  Delegator: string;

  /**
   * Reason is an optional description of why the request is being
   * created or updated.
   *
   * @generated from field: string Reason = 8;
   */
  Reason: string;

  /**
   * Annotations is an optional set of attributes supplied by a plugin during
   * approval/denial of the request.
   *
   * @generated from field: google.protobuf.Struct Annotations = 9;
   */
  Annotations?: JsonObject;

  /**
   * Reviewer is the author of the review (only used in the access_request.review event variant).
   *
   * @generated from field: string Reviewer = 10;
   */
  Reviewer: string;

  /**
   * ProposedState is the state proposed by a review (only used in the access_request.review event
   * variant).
   *
   * @generated from field: string ProposedState = 11;
   */
  ProposedState: string;

  /**
   * RequestedResourceIDs is the set of resources to which access is being requested.
   *
   * @generated from field: repeated events.ResourceID RequestedResourceIDs = 12;
   */
  RequestedResourceIDs: ResourceID[];

  /**
   * MaxDuration indicates how long the access should be granted for.
   *
   * @generated from field: google.protobuf.Timestamp MaxDuration = 13;
   */
  MaxDuration?: Timestamp;

  /**
   * PromotedAccessListName is the name of the access list that this request
   * was promoted to.
   * This field is only populated when the request is in the PROMOTED state.
   *
   * @generated from field: string PromotedAccessListName = 15;
   */
  PromotedAccessListName: string;

  /**
   * AssumeStartTime is the time the requested roles can be assumed.
   *
   * @generated from field: google.protobuf.Timestamp AssumeStartTime = 16;
   */
  AssumeStartTime?: Timestamp;
};

/**
 * Describes the message events.AccessRequestCreate.
 * Use `create(AccessRequestCreateSchema)` to create a new message.
 */
export const AccessRequestCreateSchema: GenMessage<AccessRequestCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 46);

/**
 * ResourceID is a unique identifier for a teleport resource. This is duplicated
 * from api/types/types.proto to decouple the api and events types and because
 * neither file currently imports the other.
 *
 * @generated from message events.ResourceID
 */
export type ResourceID = Message<"events.ResourceID"> & {
  /**
   * ClusterName is the name of the cluster the resource is in.
   *
   * @generated from field: string ClusterName = 1;
   */
  ClusterName: string;

  /**
   * Kind is the resource kind.
   *
   * @generated from field: string Kind = 2;
   */
  Kind: string;

  /**
   * Name is the name of the specific resource.
   *
   * @generated from field: string Name = 3;
   */
  Name: string;

  /**
   * SubResourceName is the resource belonging to resource identified by "Name"
   * that the user is allowed to access to.
   * When granting access to a subresource, access to other resources is limited.
   * Currently it just supports resources of Kind=pod and the format is the following
   * "<kube_namespace>/<kube_pod>".
   *
   * @generated from field: string SubResourceName = 4;
   */
  SubResourceName: string;
};

/**
 * Describes the message events.ResourceID.
 * Use `create(ResourceIDSchema)` to create a new message.
 */
export const ResourceIDSchema: GenMessage<ResourceID> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 47);

/**
 * AccessRequestDelete is emitted when an access request has been deleted.
 *
 * @generated from message events.AccessRequestDelete
 */
export type AccessRequestDelete = Message<"events.AccessRequestDelete"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * RequestID is access request ID
   *
   * @generated from field: string RequestID = 3;
   */
  RequestID: string;
};

/**
 * Describes the message events.AccessRequestDelete.
 * Use `create(AccessRequestDeleteSchema)` to create a new message.
 */
export const AccessRequestDeleteSchema: GenMessage<AccessRequestDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 48);

/**
 * PortForward is emitted when a user requests port forwarding.
 *
 * @generated from message events.PortForward
 */
export type PortForward = Message<"events.PortForward"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 3;
   */
  Connection?: ConnectionMetadata;

  /**
   * Status contains operation success or failure status
   *
   * @generated from field: events.Status Status = 4;
   */
  Status?: Status;

  /**
   * Addr is a target port forwarding address
   *
   * @generated from field: string Addr = 5;
   */
  Addr: string;
};

/**
 * Describes the message events.PortForward.
 * Use `create(PortForwardSchema)` to create a new message.
 */
export const PortForwardSchema: GenMessage<PortForward> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 49);

/**
 * X11Forward is emitted when a user requests X11 protocol forwarding
 *
 * @generated from message events.X11Forward
 */
export type X11Forward = Message<"events.X11Forward"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 3;
   */
  Connection?: ConnectionMetadata;

  /**
   * Status contains operation success or failure status
   *
   * @generated from field: events.Status Status = 4;
   */
  Status?: Status;
};

/**
 * Describes the message events.X11Forward.
 * Use `create(X11ForwardSchema)` to create a new message.
 */
export const X11ForwardSchema: GenMessage<X11Forward> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 50);

/**
 * CommandMetadata specifies common command fields
 *
 * @generated from message events.CommandMetadata
 */
export type CommandMetadata = Message<"events.CommandMetadata"> & {
  /**
   * Command is the executed command name
   *
   * @generated from field: string Command = 1;
   */
  Command: string;

  /**
   * ExitCode specifies command exit code
   *
   * @generated from field: string ExitCode = 2;
   */
  ExitCode: string;

  /**
   * Error is an optional exit error, set if command has failed
   *
   * @generated from field: string Error = 3;
   */
  Error: string;
};

/**
 * Describes the message events.CommandMetadata.
 * Use `create(CommandMetadataSchema)` to create a new message.
 */
export const CommandMetadataSchema: GenMessage<CommandMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 51);

/**
 * Exec specifies command exec event
 *
 * @generated from message events.Exec
 */
export type Exec = Message<"events.Exec"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 3;
   */
  Connection?: ConnectionMetadata;

  /**
   * SessionMetadata is a common event session metadata
   *
   * @generated from field: events.SessionMetadata Session = 4;
   */
  Session?: SessionMetadata;

  /**
   * ServerMetadata is a common server metadata
   *
   * @generated from field: events.ServerMetadata Server = 5;
   */
  Server?: ServerMetadata;

  /**
   * CommandMetadata is a common command metadata
   *
   * @generated from field: events.CommandMetadata Command = 6;
   */
  Command?: CommandMetadata;

  /**
   * KubernetesCluster has information about a kubernetes cluster, if
   * applicable.
   *
   * @generated from field: events.KubernetesClusterMetadata KubernetesCluster = 7;
   */
  KubernetesCluster?: KubernetesClusterMetadata;

  /**
   * KubernetesPod has information about a kubernetes pod, if applicable.
   *
   * @generated from field: events.KubernetesPodMetadata KubernetesPod = 8;
   */
  KubernetesPod?: KubernetesPodMetadata;
};

/**
 * Describes the message events.Exec.
 * Use `create(ExecSchema)` to create a new message.
 */
export const ExecSchema: GenMessage<Exec> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 52);

/**
 * SCP is emitted when data transfer has occurred between server and client
 *
 * @generated from message events.SCP
 */
export type SCP = Message<"events.SCP"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 3;
   */
  Connection?: ConnectionMetadata;

  /**
   * SessionMetadata is a common event session metadata
   *
   * @generated from field: events.SessionMetadata Session = 4;
   */
  Session?: SessionMetadata;

  /**
   * ServerMetadata is a common server metadata
   *
   * @generated from field: events.ServerMetadata Server = 5;
   */
  Server?: ServerMetadata;

  /**
   * CommandMetadata is a common command metadata
   *
   * @generated from field: events.CommandMetadata Command = 6;
   */
  Command?: CommandMetadata;

  /**
   * Path is a copy path
   *
   * @generated from field: string Path = 7;
   */
  Path: string;

  /**
   * Action is upload or download
   *
   * @generated from field: string Action = 8;
   */
  Action: string;
};

/**
 * Describes the message events.SCP.
 * Use `create(SCPSchema)` to create a new message.
 */
export const SCPSchema: GenMessage<SCP> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 53);

/**
 * SFTPAttributes are file metadata sent over SFTP
 *
 * @generated from message events.SFTPAttributes
 */
export type SFTPAttributes = Message<"events.SFTPAttributes"> & {
  /**
   * FileSize is file size
   *
   * @generated from field: google.protobuf.UInt64Value FileSize = 1;
   */
  FileSize?: bigint;

  /**
   * UID is the user owner of a file
   *
   * @generated from field: google.protobuf.UInt32Value UID = 2;
   */
  UID?: number;

  /**
   * GID is the group owner of the file
   *
   * @generated from field: google.protobuf.UInt32Value GID = 3;
   */
  GID?: number;

  /**
   * Permissions is the file permissions
   *
   * @generated from field: google.protobuf.UInt32Value Permissions = 4;
   */
  Permissions?: number;

  /**
   * AccessTime is when the file was last read
   *
   * @generated from field: google.protobuf.Timestamp AccessTime = 5;
   */
  AccessTime?: Timestamp;

  /**
   * ModificationTime was when the file was last changed
   *
   * @generated from field: google.protobuf.Timestamp ModificationTime = 6;
   */
  ModificationTime?: Timestamp;
};

/**
 * Describes the message events.SFTPAttributes.
 * Use `create(SFTPAttributesSchema)` to create a new message.
 */
export const SFTPAttributesSchema: GenMessage<SFTPAttributes> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 54);

/**
 * SFTP is emitted when file operations have occurred between server and client
 *
 * @generated from message events.SFTP
 */
export type SFTP = Message<"events.SFTP"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 3;
   */
  Connection?: ConnectionMetadata;

  /**
   * SessionMetadata is a common event session metadata
   *
   * @generated from field: events.SessionMetadata Session = 4;
   */
  Session?: SessionMetadata;

  /**
   * ServerMetadata is a common server metadata
   *
   * @generated from field: events.ServerMetadata Server = 5;
   */
  Server?: ServerMetadata;

  /**
   * WorkingDirectory is the current directory the SFTP server is in
   *
   * @generated from field: string WorkingDirectory = 6;
   */
  WorkingDirectory: string;

  /**
   * Path is the filepath that was operated on. It is the exact path that
   * was sent by the client, so it may be relative or absolute.
   *
   * @generated from field: string Path = 7;
   */
  Path: string;

  /**
   * TargetPath is the new path in file renames, or the path of the symlink
   * when creating symlinks. It is the exact path that wassent by the client,
   * so it may be relative or absolute.
   *
   * @generated from field: string TargetPath = 8;
   */
  TargetPath: string;

  /**
   * Flags is options that were passed that affect file creation events
   *
   * @generated from field: uint32 Flags = 9;
   */
  Flags: number;

  /**
   * Attributes is file metadata that the user requested to be changed
   *
   * @generated from field: events.SFTPAttributes Attributes = 10;
   */
  Attributes?: SFTPAttributes;

  /**
   * Action is what kind of file operation
   *
   * @generated from field: events.SFTPAction Action = 11;
   */
  Action: SFTPAction;

  /**
   * Error is the optional error that may have occurred
   *
   * @generated from field: string Error = 12;
   */
  Error: string;
};

/**
 * Describes the message events.SFTP.
 * Use `create(SFTPSchema)` to create a new message.
 */
export const SFTPSchema: GenMessage<SFTP> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 55);

/**
 * Subsystem is emitted when a user requests a new subsystem.
 *
 * @generated from message events.Subsystem
 */
export type Subsystem = Message<"events.Subsystem"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 3;
   */
  Connection?: ConnectionMetadata;

  /**
   * Name is a subsystem name
   *
   * @generated from field: string Name = 4;
   */
  Name: string;

  /**
   * Error contains error in case of unsucessfull attempt
   *
   * @generated from field: string Error = 5;
   */
  Error: string;
};

/**
 * Describes the message events.Subsystem.
 * Use `create(SubsystemSchema)` to create a new message.
 */
export const SubsystemSchema: GenMessage<Subsystem> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 56);

/**
 * ClientDisconnect is emitted when client is disconnected
 * by the server due to inactivity or any other reason
 *
 * @generated from message events.ClientDisconnect
 */
export type ClientDisconnect = Message<"events.ClientDisconnect"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 3;
   */
  Connection?: ConnectionMetadata;

  /**
   * ServerMetadata is a common server metadata
   *
   * @generated from field: events.ServerMetadata Server = 4;
   */
  Server?: ServerMetadata;

  /**
   * Reason is a field that specifies reason for event, e.g. in disconnect
   * event it explains why server disconnected the client
   *
   * @generated from field: string Reason = 5;
   */
  Reason: string;
};

/**
 * Describes the message events.ClientDisconnect.
 * Use `create(ClientDisconnectSchema)` to create a new message.
 */
export const ClientDisconnectSchema: GenMessage<ClientDisconnect> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 57);

/**
 * AuthAttempt is emitted upon a failed or successfull authentication attempt.
 *
 * @generated from message events.AuthAttempt
 */
export type AuthAttempt = Message<"events.AuthAttempt"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 3;
   */
  Connection?: ConnectionMetadata;

  /**
   * Status contains common command or operation status fields
   *
   * @generated from field: events.Status Status = 4;
   */
  Status?: Status;
};

/**
 * Describes the message events.AuthAttempt.
 * Use `create(AuthAttemptSchema)` to create a new message.
 */
export const AuthAttemptSchema: GenMessage<AuthAttempt> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 58);

/**
 * UserTokenCreate is emitted when a user token is created.
 *
 * @generated from message events.UserTokenCreate
 */
export type UserTokenCreate = Message<"events.UserTokenCreate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;
};

/**
 * Describes the message events.UserTokenCreate.
 * Use `create(UserTokenCreateSchema)` to create a new message.
 */
export const UserTokenCreateSchema: GenMessage<UserTokenCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 59);

/**
 * RoleCreate is emitted when a role is created/updated.
 *
 * @generated from message events.RoleCreate
 */
export type RoleCreate = Message<"events.RoleCreate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.RoleCreate.
 * Use `create(RoleCreateSchema)` to create a new message.
 */
export const RoleCreateSchema: GenMessage<RoleCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 60);

/**
 * RoleUpdate is emitted when a role is updated.
 *
 * @generated from message events.RoleUpdate
 */
export type RoleUpdate = Message<"events.RoleUpdate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.RoleUpdate.
 * Use `create(RoleUpdateSchema)` to create a new message.
 */
export const RoleUpdateSchema: GenMessage<RoleUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 61);

/**
 * RoleDelete is emitted when a role is deleted
 *
 * @generated from message events.RoleDelete
 */
export type RoleDelete = Message<"events.RoleDelete"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.RoleDelete.
 * Use `create(RoleDeleteSchema)` to create a new message.
 */
export const RoleDeleteSchema: GenMessage<RoleDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 62);

/**
 * BotCreate is emitted when a bot is created/upserted.
 *
 * @generated from message events.BotCreate
 */
export type BotCreate = Message<"events.BotCreate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;
};

/**
 * Describes the message events.BotCreate.
 * Use `create(BotCreateSchema)` to create a new message.
 */
export const BotCreateSchema: GenMessage<BotCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 63);

/**
 * BotCreate is emitted when a bot is created/updated.
 *
 * @generated from message events.BotUpdate
 */
export type BotUpdate = Message<"events.BotUpdate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;
};

/**
 * Describes the message events.BotUpdate.
 * Use `create(BotUpdateSchema)` to create a new message.
 */
export const BotUpdateSchema: GenMessage<BotUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 64);

/**
 * BotDelete is emitted when a bot is deleted.
 *
 * @generated from message events.BotDelete
 */
export type BotDelete = Message<"events.BotDelete"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;
};

/**
 * Describes the message events.BotDelete.
 * Use `create(BotDeleteSchema)` to create a new message.
 */
export const BotDeleteSchema: GenMessage<BotDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 65);

/**
 * TrustedClusterCreate is the event for creating a trusted cluster.
 *
 * @generated from message events.TrustedClusterCreate
 */
export type TrustedClusterCreate = Message<"events.TrustedClusterCreate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.TrustedClusterCreate.
 * Use `create(TrustedClusterCreateSchema)` to create a new message.
 */
export const TrustedClusterCreateSchema: GenMessage<TrustedClusterCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 66);

/**
 * TrustedClusterDelete is the event for removing a trusted cluster.
 *
 * @generated from message events.TrustedClusterDelete
 */
export type TrustedClusterDelete = Message<"events.TrustedClusterDelete"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.TrustedClusterDelete.
 * Use `create(TrustedClusterDeleteSchema)` to create a new message.
 */
export const TrustedClusterDeleteSchema: GenMessage<TrustedClusterDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 67);

/**
 * ProvisionTokenCreate event is emitted when a provisioning token (a.k.a. join
 * token) of any role is created.
 *
 * @generated from message events.ProvisionTokenCreate
 */
export type ProvisionTokenCreate = Message<"events.ProvisionTokenCreate"> & {
  /**
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * @generated from field: repeated string Roles = 4;
   */
  Roles: string[];

  /**
   * @generated from field: string JoinMethod = 5;
   */
  JoinMethod: string;
};

/**
 * Describes the message events.ProvisionTokenCreate.
 * Use `create(ProvisionTokenCreateSchema)` to create a new message.
 */
export const ProvisionTokenCreateSchema: GenMessage<ProvisionTokenCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 68);

/**
 * TrustedClusterTokenCreate event is emitted (in addition to
 * ProvisionTokenCreate) when a token of a "Trusted_cluster" role is created.
 *
 * Deprecated: redundant, since we also emit ProvisionTokenCreate.
 *
 * @generated from message events.TrustedClusterTokenCreate
 */
export type TrustedClusterTokenCreate = Message<"events.TrustedClusterTokenCreate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;
};

/**
 * Describes the message events.TrustedClusterTokenCreate.
 * Use `create(TrustedClusterTokenCreateSchema)` to create a new message.
 */
export const TrustedClusterTokenCreateSchema: GenMessage<TrustedClusterTokenCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 69);

/**
 * GithubConnectorCreate fires when a Github connector is created.
 *
 * @generated from message events.GithubConnectorCreate
 */
export type GithubConnectorCreate = Message<"events.GithubConnectorCreate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.GithubConnectorCreate.
 * Use `create(GithubConnectorCreateSchema)` to create a new message.
 */
export const GithubConnectorCreateSchema: GenMessage<GithubConnectorCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 70);

/**
 * GithubConnectorUpdate fires when a Github connector is updated.
 *
 * @generated from message events.GithubConnectorUpdate
 */
export type GithubConnectorUpdate = Message<"events.GithubConnectorUpdate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.GithubConnectorUpdate.
 * Use `create(GithubConnectorUpdateSchema)` to create a new message.
 */
export const GithubConnectorUpdateSchema: GenMessage<GithubConnectorUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 71);

/**
 * GithubConnectorDelete fires when a Github connector is deleted.
 *
 * @generated from message events.GithubConnectorDelete
 */
export type GithubConnectorDelete = Message<"events.GithubConnectorDelete"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.GithubConnectorDelete.
 * Use `create(GithubConnectorDeleteSchema)` to create a new message.
 */
export const GithubConnectorDeleteSchema: GenMessage<GithubConnectorDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 72);

/**
 * OIDCConnectorCreate fires when OIDC connector is created.
 *
 * @generated from message events.OIDCConnectorCreate
 */
export type OIDCConnectorCreate = Message<"events.OIDCConnectorCreate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;
};

/**
 * Describes the message events.OIDCConnectorCreate.
 * Use `create(OIDCConnectorCreateSchema)` to create a new message.
 */
export const OIDCConnectorCreateSchema: GenMessage<OIDCConnectorCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 73);

/**
 * OIDCConnectorUpdate fires when OIDC connector is updated.
 *
 * @generated from message events.OIDCConnectorUpdate
 */
export type OIDCConnectorUpdate = Message<"events.OIDCConnectorUpdate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;
};

/**
 * Describes the message events.OIDCConnectorUpdate.
 * Use `create(OIDCConnectorUpdateSchema)` to create a new message.
 */
export const OIDCConnectorUpdateSchema: GenMessage<OIDCConnectorUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 74);

/**
 * OIDCConnectorDelete fires when OIDC connector is deleted.
 *
 * @generated from message events.OIDCConnectorDelete
 */
export type OIDCConnectorDelete = Message<"events.OIDCConnectorDelete"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;
};

/**
 * Describes the message events.OIDCConnectorDelete.
 * Use `create(OIDCConnectorDeleteSchema)` to create a new message.
 */
export const OIDCConnectorDeleteSchema: GenMessage<OIDCConnectorDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 75);

/**
 * SAMLConnectorCreate fires when SAML connector is created/updated.
 *
 * @generated from message events.SAMLConnectorCreate
 */
export type SAMLConnectorCreate = Message<"events.SAMLConnectorCreate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * Connector is the new SAML connector
   *
   * @generated from field: types.SAMLConnectorV2 Connector = 4;
   */
  Connector?: SAMLConnectorV2;
};

/**
 * Describes the message events.SAMLConnectorCreate.
 * Use `create(SAMLConnectorCreateSchema)` to create a new message.
 */
export const SAMLConnectorCreateSchema: GenMessage<SAMLConnectorCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 76);

/**
 * SAMLConnectorUpdate fires when SAML connector is updated.
 *
 * @generated from message events.SAMLConnectorUpdate
 */
export type SAMLConnectorUpdate = Message<"events.SAMLConnectorUpdate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * Connector is the updated SAML connector
   *
   * @generated from field: types.SAMLConnectorV2 Connector = 4;
   */
  Connector?: SAMLConnectorV2;
};

/**
 * Describes the message events.SAMLConnectorUpdate.
 * Use `create(SAMLConnectorUpdateSchema)` to create a new message.
 */
export const SAMLConnectorUpdateSchema: GenMessage<SAMLConnectorUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 77);

/**
 * SAMLConnectorDelete fires when SAML connector is deleted.
 *
 * @generated from message events.SAMLConnectorDelete
 */
export type SAMLConnectorDelete = Message<"events.SAMLConnectorDelete"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;
};

/**
 * Describes the message events.SAMLConnectorDelete.
 * Use `create(SAMLConnectorDeleteSchema)` to create a new message.
 */
export const SAMLConnectorDeleteSchema: GenMessage<SAMLConnectorDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 78);

/**
 * KubeRequest specifies a Kubernetes API request event.
 *
 * @generated from message events.KubeRequest
 */
export type KubeRequest = Message<"events.KubeRequest"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 3;
   */
  Connection?: ConnectionMetadata;

  /**
   * ServerMetadata is a common server metadata
   *
   * @generated from field: events.ServerMetadata Server = 4;
   */
  Server?: ServerMetadata;

  /**
   * RequestPath is the raw request URL path.
   *
   * @generated from field: string RequestPath = 5;
   */
  RequestPath: string;

  /**
   * Verb is the HTTP verb used for this request (e.g. GET, POST, etc)
   *
   * @generated from field: string Verb = 6;
   */
  Verb: string;

  /**
   * ResourceAPIGroup is the resource API group.
   *
   * @generated from field: string ResourceAPIGroup = 7;
   */
  ResourceAPIGroup: string;

  /**
   * ResourceNamespace is the resource namespace.
   *
   * @generated from field: string ResourceNamespace = 8;
   */
  ResourceNamespace: string;

  /**
   * ResourceKind is the API resource kind (e.g. "pod", "service", etc).
   *
   * @generated from field: string ResourceKind = 9;
   */
  ResourceKind: string;

  /**
   * ResourceName is the API resource name.
   *
   * @generated from field: string ResourceName = 10;
   */
  ResourceName: string;

  /**
   * ResponseCode is the HTTP response code for this request.
   *
   * @generated from field: int32 ResponseCode = 11;
   */
  ResponseCode: number;

  /**
   * Kubernetes has information about a kubernetes cluster, if applicable.
   *
   * @generated from field: events.KubernetesClusterMetadata Kubernetes = 12;
   */
  Kubernetes?: KubernetesClusterMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 13;
   */
  Session?: SessionMetadata;
};

/**
 * Describes the message events.KubeRequest.
 * Use `create(KubeRequestSchema)` to create a new message.
 */
export const KubeRequestSchema: GenMessage<KubeRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 79);

/**
 * AppMetadata contains common application information.
 *
 * @generated from message events.AppMetadata
 */
export type AppMetadata = Message<"events.AppMetadata"> & {
  /**
   * AppURI is the application endpoint.
   *
   * @generated from field: string AppURI = 1;
   */
  AppURI: string;

  /**
   * AppPublicAddr is the configured application public address.
   *
   * @generated from field: string AppPublicAddr = 2;
   */
  AppPublicAddr: string;

  /**
   * AppLabels are the configured application labels.
   *
   * @generated from field: map<string, string> AppLabels = 3;
   */
  AppLabels: { [key: string]: string };

  /**
   * AppName is the configured application name.
   *
   * @generated from field: string AppName = 4;
   */
  AppName: string;
};

/**
 * Describes the message events.AppMetadata.
 * Use `create(AppMetadataSchema)` to create a new message.
 */
export const AppMetadataSchema: GenMessage<AppMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 80);

/**
 * AppCreate is emitted when a new application resource is created.
 *
 * @generated from message events.AppCreate
 */
export type AppCreate = Message<"events.AppCreate"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata.
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * AppMetadata is a common application resource metadata.
   *
   * @generated from field: events.AppMetadata App = 4;
   */
  App?: AppMetadata;
};

/**
 * Describes the message events.AppCreate.
 * Use `create(AppCreateSchema)` to create a new message.
 */
export const AppCreateSchema: GenMessage<AppCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 81);

/**
 * AppUpdate is emitted when an existing application resource is updated.
 *
 * @generated from message events.AppUpdate
 */
export type AppUpdate = Message<"events.AppUpdate"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata.
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * AppMetadata is a common application resource metadata.
   *
   * @generated from field: events.AppMetadata App = 4;
   */
  App?: AppMetadata;
};

/**
 * Describes the message events.AppUpdate.
 * Use `create(AppUpdateSchema)` to create a new message.
 */
export const AppUpdateSchema: GenMessage<AppUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 82);

/**
 * AppDelete is emitted when an application resource is deleted.
 *
 * @generated from message events.AppDelete
 */
export type AppDelete = Message<"events.AppDelete"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata.
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;
};

/**
 * Describes the message events.AppDelete.
 * Use `create(AppDeleteSchema)` to create a new message.
 */
export const AppDeleteSchema: GenMessage<AppDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 83);

/**
 * AppSessionStart is emitted when a user is issued an application certificate.
 *
 * @generated from message events.AppSessionStart
 */
export type AppSessionStart = Message<"events.AppSessionStart"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * ServerMetadata is a common server metadata
   *
   * @generated from field: events.ServerMetadata Server = 4;
   */
  Server?: ServerMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 5;
   */
  Connection?: ConnectionMetadata;

  /**
   * PublicAddr is the public address of the application being requested.
   * DELETE IN 10.0: this information is also present on the AppMetadata.
   *
   * @generated from field: string PublicAddr = 7 [deprecated = true];
   * @deprecated
   */
  PublicAddr: string;

  /**
   * App is a common application resource metadata.
   *
   * @generated from field: events.AppMetadata App = 8;
   */
  App?: AppMetadata;
};

/**
 * Describes the message events.AppSessionStart.
 * Use `create(AppSessionStartSchema)` to create a new message.
 */
export const AppSessionStartSchema: GenMessage<AppSessionStart> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 84);

/**
 * AppSessionEnd is emitted when an application session ends.
 *
 * @generated from message events.AppSessionEnd
 */
export type AppSessionEnd = Message<"events.AppSessionEnd"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * ServerMetadata is a common server metadata
   *
   * @generated from field: events.ServerMetadata Server = 4;
   */
  Server?: ServerMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 5;
   */
  Connection?: ConnectionMetadata;

  /**
   * App is a common application resource metadata.
   *
   * @generated from field: events.AppMetadata App = 6;
   */
  App?: AppMetadata;
};

/**
 * Describes the message events.AppSessionEnd.
 * Use `create(AppSessionEndSchema)` to create a new message.
 */
export const AppSessionEndSchema: GenMessage<AppSessionEnd> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 85);

/**
 * AppSessionChunk is emitted at the start of a 5 minute chunk on each
 * proxy. This chunk is used to buffer 5 minutes of audit events at a time
 * for applications.
 *
 * @generated from message events.AppSessionChunk
 */
export type AppSessionChunk = Message<"events.AppSessionChunk"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * ServerMetadata is a common server metadata
   *
   * @generated from field: events.ServerMetadata Server = 4;
   */
  Server?: ServerMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 5;
   */
  Connection?: ConnectionMetadata;

  /**
   * SessionChunkID is the ID of the session that was created for this 5 minute
   * application log chunk.
   *
   * @generated from field: string SessionChunkID = 6;
   */
  SessionChunkID: string;

  /**
   * App is a common application resource metadata.
   *
   * @generated from field: events.AppMetadata App = 7;
   */
  App?: AppMetadata;
};

/**
 * Describes the message events.AppSessionChunk.
 * Use `create(AppSessionChunkSchema)` to create a new message.
 */
export const AppSessionChunkSchema: GenMessage<AppSessionChunk> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 86);

/**
 * AppSessionRequest is an HTTP request and response.
 *
 * @generated from message events.AppSessionRequest
 */
export type AppSessionRequest = Message<"events.AppSessionRequest"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * StatusCode the HTTP response code for the request.
   *
   * @generated from field: uint32 StatusCode = 2;
   */
  StatusCode: number;

  /**
   * Path is relative path in the URL.
   *
   * @generated from field: string Path = 3;
   */
  Path: string;

  /**
   * RawQuery are the encoded query values.
   *
   * @generated from field: string RawQuery = 4;
   */
  RawQuery: string;

  /**
   * Method is the request HTTP method, like GET/POST/DELETE/etc.
   *
   * @generated from field: string Method = 5;
   */
  Method: string;

  /**
   * App is a common application resource metadata.
   *
   * @generated from field: events.AppMetadata App = 6;
   */
  App?: AppMetadata;

  /**
   * AWS contains extra AWS metadata of the request.
   *
   * @generated from field: events.AWSRequestMetadata AWS = 7;
   */
  AWS?: AWSRequestMetadata;
};

/**
 * Describes the message events.AppSessionRequest.
 * Use `create(AppSessionRequestSchema)` to create a new message.
 */
export const AppSessionRequestSchema: GenMessage<AppSessionRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 87);

/**
 * AWSRequestMetadata contains extra AWS metadata of an AppSessionRequest.
 *
 * @generated from message events.AWSRequestMetadata
 */
export type AWSRequestMetadata = Message<"events.AWSRequestMetadata"> & {
  /**
   * AWSRegion is the requested AWS region.
   *
   * @generated from field: string AWSRegion = 1;
   */
  AWSRegion: string;

  /**
   * AWSService is the requested AWS service name.
   *
   * @generated from field: string AWSService = 2;
   */
  AWSService: string;

  /**
   * AWSHost is the requested host of the AWS service.
   *
   * @generated from field: string AWSHost = 3;
   */
  AWSHost: string;

  /**
   * AWSAssumedRole is the assumed role that signed this request.
   *
   * @generated from field: string AWSAssumedRole = 4;
   */
  AWSAssumedRole: string;
};

/**
 * Describes the message events.AWSRequestMetadata.
 * Use `create(AWSRequestMetadataSchema)` to create a new message.
 */
export const AWSRequestMetadataSchema: GenMessage<AWSRequestMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 88);

/**
 * DatabaseMetadata contains common database information.
 *
 * @generated from message events.DatabaseMetadata
 */
export type DatabaseMetadata = Message<"events.DatabaseMetadata"> & {
  /**
   * DatabaseService is the name of the database service proxying the database.
   *
   * @generated from field: string DatabaseService = 1;
   */
  DatabaseService: string;

  /**
   * DatabaseProtocol is the database type, e.g. postgres or mysql.
   *
   * @generated from field: string DatabaseProtocol = 2;
   */
  DatabaseProtocol: string;

  /**
   * DatabaseURI is the database URI to connect to.
   *
   * @generated from field: string DatabaseURI = 3;
   */
  DatabaseURI: string;

  /**
   * DatabaseName is the name of the database a user is connecting to.
   *
   * @generated from field: string DatabaseName = 4;
   */
  DatabaseName: string;

  /**
   * DatabaseUser is the database username used to connect.
   *
   * @generated from field: string DatabaseUser = 5;
   */
  DatabaseUser: string;

  /**
   * DatabaseLabels is the database resource labels.
   *
   * @generated from field: map<string, string> DatabaseLabels = 6;
   */
  DatabaseLabels: { [key: string]: string };

  /**
   * DatabaseAWSRegion is AWS regions for AWS hosted databases.
   *
   * @generated from field: string DatabaseAWSRegion = 7;
   */
  DatabaseAWSRegion: string;

  /**
   * DatabaseAWSRegion is cluster ID for Redshift databases.
   *
   * @generated from field: string DatabaseAWSRedshiftClusterID = 8;
   */
  DatabaseAWSRedshiftClusterID: string;

  /**
   * DatabaseGCPProjectID is project ID for GCP hosted databases.
   *
   * @generated from field: string DatabaseGCPProjectID = 9;
   */
  DatabaseGCPProjectID: string;

  /**
   * DatabaseGCPInstanceID is instance ID for GCP hosted databases.
   *
   * @generated from field: string DatabaseGCPInstanceID = 10;
   */
  DatabaseGCPInstanceID: string;

  /**
   * DatabaseRoles is a list of database roles for auto-provisioned users.
   *
   * @generated from field: repeated string DatabaseRoles = 11;
   */
  DatabaseRoles: string[];

  /**
   * DatabaseType is the database type.
   *
   * @generated from field: string DatabaseType = 12;
   */
  DatabaseType: string;

  /**
   * DatabaseOrigin is the database origin source.
   *
   * @generated from field: string DatabaseOrigin = 13;
   */
  DatabaseOrigin: string;
};

/**
 * Describes the message events.DatabaseMetadata.
 * Use `create(DatabaseMetadataSchema)` to create a new message.
 */
export const DatabaseMetadataSchema: GenMessage<DatabaseMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 89);

/**
 * DatabaseCreate is emitted when a new database resource is created.
 *
 * @generated from message events.DatabaseCreate
 */
export type DatabaseCreate = Message<"events.DatabaseCreate"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata.
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * DatabaseMetadata is a common database resource metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;
};

/**
 * Describes the message events.DatabaseCreate.
 * Use `create(DatabaseCreateSchema)` to create a new message.
 */
export const DatabaseCreateSchema: GenMessage<DatabaseCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 90);

/**
 * DatabaseUpdate is emitted when an existing database resource is updated.
 *
 * @generated from message events.DatabaseUpdate
 */
export type DatabaseUpdate = Message<"events.DatabaseUpdate"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata.
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * DatabaseMetadata is a common database resource metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;
};

/**
 * Describes the message events.DatabaseUpdate.
 * Use `create(DatabaseUpdateSchema)` to create a new message.
 */
export const DatabaseUpdateSchema: GenMessage<DatabaseUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 91);

/**
 * DatabaseDelete is emitted when a database resource is deleted.
 *
 * @generated from message events.DatabaseDelete
 */
export type DatabaseDelete = Message<"events.DatabaseDelete"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata.
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;
};

/**
 * Describes the message events.DatabaseDelete.
 * Use `create(DatabaseDeleteSchema)` to create a new message.
 */
export const DatabaseDeleteSchema: GenMessage<DatabaseDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 92);

/**
 * DatabaseSessionStart is emitted when a user connects to a database.
 *
 * @generated from message events.DatabaseSessionStart
 */
export type DatabaseSessionStart = Message<"events.DatabaseSessionStart"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * Session is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Server is a common server metadata.
   *
   * @generated from field: events.ServerMetadata Server = 4;
   */
  Server?: ServerMetadata;

  /**
   * Connection holds information about the connection.
   *
   * @generated from field: events.ConnectionMetadata Connection = 5;
   */
  Connection?: ConnectionMetadata;

  /**
   * Status indicates whether the connection was successful or denied.
   *
   * @generated from field: events.Status Status = 6;
   */
  Status?: Status;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 7;
   */
  Database?: DatabaseMetadata;
};

/**
 * Describes the message events.DatabaseSessionStart.
 * Use `create(DatabaseSessionStartSchema)` to create a new message.
 */
export const DatabaseSessionStartSchema: GenMessage<DatabaseSessionStart> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 93);

/**
 * DatabaseSessionQuery is emitted when a user executes a database query.
 *
 * @generated from message events.DatabaseSessionQuery
 */
export type DatabaseSessionQuery = Message<"events.DatabaseSessionQuery"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * DatabaseQuery is the executed query string.
   *
   * @generated from field: string DatabaseQuery = 5;
   */
  DatabaseQuery: string;

  /**
   * DatabaseQueryParameters are the query parameters for prepared statements.
   *
   * @generated from field: repeated string DatabaseQueryParameters = 6;
   */
  DatabaseQueryParameters: string[];

  /**
   * Status indicates whether the query was successfully sent to the database.
   *
   * @generated from field: events.Status Status = 7;
   */
  Status?: Status;
};

/**
 * Describes the message events.DatabaseSessionQuery.
 * Use `create(DatabaseSessionQuerySchema)` to create a new message.
 */
export const DatabaseSessionQuerySchema: GenMessage<DatabaseSessionQuery> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 94);

/**
 * DatabaseSessionCommandResult represents the result of a user command. It is
 * expected that for each user command/query there will be a corresponding
 * result.
 *
 * @generated from message events.DatabaseSessionCommandResult
 */
export type DatabaseSessionCommandResult = Message<"events.DatabaseSessionCommandResult"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * Status indicates if the command was successful or not.
   *
   * @generated from field: events.Status Status = 5;
   */
  Status?: Status;

  /**
   * AfftectedRecords represents the number of records that were affected by the
   * command.
   *
   * @generated from field: uint64 AffectedRecords = 6;
   */
  AffectedRecords: bigint;
};

/**
 * Describes the message events.DatabaseSessionCommandResult.
 * Use `create(DatabaseSessionCommandResultSchema)` to create a new message.
 */
export const DatabaseSessionCommandResultSchema: GenMessage<DatabaseSessionCommandResult> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 95);

/**
 * DatabasePermissionUpdate is emitted when a user database permissions are updated.
 *
 * @generated from message events.DatabasePermissionUpdate
 */
export type DatabasePermissionUpdate = Message<"events.DatabasePermissionUpdate"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * PermissionSummary is a summary of applied permissions.
   *
   * @generated from field: repeated events.DatabasePermissionEntry PermissionSummary = 5;
   */
  PermissionSummary: DatabasePermissionEntry[];

  /**
   * AffectedObjectCounts counts how many distinct objects of each kind were affected.
   *
   * @generated from field: map<string, int32> AffectedObjectCounts = 6;
   */
  AffectedObjectCounts: { [key: string]: number };
};

/**
 * Describes the message events.DatabasePermissionUpdate.
 * Use `create(DatabasePermissionUpdateSchema)` to create a new message.
 */
export const DatabasePermissionUpdateSchema: GenMessage<DatabasePermissionUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 96);

/**
 * DatabasePermissionEntry is a summary of permissions, scoped to a particular permission.
 *
 * @generated from message events.DatabasePermissionEntry
 */
export type DatabasePermissionEntry = Message<"events.DatabasePermissionEntry"> & {
  /**
   * Permission is a particular database-level permission, e.g. "SELECT".
   *
   * @generated from field: string Permission = 1;
   */
  Permission: string;

  /**
   * Counts stores information how many objects of particular kind (e.g. "table") were affected.
   *
   * @generated from field: map<string, int32> Counts = 2;
   */
  Counts: { [key: string]: number };
};

/**
 * Describes the message events.DatabasePermissionEntry.
 * Use `create(DatabasePermissionEntrySchema)` to create a new message.
 */
export const DatabasePermissionEntrySchema: GenMessage<DatabasePermissionEntry> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 97);

/**
 * DatabaseUserCreate is emitted when a database user is provisioned.
 *
 * @generated from message events.DatabaseUserCreate
 */
export type DatabaseUserCreate = Message<"events.DatabaseUserCreate"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * Status indicates whether the operation was successful.
   *
   * @generated from field: events.Status Status = 5;
   */
  Status?: Status;

  /**
   * Username is the username chosen for the database user. Due to database limitations (e.g. username length, allowed charset)
   * it may differ from Teleport username.
   *
   * @generated from field: string Username = 6;
   */
  Username: string;

  /**
   * Roles is an optional list of granted database roles.
   *
   * @generated from field: repeated string Roles = 7;
   */
  Roles: string[];
};

/**
 * Describes the message events.DatabaseUserCreate.
 * Use `create(DatabaseUserCreateSchema)` to create a new message.
 */
export const DatabaseUserCreateSchema: GenMessage<DatabaseUserCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 98);

/**
 * DatabaseUserDeactivate is emitted when a database user is disabled or deleted.
 *
 * @generated from message events.DatabaseUserDeactivate
 */
export type DatabaseUserDeactivate = Message<"events.DatabaseUserDeactivate"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * Status indicates whether the operation was successful.
   *
   * @generated from field: events.Status Status = 5;
   */
  Status?: Status;

  /**
   * Username is the username chosen for the database user. Due to database limitations (e.g. username length, allowed charset)
   * it may differ from Teleport username.
   *
   * @generated from field: string Username = 6;
   */
  Username: string;

  /**
   * Delete indicates if the user was deleted entirely or merely disabled.
   *
   * @generated from field: bool Delete = 7;
   */
  Delete: boolean;
};

/**
 * Describes the message events.DatabaseUserDeactivate.
 * Use `create(DatabaseUserDeactivateSchema)` to create a new message.
 */
export const DatabaseUserDeactivateSchema: GenMessage<DatabaseUserDeactivate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 99);

/**
 * PostgresParse is emitted when a Postgres client creates a prepared statement
 * using extended query protocol.
 *
 * @generated from message events.PostgresParse
 */
export type PostgresParse = Message<"events.PostgresParse"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * StatementName is the prepared statement name.
   *
   * @generated from field: string StatementName = 5;
   */
  StatementName: string;

  /**
   * Query is the prepared statement query.
   *
   * @generated from field: string Query = 6;
   */
  Query: string;
};

/**
 * Describes the message events.PostgresParse.
 * Use `create(PostgresParseSchema)` to create a new message.
 */
export const PostgresParseSchema: GenMessage<PostgresParse> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 100);

/**
 * PostgresBind is emitted when a Postgres client readies a prepared statement
 * for execution and binds it to parameters.
 *
 * @generated from message events.PostgresBind
 */
export type PostgresBind = Message<"events.PostgresBind"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * StatementName is the name of prepared statement that's being bound to parameters.
   *
   * @generated from field: string StatementName = 5;
   */
  StatementName: string;

  /**
   * PortalName is the destination portal name that binds statement to parameters.
   *
   * @generated from field: string PortalName = 6;
   */
  PortalName: string;

  /**
   * Parameters are the query bind parameters.
   *
   * @generated from field: repeated string Parameters = 7;
   */
  Parameters: string[];
};

/**
 * Describes the message events.PostgresBind.
 * Use `create(PostgresBindSchema)` to create a new message.
 */
export const PostgresBindSchema: GenMessage<PostgresBind> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 101);

/**
 * PostgresExecute is emitted when a Postgres client executes a previously
 * bound prepared statement.
 *
 * @generated from message events.PostgresExecute
 */
export type PostgresExecute = Message<"events.PostgresExecute"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * PortalName is the name of destination portal that's being executed.
   *
   * @generated from field: string PortalName = 5;
   */
  PortalName: string;
};

/**
 * Describes the message events.PostgresExecute.
 * Use `create(PostgresExecuteSchema)` to create a new message.
 */
export const PostgresExecuteSchema: GenMessage<PostgresExecute> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 102);

/**
 * PostgresClose is emitted when a Postgres client closes an existing prepared
 * statement.
 *
 * @generated from message events.PostgresClose
 */
export type PostgresClose = Message<"events.PostgresClose"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * StatementName is the name of prepared statement that's being closed.
   *
   * @generated from field: string StatementName = 5;
   */
  StatementName: string;

  /**
   * PortalName is the name of destination portal that's being closed.
   *
   * @generated from field: string PortalName = 6;
   */
  PortalName: string;
};

/**
 * Describes the message events.PostgresClose.
 * Use `create(PostgresCloseSchema)` to create a new message.
 */
export const PostgresCloseSchema: GenMessage<PostgresClose> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 103);

/**
 * PostgresFunctionCall is emitted when a Postgres client calls internal
 * database function.
 *
 * @generated from message events.PostgresFunctionCall
 */
export type PostgresFunctionCall = Message<"events.PostgresFunctionCall"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * FunctionOID is the Postgres object ID of the called function.
   *
   * @generated from field: uint32 FunctionOID = 5;
   */
  FunctionOID: number;

  /**
   * FunctionArgs contains formatted function arguments.
   *
   * @generated from field: repeated string FunctionArgs = 6;
   */
  FunctionArgs: string[];
};

/**
 * Describes the message events.PostgresFunctionCall.
 * Use `create(PostgresFunctionCallSchema)` to create a new message.
 */
export const PostgresFunctionCallSchema: GenMessage<PostgresFunctionCall> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 104);

/**
 * WindowsDesktopSessionStart is emitted when a user connects to a desktop.
 *
 * @generated from message events.WindowsDesktopSessionStart
 */
export type WindowsDesktopSessionStart = Message<"events.WindowsDesktopSessionStart"> & {
  /**
   * Metadata is common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * Session is common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Connection holds information about the connection.
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;

  /**
   * Status indicates whether the connection was successful or denied.
   *
   * @generated from field: events.Status Status = 5;
   */
  Status?: Status;

  /**
   * WindowsDesktopService is the name of the service proxying the RDP session.
   *
   * @generated from field: string WindowsDesktopService = 6;
   */
  WindowsDesktopService: string;

  /**
   * DesktopAddr is the address of the desktop being accessed.
   *
   * @generated from field: string DesktopAddr = 7;
   */
  DesktopAddr: string;

  /**
   * Domain is the Active Directory domain of the desktop being accessed.
   *
   * @generated from field: string Domain = 8;
   */
  Domain: string;

  /**
   * WindowsUser is the Windows username used to connect.
   *
   * @generated from field: string WindowsUser = 9;
   */
  WindowsUser: string;

  /**
   * DesktopLabels are the labels on the desktop resource.
   *
   * @generated from field: map<string, string> DesktopLabels = 10;
   */
  DesktopLabels: { [key: string]: string };

  /**
   * DesktopName is the name of the desktop resource.
   *
   * @generated from field: string DesktopName = 11;
   */
  DesktopName: string;

  /**
   * AllowUserCreation indicates whether automatic local user creation
   * is allowed for this session.
   *
   * @generated from field: bool AllowUserCreation = 12;
   */
  AllowUserCreation: boolean;

  /**
   * NLA indicates whether Teleport performed Network Level Authentication (NLA)
   * when initiating this session.
   *
   * @generated from field: bool NLA = 13;
   */
  NLA: boolean;
};

/**
 * Describes the message events.WindowsDesktopSessionStart.
 * Use `create(WindowsDesktopSessionStartSchema)` to create a new message.
 */
export const WindowsDesktopSessionStartSchema: GenMessage<WindowsDesktopSessionStart> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 105);

/**
 * DatabaseSessionEnd is emitted when a user ends the database session.
 *
 * @generated from message events.DatabaseSessionEnd
 */
export type DatabaseSessionEnd = Message<"events.DatabaseSessionEnd"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * Session is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * StartTime is the timestamp at which the session began.
   *
   * @generated from field: google.protobuf.Timestamp StartTime = 5;
   */
  StartTime?: Timestamp;

  /**
   * EndTime is the timestamp at which the session ended.
   *
   * @generated from field: google.protobuf.Timestamp EndTime = 6;
   */
  EndTime?: Timestamp;
};

/**
 * Describes the message events.DatabaseSessionEnd.
 * Use `create(DatabaseSessionEndSchema)` to create a new message.
 */
export const DatabaseSessionEndSchema: GenMessage<DatabaseSessionEnd> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 106);

/**
 * MFADeviceMetadata is a common MFA device metadata.
 *
 * @generated from message events.MFADeviceMetadata
 */
export type MFADeviceMetadata = Message<"events.MFADeviceMetadata"> & {
  /**
   * Name is the user-specified name of the MFA device.
   *
   * @generated from field: string DeviceName = 1;
   */
  DeviceName: string;

  /**
   * ID is the UUID of the MFA device generated by Teleport.
   *
   * @generated from field: string DeviceID = 2;
   */
  DeviceID: string;

  /**
   * Type is the type of this MFA device.
   *
   * @generated from field: string DeviceType = 3;
   */
  DeviceType: string;
};

/**
 * Describes the message events.MFADeviceMetadata.
 * Use `create(MFADeviceMetadataSchema)` to create a new message.
 */
export const MFADeviceMetadataSchema: GenMessage<MFADeviceMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 107);

/**
 * MFADeviceAdd is emitted when a user adds an MFA device.
 *
 * @generated from message events.MFADeviceAdd
 */
export type MFADeviceAdd = Message<"events.MFADeviceAdd"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * Device is the new MFA device added by the user.
   *
   * @generated from field: events.MFADeviceMetadata Device = 3;
   */
  Device?: MFADeviceMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.MFADeviceAdd.
 * Use `create(MFADeviceAddSchema)` to create a new message.
 */
export const MFADeviceAddSchema: GenMessage<MFADeviceAdd> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 108);

/**
 * MFADeviceDelete is emitted when a user deletes an MFA device.
 *
 * @generated from message events.MFADeviceDelete
 */
export type MFADeviceDelete = Message<"events.MFADeviceDelete"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * Device is the MFA device deleted by the user.
   *
   * @generated from field: events.MFADeviceMetadata Device = 3;
   */
  Device?: MFADeviceMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.MFADeviceDelete.
 * Use `create(MFADeviceDeleteSchema)` to create a new message.
 */
export const MFADeviceDeleteSchema: GenMessage<MFADeviceDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 109);

/**
 * BillingInformationUpdate is emitted when a user updates the billing information.
 *
 * @generated from message events.BillingInformationUpdate
 */
export type BillingInformationUpdate = Message<"events.BillingInformationUpdate"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;
};

/**
 * Describes the message events.BillingInformationUpdate.
 * Use `create(BillingInformationUpdateSchema)` to create a new message.
 */
export const BillingInformationUpdateSchema: GenMessage<BillingInformationUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 110);

/**
 * BillingCardCreate is emitted when a user creates or updates a credit card.
 *
 * @generated from message events.BillingCardCreate
 */
export type BillingCardCreate = Message<"events.BillingCardCreate"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;
};

/**
 * Describes the message events.BillingCardCreate.
 * Use `create(BillingCardCreateSchema)` to create a new message.
 */
export const BillingCardCreateSchema: GenMessage<BillingCardCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 111);

/**
 * BillingCardDelete is emitted when a user deletes a credit card.
 *
 * @generated from message events.BillingCardDelete
 */
export type BillingCardDelete = Message<"events.BillingCardDelete"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;
};

/**
 * Describes the message events.BillingCardDelete.
 * Use `create(BillingCardDeleteSchema)` to create a new message.
 */
export const BillingCardDeleteSchema: GenMessage<BillingCardDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 112);

/**
 * LockCreate is emitted when a lock is created/updated.
 * Locks are used to restrict access to a Teleport environment by disabling
 * interactions involving a user, an RBAC role, a node, etc.
 * See rfd/0009-locking.md for more details.
 *
 * @generated from message events.LockCreate
 */
export type LockCreate = Message<"events.LockCreate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * Target describes the set of interactions that the lock applies to
   * Deprecated: use Lock instead.
   *
   * @generated from field: types.LockTarget Target = 4 [deprecated = true];
   * @deprecated
   */
  Target?: LockTarget;

  /**
   * Lock is a common lock event metadata
   *
   * @generated from field: events.LockMetadata Lock = 5;
   */
  Lock?: LockMetadata;
};

/**
 * Describes the message events.LockCreate.
 * Use `create(LockCreateSchema)` to create a new message.
 */
export const LockCreateSchema: GenMessage<LockCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 113);

/**
 * LockDelete is emitted when a lock is deleted
 *
 * @generated from message events.LockDelete
 */
export type LockDelete = Message<"events.LockDelete"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * Lock is a common lock event metadata
   *
   * @generated from field: events.LockMetadata Lock = 4;
   */
  Lock?: LockMetadata;
};

/**
 * Describes the message events.LockDelete.
 * Use `create(LockDeleteSchema)` to create a new message.
 */
export const LockDeleteSchema: GenMessage<LockDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 114);

/**
 * RecoveryCodeGenerate is emitted when a user's new recovery codes are generated and updated.
 *
 * @generated from message events.RecoveryCodeGenerate
 */
export type RecoveryCodeGenerate = Message<"events.RecoveryCodeGenerate"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;
};

/**
 * Describes the message events.RecoveryCodeGenerate.
 * Use `create(RecoveryCodeGenerateSchema)` to create a new message.
 */
export const RecoveryCodeGenerateSchema: GenMessage<RecoveryCodeGenerate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 115);

/**
 * RecoveryCodeUsed is emitted when a user's recovery code was used successfully or
 * unsuccessfully.
 *
 * @generated from message events.RecoveryCodeUsed
 */
export type RecoveryCodeUsed = Message<"events.RecoveryCodeUsed"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * Status contains fields to indicate whether attempt was successful or not.
   *
   * @generated from field: events.Status Status = 3;
   */
  Status?: Status;
};

/**
 * Describes the message events.RecoveryCodeUsed.
 * Use `create(RecoveryCodeUsedSchema)` to create a new message.
 */
export const RecoveryCodeUsedSchema: GenMessage<RecoveryCodeUsed> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 116);

/**
 * WindowsDesktopSessionEnd is emitted when a user ends a Windows desktop session.
 *
 * @generated from message events.WindowsDesktopSessionEnd
 */
export type WindowsDesktopSessionEnd = Message<"events.WindowsDesktopSessionEnd"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * Session is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * WindowsDesktopService is the name of the service proxying the RDP session.
   *
   * @generated from field: string WindowsDesktopService = 4;
   */
  WindowsDesktopService: string;

  /**
   * DesktopAddr is the address of the desktop being accessed.
   *
   * @generated from field: string DesktopAddr = 5;
   */
  DesktopAddr: string;

  /**
   * Domain is the Active Directory domain of the desktop being accessed.
   *
   * @generated from field: string Domain = 6;
   */
  Domain: string;

  /**
   * WindowsUser is the Windows username used to connect.
   *
   * @generated from field: string WindowsUser = 7;
   */
  WindowsUser: string;

  /**
   * DesktopLabels are the labels on the desktop resource.
   *
   * @generated from field: map<string, string> DesktopLabels = 8;
   */
  DesktopLabels: { [key: string]: string };

  /**
   * StartTime is the timestamp at which the session began.
   *
   * @generated from field: google.protobuf.Timestamp StartTime = 9;
   */
  StartTime?: Timestamp;

  /**
   * EndTime is the timestamp at which the session ended.
   *
   * @generated from field: google.protobuf.Timestamp EndTime = 10;
   */
  EndTime?: Timestamp;

  /**
   * DesktopName is the name of the desktop resource.
   *
   * @generated from field: string DesktopName = 11;
   */
  DesktopName: string;

  /**
   * Recorded is true if the session was recorded, false otherwise.
   *
   * @generated from field: bool Recorded = 12;
   */
  Recorded: boolean;

  /**
   * Participants is a list of participants in the session.
   *
   * @generated from field: repeated string Participants = 13;
   */
  Participants: string[];
};

/**
 * Describes the message events.WindowsDesktopSessionEnd.
 * Use `create(WindowsDesktopSessionEndSchema)` to create a new message.
 */
export const WindowsDesktopSessionEndSchema: GenMessage<WindowsDesktopSessionEnd> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 117);

/**
 * CertificateCreate is emitted when a certificate is issued.
 *
 * @generated from message events.CertificateCreate
 */
export type CertificateCreate = Message<"events.CertificateCreate"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * CertificateType is the type of certificate that was just issued.
   *
   * @generated from field: string CertificateType = 2;
   */
  CertificateType: string;

  /**
   * Identity is the identity associated with the certificate, as interpreted by Teleport.
   *
   * @generated from field: events.Identity Identity = 3;
   */
  Identity?: Identity;

  /**
   * Client is the common client event metadata
   *
   * @generated from field: events.ClientMetadata Client = 4;
   */
  Client?: ClientMetadata;
};

/**
 * Describes the message events.CertificateCreate.
 * Use `create(CertificateCreateSchema)` to create a new message.
 */
export const CertificateCreateSchema: GenMessage<CertificateCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 118);

/**
 * RenewableCertificateGenerationMismatch is emitted when a renewable
 * certificate's generation counter fails to validate, possibly indicating a
 * stolen certificate and an invalid renewal attempt.
 *
 * @generated from message events.RenewableCertificateGenerationMismatch
 */
export type RenewableCertificateGenerationMismatch = Message<"events.RenewableCertificateGenerationMismatch"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * UserMetadata is a common user event metadata.
   *
   * @generated from field: events.UserMetadata UserMetadata = 2;
   */
  UserMetadata?: UserMetadata;
};

/**
 * Describes the message events.RenewableCertificateGenerationMismatch.
 * Use `create(RenewableCertificateGenerationMismatchSchema)` to create a new message.
 */
export const RenewableCertificateGenerationMismatchSchema: GenMessage<RenewableCertificateGenerationMismatch> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 119);

/**
 * BotJoin records a bot join event.
 *
 * @generated from message events.BotJoin
 */
export type BotJoin = Message<"events.BotJoin"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Status contains common command or operation status fields.
   *
   * @generated from field: events.Status Status = 2;
   */
  Status?: Status;

  /**
   * BotName is the name of the bot which has joined.
   *
   * @generated from field: string BotName = 3;
   */
  BotName: string;

  /**
   * Method is the event field indicating what join method was used.
   *
   * @generated from field: string Method = 4;
   */
  Method: string;

  /**
   * TokenName is the name of the provision token used to join.
   *
   * @generated from field: string TokenName = 5;
   */
  TokenName: string;

  /**
   * Attributes is a map of attributes received from the join method provider.
   *
   * @generated from field: google.protobuf.Struct Attributes = 6;
   */
  Attributes?: JsonObject;

  /**
   * UserName is the name of the user associated with the bot which has joined.
   *
   * @generated from field: string UserName = 7;
   */
  UserName: string;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 8;
   */
  Connection?: ConnectionMetadata;

  /**
   * BotInstanceID is the ID of the bot instance which has joined or renewed.
   *
   * @generated from field: string BotInstanceID = 9;
   */
  BotInstanceID: string;
};

/**
 * Describes the message events.BotJoin.
 * Use `create(BotJoinSchema)` to create a new message.
 */
export const BotJoinSchema: GenMessage<BotJoin> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 120);

/**
 * InstanceJoin records an instance join event.
 *
 * @generated from message events.InstanceJoin
 */
export type InstanceJoin = Message<"events.InstanceJoin"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Status contains common command or operation status fields.
   *
   * @generated from field: events.Status Status = 2;
   */
  Status?: Status;

  /**
   * HostID is the unique host ID of the instance which attempted to join.
   *
   * @generated from field: string HostID = 3;
   */
  HostID: string;

  /**
   * NodeName is the name of the instance which attempted to join.
   *
   * @generated from field: string NodeName = 4;
   */
  NodeName: string;

  /**
   * Role is the role that the node requested when attempting to join.
   *
   * @generated from field: string Role = 5;
   */
  Role: string;

  /**
   * Method is the event field indicating what join method was used.
   *
   * @generated from field: string Method = 6;
   */
  Method: string;

  /**
   * TokenName is the name of the token used to join. This will be omitted
   * for the 'token' join method where the token name is a secret value.
   *
   * @generated from field: string TokenName = 7;
   */
  TokenName: string;

  /**
   * Attributes is a map of attributes received from the join method provider.
   *
   * @generated from field: google.protobuf.Struct Attributes = 8;
   */
  Attributes?: JsonObject;

  /**
   * TokenExpires contain information about token expiration time.
   * In case of static token the TokenExpiration time is to the Unix epoch start time.
   *
   * @generated from field: google.protobuf.Timestamp TokenExpires = 9;
   */
  TokenExpires?: Timestamp;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 10;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.InstanceJoin.
 * Use `create(InstanceJoinSchema)` to create a new message.
 */
export const InstanceJoinSchema: GenMessage<InstanceJoin> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 121);

/**
 * Unknown is a fallback event used when we don't recognize an event from the backend.
 *
 * @generated from message events.Unknown
 */
export type Unknown = Message<"events.Unknown"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * UnknownType is the event type extracted from the unknown event.
   *
   * @generated from field: string UnknownType = 2;
   */
  UnknownType: string;

  /**
   * UnknownCode is the event code extracted from the unknown event.
   *
   * @generated from field: string UnknownCode = 3;
   */
  UnknownCode: string;

  /**
   * Data is the serialized JSON data of the unknown event.
   *
   * @generated from field: string Data = 4;
   */
  Data: string;
};

/**
 * Describes the message events.Unknown.
 * Use `create(UnknownSchema)` to create a new message.
 */
export const UnknownSchema: GenMessage<Unknown> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 122);

/**
 * DeviceMetadata groups device information for events.
 *
 * @generated from message events.DeviceMetadata
 */
export type DeviceMetadata = Message<"events.DeviceMetadata"> & {
  /**
   * ID of the device.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  /**
   * OS of the device.
   *
   * @generated from field: events.OSType os_type = 2;
   */
  osType: OSType;

  /**
   * Device inventory identifier.
   *
   * @generated from field: string asset_tag = 3;
   */
  assetTag: string;

  /**
   * Device credential identifier.
   *
   * @generated from field: string credential_id = 4;
   */
  credentialId: string;

  /**
   * Device origin.
   *
   * @generated from field: events.DeviceOrigin device_origin = 5;
   */
  deviceOrigin: DeviceOrigin;

  /**
   * True if web authentication, aka on-behalf-of device authentication, was
   * performed.
   * Only present in "device.authenticate" type events.
   *
   * @generated from field: bool web_authentication = 6;
   */
  webAuthentication: boolean;

  /**
   * Device web authentication attempt ID.
   * Present in events related to device web authentication.
   *
   * @generated from field: string web_authentication_id = 8;
   */
  webAuthenticationId: string;
};

/**
 * Describes the message events.DeviceMetadata.
 * Use `create(DeviceMetadataSchema)` to create a new message.
 */
export const DeviceMetadataSchema: GenMessage<DeviceMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 123);

/**
 * DeviceEvent is a device-related event.
 * The event type (Metadata.Type) for device events is always "device". See the
 * event code (Metadata.Code) for its meaning.
 * Deprecated: Use DeviceEvent2 instead.
 *
 * @generated from message events.DeviceEvent
 */
export type DeviceEvent = Message<"events.DeviceEvent"> & {
  /**
   * Metadata holds common event metadata.
   *
   * @generated from field: events.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * Status indicates the outcome of the event.
   *
   * @generated from field: events.Status status = 2;
   */
  status?: Status;

  /**
   * DeviceMetadata holds metadata about the user device.
   *
   * @generated from field: events.DeviceMetadata device = 3;
   */
  device?: DeviceMetadata;

  /**
   * UserMetadata holds metadata about the user behind the event.
   *
   * @generated from field: events.UserMetadata user = 4;
   */
  user?: UserMetadata;
};

/**
 * Describes the message events.DeviceEvent.
 * Use `create(DeviceEventSchema)` to create a new message.
 */
export const DeviceEventSchema: GenMessage<DeviceEvent> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 124);

/**
 * DeviceEvent2 is a device-related event.
 * See the "lib/events.Device*Event" and "lib/events.Device*Code" for the
 * various event types and codes, respectively.
 * Replaces the previous [DeviceEvent] proto, presenting a more standard event
 * interface with various embeds.
 *
 * @generated from message events.DeviceEvent2
 */
export type DeviceEvent2 = Message<"events.DeviceEvent2"> & {
  /**
   * Metadata holds common event metadata.
   *
   * @generated from field: events.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * DeviceMetadata holds metadata about the user device.
   *
   * @generated from field: events.DeviceMetadata device = 3;
   */
  device?: DeviceMetadata;

  /**
   * Status indicates the outcome of the event.
   *
   * @generated from field: events.Status status = 5;
   */
  status?: Status;

  /**
   * UserMetadata holds metadata about the user behind the event.
   *
   * @generated from field: events.UserMetadata user = 6;
   */
  user?: UserMetadata;
};

/**
 * Describes the message events.DeviceEvent2.
 * Use `create(DeviceEvent2Schema)` to create a new message.
 */
export const DeviceEvent2Schema: GenMessage<DeviceEvent2> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 125);

/**
 * DiscoveryConfigCreate is emitted when a discovery config is created.
 *
 * @generated from message events.DiscoveryConfigCreate
 */
export type DiscoveryConfigCreate = Message<"events.DiscoveryConfigCreate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.DiscoveryConfigCreate.
 * Use `create(DiscoveryConfigCreateSchema)` to create a new message.
 */
export const DiscoveryConfigCreateSchema: GenMessage<DiscoveryConfigCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 126);

/**
 * DiscoveryConfigUpdate is emitted when a discovery config is updated.
 *
 * @generated from message events.DiscoveryConfigUpdate
 */
export type DiscoveryConfigUpdate = Message<"events.DiscoveryConfigUpdate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.DiscoveryConfigUpdate.
 * Use `create(DiscoveryConfigUpdateSchema)` to create a new message.
 */
export const DiscoveryConfigUpdateSchema: GenMessage<DiscoveryConfigUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 127);

/**
 * DiscoveryConfigDelete is emitted when a discovery config is deleted.
 *
 * @generated from message events.DiscoveryConfigDelete
 */
export type DiscoveryConfigDelete = Message<"events.DiscoveryConfigDelete"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.DiscoveryConfigDelete.
 * Use `create(DiscoveryConfigDeleteSchema)` to create a new message.
 */
export const DiscoveryConfigDeleteSchema: GenMessage<DiscoveryConfigDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 128);

/**
 * DiscoveryConfigDeleteAll is emitted when all discovery configs are deleted.
 *
 * @generated from message events.DiscoveryConfigDeleteAll
 */
export type DiscoveryConfigDeleteAll = Message<"events.DiscoveryConfigDeleteAll"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 3;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.DiscoveryConfigDeleteAll.
 * Use `create(DiscoveryConfigDeleteAllSchema)` to create a new message.
 */
export const DiscoveryConfigDeleteAllSchema: GenMessage<DiscoveryConfigDeleteAll> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 129);

/**
 * IntegrationCreate is emitted when an integration resource is created.
 *
 * @generated from message events.IntegrationCreate
 */
export type IntegrationCreate = Message<"events.IntegrationCreate"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata.
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * @generated from field: events.IntegrationMetadata Integration = 4;
   */
  Integration?: IntegrationMetadata;

  /**
   * ConnectionMetadata holds information about the connection.
   *
   * @generated from field: events.ConnectionMetadata Connection = 5;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.IntegrationCreate.
 * Use `create(IntegrationCreateSchema)` to create a new message.
 */
export const IntegrationCreateSchema: GenMessage<IntegrationCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 130);

/**
 * IntegrationUpdate is emitted when an integration resource is updated.
 *
 * @generated from message events.IntegrationUpdate
 */
export type IntegrationUpdate = Message<"events.IntegrationUpdate"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata.
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * @generated from field: events.IntegrationMetadata Integration = 4;
   */
  Integration?: IntegrationMetadata;

  /**
   * ConnectionMetadata holds information about the connection.
   *
   * @generated from field: events.ConnectionMetadata Connection = 5;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.IntegrationUpdate.
 * Use `create(IntegrationUpdateSchema)` to create a new message.
 */
export const IntegrationUpdateSchema: GenMessage<IntegrationUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 131);

/**
 * IntegrationDelete is emitted when an integration is deleted.
 *
 * @generated from message events.IntegrationDelete
 */
export type IntegrationDelete = Message<"events.IntegrationDelete"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata.
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * @generated from field: events.IntegrationMetadata Integration = 4;
   */
  Integration?: IntegrationMetadata;

  /**
   * ConnectionMetadata holds information about the connection.
   *
   * @generated from field: events.ConnectionMetadata Connection = 5;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.IntegrationDelete.
 * Use `create(IntegrationDeleteSchema)` to create a new message.
 */
export const IntegrationDeleteSchema: GenMessage<IntegrationDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 132);

/**
 * IntegrationMetadata contains information about integration resources.
 *
 * @generated from message events.IntegrationMetadata
 */
export type IntegrationMetadata = Message<"events.IntegrationMetadata"> & {
  /**
   * SubKind is the sub kind of the integration resource.
   *
   * @generated from field: string SubKind = 1;
   */
  SubKind: string;

  /**
   * AWSOIDC contains metadata for AWS OIDC integrations.
   *
   * @generated from field: events.AWSOIDCIntegrationMetadata AWSOIDC = 2;
   */
  AWSOIDC?: AWSOIDCIntegrationMetadata;

  /**
   * AzureOIDC contains metadata for Azure OIDC integrations.
   *
   * @generated from field: events.AzureOIDCIntegrationMetadata AzureOIDC = 3;
   */
  AzureOIDC?: AzureOIDCIntegrationMetadata;
};

/**
 * Describes the message events.IntegrationMetadata.
 * Use `create(IntegrationMetadataSchema)` to create a new message.
 */
export const IntegrationMetadataSchema: GenMessage<IntegrationMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 133);

/**
 * AWSOIDCIntegrationMetadata contains metadata for AWS OIDC integrations.
 *
 * @generated from message events.AWSOIDCIntegrationMetadata
 */
export type AWSOIDCIntegrationMetadata = Message<"events.AWSOIDCIntegrationMetadata"> & {
  /**
   * RoleARN contains the Role ARN used to set up the Integration.
   * This is the AWS Role that Teleport will use to issue tokens for API Calls.
   *
   * @generated from field: string RoleARN = 1;
   */
  RoleARN: string;

  /**
   * IssuerS3URI is the Identity Provider that was configured in AWS.
   *
   * @generated from field: string IssuerS3URI = 2;
   */
  IssuerS3URI: string;
};

/**
 * Describes the message events.AWSOIDCIntegrationMetadata.
 * Use `create(AWSOIDCIntegrationMetadataSchema)` to create a new message.
 */
export const AWSOIDCIntegrationMetadataSchema: GenMessage<AWSOIDCIntegrationMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 134);

/**
 * AzureOIDCIntegrationMetadata contains metadata for Azure OIDC integrations.
 *
 * @generated from message events.AzureOIDCIntegrationMetadata
 */
export type AzureOIDCIntegrationMetadata = Message<"events.AzureOIDCIntegrationMetadata"> & {
  /**
   * TenantID specifies the ID of Entra Tenant (Directory).
   *
   * @generated from field: string TenantID = 1;
   */
  TenantID: string;

  /**
   * ClientID specifies the ID of Azure enterprise application (client).
   *
   * @generated from field: string ClientID = 2;
   */
  ClientID: string;
};

/**
 * Describes the message events.AzureOIDCIntegrationMetadata.
 * Use `create(AzureOIDCIntegrationMetadataSchema)` to create a new message.
 */
export const AzureOIDCIntegrationMetadataSchema: GenMessage<AzureOIDCIntegrationMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 135);

/**
 * PluginCreate is emitted when a plugin resource is created.
 *
 * @generated from message events.PluginCreate
 */
export type PluginCreate = Message<"events.PluginCreate"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata user = 2;
   */
  user?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata.
   *
   * @generated from field: events.ResourceMetadata resource = 3;
   */
  resource?: ResourceMetadata;

  /**
   * @generated from field: events.PluginMetadata plugin = 4;
   */
  plugin?: PluginMetadata;

  /**
   * ConnectionMetadata holds information about the connection.
   *
   * @generated from field: events.ConnectionMetadata connection = 5;
   */
  connection?: ConnectionMetadata;
};

/**
 * Describes the message events.PluginCreate.
 * Use `create(PluginCreateSchema)` to create a new message.
 */
export const PluginCreateSchema: GenMessage<PluginCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 136);

/**
 * PluginUpdate is emitted when a plugin resource is updated.
 *
 * @generated from message events.PluginUpdate
 */
export type PluginUpdate = Message<"events.PluginUpdate"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata user = 2;
   */
  user?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata.
   *
   * @generated from field: events.ResourceMetadata resource = 3;
   */
  resource?: ResourceMetadata;

  /**
   * @generated from field: events.PluginMetadata plugin = 4;
   */
  plugin?: PluginMetadata;

  /**
   * ConnectionMetadata holds information about the connection.
   *
   * @generated from field: events.ConnectionMetadata connection = 5;
   */
  connection?: ConnectionMetadata;
};

/**
 * Describes the message events.PluginUpdate.
 * Use `create(PluginUpdateSchema)` to create a new message.
 */
export const PluginUpdateSchema: GenMessage<PluginUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 137);

/**
 * PluginDelete is emitted when a plugin is deleted.
 *
 * @generated from message events.PluginDelete
 */
export type PluginDelete = Message<"events.PluginDelete"> & {
  /**
   * metadata is a common event metadata.
   *
   * @generated from field: events.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata user = 2;
   */
  user?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata.
   *
   * @generated from field: events.ResourceMetadata resource = 3;
   */
  resource?: ResourceMetadata;

  /**
   * @generated from field: events.PluginMetadata plugin = 4;
   */
  plugin?: PluginMetadata;

  /**
   * ConnectionMetadata holds information about the connection.
   *
   * @generated from field: events.ConnectionMetadata connection = 5;
   */
  connection?: ConnectionMetadata;
};

/**
 * Describes the message events.PluginDelete.
 * Use `create(PluginDeleteSchema)` to create a new message.
 */
export const PluginDeleteSchema: GenMessage<PluginDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 138);

/**
 * PluginMetadata contains information about plugin resources.
 *
 * @generated from message events.PluginMetadata
 */
export type PluginMetadata = Message<"events.PluginMetadata"> & {
  /**
   * plugin_type is the plugin type of the plugin resource.
   * The value matches the types.PluginV1.Spec.Type field.
   *
   * @generated from field: string plugin_type = 1;
   */
  pluginType: string;

  /**
   * has_credentials indicates whether the plugin has credentials.
   *
   * @generated from field: bool has_credentials = 3;
   */
  hasCredentials: boolean;

  /**
   * reuses_credentials indicates whether the plugin reuses credentials.
   *
   * @generated from field: bool reuses_credentials = 4;
   */
  reusesCredentials: boolean;

  /**
   * plugin_data is the plugin data of the plugin resource.
   *
   * @generated from field: google.protobuf.Struct plugin_data = 5;
   */
  pluginData?: JsonObject;
};

/**
 * Describes the message events.PluginMetadata.
 * Use `create(PluginMetadataSchema)` to create a new message.
 */
export const PluginMetadataSchema: GenMessage<PluginMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 139);

/**
 * OneOf is a union of one of audit events submitted to the auth service
 *
 * @generated from message events.OneOf
 */
export type OneOf = Message<"events.OneOf"> & {
  /**
   * Event is one of the audit events
   *
   * @generated from oneof events.OneOf.Event
   */
  Event: {
    /**
     * @generated from field: events.UserLogin UserLogin = 1;
     */
    value: UserLogin;
    case: "UserLogin";
  } | {
    /**
     * @generated from field: events.UserCreate UserCreate = 2;
     */
    value: UserCreate;
    case: "UserCreate";
  } | {
    /**
     * @generated from field: events.UserDelete UserDelete = 3;
     */
    value: UserDelete;
    case: "UserDelete";
  } | {
    /**
     * @generated from field: events.UserPasswordChange UserPasswordChange = 4;
     */
    value: UserPasswordChange;
    case: "UserPasswordChange";
  } | {
    /**
     * @generated from field: events.SessionStart SessionStart = 5;
     */
    value: SessionStart;
    case: "SessionStart";
  } | {
    /**
     * @generated from field: events.SessionJoin SessionJoin = 6;
     */
    value: SessionJoin;
    case: "SessionJoin";
  } | {
    /**
     * @generated from field: events.SessionPrint SessionPrint = 7;
     */
    value: SessionPrint;
    case: "SessionPrint";
  } | {
    /**
     * @generated from field: events.SessionReject SessionReject = 8;
     */
    value: SessionReject;
    case: "SessionReject";
  } | {
    /**
     * @generated from field: events.Resize Resize = 9;
     */
    value: Resize;
    case: "Resize";
  } | {
    /**
     * @generated from field: events.SessionEnd SessionEnd = 10;
     */
    value: SessionEnd;
    case: "SessionEnd";
  } | {
    /**
     * @generated from field: events.SessionCommand SessionCommand = 11;
     */
    value: SessionCommand;
    case: "SessionCommand";
  } | {
    /**
     * @generated from field: events.SessionDisk SessionDisk = 12;
     */
    value: SessionDisk;
    case: "SessionDisk";
  } | {
    /**
     * @generated from field: events.SessionNetwork SessionNetwork = 13;
     */
    value: SessionNetwork;
    case: "SessionNetwork";
  } | {
    /**
     * @generated from field: events.SessionData SessionData = 14;
     */
    value: SessionData;
    case: "SessionData";
  } | {
    /**
     * @generated from field: events.SessionLeave SessionLeave = 15;
     */
    value: SessionLeave;
    case: "SessionLeave";
  } | {
    /**
     * @generated from field: events.PortForward PortForward = 16;
     */
    value: PortForward;
    case: "PortForward";
  } | {
    /**
     * @generated from field: events.X11Forward X11Forward = 17;
     */
    value: X11Forward;
    case: "X11Forward";
  } | {
    /**
     * @generated from field: events.SCP SCP = 18;
     */
    value: SCP;
    case: "SCP";
  } | {
    /**
     * @generated from field: events.Exec Exec = 19;
     */
    value: Exec;
    case: "Exec";
  } | {
    /**
     * @generated from field: events.Subsystem Subsystem = 20;
     */
    value: Subsystem;
    case: "Subsystem";
  } | {
    /**
     * @generated from field: events.ClientDisconnect ClientDisconnect = 21;
     */
    value: ClientDisconnect;
    case: "ClientDisconnect";
  } | {
    /**
     * @generated from field: events.AuthAttempt AuthAttempt = 22;
     */
    value: AuthAttempt;
    case: "AuthAttempt";
  } | {
    /**
     * @generated from field: events.AccessRequestCreate AccessRequestCreate = 23;
     */
    value: AccessRequestCreate;
    case: "AccessRequestCreate";
  } | {
    /**
     * @generated from field: events.UserTokenCreate UserTokenCreate = 24;
     */
    value: UserTokenCreate;
    case: "UserTokenCreate";
  } | {
    /**
     * @generated from field: events.RoleCreate RoleCreate = 25;
     */
    value: RoleCreate;
    case: "RoleCreate";
  } | {
    /**
     * @generated from field: events.RoleDelete RoleDelete = 26;
     */
    value: RoleDelete;
    case: "RoleDelete";
  } | {
    /**
     * @generated from field: events.TrustedClusterCreate TrustedClusterCreate = 27;
     */
    value: TrustedClusterCreate;
    case: "TrustedClusterCreate";
  } | {
    /**
     * @generated from field: events.TrustedClusterDelete TrustedClusterDelete = 28;
     */
    value: TrustedClusterDelete;
    case: "TrustedClusterDelete";
  } | {
    /**
     * @generated from field: events.TrustedClusterTokenCreate TrustedClusterTokenCreate = 29;
     */
    value: TrustedClusterTokenCreate;
    case: "TrustedClusterTokenCreate";
  } | {
    /**
     * @generated from field: events.GithubConnectorCreate GithubConnectorCreate = 30;
     */
    value: GithubConnectorCreate;
    case: "GithubConnectorCreate";
  } | {
    /**
     * @generated from field: events.GithubConnectorDelete GithubConnectorDelete = 31;
     */
    value: GithubConnectorDelete;
    case: "GithubConnectorDelete";
  } | {
    /**
     * @generated from field: events.OIDCConnectorCreate OIDCConnectorCreate = 32;
     */
    value: OIDCConnectorCreate;
    case: "OIDCConnectorCreate";
  } | {
    /**
     * @generated from field: events.OIDCConnectorDelete OIDCConnectorDelete = 33;
     */
    value: OIDCConnectorDelete;
    case: "OIDCConnectorDelete";
  } | {
    /**
     * @generated from field: events.SAMLConnectorCreate SAMLConnectorCreate = 34;
     */
    value: SAMLConnectorCreate;
    case: "SAMLConnectorCreate";
  } | {
    /**
     * @generated from field: events.SAMLConnectorDelete SAMLConnectorDelete = 35;
     */
    value: SAMLConnectorDelete;
    case: "SAMLConnectorDelete";
  } | {
    /**
     * @generated from field: events.KubeRequest KubeRequest = 36;
     */
    value: KubeRequest;
    case: "KubeRequest";
  } | {
    /**
     * @generated from field: events.AppSessionStart AppSessionStart = 37;
     */
    value: AppSessionStart;
    case: "AppSessionStart";
  } | {
    /**
     * @generated from field: events.AppSessionChunk AppSessionChunk = 38;
     */
    value: AppSessionChunk;
    case: "AppSessionChunk";
  } | {
    /**
     * @generated from field: events.AppSessionRequest AppSessionRequest = 39;
     */
    value: AppSessionRequest;
    case: "AppSessionRequest";
  } | {
    /**
     * @generated from field: events.DatabaseSessionStart DatabaseSessionStart = 40;
     */
    value: DatabaseSessionStart;
    case: "DatabaseSessionStart";
  } | {
    /**
     * @generated from field: events.DatabaseSessionEnd DatabaseSessionEnd = 41;
     */
    value: DatabaseSessionEnd;
    case: "DatabaseSessionEnd";
  } | {
    /**
     * @generated from field: events.DatabaseSessionQuery DatabaseSessionQuery = 42;
     */
    value: DatabaseSessionQuery;
    case: "DatabaseSessionQuery";
  } | {
    /**
     * @generated from field: events.SessionUpload SessionUpload = 43;
     */
    value: SessionUpload;
    case: "SessionUpload";
  } | {
    /**
     * @generated from field: events.MFADeviceAdd MFADeviceAdd = 44;
     */
    value: MFADeviceAdd;
    case: "MFADeviceAdd";
  } | {
    /**
     * @generated from field: events.MFADeviceDelete MFADeviceDelete = 45;
     */
    value: MFADeviceDelete;
    case: "MFADeviceDelete";
  } | {
    /**
     * @generated from field: events.BillingInformationUpdate BillingInformationUpdate = 46;
     */
    value: BillingInformationUpdate;
    case: "BillingInformationUpdate";
  } | {
    /**
     * @generated from field: events.BillingCardCreate BillingCardCreate = 47;
     */
    value: BillingCardCreate;
    case: "BillingCardCreate";
  } | {
    /**
     * @generated from field: events.BillingCardDelete BillingCardDelete = 48;
     */
    value: BillingCardDelete;
    case: "BillingCardDelete";
  } | {
    /**
     * @generated from field: events.LockCreate LockCreate = 49;
     */
    value: LockCreate;
    case: "LockCreate";
  } | {
    /**
     * @generated from field: events.LockDelete LockDelete = 50;
     */
    value: LockDelete;
    case: "LockDelete";
  } | {
    /**
     * @generated from field: events.RecoveryCodeGenerate RecoveryCodeGenerate = 51;
     */
    value: RecoveryCodeGenerate;
    case: "RecoveryCodeGenerate";
  } | {
    /**
     * @generated from field: events.RecoveryCodeUsed RecoveryCodeUsed = 52;
     */
    value: RecoveryCodeUsed;
    case: "RecoveryCodeUsed";
  } | {
    /**
     * @generated from field: events.DatabaseCreate DatabaseCreate = 53;
     */
    value: DatabaseCreate;
    case: "DatabaseCreate";
  } | {
    /**
     * @generated from field: events.DatabaseUpdate DatabaseUpdate = 54;
     */
    value: DatabaseUpdate;
    case: "DatabaseUpdate";
  } | {
    /**
     * @generated from field: events.DatabaseDelete DatabaseDelete = 55;
     */
    value: DatabaseDelete;
    case: "DatabaseDelete";
  } | {
    /**
     * @generated from field: events.AppCreate AppCreate = 56;
     */
    value: AppCreate;
    case: "AppCreate";
  } | {
    /**
     * @generated from field: events.AppUpdate AppUpdate = 57;
     */
    value: AppUpdate;
    case: "AppUpdate";
  } | {
    /**
     * @generated from field: events.AppDelete AppDelete = 58;
     */
    value: AppDelete;
    case: "AppDelete";
  } | {
    /**
     * @generated from field: events.WindowsDesktopSessionStart WindowsDesktopSessionStart = 59;
     */
    value: WindowsDesktopSessionStart;
    case: "WindowsDesktopSessionStart";
  } | {
    /**
     * @generated from field: events.WindowsDesktopSessionEnd WindowsDesktopSessionEnd = 60;
     */
    value: WindowsDesktopSessionEnd;
    case: "WindowsDesktopSessionEnd";
  } | {
    /**
     * @generated from field: events.PostgresParse PostgresParse = 61;
     */
    value: PostgresParse;
    case: "PostgresParse";
  } | {
    /**
     * @generated from field: events.PostgresBind PostgresBind = 62;
     */
    value: PostgresBind;
    case: "PostgresBind";
  } | {
    /**
     * @generated from field: events.PostgresExecute PostgresExecute = 63;
     */
    value: PostgresExecute;
    case: "PostgresExecute";
  } | {
    /**
     * @generated from field: events.PostgresClose PostgresClose = 64;
     */
    value: PostgresClose;
    case: "PostgresClose";
  } | {
    /**
     * @generated from field: events.PostgresFunctionCall PostgresFunctionCall = 65;
     */
    value: PostgresFunctionCall;
    case: "PostgresFunctionCall";
  } | {
    /**
     * @generated from field: events.AccessRequestDelete AccessRequestDelete = 66;
     */
    value: AccessRequestDelete;
    case: "AccessRequestDelete";
  } | {
    /**
     * @generated from field: events.SessionConnect SessionConnect = 67;
     */
    value: SessionConnect;
    case: "SessionConnect";
  } | {
    /**
     * @generated from field: events.CertificateCreate CertificateCreate = 68;
     */
    value: CertificateCreate;
    case: "CertificateCreate";
  } | {
    /**
     * @generated from field: events.DesktopRecording DesktopRecording = 69;
     */
    value: DesktopRecording;
    case: "DesktopRecording";
  } | {
    /**
     * @generated from field: events.DesktopClipboardSend DesktopClipboardSend = 70;
     */
    value: DesktopClipboardSend;
    case: "DesktopClipboardSend";
  } | {
    /**
     * @generated from field: events.DesktopClipboardReceive DesktopClipboardReceive = 71;
     */
    value: DesktopClipboardReceive;
    case: "DesktopClipboardReceive";
  } | {
    /**
     * @generated from field: events.MySQLStatementPrepare MySQLStatementPrepare = 72;
     */
    value: MySQLStatementPrepare;
    case: "MySQLStatementPrepare";
  } | {
    /**
     * @generated from field: events.MySQLStatementExecute MySQLStatementExecute = 73;
     */
    value: MySQLStatementExecute;
    case: "MySQLStatementExecute";
  } | {
    /**
     * @generated from field: events.MySQLStatementSendLongData MySQLStatementSendLongData = 74;
     */
    value: MySQLStatementSendLongData;
    case: "MySQLStatementSendLongData";
  } | {
    /**
     * @generated from field: events.MySQLStatementClose MySQLStatementClose = 75;
     */
    value: MySQLStatementClose;
    case: "MySQLStatementClose";
  } | {
    /**
     * @generated from field: events.MySQLStatementReset MySQLStatementReset = 76;
     */
    value: MySQLStatementReset;
    case: "MySQLStatementReset";
  } | {
    /**
     * @generated from field: events.MySQLStatementFetch MySQLStatementFetch = 77;
     */
    value: MySQLStatementFetch;
    case: "MySQLStatementFetch";
  } | {
    /**
     * @generated from field: events.MySQLStatementBulkExecute MySQLStatementBulkExecute = 78;
     */
    value: MySQLStatementBulkExecute;
    case: "MySQLStatementBulkExecute";
  } | {
    /**
     * @generated from field: events.RenewableCertificateGenerationMismatch RenewableCertificateGenerationMismatch = 79;
     */
    value: RenewableCertificateGenerationMismatch;
    case: "RenewableCertificateGenerationMismatch";
  } | {
    /**
     * @generated from field: events.Unknown Unknown = 80;
     */
    value: Unknown;
    case: "Unknown";
  } | {
    /**
     * @generated from field: events.MySQLInitDB MySQLInitDB = 81;
     */
    value: MySQLInitDB;
    case: "MySQLInitDB";
  } | {
    /**
     * @generated from field: events.MySQLCreateDB MySQLCreateDB = 82;
     */
    value: MySQLCreateDB;
    case: "MySQLCreateDB";
  } | {
    /**
     * @generated from field: events.MySQLDropDB MySQLDropDB = 83;
     */
    value: MySQLDropDB;
    case: "MySQLDropDB";
  } | {
    /**
     * @generated from field: events.MySQLShutDown MySQLShutDown = 84;
     */
    value: MySQLShutDown;
    case: "MySQLShutDown";
  } | {
    /**
     * @generated from field: events.MySQLProcessKill MySQLProcessKill = 85;
     */
    value: MySQLProcessKill;
    case: "MySQLProcessKill";
  } | {
    /**
     * @generated from field: events.MySQLDebug MySQLDebug = 86;
     */
    value: MySQLDebug;
    case: "MySQLDebug";
  } | {
    /**
     * @generated from field: events.MySQLRefresh MySQLRefresh = 87;
     */
    value: MySQLRefresh;
    case: "MySQLRefresh";
  } | {
    /**
     * @generated from field: events.AccessRequestResourceSearch AccessRequestResourceSearch = 88;
     */
    value: AccessRequestResourceSearch;
    case: "AccessRequestResourceSearch";
  } | {
    /**
     * @generated from field: events.SQLServerRPCRequest SQLServerRPCRequest = 89;
     */
    value: SQLServerRPCRequest;
    case: "SQLServerRPCRequest";
  } | {
    /**
     * @generated from field: events.DatabaseSessionMalformedPacket DatabaseSessionMalformedPacket = 90;
     */
    value: DatabaseSessionMalformedPacket;
    case: "DatabaseSessionMalformedPacket";
  } | {
    /**
     * @generated from field: events.SFTP SFTP = 91;
     */
    value: SFTP;
    case: "SFTP";
  } | {
    /**
     * @generated from field: events.UpgradeWindowStartUpdate UpgradeWindowStartUpdate = 92;
     */
    value: UpgradeWindowStartUpdate;
    case: "UpgradeWindowStartUpdate";
  } | {
    /**
     * @generated from field: events.AppSessionEnd AppSessionEnd = 93;
     */
    value: AppSessionEnd;
    case: "AppSessionEnd";
  } | {
    /**
     * @generated from field: events.SessionRecordingAccess SessionRecordingAccess = 94;
     */
    value: SessionRecordingAccess;
    case: "SessionRecordingAccess";
  } | {
    /**
     * @generated from field: events.KubernetesClusterCreate KubernetesClusterCreate = 96;
     */
    value: KubernetesClusterCreate;
    case: "KubernetesClusterCreate";
  } | {
    /**
     * @generated from field: events.KubernetesClusterUpdate KubernetesClusterUpdate = 97;
     */
    value: KubernetesClusterUpdate;
    case: "KubernetesClusterUpdate";
  } | {
    /**
     * @generated from field: events.KubernetesClusterDelete KubernetesClusterDelete = 98;
     */
    value: KubernetesClusterDelete;
    case: "KubernetesClusterDelete";
  } | {
    /**
     * @generated from field: events.SSMRun SSMRun = 99;
     */
    value: SSMRun;
    case: "SSMRun";
  } | {
    /**
     * @generated from field: events.ElasticsearchRequest ElasticsearchRequest = 100;
     */
    value: ElasticsearchRequest;
    case: "ElasticsearchRequest";
  } | {
    /**
     * @generated from field: events.CassandraBatch CassandraBatch = 101;
     */
    value: CassandraBatch;
    case: "CassandraBatch";
  } | {
    /**
     * @generated from field: events.CassandraPrepare CassandraPrepare = 102;
     */
    value: CassandraPrepare;
    case: "CassandraPrepare";
  } | {
    /**
     * @generated from field: events.CassandraRegister CassandraRegister = 103;
     */
    value: CassandraRegister;
    case: "CassandraRegister";
  } | {
    /**
     * @generated from field: events.CassandraExecute CassandraExecute = 104;
     */
    value: CassandraExecute;
    case: "CassandraExecute";
  } | {
    /**
     * @generated from field: events.AppSessionDynamoDBRequest AppSessionDynamoDBRequest = 105;
     */
    value: AppSessionDynamoDBRequest;
    case: "AppSessionDynamoDBRequest";
  } | {
    /**
     * @generated from field: events.DesktopSharedDirectoryStart DesktopSharedDirectoryStart = 106;
     */
    value: DesktopSharedDirectoryStart;
    case: "DesktopSharedDirectoryStart";
  } | {
    /**
     * @generated from field: events.DesktopSharedDirectoryRead DesktopSharedDirectoryRead = 107;
     */
    value: DesktopSharedDirectoryRead;
    case: "DesktopSharedDirectoryRead";
  } | {
    /**
     * @generated from field: events.DesktopSharedDirectoryWrite DesktopSharedDirectoryWrite = 108;
     */
    value: DesktopSharedDirectoryWrite;
    case: "DesktopSharedDirectoryWrite";
  } | {
    /**
     * @generated from field: events.DynamoDBRequest DynamoDBRequest = 109;
     */
    value: DynamoDBRequest;
    case: "DynamoDBRequest";
  } | {
    /**
     * @generated from field: events.BotJoin BotJoin = 110;
     */
    value: BotJoin;
    case: "BotJoin";
  } | {
    /**
     * @generated from field: events.InstanceJoin InstanceJoin = 111;
     */
    value: InstanceJoin;
    case: "InstanceJoin";
  } | {
    /**
     * @generated from field: events.DeviceEvent DeviceEvent = 112;
     */
    value: DeviceEvent;
    case: "DeviceEvent";
  } | {
    /**
     * @generated from field: events.LoginRuleCreate LoginRuleCreate = 113;
     */
    value: LoginRuleCreate;
    case: "LoginRuleCreate";
  } | {
    /**
     * @generated from field: events.LoginRuleDelete LoginRuleDelete = 114;
     */
    value: LoginRuleDelete;
    case: "LoginRuleDelete";
  } | {
    /**
     * @generated from field: events.SAMLIdPAuthAttempt SAMLIdPAuthAttempt = 115;
     */
    value: SAMLIdPAuthAttempt;
    case: "SAMLIdPAuthAttempt";
  } | {
    /**
     * @generated from field: events.SAMLIdPServiceProviderCreate SAMLIdPServiceProviderCreate = 116;
     */
    value: SAMLIdPServiceProviderCreate;
    case: "SAMLIdPServiceProviderCreate";
  } | {
    /**
     * @generated from field: events.SAMLIdPServiceProviderUpdate SAMLIdPServiceProviderUpdate = 117;
     */
    value: SAMLIdPServiceProviderUpdate;
    case: "SAMLIdPServiceProviderUpdate";
  } | {
    /**
     * @generated from field: events.SAMLIdPServiceProviderDelete SAMLIdPServiceProviderDelete = 118;
     */
    value: SAMLIdPServiceProviderDelete;
    case: "SAMLIdPServiceProviderDelete";
  } | {
    /**
     * @generated from field: events.SAMLIdPServiceProviderDeleteAll SAMLIdPServiceProviderDeleteAll = 119;
     */
    value: SAMLIdPServiceProviderDeleteAll;
    case: "SAMLIdPServiceProviderDeleteAll";
  } | {
    /**
     * @generated from field: events.OpenSearchRequest OpenSearchRequest = 120;
     */
    value: OpenSearchRequest;
    case: "OpenSearchRequest";
  } | {
    /**
     * @generated from field: events.DeviceEvent2 DeviceEvent2 = 121;
     */
    value: DeviceEvent2;
    case: "DeviceEvent2";
  } | {
    /**
     * @generated from field: events.OktaResourcesUpdate OktaResourcesUpdate = 122;
     */
    value: OktaResourcesUpdate;
    case: "OktaResourcesUpdate";
  } | {
    /**
     * @generated from field: events.OktaSyncFailure OktaSyncFailure = 123;
     */
    value: OktaSyncFailure;
    case: "OktaSyncFailure";
  } | {
    /**
     * @generated from field: events.OktaAssignmentResult OktaAssignmentResult = 124;
     */
    value: OktaAssignmentResult;
    case: "OktaAssignmentResult";
  } | {
    /**
     * @generated from field: events.ProvisionTokenCreate ProvisionTokenCreate = 125;
     */
    value: ProvisionTokenCreate;
    case: "ProvisionTokenCreate";
  } | {
    /**
     * @generated from field: events.AccessListCreate AccessListCreate = 126;
     */
    value: AccessListCreate;
    case: "AccessListCreate";
  } | {
    /**
     * @generated from field: events.AccessListUpdate AccessListUpdate = 127;
     */
    value: AccessListUpdate;
    case: "AccessListUpdate";
  } | {
    /**
     * @generated from field: events.AccessListDelete AccessListDelete = 128;
     */
    value: AccessListDelete;
    case: "AccessListDelete";
  } | {
    /**
     * @generated from field: events.AccessListReview AccessListReview = 129;
     */
    value: AccessListReview;
    case: "AccessListReview";
  } | {
    /**
     * @generated from field: events.AccessListMemberCreate AccessListMemberCreate = 130;
     */
    value: AccessListMemberCreate;
    case: "AccessListMemberCreate";
  } | {
    /**
     * @generated from field: events.AccessListMemberUpdate AccessListMemberUpdate = 131;
     */
    value: AccessListMemberUpdate;
    case: "AccessListMemberUpdate";
  } | {
    /**
     * @generated from field: events.AccessListMemberDelete AccessListMemberDelete = 132;
     */
    value: AccessListMemberDelete;
    case: "AccessListMemberDelete";
  } | {
    /**
     * @generated from field: events.AccessListMemberDeleteAllForAccessList AccessListMemberDeleteAllForAccessList = 133;
     */
    value: AccessListMemberDeleteAllForAccessList;
    case: "AccessListMemberDeleteAllForAccessList";
  } | {
    /**
     * @generated from field: events.AuditQueryRun AuditQueryRun = 134;
     */
    value: AuditQueryRun;
    case: "AuditQueryRun";
  } | {
    /**
     * @generated from field: events.SecurityReportRun SecurityReportRun = 135;
     */
    value: SecurityReportRun;
    case: "SecurityReportRun";
  } | {
    /**
     * @generated from field: events.GithubConnectorUpdate GithubConnectorUpdate = 136;
     */
    value: GithubConnectorUpdate;
    case: "GithubConnectorUpdate";
  } | {
    /**
     * @generated from field: events.OIDCConnectorUpdate OIDCConnectorUpdate = 137;
     */
    value: OIDCConnectorUpdate;
    case: "OIDCConnectorUpdate";
  } | {
    /**
     * @generated from field: events.SAMLConnectorUpdate SAMLConnectorUpdate = 138;
     */
    value: SAMLConnectorUpdate;
    case: "SAMLConnectorUpdate";
  } | {
    /**
     * @generated from field: events.RoleUpdate RoleUpdate = 139;
     */
    value: RoleUpdate;
    case: "RoleUpdate";
  } | {
    /**
     * @generated from field: events.UserUpdate UserUpdate = 140;
     */
    value: UserUpdate;
    case: "UserUpdate";
  } | {
    /**
     * @generated from field: events.ExternalAuditStorageEnable ExternalAuditStorageEnable = 141;
     */
    value: ExternalAuditStorageEnable;
    case: "ExternalAuditStorageEnable";
  } | {
    /**
     * @generated from field: events.ExternalAuditStorageDisable ExternalAuditStorageDisable = 142;
     */
    value: ExternalAuditStorageDisable;
    case: "ExternalAuditStorageDisable";
  } | {
    /**
     * @generated from field: events.BotCreate BotCreate = 143;
     */
    value: BotCreate;
    case: "BotCreate";
  } | {
    /**
     * @generated from field: events.BotDelete BotDelete = 144;
     */
    value: BotDelete;
    case: "BotDelete";
  } | {
    /**
     * @generated from field: events.BotUpdate BotUpdate = 145;
     */
    value: BotUpdate;
    case: "BotUpdate";
  } | {
    /**
     * @generated from field: events.CreateMFAAuthChallenge CreateMFAAuthChallenge = 146;
     */
    value: CreateMFAAuthChallenge;
    case: "CreateMFAAuthChallenge";
  } | {
    /**
     * @generated from field: events.ValidateMFAAuthResponse ValidateMFAAuthResponse = 147;
     */
    value: ValidateMFAAuthResponse;
    case: "ValidateMFAAuthResponse";
  } | {
    /**
     * @generated from field: events.OktaAccessListSync OktaAccessListSync = 148;
     */
    value: OktaAccessListSync;
    case: "OktaAccessListSync";
  } | {
    /**
     * @generated from field: events.DatabasePermissionUpdate DatabasePermissionUpdate = 149;
     */
    value: DatabasePermissionUpdate;
    case: "DatabasePermissionUpdate";
  } | {
    /**
     * @generated from field: events.SPIFFESVIDIssued SPIFFESVIDIssued = 150;
     */
    value: SPIFFESVIDIssued;
    case: "SPIFFESVIDIssued";
  } | {
    /**
     * @generated from field: events.OktaUserSync OktaUserSync = 151;
     */
    value: OktaUserSync;
    case: "OktaUserSync";
  } | {
    /**
     * @generated from field: events.AuthPreferenceUpdate AuthPreferenceUpdate = 152;
     */
    value: AuthPreferenceUpdate;
    case: "AuthPreferenceUpdate";
  } | {
    /**
     * @generated from field: events.SessionRecordingConfigUpdate SessionRecordingConfigUpdate = 153;
     */
    value: SessionRecordingConfigUpdate;
    case: "SessionRecordingConfigUpdate";
  } | {
    /**
     * @generated from field: events.ClusterNetworkingConfigUpdate ClusterNetworkingConfigUpdate = 154;
     */
    value: ClusterNetworkingConfigUpdate;
    case: "ClusterNetworkingConfigUpdate";
  } | {
    /**
     * @generated from field: events.DatabaseUserCreate DatabaseUserCreate = 155;
     */
    value: DatabaseUserCreate;
    case: "DatabaseUserCreate";
  } | {
    /**
     * @generated from field: events.DatabaseUserDeactivate DatabaseUserDeactivate = 156;
     */
    value: DatabaseUserDeactivate;
    case: "DatabaseUserDeactivate";
  } | {
    /**
     * @generated from field: events.AccessPathChanged AccessPathChanged = 157;
     */
    value: AccessPathChanged;
    case: "AccessPathChanged";
  } | {
    /**
     * @generated from field: events.SpannerRPC SpannerRPC = 158;
     */
    value: SpannerRPC;
    case: "SpannerRPC";
  } | {
    /**
     * @generated from field: events.DatabaseSessionCommandResult DatabaseSessionCommandResult = 159;
     */
    value: DatabaseSessionCommandResult;
    case: "DatabaseSessionCommandResult";
  } | {
    /**
     * @generated from field: events.DiscoveryConfigCreate DiscoveryConfigCreate = 160;
     */
    value: DiscoveryConfigCreate;
    case: "DiscoveryConfigCreate";
  } | {
    /**
     * @generated from field: events.DiscoveryConfigUpdate DiscoveryConfigUpdate = 161;
     */
    value: DiscoveryConfigUpdate;
    case: "DiscoveryConfigUpdate";
  } | {
    /**
     * @generated from field: events.DiscoveryConfigDelete DiscoveryConfigDelete = 162;
     */
    value: DiscoveryConfigDelete;
    case: "DiscoveryConfigDelete";
  } | {
    /**
     * @generated from field: events.DiscoveryConfigDeleteAll DiscoveryConfigDeleteAll = 163;
     */
    value: DiscoveryConfigDeleteAll;
    case: "DiscoveryConfigDeleteAll";
  } | {
    /**
     * @generated from field: events.AccessGraphSettingsUpdate AccessGraphSettingsUpdate = 164;
     */
    value: AccessGraphSettingsUpdate;
    case: "AccessGraphSettingsUpdate";
  } | {
    /**
     * @generated from field: events.IntegrationCreate IntegrationCreate = 165;
     */
    value: IntegrationCreate;
    case: "IntegrationCreate";
  } | {
    /**
     * @generated from field: events.IntegrationUpdate IntegrationUpdate = 166;
     */
    value: IntegrationUpdate;
    case: "IntegrationUpdate";
  } | {
    /**
     * @generated from field: events.IntegrationDelete IntegrationDelete = 167;
     */
    value: IntegrationDelete;
    case: "IntegrationDelete";
  } | {
    /**
     * @generated from field: events.SPIFFEFederationCreate SPIFFEFederationCreate = 168;
     */
    value: SPIFFEFederationCreate;
    case: "SPIFFEFederationCreate";
  } | {
    /**
     * @generated from field: events.SPIFFEFederationDelete SPIFFEFederationDelete = 169;
     */
    value: SPIFFEFederationDelete;
    case: "SPIFFEFederationDelete";
  } | {
    /**
     * @generated from field: events.PluginCreate PluginCreate = 170;
     */
    value: PluginCreate;
    case: "PluginCreate";
  } | {
    /**
     * @generated from field: events.PluginUpdate PluginUpdate = 171;
     */
    value: PluginUpdate;
    case: "PluginUpdate";
  } | {
    /**
     * @generated from field: events.PluginDelete PluginDelete = 172;
     */
    value: PluginDelete;
    case: "PluginDelete";
  } | {
    /**
     * @generated from field: events.AutoUpdateConfigCreate AutoUpdateConfigCreate = 173;
     */
    value: AutoUpdateConfigCreate;
    case: "AutoUpdateConfigCreate";
  } | {
    /**
     * @generated from field: events.AutoUpdateConfigUpdate AutoUpdateConfigUpdate = 174;
     */
    value: AutoUpdateConfigUpdate;
    case: "AutoUpdateConfigUpdate";
  } | {
    /**
     * @generated from field: events.AutoUpdateConfigDelete AutoUpdateConfigDelete = 175;
     */
    value: AutoUpdateConfigDelete;
    case: "AutoUpdateConfigDelete";
  } | {
    /**
     * @generated from field: events.AutoUpdateVersionCreate AutoUpdateVersionCreate = 176;
     */
    value: AutoUpdateVersionCreate;
    case: "AutoUpdateVersionCreate";
  } | {
    /**
     * @generated from field: events.AutoUpdateVersionUpdate AutoUpdateVersionUpdate = 177;
     */
    value: AutoUpdateVersionUpdate;
    case: "AutoUpdateVersionUpdate";
  } | {
    /**
     * @generated from field: events.AutoUpdateVersionDelete AutoUpdateVersionDelete = 178;
     */
    value: AutoUpdateVersionDelete;
    case: "AutoUpdateVersionDelete";
  } | {
    /**
     * @generated from field: events.StaticHostUserCreate StaticHostUserCreate = 179;
     */
    value: StaticHostUserCreate;
    case: "StaticHostUserCreate";
  } | {
    /**
     * @generated from field: events.StaticHostUserUpdate StaticHostUserUpdate = 180;
     */
    value: StaticHostUserUpdate;
    case: "StaticHostUserUpdate";
  } | {
    /**
     * @generated from field: events.StaticHostUserDelete StaticHostUserDelete = 181;
     */
    value: StaticHostUserDelete;
    case: "StaticHostUserDelete";
  } | {
    /**
     * @generated from field: events.CrownJewelCreate CrownJewelCreate = 182;
     */
    value: CrownJewelCreate;
    case: "CrownJewelCreate";
  } | {
    /**
     * @generated from field: events.CrownJewelUpdate CrownJewelUpdate = 183;
     */
    value: CrownJewelUpdate;
    case: "CrownJewelUpdate";
  } | {
    /**
     * @generated from field: events.CrownJewelDelete CrownJewelDelete = 184;
     */
    value: CrownJewelDelete;
    case: "CrownJewelDelete";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message events.OneOf.
 * Use `create(OneOfSchema)` to create a new message.
 */
export const OneOfSchema: GenMessage<OneOf> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 140);

/**
 * StreamStatus reflects stream status
 *
 * @generated from message events.StreamStatus
 */
export type StreamStatus = Message<"events.StreamStatus"> & {
  /**
   * UploadID represents upload ID
   *
   * @generated from field: string UploadID = 1;
   */
  UploadID: string;

  /**
   * LastEventIndex updates last event index
   *
   * @generated from field: int64 LastEventIndex = 2;
   */
  LastEventIndex: bigint;

  /**
   * LastUploadTime is the time of the last upload
   *
   * @generated from field: google.protobuf.Timestamp LastUploadTime = 3;
   */
  LastUploadTime?: Timestamp;
};

/**
 * Describes the message events.StreamStatus.
 * Use `create(StreamStatusSchema)` to create a new message.
 */
export const StreamStatusSchema: GenMessage<StreamStatus> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 141);

/**
 * SessionUpload is a session upload
 *
 * @generated from message events.SessionUpload
 */
export type SessionUpload = Message<"events.SessionUpload"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * SessionMetadata is a common event session metadata
   *
   * @generated from field: events.SessionMetadata SessionMetadata = 2;
   */
  SessionMetadata?: SessionMetadata;

  /**
   * URL is where the url the session event data upload is at
   *
   * @generated from field: string SessionURL = 5;
   */
  SessionURL: string;
};

/**
 * Describes the message events.SessionUpload.
 * Use `create(SessionUploadSchema)` to create a new message.
 */
export const SessionUploadSchema: GenMessage<SessionUpload> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 142);

/**
 * Identity matches github.com/gravitational/teleport/lib/tlsca.Identity except
 * for RouteToApp and RouteToDatabase which are nullable and Traits which is
 * represented as a google.protobuf.Struct (still containing a map from string
 * to strings). Field names match other names already used in other events
 * rather than the field names in tlsca.Identity.
 *
 * @generated from message events.Identity
 */
export type Identity = Message<"events.Identity"> & {
  /**
   * User is a username or name of the node connection
   *
   * @generated from field: string User = 1;
   */
  User: string;

  /**
   * Impersonator is a username of a user impersonating this user
   *
   * @generated from field: string Impersonator = 2;
   */
  Impersonator: string;

  /**
   * Roles is a list of groups (Teleport roles) encoded in the identity
   *
   * @generated from field: repeated string Roles = 3;
   */
  Roles: string[];

  /**
   * Usage is a list of usage restrictions encoded in the identity
   *
   * @generated from field: repeated string Usage = 4;
   */
  Usage: string[];

  /**
   * Logins is a list of Unix logins allowed.
   *
   * @generated from field: repeated string Logins = 5;
   */
  Logins: string[];

  /**
   * KubernetesGroups is a list of Kubernetes groups allowed
   *
   * @generated from field: repeated string KubernetesGroups = 6;
   */
  KubernetesGroups: string[];

  /**
   * KubernetesUsers is a list of Kubernetes users allowed
   *
   * @generated from field: repeated string KubernetesUsers = 7;
   */
  KubernetesUsers: string[];

  /**
   * Expires specifies whenever the session will expire
   *
   * @generated from field: google.protobuf.Timestamp Expires = 8;
   */
  Expires?: Timestamp;

  /**
   * RouteToCluster specifies the target cluster
   * if present in the session
   *
   * @generated from field: string RouteToCluster = 9;
   */
  RouteToCluster: string;

  /**
   * KubernetesCluster specifies the target kubernetes cluster for TLS
   * identities. This can be empty on older Teleport clients.
   *
   * @generated from field: string KubernetesCluster = 10;
   */
  KubernetesCluster: string;

  /**
   * Traits hold claim data used to populate a role at runtime.
   *
   * @generated from field: wrappers.LabelValues Traits = 11;
   */
  Traits?: LabelValues;

  /**
   * RouteToApp holds routing information for applications. Routing metadata
   * allows Teleport web proxy to route HTTP requests to the appropriate
   * cluster and Teleport application proxy within the cluster.
   *
   * @generated from field: events.RouteToApp RouteToApp = 12;
   */
  RouteToApp?: RouteToApp;

  /**
   * TeleportCluster is the name of the teleport cluster that this identity
   * originated from. For TLS certs this may not be the same as cert issuer,
   * in case of multi-hop requests that originate from a remote cluster.
   *
   * @generated from field: string TeleportCluster = 13;
   */
  TeleportCluster: string;

  /**
   * RouteToDatabase contains routing information for databases.
   *
   * @generated from field: events.RouteToDatabase RouteToDatabase = 14;
   */
  RouteToDatabase?: RouteToDatabase;

  /**
   * DatabaseNames is a list of allowed database names.
   *
   * @generated from field: repeated string DatabaseNames = 15;
   */
  DatabaseNames: string[];

  /**
   * DatabaseUsers is a list of allowed database users.
   *
   * @generated from field: repeated string DatabaseUsers = 16;
   */
  DatabaseUsers: string[];

  /**
   * MFADeviceUUID is the UUID of an MFA device when this Identity was
   * confirmed immediately after an MFA check.
   *
   * @generated from field: string MFADeviceUUID = 17;
   */
  MFADeviceUUID: string;

  /**
   * ClientIP is an observed IP of the client that this Identity represents.
   *
   * @generated from field: string ClientIP = 18;
   */
  ClientIP: string;

  /**
   * AWSRoleARNs is a list of allowed AWS role ARNs user can assume.
   *
   * @generated from field: repeated string AWSRoleARNs = 19;
   */
  AWSRoleARNs: string[];

  /**
   * AccessRequests is a list of UUIDs of active requests for this Identity.
   *
   * @generated from field: repeated string AccessRequests = 20;
   */
  AccessRequests: string[];

  /**
   * DisallowReissue is a flag that, if set, instructs the auth server to
   * deny any attempts to reissue new certificates while authenticated with
   * this certificate.
   *
   * @generated from field: bool DisallowReissue = 21;
   */
  DisallowReissue: boolean;

  /**
   * AllowedResourceIds is the list of resources which the identity will be
   * allowed to access. An empty list indicates that no resource-specific
   * restrictions will be applied.
   *
   * @generated from field: repeated events.ResourceID AllowedResourceIDs = 22;
   */
  AllowedResourceIDs: ResourceID[];

  /**
   * PreviousIdentityExpires is the expiry time of the identity/cert that this
   * identity/cert was derived from. It is used to determine a session's hard
   * deadline in cases where both require_session_mfa and disconnect_expired_cert
   * are enabled. See https://github.com/gravitational/teleport/issues/18544.
   *
   * @generated from field: google.protobuf.Timestamp PreviousIdentityExpires = 23;
   */
  PreviousIdentityExpires?: Timestamp;

  /**
   * AzureIdentities is a list of allowed Azure identities user can assume.
   *
   * @generated from field: repeated string AzureIdentities = 24;
   */
  AzureIdentities: string[];

  /**
   * GCPServiceAccounts is a list of allowed GCP service accounts user can assume.
   *
   * @generated from field: repeated string GCPServiceAccounts = 25;
   */
  GCPServiceAccounts: string[];

  /**
   * PrivateKeyPolicy is the private key policy of the user's private key.
   *
   * @generated from field: string PrivateKeyPolicy = 26;
   */
  PrivateKeyPolicy: string;

  /**
   * BotName indicates the name of the Machine ID bot this identity was issued
   * to, if any.
   *
   * @generated from field: string BotName = 27;
   */
  BotName: string;

  /**
   * DeviceExtensions holds the device trust device extensions for the identity,
   * if any.
   *
   * @generated from field: events.DeviceExtensions DeviceExtensions = 28;
   */
  DeviceExtensions?: DeviceExtensions;

  /**
   * BotInstanceID indicates the name of the Machine ID bot instance this
   * identity was issued to, if any.
   *
   * @generated from field: string BotInstanceID = 29;
   */
  BotInstanceID: string;
};

/**
 * Describes the message events.Identity.
 * Use `create(IdentitySchema)` to create a new message.
 */
export const IdentitySchema: GenMessage<Identity> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 143);

/**
 * RouteToApp contains parameters for application access certificate requests.
 *
 * @generated from message events.RouteToApp
 */
export type RouteToApp = Message<"events.RouteToApp"> & {
  /**
   * Name is the application name certificate is being requested for.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;

  /**
   * SessionID is the ID of the application session.
   *
   * @generated from field: string SessionID = 2;
   */
  SessionID: string;

  /**
   * PublicAddr is the application public address.
   *
   * @generated from field: string PublicAddr = 3;
   */
  PublicAddr: string;

  /**
   * ClusterName is the cluster where the application resides.
   *
   * @generated from field: string ClusterName = 4;
   */
  ClusterName: string;

  /**
   * AWSRoleARN is the AWS role to assume when accessing AWS API.
   *
   * @generated from field: string AWSRoleARN = 5;
   */
  AWSRoleARN: string;

  /**
   * AzureIdentity is the Azure identity ot assume when accessing Azure API.
   *
   * @generated from field: string AzureIdentity = 6;
   */
  AzureIdentity: string;

  /**
   * GCPServiceAccount is the GCP service account to assume when accessing GCP API.
   *
   * @generated from field: string GCPServiceAccount = 7;
   */
  GCPServiceAccount: string;

  /**
   * URI is the application URI.
   *
   * @generated from field: string URI = 8;
   */
  URI: string;
};

/**
 * Describes the message events.RouteToApp.
 * Use `create(RouteToAppSchema)` to create a new message.
 */
export const RouteToAppSchema: GenMessage<RouteToApp> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 144);

/**
 * RouteToDatabase combines parameters for database service routing information.
 *
 * @generated from message events.RouteToDatabase
 */
export type RouteToDatabase = Message<"events.RouteToDatabase"> & {
  /**
   * ServiceName is the Teleport database proxy service name the cert is for.
   *
   * @generated from field: string ServiceName = 1;
   */
  ServiceName: string;

  /**
   * Protocol is the type of the database the cert is for.
   *
   * @generated from field: string Protocol = 2;
   */
  Protocol: string;

  /**
   * Username is an optional database username to embed.
   *
   * @generated from field: string Username = 3;
   */
  Username: string;

  /**
   * Database is an optional database name to embed.
   *
   * @generated from field: string Database = 4;
   */
  Database: string;

  /**
   * Roles is an optional list of database roles to embed.
   *
   * @generated from field: repeated string Roles = 5;
   */
  Roles: string[];
};

/**
 * Describes the message events.RouteToDatabase.
 * Use `create(RouteToDatabaseSchema)` to create a new message.
 */
export const RouteToDatabaseSchema: GenMessage<RouteToDatabase> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 145);

/**
 * DeviceExtensions holds certificate extensions (X.509 and SSH) for device
 * trust.
 *
 * Mimics tlsca.DeviceExtensions.
 *
 * @generated from message events.DeviceExtensions
 */
export type DeviceExtensions = Message<"events.DeviceExtensions"> & {
  /**
   * DeviceID is the trusted device identifier.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  /**
   * AssetTag is the device inventory identifier.
   *
   * @generated from field: string asset_tag = 2;
   */
  assetTag: string;

  /**
   * CredentialID is the identifier for the credential used by the device to
   * authenticate itself.
   *
   * @generated from field: string credential_id = 3;
   */
  credentialId: string;
};

/**
 * Describes the message events.DeviceExtensions.
 * Use `create(DeviceExtensionsSchema)` to create a new message.
 */
export const DeviceExtensionsSchema: GenMessage<DeviceExtensions> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 146);

/**
 * AccessRequestResourceSearch is emitted when a user searches for resources as
 * part of a search-based access request
 *
 * @generated from message events.AccessRequestResourceSearch
 */
export type AccessRequestResourceSearch = Message<"events.AccessRequestResourceSearch"> & {
  /**
   * Metadata is common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is common user metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SearchAsRoles is the list of roles the search was performed as.
   *
   * @generated from field: repeated string SearchAsRoles = 3;
   */
  SearchAsRoles: string[];

  /**
   * ResourceType is the type of resource being searched for.
   *
   * @generated from field: string ResourceType = 4;
   */
  ResourceType: string;

  /**
   * Namespace is the namespace of resources.
   *
   * @generated from field: string Namespace = 5;
   */
  Namespace: string;

  /**
   * Labels is the label-based matcher used for the search.
   *
   * @generated from field: map<string, string> Labels = 6;
   */
  Labels: { [key: string]: string };

  /**
   * PredicateExpression is the list of boolean conditions that were used for the search.
   *
   * @generated from field: string PredicateExpression = 7;
   */
  PredicateExpression: string;

  /**
   * SearchKeywords is the list of search keywords used to match against resource field values.
   *
   * @generated from field: repeated string SearchKeywords = 8;
   */
  SearchKeywords: string[];
};

/**
 * Describes the message events.AccessRequestResourceSearch.
 * Use `create(AccessRequestResourceSearchSchema)` to create a new message.
 */
export const AccessRequestResourceSearchSchema: GenMessage<AccessRequestResourceSearch> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 147);

/**
 * MySQLStatementPrepare is emitted when a MySQL client creates a prepared
 * statement using the prepared statement protocol.
 *
 * @generated from message events.MySQLStatementPrepare
 */
export type MySQLStatementPrepare = Message<"events.MySQLStatementPrepare"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * Query is the prepared statement query.
   *
   * @generated from field: string Query = 5;
   */
  Query: string;
};

/**
 * Describes the message events.MySQLStatementPrepare.
 * Use `create(MySQLStatementPrepareSchema)` to create a new message.
 */
export const MySQLStatementPrepareSchema: GenMessage<MySQLStatementPrepare> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 148);

/**
 * MySQLStatementExecute is emitted when a MySQL client executes a prepared
 * statement using the prepared statement protocol.
 *
 * @generated from message events.MySQLStatementExecute
 */
export type MySQLStatementExecute = Message<"events.MySQLStatementExecute"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * StatementID is the identifier of the prepared statement.
   *
   * @generated from field: uint32 StatementID = 5;
   */
  StatementID: number;

  /**
   * Parameters are the parameters used to execute the prepared statement.
   *
   * @generated from field: repeated string Parameters = 6;
   */
  Parameters: string[];
};

/**
 * Describes the message events.MySQLStatementExecute.
 * Use `create(MySQLStatementExecuteSchema)` to create a new message.
 */
export const MySQLStatementExecuteSchema: GenMessage<MySQLStatementExecute> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 149);

/**
 * MySQLStatementSendLongData is emitted when a MySQL client sends long bytes
 * stream using the prepared statement protocol.
 *
 * @generated from message events.MySQLStatementSendLongData
 */
export type MySQLStatementSendLongData = Message<"events.MySQLStatementSendLongData"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * StatementID is the identifier of the prepared statement.
   *
   * @generated from field: uint32 StatementID = 5;
   */
  StatementID: number;

  /**
   * ParameterID is the identifier of the parameter.
   *
   * @generated from field: uint32 ParameterID = 6;
   */
  ParameterID: number;

  /**
   * DataSize is the size of the data.
   *
   * @generated from field: uint32 DataSize = 7;
   */
  DataSize: number;
};

/**
 * Describes the message events.MySQLStatementSendLongData.
 * Use `create(MySQLStatementSendLongDataSchema)` to create a new message.
 */
export const MySQLStatementSendLongDataSchema: GenMessage<MySQLStatementSendLongData> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 150);

/**
 * MySQLStatementClose is emitted when a MySQL client deallocates a prepared
 * statement using the prepared statement protocol.
 *
 * @generated from message events.MySQLStatementClose
 */
export type MySQLStatementClose = Message<"events.MySQLStatementClose"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * StatementID is the identifier of the prepared statement.
   *
   * @generated from field: uint32 StatementID = 5;
   */
  StatementID: number;
};

/**
 * Describes the message events.MySQLStatementClose.
 * Use `create(MySQLStatementCloseSchema)` to create a new message.
 */
export const MySQLStatementCloseSchema: GenMessage<MySQLStatementClose> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 151);

/**
 * MySQLStatementReset is emitted when a MySQL client resets the data of a
 * prepared statement using the prepared statement protocol.
 *
 * @generated from message events.MySQLStatementReset
 */
export type MySQLStatementReset = Message<"events.MySQLStatementReset"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * StatementID is the identifier of the prepared statement.
   *
   * @generated from field: uint32 StatementID = 5;
   */
  StatementID: number;
};

/**
 * Describes the message events.MySQLStatementReset.
 * Use `create(MySQLStatementResetSchema)` to create a new message.
 */
export const MySQLStatementResetSchema: GenMessage<MySQLStatementReset> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 152);

/**
 * MySQLStatementFetch is emitted when a MySQL client fetches rows from a
 * prepared statement using the prepared statement protocol.
 *
 * @generated from message events.MySQLStatementFetch
 */
export type MySQLStatementFetch = Message<"events.MySQLStatementFetch"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * StatementID is the identifier of the prepared statement.
   *
   * @generated from field: uint32 StatementID = 5;
   */
  StatementID: number;

  /**
   * RowsCount is the number of rows to fetch.
   *
   * @generated from field: uint32 RowsCount = 6;
   */
  RowsCount: number;
};

/**
 * Describes the message events.MySQLStatementFetch.
 * Use `create(MySQLStatementFetchSchema)` to create a new message.
 */
export const MySQLStatementFetchSchema: GenMessage<MySQLStatementFetch> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 153);

/**
 * MySQLStatementBulkExecute is emitted when a MySQL client executes a bulk
 * insert of a prepared statement using the prepared statement protocol.
 *
 * @generated from message events.MySQLStatementBulkExecute
 */
export type MySQLStatementBulkExecute = Message<"events.MySQLStatementBulkExecute"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * StatementID is the identifier of the prepared statement.
   *
   * @generated from field: uint32 StatementID = 5;
   */
  StatementID: number;

  /**
   * Parameters are the parameters used to execute the prepared statement.
   *
   * @generated from field: repeated string Parameters = 6;
   */
  Parameters: string[];
};

/**
 * Describes the message events.MySQLStatementBulkExecute.
 * Use `create(MySQLStatementBulkExecuteSchema)` to create a new message.
 */
export const MySQLStatementBulkExecuteSchema: GenMessage<MySQLStatementBulkExecute> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 154);

/**
 * MySQLInitDB is emitted when a MySQL client changes the default schema for
 * the connection.
 *
 * @generated from message events.MySQLInitDB
 */
export type MySQLInitDB = Message<"events.MySQLInitDB"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * SchemaName is the name of the schema to use.
   *
   * @generated from field: string SchemaName = 5;
   */
  SchemaName: string;
};

/**
 * Describes the message events.MySQLInitDB.
 * Use `create(MySQLInitDBSchema)` to create a new message.
 */
export const MySQLInitDBSchema: GenMessage<MySQLInitDB> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 155);

/**
 * MySQLCreateDB is emitted when a MySQL client creates a schema.
 *
 * @generated from message events.MySQLCreateDB
 */
export type MySQLCreateDB = Message<"events.MySQLCreateDB"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * SchemaName is the name of the schema to create.
   *
   * @generated from field: string SchemaName = 5;
   */
  SchemaName: string;
};

/**
 * Describes the message events.MySQLCreateDB.
 * Use `create(MySQLCreateDBSchema)` to create a new message.
 */
export const MySQLCreateDBSchema: GenMessage<MySQLCreateDB> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 156);

/**
 * MySQLDropDB is emitted when a MySQL client drops a schema.
 *
 * @generated from message events.MySQLDropDB
 */
export type MySQLDropDB = Message<"events.MySQLDropDB"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * SchemaName is the name of the schema to drop.
   *
   * @generated from field: string SchemaName = 5;
   */
  SchemaName: string;
};

/**
 * Describes the message events.MySQLDropDB.
 * Use `create(MySQLDropDBSchema)` to create a new message.
 */
export const MySQLDropDBSchema: GenMessage<MySQLDropDB> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 157);

/**
 * MySQLShutDown is emitted when a MySQL client asks the server to shut down.
 *
 * @generated from message events.MySQLShutDown
 */
export type MySQLShutDown = Message<"events.MySQLShutDown"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;
};

/**
 * Describes the message events.MySQLShutDown.
 * Use `create(MySQLShutDownSchema)` to create a new message.
 */
export const MySQLShutDownSchema: GenMessage<MySQLShutDown> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 158);

/**
 * MySQLProcessKill is emitted when a MySQL client asks the server to terminate
 * a connection.
 *
 * @generated from message events.MySQLProcessKill
 */
export type MySQLProcessKill = Message<"events.MySQLProcessKill"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * ProcessID is the process ID of a connection.
   *
   * @generated from field: uint32 ProcessID = 5;
   */
  ProcessID: number;
};

/**
 * Describes the message events.MySQLProcessKill.
 * Use `create(MySQLProcessKillSchema)` to create a new message.
 */
export const MySQLProcessKillSchema: GenMessage<MySQLProcessKill> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 159);

/**
 * MySQLDebug is emitted when a MySQL client asks the server to dump internal
 * debug info to stdout.
 *
 * @generated from message events.MySQLDebug
 */
export type MySQLDebug = Message<"events.MySQLDebug"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;
};

/**
 * Describes the message events.MySQLDebug.
 * Use `create(MySQLDebugSchema)` to create a new message.
 */
export const MySQLDebugSchema: GenMessage<MySQLDebug> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 160);

/**
 * MySQLRefresh is emitted when a MySQL client sends refresh commands.
 *
 * @generated from message events.MySQLRefresh
 */
export type MySQLRefresh = Message<"events.MySQLRefresh"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * Subcommand is the string representation of the subcommand.
   *
   * @generated from field: string Subcommand = 5;
   */
  Subcommand: string;
};

/**
 * Describes the message events.MySQLRefresh.
 * Use `create(MySQLRefreshSchema)` to create a new message.
 */
export const MySQLRefreshSchema: GenMessage<MySQLRefresh> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 161);

/**
 * SQLServerRPCRequest is emitted when a user executes a MSSQL Server RPC command.
 *
 * @generated from message events.SQLServerRPCRequest
 */
export type SQLServerRPCRequest = Message<"events.SQLServerRPCRequest"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * Procname is the RPC SQL Server procedure name.
   *
   * @generated from field: string Procname = 5;
   */
  Procname: string;

  /**
   * Parameters are the RPC parameters used to execute RPC Procedure..
   *
   * @generated from field: repeated string Parameters = 6;
   */
  Parameters: string[];
};

/**
 * Describes the message events.SQLServerRPCRequest.
 * Use `create(SQLServerRPCRequestSchema)` to create a new message.
 */
export const SQLServerRPCRequestSchema: GenMessage<SQLServerRPCRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 162);

/**
 * DatabaseSessionMalformedPacket is emitted when a database sends a malformed packet.
 *
 * @generated from message events.DatabaseSessionMalformedPacket
 */
export type DatabaseSessionMalformedPacket = Message<"events.DatabaseSessionMalformedPacket"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * Payload is the malformed packet payload.
   *
   * @generated from field: bytes Payload = 5;
   */
  Payload: Uint8Array;
};

/**
 * Describes the message events.DatabaseSessionMalformedPacket.
 * Use `create(DatabaseSessionMalformedPacketSchema)` to create a new message.
 */
export const DatabaseSessionMalformedPacketSchema: GenMessage<DatabaseSessionMalformedPacket> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 163);

/**
 * ElasticsearchRequest is emitted when user executes an Elasticsearch request, which isn't
 * covered by API-specific events.
 *
 * @generated from message events.ElasticsearchRequest
 */
export type ElasticsearchRequest = Message<"events.ElasticsearchRequest"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * Path is relative path in the URL.
   *
   * @generated from field: string Path = 5;
   */
  Path: string;

  /**
   * RawQuery are the encoded query values.
   *
   * @generated from field: string RawQuery = 6;
   */
  RawQuery: string;

  /**
   * Method is the request HTTP method, like GET/POST/DELETE/etc.
   *
   * @generated from field: string Method = 7;
   */
  Method: string;

  /**
   * Body is the request HTTP body.
   *
   * @generated from field: bytes Body = 8;
   */
  Body: Uint8Array;

  /**
   * Headers are the HTTP request headers.
   *
   * @generated from field: wrappers.LabelValues Headers = 9;
   */
  Headers?: LabelValues;

  /**
   * Category represents the category if API being accessed in a given request.
   *
   * @generated from field: events.ElasticsearchCategory Category = 10;
   */
  Category: ElasticsearchCategory;

  /**
   * Target is an optional field indicating the target index or set of indices used as a subject of request.
   *
   * @generated from field: string Target = 11;
   */
  Target: string;

  /**
   * Query is an optional text of query (e.g. an SQL select statement for _sql API), if a request includes it.
   *
   * @generated from field: string Query = 12;
   */
  Query: string;

  /**
   * StatusCode is optional status code returned from the call to database.
   *
   * @generated from field: uint32 StatusCode = 13;
   */
  StatusCode: number;
};

/**
 * Describes the message events.ElasticsearchRequest.
 * Use `create(ElasticsearchRequestSchema)` to create a new message.
 */
export const ElasticsearchRequestSchema: GenMessage<ElasticsearchRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 164);

/**
 * OpenSearchRequest is emitted when a user executes a OpenSearch request via database-access.
 *
 * @generated from message events.OpenSearchRequest
 */
export type OpenSearchRequest = Message<"events.OpenSearchRequest"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * Path is relative path in the URL.
   *
   * @generated from field: string Path = 5;
   */
  Path: string;

  /**
   * RawQuery are the encoded query values.
   *
   * @generated from field: string RawQuery = 6;
   */
  RawQuery: string;

  /**
   * Method is the request HTTP method, like GET/POST/DELETE/etc.
   *
   * @generated from field: string Method = 7;
   */
  Method: string;

  /**
   * Body is the request HTTP body.
   *
   * @generated from field: bytes Body = 8;
   */
  Body: Uint8Array;

  /**
   * Headers are the HTTP request headers.
   *
   * @generated from field: wrappers.LabelValues Headers = 9;
   */
  Headers?: LabelValues;

  /**
   * Category represents the category if API being accessed in a given request.
   *
   * @generated from field: events.OpenSearchCategory Category = 10;
   */
  Category: OpenSearchCategory;

  /**
   * Target is an optional field indicating the target index or set of indices used as a subject of request.
   *
   * @generated from field: string Target = 11;
   */
  Target: string;

  /**
   * Query is an optional text of query (e.g. an SQL select statement for _sql API), if a request includes it.
   *
   * @generated from field: string Query = 12;
   */
  Query: string;

  /**
   * StatusCode is optional status code returned from the call to database.
   *
   * @generated from field: uint32 StatusCode = 13;
   */
  StatusCode: number;
};

/**
 * Describes the message events.OpenSearchRequest.
 * Use `create(OpenSearchRequestSchema)` to create a new message.
 */
export const OpenSearchRequestSchema: GenMessage<OpenSearchRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 165);

/**
 * DynamoDBRequest is emitted when a user executes a DynamoDB request via database-access.
 *
 * @generated from message events.DynamoDBRequest
 */
export type DynamoDBRequest = Message<"events.DynamoDBRequest"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * @generated from field: uint32 StatusCode = 5;
   */
  StatusCode: number;

  /**
   * Path is relative path in the URL.
   *
   * @generated from field: string Path = 6;
   */
  Path: string;

  /**
   * RawQuery are the encoded query values.
   *
   * @generated from field: string RawQuery = 7;
   */
  RawQuery: string;

  /**
   * Method is the request HTTP method, like GET/POST/DELETE/etc.
   *
   * @generated from field: string Method = 8;
   */
  Method: string;

  /**
   * Target is the API target in the X-Amz-Target header.
   *
   * @generated from field: string Target = 9;
   */
  Target: string;

  /**
   * Body is the HTTP request json body.
   * The Struct type is a wrapper around protobuf/types.Struct and is used to marshal the JSON body correctly.
   *
   * @generated from field: google.protobuf.Struct Body = 10;
   */
  Body?: JsonObject;
};

/**
 * Describes the message events.DynamoDBRequest.
 * Use `create(DynamoDBRequestSchema)` to create a new message.
 */
export const DynamoDBRequestSchema: GenMessage<DynamoDBRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 166);

/**
 * AppSessionDynamoDBRequest is emitted when a user executes a DynamoDB request via app access.
 *
 * @generated from message events.AppSessionDynamoDBRequest
 */
export type AppSessionDynamoDBRequest = Message<"events.AppSessionDynamoDBRequest"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * App is a common application resource metadata.
   *
   * @generated from field: events.AppMetadata App = 3;
   */
  App?: AppMetadata;

  /**
   * AWS contains extra AWS metadata of the request.
   *
   * @generated from field: events.AWSRequestMetadata AWS = 4;
   */
  AWS?: AWSRequestMetadata;

  /**
   * SessionChunkID is the ID of the app session chunk that this request belongs to.
   * This is more appropriate to include than the app session id, since it is the chunk
   * id that is needed to play back the session chunk with tsh. The session chunk event
   * already includes the app session id.
   *
   * @generated from field: string SessionChunkID = 5;
   */
  SessionChunkID: string;

  /**
   * StatusCode the HTTP response code for the request.
   *
   * @generated from field: uint32 StatusCode = 6;
   */
  StatusCode: number;

  /**
   * Path is relative path in the URL.
   *
   * @generated from field: string Path = 7;
   */
  Path: string;

  /**
   * RawQuery are the encoded query values.
   *
   * @generated from field: string RawQuery = 8;
   */
  RawQuery: string;

  /**
   * Method is the request HTTP method, like GET/POST/DELETE/etc.
   *
   * @generated from field: string Method = 9;
   */
  Method: string;

  /**
   * Target is the API target in the X-Amz-Target header.
   *
   * @generated from field: string Target = 10;
   */
  Target: string;

  /**
   * Body is the HTTP request json body.
   * The Struct type is a wrapper around protobuf/types.Struct and is used to marshal the JSON body correctly.
   *
   * @generated from field: google.protobuf.Struct Body = 11;
   */
  Body?: JsonObject;
};

/**
 * Describes the message events.AppSessionDynamoDBRequest.
 * Use `create(AppSessionDynamoDBRequestSchema)` to create a new message.
 */
export const AppSessionDynamoDBRequestSchema: GenMessage<AppSessionDynamoDBRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 167);

/**
 * UpgradeWindowStartMetadata contains common upgrade window information.
 *
 * @generated from message events.UpgradeWindowStartMetadata
 */
export type UpgradeWindowStartMetadata = Message<"events.UpgradeWindowStartMetadata"> & {
  /**
   * UpgradeWindowStart is the upgrade window time.
   *
   * @generated from field: string UpgradeWindowStart = 1;
   */
  UpgradeWindowStart: string;
};

/**
 * Describes the message events.UpgradeWindowStartMetadata.
 * Use `create(UpgradeWindowStartMetadataSchema)` to create a new message.
 */
export const UpgradeWindowStartMetadataSchema: GenMessage<UpgradeWindowStartMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 168);

/**
 * UpgradeWindowStartUpdate is emitted when a user updates the cloud upgrade window start time.
 *
 * @generated from message events.UpgradeWindowStartUpdate
 */
export type UpgradeWindowStartUpdate = Message<"events.UpgradeWindowStartUpdate"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * UpgradeWindowStartMetadata contains upgrade window related metadata.
   *
   * @generated from field: events.UpgradeWindowStartMetadata UpgradeWindowStart = 4;
   */
  UpgradeWindowStart?: UpgradeWindowStartMetadata;
};

/**
 * Describes the message events.UpgradeWindowStartUpdate.
 * Use `create(UpgradeWindowStartUpdateSchema)` to create a new message.
 */
export const UpgradeWindowStartUpdateSchema: GenMessage<UpgradeWindowStartUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 169);

/**
 * SessionRecordingAccess is emitted when a session recording is accessed, allowing
 * session views to be included in the audit log
 *
 * @generated from message events.SessionRecordingAccess
 */
export type SessionRecordingAccess = Message<"events.SessionRecordingAccess"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * SessionID is the ID of the session.
   *
   * @generated from field: string SessionID = 2;
   */
  SessionID: string;

  /**
   * UserMetadata is a common user event metadata.
   *
   * @generated from field: events.UserMetadata UserMetadata = 3;
   */
  UserMetadata?: UserMetadata;
};

/**
 * Describes the message events.SessionRecordingAccess.
 * Use `create(SessionRecordingAccessSchema)` to create a new message.
 */
export const SessionRecordingAccessSchema: GenMessage<SessionRecordingAccess> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 170);

/**
 * KubeClusterMetadata contains common kubernetes cluster information.
 *
 * @generated from message events.KubeClusterMetadata
 */
export type KubeClusterMetadata = Message<"events.KubeClusterMetadata"> & {
  /**
   * KubeLabels are the configured cluster labels.
   *
   * @generated from field: map<string, string> KubeLabels = 1;
   */
  KubeLabels: { [key: string]: string };
};

/**
 * Describes the message events.KubeClusterMetadata.
 * Use `create(KubeClusterMetadataSchema)` to create a new message.
 */
export const KubeClusterMetadataSchema: GenMessage<KubeClusterMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 171);

/**
 * KubernetesClusterCreate is emitted when a new kubernetes cluster resource is created.
 *
 * @generated from message events.KubernetesClusterCreate
 */
export type KubernetesClusterCreate = Message<"events.KubernetesClusterCreate"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata.
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * KubeClusterMetadata is a common kubernetes resource metadata.
   *
   * @generated from field: events.KubeClusterMetadata KubeClusterMetadata = 4;
   */
  KubeClusterMetadata?: KubeClusterMetadata;
};

/**
 * Describes the message events.KubernetesClusterCreate.
 * Use `create(KubernetesClusterCreateSchema)` to create a new message.
 */
export const KubernetesClusterCreateSchema: GenMessage<KubernetesClusterCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 172);

/**
 * KubernetesClusterUpdate is emitted when an existing kubernetes cluster resource is updated.
 *
 * @generated from message events.KubernetesClusterUpdate
 */
export type KubernetesClusterUpdate = Message<"events.KubernetesClusterUpdate"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata.
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * KubeClusterMetadata is a common kubernetes resource metadata.
   *
   * @generated from field: events.KubeClusterMetadata KubeClusterMetadata = 4;
   */
  KubeClusterMetadata?: KubeClusterMetadata;
};

/**
 * Describes the message events.KubernetesClusterUpdate.
 * Use `create(KubernetesClusterUpdateSchema)` to create a new message.
 */
export const KubernetesClusterUpdateSchema: GenMessage<KubernetesClusterUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 173);

/**
 * KubernetesClusterDelete is emitted when a kubernetes cluster resource is deleted.
 *
 * @generated from message events.KubernetesClusterDelete
 */
export type KubernetesClusterDelete = Message<"events.KubernetesClusterDelete"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ResourceMetadata is a common resource event metadata.
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;
};

/**
 * Describes the message events.KubernetesClusterDelete.
 * Use `create(KubernetesClusterDeleteSchema)` to create a new message.
 */
export const KubernetesClusterDeleteSchema: GenMessage<KubernetesClusterDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 174);

/**
 * SSMRun is emitted after an AWS SSM document completes execution.
 *
 * @generated from message events.SSMRun
 */
export type SSMRun = Message<"events.SSMRun"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * CommandID is the id of the SSM command that was run.
   *
   * @generated from field: string CommandID = 2;
   */
  CommandID: string;

  /**
   * InstanceID is the id of the EC2 instance the command was run on.
   *
   * @generated from field: string InstanceID = 3;
   */
  InstanceID: string;

  /**
   * ExitCode is the exit code resulting from the script run.
   *
   * @generated from field: int64 ExitCode = 4;
   */
  ExitCode: bigint;

  /**
   * Status represents the success or failure status of a script run.
   *
   * @generated from field: string Status = 5;
   */
  Status: string;

  /**
   * AccountID is the id of the AWS account that ran the command.
   *
   * @generated from field: string AccountID = 6;
   */
  AccountID: string;

  /**
   * Region is the AWS region the command was ran in.
   *
   * @generated from field: string Region = 7;
   */
  Region: string;

  /**
   * StandardOutput contains the stdout of the executed command.
   * Only the first 24000 chars are returned.
   *
   * @generated from field: string StandardOutput = 8;
   */
  StandardOutput: string;

  /**
   * StandardError contains the stderr of the executed command.
   * Only the first 24000 chars are returned.
   *
   * @generated from field: string StandardError = 9;
   */
  StandardError: string;

  /**
   * InvocationURL is a link to AWS Web Console for this invocation.
   * An invocation is the execution of a Command in an Instance.
   *
   * @generated from field: string InvocationURL = 10;
   */
  InvocationURL: string;
};

/**
 * Describes the message events.SSMRun.
 * Use `create(SSMRunSchema)` to create a new message.
 */
export const SSMRunSchema: GenMessage<SSMRun> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 175);

/**
 * CassandraSession is emitted when a Cassandra client sends
 * the prepare a CQL statement.
 *
 * @generated from message events.CassandraPrepare
 */
export type CassandraPrepare = Message<"events.CassandraPrepare"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * Query is the CQL statement.
   *
   * @generated from field: string Query = 5;
   */
  Query: string;

  /**
   * Keyspace is the keyspace the statement is in.
   *
   * @generated from field: string Keyspace = 6;
   */
  Keyspace: string;
};

/**
 * Describes the message events.CassandraPrepare.
 * Use `create(CassandraPrepareSchema)` to create a new message.
 */
export const CassandraPrepareSchema: GenMessage<CassandraPrepare> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 176);

/**
 * CassandraExecute is emitted when a Cassandra client executes a CQL statement.
 *
 * @generated from message events.CassandraExecute
 */
export type CassandraExecute = Message<"events.CassandraExecute"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * QueryId is the prepared query id to execute.
   *
   * @generated from field: string QueryId = 5;
   */
  QueryId: string;
};

/**
 * Describes the message events.CassandraExecute.
 * Use `create(CassandraExecuteSchema)` to create a new message.
 */
export const CassandraExecuteSchema: GenMessage<CassandraExecute> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 177);

/**
 * CassandraBatch is emitted when a Cassandra client executes a batch of CQL statements.
 *
 * @generated from message events.CassandraBatch
 */
export type CassandraBatch = Message<"events.CassandraBatch"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * Consistency is the consistency level to use.
   *
   * @generated from field: string Consistency = 5;
   */
  Consistency: string;

  /**
   * Keyspace is the keyspace the statement is in.
   *
   * @generated from field: string Keyspace = 6;
   */
  Keyspace: string;

  /**
   * BatchType is the type of batch.
   *
   * @generated from field: string BatchType = 7;
   */
  BatchType: string;

  /**
   * Children is batch children statements.
   *
   * @generated from field: repeated events.CassandraBatch.BatchChild Children = 8;
   */
  Children: CassandraBatch_BatchChild[];
};

/**
 * Describes the message events.CassandraBatch.
 * Use `create(CassandraBatchSchema)` to create a new message.
 */
export const CassandraBatchSchema: GenMessage<CassandraBatch> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 178);

/**
 * BatchChild represents a single child batch statement.
 *
 * @generated from message events.CassandraBatch.BatchChild
 */
export type CassandraBatch_BatchChild = Message<"events.CassandraBatch.BatchChild"> & {
  /**
   * ID is the id of the statement.
   *
   * @generated from field: string ID = 1;
   */
  ID: string;

  /**
   * Query the CQL statement to execute.
   *
   * @generated from field: string Query = 2;
   */
  Query: string;

  /**
   * Values is the values to bind to the query.
   *
   * @generated from field: repeated events.CassandraBatch.BatchChild.Value Values = 3;
   */
  Values: CassandraBatch_BatchChild_Value[];
};

/**
 * Describes the message events.CassandraBatch.BatchChild.
 * Use `create(CassandraBatch_BatchChildSchema)` to create a new message.
 */
export const CassandraBatch_BatchChildSchema: GenMessage<CassandraBatch_BatchChild> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 178, 0);

/**
 * Value is a single value to bind to the query.
 *
 * @generated from message events.CassandraBatch.BatchChild.Value
 */
export type CassandraBatch_BatchChild_Value = Message<"events.CassandraBatch.BatchChild.Value"> & {
  /**
   * Type is the type of the value.
   *
   * @generated from field: uint32 Type = 1;
   */
  Type: number;

  /**
   * Contents is the value contents.
   *
   * @generated from field: bytes Contents = 2;
   */
  Contents: Uint8Array;
};

/**
 * Describes the message events.CassandraBatch.BatchChild.Value.
 * Use `create(CassandraBatch_BatchChild_ValueSchema)` to create a new message.
 */
export const CassandraBatch_BatchChild_ValueSchema: GenMessage<CassandraBatch_BatchChild_Value> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 178, 0, 0);

/**
 * CassandraRegister is emitted when a Cassandra client
 * request to register for the specified event types.
 *
 * @generated from message events.CassandraRegister
 */
export type CassandraRegister = Message<"events.CassandraRegister"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * EventTypes is the list of event types to register for.
   *
   * @generated from field: repeated string EventTypes = 5;
   */
  EventTypes: string[];
};

/**
 * Describes the message events.CassandraRegister.
 * Use `create(CassandraRegisterSchema)` to create a new message.
 */
export const CassandraRegisterSchema: GenMessage<CassandraRegister> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 179);

/**
 * LoginRuleCreate is emitted when a login rule is created or updated.
 *
 * @generated from message events.LoginRuleCreate
 */
export type LoginRuleCreate = Message<"events.LoginRuleCreate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;
};

/**
 * Describes the message events.LoginRuleCreate.
 * Use `create(LoginRuleCreateSchema)` to create a new message.
 */
export const LoginRuleCreateSchema: GenMessage<LoginRuleCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 180);

/**
 * LoginRuleDelete is emitted when a login rule is deleted
 *
 * @generated from message events.LoginRuleDelete
 */
export type LoginRuleDelete = Message<"events.LoginRuleDelete"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;
};

/**
 * Describes the message events.LoginRuleDelete.
 * Use `create(LoginRuleDeleteSchema)` to create a new message.
 */
export const LoginRuleDeleteSchema: GenMessage<LoginRuleDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 181);

/**
 * SAMLIdPAuthAttempt is emitted when a user has attempted to authorize against the SAML IdP.
 *
 * @generated from message events.SAMLIdPAuthAttempt
 */
export type SAMLIdPAuthAttempt = Message<"events.SAMLIdPAuthAttempt"> & {
  /**
   * Metadata is common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is common event session metadata
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Status indicates whether the SAML IdP authentication was successful.
   *
   * @generated from field: events.Status Status = 4;
   */
  Status?: Status;

  /**
   * SAMLIdPServiceProviderMetadata is common SAML IdP service provider event metadata
   *
   * @generated from field: events.SAMLIdPServiceProviderMetadata ServiceProvider = 5;
   */
  ServiceProvider?: SAMLIdPServiceProviderMetadata;
};

/**
 * Describes the message events.SAMLIdPAuthAttempt.
 * Use `create(SAMLIdPAuthAttemptSchema)` to create a new message.
 */
export const SAMLIdPAuthAttemptSchema: GenMessage<SAMLIdPAuthAttempt> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 182);

/**
 * SAMLIdPServiceProviderCreate is emitted when a service provider has been added.
 *
 * @generated from message events.SAMLIdPServiceProviderCreate
 */
export type SAMLIdPServiceProviderCreate = Message<"events.SAMLIdPServiceProviderCreate"> & {
  /**
   * Metadata is common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * SAMLIdPServiceProviderMetadata is common SAML IdP service provider event metadata
   *
   * @generated from field: events.SAMLIdPServiceProviderMetadata ServiceProvider = 3;
   */
  ServiceProvider?: SAMLIdPServiceProviderMetadata;
};

/**
 * Describes the message events.SAMLIdPServiceProviderCreate.
 * Use `create(SAMLIdPServiceProviderCreateSchema)` to create a new message.
 */
export const SAMLIdPServiceProviderCreateSchema: GenMessage<SAMLIdPServiceProviderCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 183);

/**
 * SAMLIdPServiceProviderUpdate is emitted when a service provider has been updated.
 *
 * @generated from message events.SAMLIdPServiceProviderUpdate
 */
export type SAMLIdPServiceProviderUpdate = Message<"events.SAMLIdPServiceProviderUpdate"> & {
  /**
   * Metadata is common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * SAMLIdPServiceProviderMetadata is common SAML IdP service provider event metadata
   *
   * @generated from field: events.SAMLIdPServiceProviderMetadata ServiceProvider = 3;
   */
  ServiceProvider?: SAMLIdPServiceProviderMetadata;
};

/**
 * Describes the message events.SAMLIdPServiceProviderUpdate.
 * Use `create(SAMLIdPServiceProviderUpdateSchema)` to create a new message.
 */
export const SAMLIdPServiceProviderUpdateSchema: GenMessage<SAMLIdPServiceProviderUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 184);

/**
 * SAMLIdPServiceProviderDelete is emitted when a service provider has been deleted.
 *
 * @generated from message events.SAMLIdPServiceProviderDelete
 */
export type SAMLIdPServiceProviderDelete = Message<"events.SAMLIdPServiceProviderDelete"> & {
  /**
   * Metadata is common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * SAMLIdPServiceProviderMetadata is common SAML IdP service provider event metadata
   *
   * @generated from field: events.SAMLIdPServiceProviderMetadata ServiceProvider = 3;
   */
  ServiceProvider?: SAMLIdPServiceProviderMetadata;
};

/**
 * Describes the message events.SAMLIdPServiceProviderDelete.
 * Use `create(SAMLIdPServiceProviderDeleteSchema)` to create a new message.
 */
export const SAMLIdPServiceProviderDeleteSchema: GenMessage<SAMLIdPServiceProviderDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 185);

/**
 * SAMLIdPServiceProviderDeleteAll is emitted when all service providers have been deleted.
 *
 * @generated from message events.SAMLIdPServiceProviderDeleteAll
 */
export type SAMLIdPServiceProviderDeleteAll = Message<"events.SAMLIdPServiceProviderDeleteAll"> & {
  /**
   * Metadata is common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;
};

/**
 * Describes the message events.SAMLIdPServiceProviderDeleteAll.
 * Use `create(SAMLIdPServiceProviderDeleteAllSchema)` to create a new message.
 */
export const SAMLIdPServiceProviderDeleteAllSchema: GenMessage<SAMLIdPServiceProviderDeleteAll> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 186);

/**
 * OktaResourcesUpdate is emitted when Okta related resources have been updated.
 *
 * @generated from message events.OktaResourcesUpdate
 */
export type OktaResourcesUpdate = Message<"events.OktaResourcesUpdate"> & {
  /**
   * Metadata is common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Server is a common server metadata.
   *
   * @generated from field: events.ServerMetadata Server = 2;
   */
  Server?: ServerMetadata;

  /**
   * Updated is common metadata related to Okta resources being updated.
   *
   * @generated from field: events.OktaResourcesUpdatedMetadata Updated = 3;
   */
  Updated?: OktaResourcesUpdatedMetadata;
};

/**
 * Describes the message events.OktaResourcesUpdate.
 * Use `create(OktaResourcesUpdateSchema)` to create a new message.
 */
export const OktaResourcesUpdateSchema: GenMessage<OktaResourcesUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 187);

/**
 * OktaSyncFailure is emitted when an Okta synchronization attempt has failed.
 *
 * @generated from message events.OktaSyncFailure
 */
export type OktaSyncFailure = Message<"events.OktaSyncFailure"> & {
  /**
   * Metadata is common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Server is a common server metadata.
   *
   * @generated from field: events.ServerMetadata Server = 2;
   */
  Server?: ServerMetadata;

  /**
   * Status contains error information for the synchronization failure.
   *
   * @generated from field: events.Status Status = 3;
   */
  Status?: Status;
};

/**
 * Describes the message events.OktaSyncFailure.
 * Use `create(OktaSyncFailureSchema)` to create a new message.
 */
export const OktaSyncFailureSchema: GenMessage<OktaSyncFailure> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 188);

/**
 * OktaAssignmentResult is emitted when an Okta assignment processing or cleanup was attempted.
 *
 * @generated from message events.OktaAssignmentResult
 */
export type OktaAssignmentResult = Message<"events.OktaAssignmentResult"> & {
  /**
   * Metadata is common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Server is a common server metadata.
   *
   * @generated from field: events.ServerMetadata Server = 2;
   */
  Server?: ServerMetadata;

  /**
   * ResourceMetadata is common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * Status indicates whether the assignment processing was successful.
   *
   * @generated from field: events.Status Status = 4;
   */
  Status?: Status;

  /**
   * OktaAssignmentMetadata is common Okta assignment metadata.
   *
   * @generated from field: events.OktaAssignmentMetadata OktaAssignment = 5;
   */
  OktaAssignment?: OktaAssignmentMetadata;
};

/**
 * Describes the message events.OktaAssignmentResult.
 * Use `create(OktaAssignmentResultSchema)` to create a new message.
 */
export const OktaAssignmentResultSchema: GenMessage<OktaAssignmentResult> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 189);

/**
 * AccessListCreate is emitted when an access list is created.
 *
 * @generated from message events.AccessListCreate
 */
export type AccessListCreate = Message<"events.AccessListCreate"> & {
  /**
   * Metadata is common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Resource is common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * Status indicates whether the resource operation was successful.
   *
   * @generated from field: events.Status Status = 3;
   */
  Status?: Status;
};

/**
 * Describes the message events.AccessListCreate.
 * Use `create(AccessListCreateSchema)` to create a new message.
 */
export const AccessListCreateSchema: GenMessage<AccessListCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 190);

/**
 * AccessListUpdate is emitted when an access list is updated.
 *
 * @generated from message events.AccessListUpdate
 */
export type AccessListUpdate = Message<"events.AccessListUpdate"> & {
  /**
   * Metadata is common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Resource is common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * Status indicates whether the resource operation was successful.
   *
   * @generated from field: events.Status Status = 3;
   */
  Status?: Status;
};

/**
 * Describes the message events.AccessListUpdate.
 * Use `create(AccessListUpdateSchema)` to create a new message.
 */
export const AccessListUpdateSchema: GenMessage<AccessListUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 191);

/**
 * AccessListDelete is emitted when an access list is deleted.
 *
 * @generated from message events.AccessListDelete
 */
export type AccessListDelete = Message<"events.AccessListDelete"> & {
  /**
   * Metadata is common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Resource is common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * Status indicates whether the resource operation was successful.
   *
   * @generated from field: events.Status Status = 3;
   */
  Status?: Status;
};

/**
 * Describes the message events.AccessListDelete.
 * Use `create(AccessListDeleteSchema)` to create a new message.
 */
export const AccessListDeleteSchema: GenMessage<AccessListDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 192);

/**
 * AccessListMemberCreate is emitted when an access list member is created.
 *
 * @generated from message events.AccessListMemberCreate
 */
export type AccessListMemberCreate = Message<"events.AccessListMemberCreate"> & {
  /**
   * Metadata is common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Resource is common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * AccessListMember is common access list member metadata.
   *
   * @generated from field: events.AccessListMemberMetadata AccessListMember = 3;
   */
  AccessListMember?: AccessListMemberMetadata;

  /**
   * Status indicates whether the resource operation was successful.
   *
   * @generated from field: events.Status Status = 4;
   */
  Status?: Status;
};

/**
 * Describes the message events.AccessListMemberCreate.
 * Use `create(AccessListMemberCreateSchema)` to create a new message.
 */
export const AccessListMemberCreateSchema: GenMessage<AccessListMemberCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 193);

/**
 * AccessListMemberUpdate is emitted when an access list member is updated.
 *
 * @generated from message events.AccessListMemberUpdate
 */
export type AccessListMemberUpdate = Message<"events.AccessListMemberUpdate"> & {
  /**
   * Metadata is common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Resource is common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * AccessListMember is common access list member metadata.
   *
   * @generated from field: events.AccessListMemberMetadata AccessListMember = 3;
   */
  AccessListMember?: AccessListMemberMetadata;

  /**
   * Status indicates whether the resource operation was successful.
   *
   * @generated from field: events.Status Status = 4;
   */
  Status?: Status;
};

/**
 * Describes the message events.AccessListMemberUpdate.
 * Use `create(AccessListMemberUpdateSchema)` to create a new message.
 */
export const AccessListMemberUpdateSchema: GenMessage<AccessListMemberUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 194);

/**
 * AccessListMemberDelete is emitted when an access list member is deleted.
 *
 * @generated from message events.AccessListMemberDelete
 */
export type AccessListMemberDelete = Message<"events.AccessListMemberDelete"> & {
  /**
   * Metadata is common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Resource is common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * AccessListMember is common access list member metadata.
   *
   * @generated from field: events.AccessListMemberMetadata AccessListMember = 3;
   */
  AccessListMember?: AccessListMemberMetadata;

  /**
   * Status indicates whether the resource operation was successful.
   *
   * @generated from field: events.Status Status = 4;
   */
  Status?: Status;
};

/**
 * Describes the message events.AccessListMemberDelete.
 * Use `create(AccessListMemberDeleteSchema)` to create a new message.
 */
export const AccessListMemberDeleteSchema: GenMessage<AccessListMemberDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 195);

/**
 * AccessListMemberDeleteAllForAccessList is emitted when all members are deleted for an access list.
 *
 * @generated from message events.AccessListMemberDeleteAllForAccessList
 */
export type AccessListMemberDeleteAllForAccessList = Message<"events.AccessListMemberDeleteAllForAccessList"> & {
  /**
   * Metadata is common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Resource is common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * AccessListMember is common access list member metadata.
   *
   * @generated from field: events.AccessListMemberMetadata AccessListMember = 3;
   */
  AccessListMember?: AccessListMemberMetadata;

  /**
   * Status indicates whether the resource operation was successful.
   *
   * @generated from field: events.Status Status = 4;
   */
  Status?: Status;
};

/**
 * Describes the message events.AccessListMemberDeleteAllForAccessList.
 * Use `create(AccessListMemberDeleteAllForAccessListSchema)` to create a new message.
 */
export const AccessListMemberDeleteAllForAccessListSchema: GenMessage<AccessListMemberDeleteAllForAccessList> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 196);

/**
 * AccessListReview is emitted when an access list is reviewed.
 *
 * @generated from message events.AccessListReview
 */
export type AccessListReview = Message<"events.AccessListReview"> & {
  /**
   * Metadata is common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Resource is common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * Review is metadata for the access list review.
   *
   * @generated from field: events.AccessListReviewMetadata Review = 3;
   */
  Review?: AccessListReviewMetadata;

  /**
   * Status indicates whether the review operation was successful.
   *
   * @generated from field: events.Status status = 4;
   */
  status?: Status;
};

/**
 * Describes the message events.AccessListReview.
 * Use `create(AccessListReviewSchema)` to create a new message.
 */
export const AccessListReviewSchema: GenMessage<AccessListReview> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 197);

/**
 * AuditQueryRun is emitted when a user runs an audit query.
 *
 * @generated from message events.AuditQueryRun
 */
export type AuditQueryRun = Message<"events.AuditQueryRun"> & {
  /**
   * Metadata is common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * Status indicates whether the read was successful.
   *
   * @generated from field: events.Status Status = 3;
   */
  Status?: Status;

  /**
   * Query contains additional query information.
   *
   * @generated from field: events.AuditQueryDetails Query = 4;
   */
  Query?: AuditQueryDetails;
};

/**
 * Describes the message events.AuditQueryRun.
 * Use `create(AuditQueryRunSchema)` to create a new message.
 */
export const AuditQueryRunSchema: GenMessage<AuditQueryRun> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 198);

/**
 * AuditQueryDetails contains additional query information.
 *
 * @generated from message events.AuditQueryDetails
 */
export type AuditQueryDetails = Message<"events.AuditQueryDetails"> & {
  /**
   * Name is the name of the query.
   *
   * @generated from field: string Name = 1;
   */
  Name: string;

  /**
   * Query is the query that was run.
   *
   * @generated from field: string Query = 2;
   */
  Query: string;

  /**
   * Days is the number of days time range for the query.
   *
   * @generated from field: int32 Days = 3;
   */
  Days: number;

  /**
   * ExecutionTimeInMillis is the total execution time of the query.
   *
   * @generated from field: int64 ExecutionTimeInMillis = 4;
   */
  ExecutionTimeInMillis: bigint;

  /**
   * DataScannedInBytes is the amount of data scanned by the query.
   *
   * @generated from field: int64 DataScannedInBytes = 5;
   */
  DataScannedInBytes: bigint;
};

/**
 * Describes the message events.AuditQueryDetails.
 * Use `create(AuditQueryDetailsSchema)` to create a new message.
 */
export const AuditQueryDetailsSchema: GenMessage<AuditQueryDetails> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 199);

/**
 * SecurityReportRun is emitted when a user runs an audit query.
 *
 * @generated from message events.SecurityReportRun
 */
export type SecurityReportRun = Message<"events.SecurityReportRun"> & {
  /**
   * Metadata is common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * Status indicates whether the read was successful.
   *
   * @generated from field: events.Status Status = 3;
   */
  Status?: Status;

  /**
   * Query is the query that was run.
   *
   * @generated from field: string Name = 4;
   */
  Name: string;

  /**
   * Version is the version of security report.
   *
   * @generated from field: string Version = 5;
   */
  Version: string;

  /**
   * TotalExecutionTimeInMillis is the total execution time of the query.
   *
   * @generated from field: int64 TotalExecutionTimeInMillis = 6;
   */
  TotalExecutionTimeInMillis: bigint;

  /**
   * TotalDataScannedInBytes is the amount of data scanned by the query.
   *
   * @generated from field: int64 TotalDataScannedInBytes = 7;
   */
  TotalDataScannedInBytes: bigint;

  /**
   * AuditQueries is the list of audit queries that were run.
   *
   * @generated from field: repeated events.AuditQueryDetails AuditQueries = 8;
   */
  AuditQueries: AuditQueryDetails[];
};

/**
 * Describes the message events.SecurityReportRun.
 * Use `create(SecurityReportRunSchema)` to create a new message.
 */
export const SecurityReportRunSchema: GenMessage<SecurityReportRun> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 200);

/**
 * ExternalAuditStorageEnableEvent is emitted when External Audit Storage is
 * enabled.
 *
 * @generated from message events.ExternalAuditStorageEnable
 */
export type ExternalAuditStorageEnable = Message<"events.ExternalAuditStorageEnable"> & {
  /**
   * Metadata is common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Resource is common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * Details holds details about the External Audit Storage configuration that
   * was enabled.
   *
   * @generated from field: events.ExternalAuditStorageDetails details = 3;
   */
  details?: ExternalAuditStorageDetails;
};

/**
 * Describes the message events.ExternalAuditStorageEnable.
 * Use `create(ExternalAuditStorageEnableSchema)` to create a new message.
 */
export const ExternalAuditStorageEnableSchema: GenMessage<ExternalAuditStorageEnable> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 201);

/**
 * ExternalAuditStorageDisableEvent is emitted when External Audit Storage is
 * disabled.
 *
 * @generated from message events.ExternalAuditStorageDisable
 */
export type ExternalAuditStorageDisable = Message<"events.ExternalAuditStorageDisable"> & {
  /**
   * Metadata is common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Resource is common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * Details holds details about the External Audit Storage configuration that
   * was disabled.
   *
   * @generated from field: events.ExternalAuditStorageDetails details = 3;
   */
  details?: ExternalAuditStorageDetails;
};

/**
 * Describes the message events.ExternalAuditStorageDisable.
 * Use `create(ExternalAuditStorageDisableSchema)` to create a new message.
 */
export const ExternalAuditStorageDisableSchema: GenMessage<ExternalAuditStorageDisable> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 202);

/**
 * Details holds details about the External Audit Storage configuration.
 *
 * @generated from message events.ExternalAuditStorageDetails
 */
export type ExternalAuditStorageDetails = Message<"events.ExternalAuditStorageDetails"> & {
  /**
   * IntegrationName is the name of the AWS OIDC integration used.
   *
   * @generated from field: string integration_name = 3;
   */
  integrationName: string;

  /**
   * SessionsRecordingsURI is the S3 path used to store session recordings.
   *
   * @generated from field: string session_recordings_uri = 4;
   */
  sessionRecordingsUri: string;

  /**
   * AthenaWorkgroup is the workgroup used for Athena audit log queries.
   *
   * @generated from field: string athena_workgroup = 5;
   */
  athenaWorkgroup: string;

  /**
   * GlueDatabase is the database used for Athena audit log queries.
   *
   * @generated from field: string glue_database = 6;
   */
  glueDatabase: string;

  /**
   * GlueTable is the table used for Athena audit log queries.
   *
   * @generated from field: string glue_table = 7;
   */
  glueTable: string;

  /**
   * AuditEventsLongTermURI is the S3 path used to store batched parquet files
   * with audit events, partitioned by event date.
   *
   * @generated from field: string audit_events_long_term_uri = 8;
   */
  auditEventsLongTermUri: string;

  /**
   * AthenaResultsURI is the S3 path used to store temporary results generated
   * by Athena.
   *
   * @generated from field: string athena_results_uri = 9;
   */
  athenaResultsUri: string;

  /**
   * PolicyName is the name of the IAM policy attached to the OIDC integration
   * role.
   *
   * @generated from field: string policy_name = 10;
   */
  policyName: string;

  /**
   * Region is the AWS region where the infrastructure is hosted.
   *
   * @generated from field: string region = 11;
   */
  region: string;
};

/**
 * Describes the message events.ExternalAuditStorageDetails.
 * Use `create(ExternalAuditStorageDetailsSchema)` to create a new message.
 */
export const ExternalAuditStorageDetailsSchema: GenMessage<ExternalAuditStorageDetails> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 203);

/**
 * OktaAccessListSync records an access list sync event.
 *
 * @generated from message events.OktaAccessListSync
 */
export type OktaAccessListSync = Message<"events.OktaAccessListSync"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Status contains common command or operation status fields.
   *
   * @generated from field: events.Status Status = 2;
   */
  Status?: Status;

  /**
   * NumAppFilters is the number of application filters used for this sync.
   *
   * @generated from field: int32 num_app_filters = 3;
   */
  numAppFilters: number;

  /**
   * NumGroupFilters is the number of group filters used for this sync.
   *
   * @generated from field: int32 num_group_filters = 4;
   */
  numGroupFilters: number;

  /**
   * NumApps is the number of apps that were synchronized from this sync event.
   *
   * @generated from field: int32 num_apps = 5;
   */
  numApps: number;

  /**
   * NumGroups is the number of groups that were synchronized from this sync event.
   *
   * @generated from field: int32 num_groups = 6;
   */
  numGroups: number;

  /**
   * NumRoles are the number of roles that were created/updated.
   *
   * @generated from field: int32 numRoles = 7;
   */
  numRoles: number;

  /**
   * NumAccessLists are the number of access lists that were created/updated.
   *
   * @generated from field: int32 numAccessLists = 8;
   */
  numAccessLists: number;

  /**
   * NumAccessListMembers are the number of access list members that were created/updated.
   *
   * @generated from field: int32 numAccessListMembers = 9;
   */
  numAccessListMembers: number;
};

/**
 * Describes the message events.OktaAccessListSync.
 * Use `create(OktaAccessListSyncSchema)` to create a new message.
 */
export const OktaAccessListSyncSchema: GenMessage<OktaAccessListSync> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 204);

/**
 * OktaUserSync records an Okta user sync event.
 *
 * @generated from message events.OktaUserSync
 */
export type OktaUserSync = Message<"events.OktaUserSync"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Status contains common command or operation status fields.
   *
   * @generated from field: events.Status Status = 2;
   */
  Status?: Status;

  /**
   * OrgUrl is the URL of the Okta organization being synced to
   *
   * @generated from field: string org_url = 3;
   */
  orgUrl: string;

  /**
   * AppId is the optional ID of an Okta Application that Teleport is using as
   * its gateway into Okta. The list of potential Teleport users are drawn from
   * the list of Okta users assigned to this app - either directly or via a group
   * assignement. If not set, the Okta sync service is drawing its user list from
   * the whole organization.
   *
   * @generated from field: string app_id = 4;
   */
  appId: string;

  /**
   * NumUsersCreated is the number of Teleport users created in this
   * synchronization pass.
   *
   * @generated from field: int32 num_users_created = 5;
   */
  numUsersCreated: number;

  /**
   * NumUsersDeleted is the number of Teleport users deleted in this
   * synchronization pass.
   *
   * @generated from field: int32 num_users_deleted = 6;
   */
  numUsersDeleted: number;

  /**
   * NumUserModified is the number of Teleport users modified in this
   * synchronization pass.
   *
   * @generated from field: int32 num_users_modified = 7;
   */
  numUsersModified: number;

  /**
   * NumUsersTotal is the total number of Teleport users managed by the Okta
   * integration at the end of the synchronzaton pass.
   *
   * @generated from field: int32 num_users_total = 8;
   */
  numUsersTotal: number;
};

/**
 * Describes the message events.OktaUserSync.
 * Use `create(OktaUserSyncSchema)` to create a new message.
 */
export const OktaUserSyncSchema: GenMessage<OktaUserSync> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 205);

/**
 * SPIFFESVIDIssued is an event recorded when a SPIFFE SVID is issued.
 *
 * @generated from message events.SPIFFESVIDIssued
 */
export type SPIFFESVIDIssued = Message<"events.SPIFFESVIDIssued"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 3;
   */
  Connection?: ConnectionMetadata;

  /**
   * SPIFFEID is the SPIFFE ID of the issued SVID
   *
   * @generated from field: string SPIFFEID = 4;
   */
  SPIFFEID: string;

  /**
   * DNSSANs is the list of DNS SANs in the issued SVID
   *
   * @generated from field: repeated string DNSSANs = 5;
   */
  DNSSANs: string[];

  /**
   * IPSANs is the list of IP SANs in the issued SVID
   *
   * @generated from field: repeated string IPSANs = 6;
   */
  IPSANs: string[];

  /**
   * SVIDType is `jwt` or `x509
   *
   * @generated from field: string SVIDType = 7;
   */
  SVIDType: string;

  /**
   * SerialNumber is the serial number of the issued SVID
   *
   * @generated from field: string SerialNumber = 8;
   */
  SerialNumber: string;

  /**
   * Hint is the hint of the issued SVID
   *
   * @generated from field: string Hint = 9;
   */
  Hint: string;
};

/**
 * Describes the message events.SPIFFESVIDIssued.
 * Use `create(SPIFFESVIDIssuedSchema)` to create a new message.
 */
export const SPIFFESVIDIssuedSchema: GenMessage<SPIFFESVIDIssued> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 206);

/**
 * AuthPreferenceUpdate is emitted when the auth preference is updated.
 *
 * @generated from message events.AuthPreferenceUpdate
 */
export type AuthPreferenceUpdate = Message<"events.AuthPreferenceUpdate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Status indicates whether the update was successful.
   *
   * @generated from field: events.Status Status = 2;
   */
  Status?: Status;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;

  /**
   * AdminActionsMFA indicates whether MFA for admin actions was altered
   * while updating the authentication preference.
   *
   * @generated from field: events.AdminActionsMFAStatus AdminActionsMFA = 5;
   */
  AdminActionsMFA: AdminActionsMFAStatus;
};

/**
 * Describes the message events.AuthPreferenceUpdate.
 * Use `create(AuthPreferenceUpdateSchema)` to create a new message.
 */
export const AuthPreferenceUpdateSchema: GenMessage<AuthPreferenceUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 207);

/**
 * ClusterNetworkingConfigUpdate is emitted when the cluster networking config is updated.
 *
 * @generated from message events.ClusterNetworkingConfigUpdate
 */
export type ClusterNetworkingConfigUpdate = Message<"events.ClusterNetworkingConfigUpdate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Status indicates whether the update was successful.
   *
   * @generated from field: events.Status Status = 2;
   */
  Status?: Status;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.ClusterNetworkingConfigUpdate.
 * Use `create(ClusterNetworkingConfigUpdateSchema)` to create a new message.
 */
export const ClusterNetworkingConfigUpdateSchema: GenMessage<ClusterNetworkingConfigUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 208);

/**
 * SessionRecordingConfigUpdate is emitted when the session recording config is updated.
 *
 * @generated from message events.SessionRecordingConfigUpdate
 */
export type SessionRecordingConfigUpdate = Message<"events.SessionRecordingConfigUpdate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Status indicates whether the update was successful.
   *
   * @generated from field: events.Status Status = 2;
   */
  Status?: Status;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.SessionRecordingConfigUpdate.
 * Use `create(SessionRecordingConfigUpdateSchema)` to create a new message.
 */
export const SessionRecordingConfigUpdateSchema: GenMessage<SessionRecordingConfigUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 209);

/**
 * AccessPathChanged is emitted when access graph detects a change in a access path.
 *
 * @generated from message events.AccessPathChanged
 */
export type AccessPathChanged = Message<"events.AccessPathChanged"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ChangeID is the id of the change.
   *
   * @generated from field: string ChangeID = 2;
   */
  ChangeID: string;

  /**
   * AffectedResourceID is the name of the affected resource.
   *
   * @generated from field: string AffectedResourceName = 3;
   */
  AffectedResourceName: string;

  /**
   * AffectedResourceSource is the source of the affected resource, ex: Teleport, AWS, GitLab, etc.
   *
   * @generated from field: string AffectedResourceSource = 4;
   */
  AffectedResourceSource: string;

  /**
   * AffectedResourceType is the type of the affected resource, ex: user, role, etc.
   *
   * @generated from field: string AffectedResourceType = 5;
   */
  AffectedResourceType: string;
};

/**
 * Describes the message events.AccessPathChanged.
 * Use `create(AccessPathChangedSchema)` to create a new message.
 */
export const AccessPathChangedSchema: GenMessage<AccessPathChanged> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 210);

/**
 * SpannerRPC is an event emitted when a Spanner client calls a Spanner RPC.
 *
 * @generated from message events.SpannerRPC
 */
export type SpannerRPC = Message<"events.SpannerRPC"> & {
  /**
   * Metadata is a common event metadata.
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * User is a common user event metadata.
   *
   * @generated from field: events.UserMetadata User = 2;
   */
  User?: UserMetadata;

  /**
   * SessionMetadata is a common event session metadata.
   *
   * @generated from field: events.SessionMetadata Session = 3;
   */
  Session?: SessionMetadata;

  /**
   * Database contains database related metadata.
   *
   * @generated from field: events.DatabaseMetadata Database = 4;
   */
  Database?: DatabaseMetadata;

  /**
   * Status indicates whether the RPC was successfully sent to the database.
   *
   * @generated from field: events.Status Status = 5;
   */
  Status?: Status;

  /**
   * Procedure is the name of the remote procedure.
   *
   * @generated from field: string Procedure = 6;
   */
  Procedure: string;

  /**
   * Args are the RPC arguments.
   *
   * @generated from field: google.protobuf.Struct Args = 7;
   */
  Args?: JsonObject;
};

/**
 * Describes the message events.SpannerRPC.
 * Use `create(SpannerRPCSchema)` to create a new message.
 */
export const SpannerRPCSchema: GenMessage<SpannerRPC> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 211);

/**
 * AccessGraphSettingsUpdate is emitted when the Access Graph Settings config is updated.
 *
 * @generated from message events.AccessGraphSettingsUpdate
 */
export type AccessGraphSettingsUpdate = Message<"events.AccessGraphSettingsUpdate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Status indicates whether the update was successful.
   *
   * @generated from field: events.Status Status = 2;
   */
  Status?: Status;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.AccessGraphSettingsUpdate.
 * Use `create(AccessGraphSettingsUpdateSchema)` to create a new message.
 */
export const AccessGraphSettingsUpdateSchema: GenMessage<AccessGraphSettingsUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 212);

/**
 * SPIFFEFederationCreate is emitted when a SPIFFE federation is created.
 *
 * @generated from message events.SPIFFEFederationCreate
 */
export type SPIFFEFederationCreate = Message<"events.SPIFFEFederationCreate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.SPIFFEFederationCreate.
 * Use `create(SPIFFEFederationCreateSchema)` to create a new message.
 */
export const SPIFFEFederationCreateSchema: GenMessage<SPIFFEFederationCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 213);

/**
 * SPIFFEFederationDelete is emitted when a SPIFFE federation is deleted.
 *
 * @generated from message events.SPIFFEFederationDelete
 */
export type SPIFFEFederationDelete = Message<"events.SPIFFEFederationDelete"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.SPIFFEFederationDelete.
 * Use `create(SPIFFEFederationDeleteSchema)` to create a new message.
 */
export const SPIFFEFederationDeleteSchema: GenMessage<SPIFFEFederationDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 214);

/**
 * AutoUpdateConfigCreate is emitted when an auto update config is created.
 *
 * @generated from message events.AutoUpdateConfigCreate
 */
export type AutoUpdateConfigCreate = Message<"events.AutoUpdateConfigCreate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.AutoUpdateConfigCreate.
 * Use `create(AutoUpdateConfigCreateSchema)` to create a new message.
 */
export const AutoUpdateConfigCreateSchema: GenMessage<AutoUpdateConfigCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 215);

/**
 * AutoUpdateConfigUpdate is emitted when an auto update config is updated.
 *
 * @generated from message events.AutoUpdateConfigUpdate
 */
export type AutoUpdateConfigUpdate = Message<"events.AutoUpdateConfigUpdate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Status indicates whether the update was successful.
   *
   * @generated from field: events.Status Status = 2;
   */
  Status?: Status;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.AutoUpdateConfigUpdate.
 * Use `create(AutoUpdateConfigUpdateSchema)` to create a new message.
 */
export const AutoUpdateConfigUpdateSchema: GenMessage<AutoUpdateConfigUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 216);

/**
 * AutoUpdateConfigDelete is emitted when an auto update config is deleted.
 *
 * @generated from message events.AutoUpdateConfigDelete
 */
export type AutoUpdateConfigDelete = Message<"events.AutoUpdateConfigDelete"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.AutoUpdateConfigDelete.
 * Use `create(AutoUpdateConfigDeleteSchema)` to create a new message.
 */
export const AutoUpdateConfigDeleteSchema: GenMessage<AutoUpdateConfigDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 217);

/**
 * AutoUpdateVersionCreate is emitted when an auto update version is created.
 *
 * @generated from message events.AutoUpdateVersionCreate
 */
export type AutoUpdateVersionCreate = Message<"events.AutoUpdateVersionCreate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.AutoUpdateVersionCreate.
 * Use `create(AutoUpdateVersionCreateSchema)` to create a new message.
 */
export const AutoUpdateVersionCreateSchema: GenMessage<AutoUpdateVersionCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 218);

/**
 * AutoUpdateVersionUpdate is emitted when an auto update version is updated.
 *
 * @generated from message events.AutoUpdateVersionUpdate
 */
export type AutoUpdateVersionUpdate = Message<"events.AutoUpdateVersionUpdate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Status indicates whether the update was successful.
   *
   * @generated from field: events.Status Status = 2;
   */
  Status?: Status;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.AutoUpdateVersionUpdate.
 * Use `create(AutoUpdateVersionUpdateSchema)` to create a new message.
 */
export const AutoUpdateVersionUpdateSchema: GenMessage<AutoUpdateVersionUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 219);

/**
 * AutoUpdateVersionDelete is emitted when an auto update version is deleted.
 *
 * @generated from message events.AutoUpdateVersionDelete
 */
export type AutoUpdateVersionDelete = Message<"events.AutoUpdateVersionDelete"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 2;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.AutoUpdateVersionDelete.
 * Use `create(AutoUpdateVersionDeleteSchema)` to create a new message.
 */
export const AutoUpdateVersionDeleteSchema: GenMessage<AutoUpdateVersionDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 220);

/**
 * StaticHostUserCreate is emitted when a static host user is created.
 *
 * @generated from message events.StaticHostUserCreate
 */
export type StaticHostUserCreate = Message<"events.StaticHostUserCreate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Status indicates whether the creation was successful.
   *
   * @generated from field: events.Status Status = 2;
   */
  Status?: Status;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 4;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 5;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.StaticHostUserCreate.
 * Use `create(StaticHostUserCreateSchema)` to create a new message.
 */
export const StaticHostUserCreateSchema: GenMessage<StaticHostUserCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 221);

/**
 * StaticHostUserUpdate is emitted when a static host user is updated.
 *
 * @generated from message events.StaticHostUserUpdate
 */
export type StaticHostUserUpdate = Message<"events.StaticHostUserUpdate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Status indicates whether the update was successful.
   *
   * @generated from field: events.Status Status = 2;
   */
  Status?: Status;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 4;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 5;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.StaticHostUserUpdate.
 * Use `create(StaticHostUserUpdateSchema)` to create a new message.
 */
export const StaticHostUserUpdateSchema: GenMessage<StaticHostUserUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 222);

/**
 * StaticHostUserDelete is emitted when a static host user is deleted.
 *
 * @generated from message events.StaticHostUserDelete
 */
export type StaticHostUserDelete = Message<"events.StaticHostUserDelete"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Status indicates whether the deletion was successful.
   *
   * @generated from field: events.Status Status = 2;
   */
  Status?: Status;

  /**
   * ResourceMetadata is a common resource event metadata
   *
   * @generated from field: events.ResourceMetadata Resource = 3;
   */
  Resource?: ResourceMetadata;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 4;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 5;
   */
  Connection?: ConnectionMetadata;
};

/**
 * Describes the message events.StaticHostUserDelete.
 * Use `create(StaticHostUserDeleteSchema)` to create a new message.
 */
export const StaticHostUserDeleteSchema: GenMessage<StaticHostUserDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 223);

/**
 * CrownJewelCreate is emitted when a Access Graph CrownJewel is created.
 *
 * @generated from message events.CrownJewelCreate
 */
export type CrownJewelCreate = Message<"events.CrownJewelCreate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Status indicates whether the update was successful.
   *
   * @generated from field: events.Status Status = 2;
   */
  Status?: Status;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;

  /**
   * ResourceMetadata is a common resource event metadata.
   *
   * @generated from field: events.ResourceMetadata resource = 5;
   */
  resource?: ResourceMetadata;

  /**
   * CrownJewelQuery is the query used to track the crown jewel.
   *
   * @generated from field: string CrownJewelQuery = 6;
   */
  CrownJewelQuery: string;
};

/**
 * Describes the message events.CrownJewelCreate.
 * Use `create(CrownJewelCreateSchema)` to create a new message.
 */
export const CrownJewelCreateSchema: GenMessage<CrownJewelCreate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 224);

/**
 * CrownJewelUpdate is emitted when a Access Graph CrownJewel is updated.
 *
 * @generated from message events.CrownJewelUpdate
 */
export type CrownJewelUpdate = Message<"events.CrownJewelUpdate"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Status indicates whether the update was successful.
   *
   * @generated from field: events.Status Status = 2;
   */
  Status?: Status;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;

  /**
   * ResourceMetadata is a common resource event metadata.
   *
   * @generated from field: events.ResourceMetadata resource = 5;
   */
  resource?: ResourceMetadata;

  /**
   * CurrentCrownJewelQuery is the current query used to track the crown jewel.
   *
   * @generated from field: string CurrentCrownJewelQuery = 6;
   */
  CurrentCrownJewelQuery: string;

  /**
   * UpdatedCrownJewelQuery is the new query used to track the crown jewel.
   *
   * @generated from field: string UpdatedCrownJewelQuery = 7;
   */
  UpdatedCrownJewelQuery: string;
};

/**
 * Describes the message events.CrownJewelUpdate.
 * Use `create(CrownJewelUpdateSchema)` to create a new message.
 */
export const CrownJewelUpdateSchema: GenMessage<CrownJewelUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 225);

/**
 * CrownJewelDelete is emitted when a Access Graph CrownJewel is deleted.
 *
 * @generated from message events.CrownJewelDelete
 */
export type CrownJewelDelete = Message<"events.CrownJewelDelete"> & {
  /**
   * Metadata is a common event metadata
   *
   * @generated from field: events.Metadata Metadata = 1;
   */
  Metadata?: Metadata;

  /**
   * Status indicates whether the update was successful.
   *
   * @generated from field: events.Status Status = 2;
   */
  Status?: Status;

  /**
   * User is a common user event metadata
   *
   * @generated from field: events.UserMetadata User = 3;
   */
  User?: UserMetadata;

  /**
   * ConnectionMetadata holds information about the connection
   *
   * @generated from field: events.ConnectionMetadata Connection = 4;
   */
  Connection?: ConnectionMetadata;

  /**
   * ResourceMetadata is a common resource event metadata.
   *
   * @generated from field: events.ResourceMetadata resource = 5;
   */
  resource?: ResourceMetadata;
};

/**
 * Describes the message events.CrownJewelDelete.
 * Use `create(CrownJewelDeleteSchema)` to create a new message.
 */
export const CrownJewelDeleteSchema: GenMessage<CrownJewelDelete> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_types_events_events, 226);

/**
 * The kind of user a given username refers to. Usernames should always refer to
 * a valid cluster user (even if temporary, e.g. SSO), but may be Machine ID
 * bot users.
 *
 * @generated from enum events.UserKind
 */
export enum UserKind {
  /**
   * Indicates a legacy cluster emitting events without a defined user kind.
   *
   * @generated from enum value: USER_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Indicates the user associated with this event is human, either created
   * locally or via SSO.
   *
   * @generated from enum value: USER_KIND_HUMAN = 1;
   */
  HUMAN = 1,

  /**
   * Indicates the user associated with this event is a Machine ID bot user.
   *
   * @generated from enum value: USER_KIND_BOT = 2;
   */
  BOT = 2,
}

/**
 * Describes the enum events.UserKind.
 */
export const UserKindSchema: GenEnum<UserKind> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_types_events_events, 0);

/**
 * Action communicates what was done in response to the event
 *
 * @generated from enum events.EventAction
 */
export enum EventAction {
  /**
   * @generated from enum value: OBSERVED = 0;
   */
  OBSERVED = 0,

  /**
   * @generated from enum value: DENIED = 1;
   */
  DENIED = 1,
}

/**
 * Describes the enum events.EventAction.
 */
export const EventActionSchema: GenEnum<EventAction> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_types_events_events, 1);

/**
 * SFTPAction denotes what type of SFTP request was made.
 * These actions were taken from https://datatracker.ietf.org/doc/html/draft-ietf-secsh-filexfer-02.
 *
 * @generated from enum events.SFTPAction
 */
export enum SFTPAction {
  /**
   * @generated from enum value: INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: OPEN = 1;
   */
  OPEN = 1,

  /**
   * @generated from enum value: CLOSE = 2;
   */
  CLOSE = 2,

  /**
   * @generated from enum value: READ = 3;
   */
  READ = 3,

  /**
   * @generated from enum value: WRITE = 4;
   */
  WRITE = 4,

  /**
   * @generated from enum value: LSTAT = 5;
   */
  LSTAT = 5,

  /**
   * @generated from enum value: FSTAT = 6;
   */
  FSTAT = 6,

  /**
   * @generated from enum value: SETSTAT = 7;
   */
  SETSTAT = 7,

  /**
   * @generated from enum value: FSETSTAT = 8;
   */
  FSETSTAT = 8,

  /**
   * @generated from enum value: OPENDIR = 9;
   */
  OPENDIR = 9,

  /**
   * @generated from enum value: READDIR = 10;
   */
  READDIR = 10,

  /**
   * @generated from enum value: REMOVE = 11;
   */
  REMOVE = 11,

  /**
   * @generated from enum value: MKDIR = 12;
   */
  MKDIR = 12,

  /**
   * @generated from enum value: RMDIR = 13;
   */
  RMDIR = 13,

  /**
   * @generated from enum value: REALPATH = 14;
   */
  REALPATH = 14,

  /**
   * @generated from enum value: STAT = 15;
   */
  STAT = 15,

  /**
   * @generated from enum value: RENAME = 16;
   */
  RENAME = 16,

  /**
   * @generated from enum value: READLINK = 17;
   */
  READLINK = 17,

  /**
   * @generated from enum value: SYMLINK = 18;
   */
  SYMLINK = 18,

  /**
   * @generated from enum value: LINK = 19;
   */
  LINK = 19,
}

/**
 * Describes the enum events.SFTPAction.
 */
export const SFTPActionSchema: GenEnum<SFTPAction> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_types_events_events, 2);

/**
 * OSType is the same as teleport.devicetrust.v1.OSType.
 * Duplicated because gogo doesn't play well with protoc-gen-go.
 *
 * @generated from enum events.OSType
 */
export enum OSType {
  /**
   * @generated from enum value: OS_TYPE_UNSPECIFIED = 0;
   */
  OS_TYPE_UNSPECIFIED = 0,

  /**
   * Linux.
   *
   * @generated from enum value: OS_TYPE_LINUX = 1;
   */
  OS_TYPE_LINUX = 1,

  /**
   * macOS.
   *
   * @generated from enum value: OS_TYPE_MACOS = 2;
   */
  OS_TYPE_MACOS = 2,

  /**
   * Windows.
   *
   * @generated from enum value: OS_TYPE_WINDOWS = 3;
   */
  OS_TYPE_WINDOWS = 3,
}

/**
 * Describes the enum events.OSType.
 */
export const OSTypeSchema: GenEnum<OSType> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_types_events_events, 3);

/**
 * DeviceOrigin is the same as teleport.devicetrust.v1.DeviceOrigin.
 * Duplicated because gogo doesn't play well with protoc-gen-go.
 *
 * @generated from enum events.DeviceOrigin
 */
export enum DeviceOrigin {
  /**
   * Unspecified or absent origin.
   *
   * @generated from enum value: DEVICE_ORIGIN_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Devices originated from direct API usage.
   *
   * @generated from enum value: DEVICE_ORIGIN_API = 1;
   */
  API = 1,

  /**
   * Devices originated from Jamf sync.
   *
   * @generated from enum value: DEVICE_ORIGIN_JAMF = 2;
   */
  JAMF = 2,

  /**
   * Source originated from Microsoft Intune sync.
   *
   * @generated from enum value: DEVICE_ORIGIN_INTUNE = 3;
   */
  INTUNE = 3,
}

/**
 * Describes the enum events.DeviceOrigin.
 */
export const DeviceOriginSchema: GenEnum<DeviceOrigin> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_types_events_events, 4);

/**
 * ElasticsearchCategory specifies Elasticsearch request category.
 *
 * @generated from enum events.ElasticsearchCategory
 */
export enum ElasticsearchCategory {
  /**
   * ELASTICSEARCH_CATEGORY_GENERAL is for otherwise uncategorized calls.
   *
   * @generated from enum value: ELASTICSEARCH_CATEGORY_GENERAL = 0;
   */
  GENERAL = 0,

  /**
   * ELASTICSEARCH_CATEGORY_SECURITY is for _security and _ssl APIs.
   *
   * @generated from enum value: ELASTICSEARCH_CATEGORY_SECURITY = 1;
   */
  SECURITY = 1,

  /**
   * ELASTICSEARCH_CATEGORY_SEARCH is for search-related APIs.
   *
   * @generated from enum value: ELASTICSEARCH_CATEGORY_SEARCH = 2;
   */
  SEARCH = 2,

  /**
   * ELASTICSEARCH_CATEGORY_SQL covers _sql API.
   *
   * @generated from enum value: ELASTICSEARCH_CATEGORY_SQL = 3;
   */
  SQL = 3,
}

/**
 * Describes the enum events.ElasticsearchCategory.
 */
export const ElasticsearchCategorySchema: GenEnum<ElasticsearchCategory> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_types_events_events, 5);

/**
 * OpenSearchCategory specifies OpenSearch request category.
 *
 * @generated from enum events.OpenSearchCategory
 */
export enum OpenSearchCategory {
  /**
   * OPEN_SEARCH_CATEGORY_GENERAL is for otherwise uncategorized calls.
   *
   * @generated from enum value: OPEN_SEARCH_CATEGORY_GENERAL = 0;
   */
  GENERAL = 0,

  /**
   * OPEN_SEARCH_CATEGORY_SECURITY covers /_plugins/_security API.
   *
   * @generated from enum value: OPEN_SEARCH_CATEGORY_SECURITY = 1;
   */
  SECURITY = 1,

  /**
   * OPEN_SEARCH_CATEGORY_SEARCH is for search-related APIs.
   *
   * @generated from enum value: OPEN_SEARCH_CATEGORY_SEARCH = 2;
   */
  SEARCH = 2,

  /**
   * OPEN_SEARCH_CATEGORY_SQL covers /_plugins/_sql and /_plugins/_ppl API.
   *
   * @generated from enum value: OPEN_SEARCH_CATEGORY_SQL = 3;
   */
  SQL = 3,
}

/**
 * Describes the enum events.OpenSearchCategory.
 */
export const OpenSearchCategorySchema: GenEnum<OpenSearchCategory> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_types_events_events, 6);

/**
 * @generated from enum events.AdminActionsMFAStatus
 */
export enum AdminActionsMFAStatus {
  /**
   * @generated from enum value: ADMIN_ACTIONS_MFA_STATUS_UNSPECIFIED = 0;
   */
  ADMIN_ACTIONS_MFA_STATUS_UNSPECIFIED = 0,

  /**
   * @generated from enum value: ADMIN_ACTIONS_MFA_STATUS_UNCHANGED = 1;
   */
  ADMIN_ACTIONS_MFA_STATUS_UNCHANGED = 1,

  /**
   * @generated from enum value: ADMIN_ACTIONS_MFA_STATUS_ENABLED = 2;
   */
  ADMIN_ACTIONS_MFA_STATUS_ENABLED = 2,

  /**
   * @generated from enum value: ADMIN_ACTIONS_MFA_STATUS_DISABLED = 3;
   */
  ADMIN_ACTIONS_MFA_STATUS_DISABLED = 3,
}

/**
 * Describes the enum events.AdminActionsMFAStatus.
 */
export const AdminActionsMFAStatusSchema: GenEnum<AdminActionsMFAStatus> = /*@__PURE__*/
  enumDesc(file_teleport_legacy_types_events_events, 7);

