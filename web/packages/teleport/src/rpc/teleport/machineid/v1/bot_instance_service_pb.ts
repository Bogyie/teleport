// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/machineid/v1/bot_instance_service.proto (package teleport.machineid.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { BotInstance, BotInstanceStatusHeartbeat } from "./bot_instance_pb.js";

/**
 * Request for GetBotInstance.
 *
 * @generated from message teleport.machineid.v1.GetBotInstanceRequest
 */
export class GetBotInstanceRequest extends Message<GetBotInstanceRequest> {
  /**
   * The name of the bot associated with the instance.
   *
   * @generated from field: string bot_name = 1;
   */
  botName = "";

  /**
   * The unique identifier of the bot instance to retrieve.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  constructor(data?: PartialMessage<GetBotInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.GetBotInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bot_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBotInstanceRequest {
    return new GetBotInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBotInstanceRequest {
    return new GetBotInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBotInstanceRequest {
    return new GetBotInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBotInstanceRequest | PlainMessage<GetBotInstanceRequest> | undefined, b: GetBotInstanceRequest | PlainMessage<GetBotInstanceRequest> | undefined): boolean {
    return proto3.util.equals(GetBotInstanceRequest, a, b);
  }
}

/**
 * Request for ListBotInstances.
 *
 * Follows the pagination semantics of
 * https://cloud.google.com/apis/design/standard_methods#list
 *
 * @generated from message teleport.machineid.v1.ListBotInstancesRequest
 */
export class ListBotInstancesRequest extends Message<ListBotInstancesRequest> {
  /**
   * The name of the Bot to list BotInstances for. If empty, all BotInstances
   * will be listed.
   *
   * @generated from field: string filter_bot_name = 1;
   */
  filterBotName = "";

  /**
   * The maximum number of items to return.
   * The server may impose a different page size at its discretion.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * The page_token value returned from a previous ListBotInstances request, if
   * any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListBotInstancesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.ListBotInstancesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter_bot_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBotInstancesRequest {
    return new ListBotInstancesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBotInstancesRequest {
    return new ListBotInstancesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBotInstancesRequest {
    return new ListBotInstancesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListBotInstancesRequest | PlainMessage<ListBotInstancesRequest> | undefined, b: ListBotInstancesRequest | PlainMessage<ListBotInstancesRequest> | undefined): boolean {
    return proto3.util.equals(ListBotInstancesRequest, a, b);
  }
}

/**
 * Response for ListBotInstances.
 *
 * @generated from message teleport.machineid.v1.ListBotInstancesResponse
 */
export class ListBotInstancesResponse extends Message<ListBotInstancesResponse> {
  /**
   * BotInstance that matched the search.
   *
   * @generated from field: repeated teleport.machineid.v1.BotInstance bot_instances = 1;
   */
  botInstances: BotInstance[] = [];

  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results exist.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListBotInstancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.ListBotInstancesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bot_instances", kind: "message", T: BotInstance, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBotInstancesResponse {
    return new ListBotInstancesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBotInstancesResponse {
    return new ListBotInstancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBotInstancesResponse {
    return new ListBotInstancesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListBotInstancesResponse | PlainMessage<ListBotInstancesResponse> | undefined, b: ListBotInstancesResponse | PlainMessage<ListBotInstancesResponse> | undefined): boolean {
    return proto3.util.equals(ListBotInstancesResponse, a, b);
  }
}

/**
 * Request for DeleteBotInstance.
 *
 * @generated from message teleport.machineid.v1.DeleteBotInstanceRequest
 */
export class DeleteBotInstanceRequest extends Message<DeleteBotInstanceRequest> {
  /**
   * The name of the BotInstance to delete.
   *
   * @generated from field: string bot_name = 1;
   */
  botName = "";

  /**
   * The unique identifier of the bot instance to delete.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  constructor(data?: PartialMessage<DeleteBotInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.DeleteBotInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bot_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteBotInstanceRequest {
    return new DeleteBotInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteBotInstanceRequest {
    return new DeleteBotInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteBotInstanceRequest {
    return new DeleteBotInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteBotInstanceRequest | PlainMessage<DeleteBotInstanceRequest> | undefined, b: DeleteBotInstanceRequest | PlainMessage<DeleteBotInstanceRequest> | undefined): boolean {
    return proto3.util.equals(DeleteBotInstanceRequest, a, b);
  }
}

/**
 * The request for SubmitHeartbeat.
 *
 * @generated from message teleport.machineid.v1.SubmitHeartbeatRequest
 */
export class SubmitHeartbeatRequest extends Message<SubmitHeartbeatRequest> {
  /**
   * The heartbeat data to submit.
   *
   * @generated from field: teleport.machineid.v1.BotInstanceStatusHeartbeat heartbeat = 1;
   */
  heartbeat?: BotInstanceStatusHeartbeat;

  constructor(data?: PartialMessage<SubmitHeartbeatRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.SubmitHeartbeatRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "heartbeat", kind: "message", T: BotInstanceStatusHeartbeat },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitHeartbeatRequest {
    return new SubmitHeartbeatRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitHeartbeatRequest {
    return new SubmitHeartbeatRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitHeartbeatRequest {
    return new SubmitHeartbeatRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitHeartbeatRequest | PlainMessage<SubmitHeartbeatRequest> | undefined, b: SubmitHeartbeatRequest | PlainMessage<SubmitHeartbeatRequest> | undefined): boolean {
    return proto3.util.equals(SubmitHeartbeatRequest, a, b);
  }
}

/**
 * The response for SubmitHeartbeat.
 *
 * Empty
 *
 * @generated from message teleport.machineid.v1.SubmitHeartbeatResponse
 */
export class SubmitHeartbeatResponse extends Message<SubmitHeartbeatResponse> {
  constructor(data?: PartialMessage<SubmitHeartbeatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.SubmitHeartbeatResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitHeartbeatResponse {
    return new SubmitHeartbeatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitHeartbeatResponse {
    return new SubmitHeartbeatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitHeartbeatResponse {
    return new SubmitHeartbeatResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitHeartbeatResponse | PlainMessage<SubmitHeartbeatResponse> | undefined, b: SubmitHeartbeatResponse | PlainMessage<SubmitHeartbeatResponse> | undefined): boolean {
    return proto3.util.equals(SubmitHeartbeatResponse, a, b);
  }
}

