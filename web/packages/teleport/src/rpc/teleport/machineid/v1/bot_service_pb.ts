// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/machineid/v1/bot_service.proto (package teleport.machineid.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";
import { Bot } from "./bot_pb.js";

/**
 * The request for CreateBot.
 *
 * @generated from message teleport.machineid.v1.CreateBotRequest
 */
export class CreateBotRequest extends Message<CreateBotRequest> {
  /**
   * The bot to create.
   *
   * @generated from field: teleport.machineid.v1.Bot bot = 1;
   */
  bot?: Bot;

  constructor(data?: PartialMessage<CreateBotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.CreateBotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bot", kind: "message", T: Bot },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBotRequest {
    return new CreateBotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBotRequest {
    return new CreateBotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBotRequest {
    return new CreateBotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBotRequest | PlainMessage<CreateBotRequest> | undefined, b: CreateBotRequest | PlainMessage<CreateBotRequest> | undefined): boolean {
    return proto3.util.equals(CreateBotRequest, a, b);
  }
}

/**
 * The request for GetBot.
 *
 * @generated from message teleport.machineid.v1.GetBotRequest
 */
export class GetBotRequest extends Message<GetBotRequest> {
  /**
   * The name of the bot to fetch.
   *
   * @generated from field: string bot_name = 1;
   */
  botName = "";

  constructor(data?: PartialMessage<GetBotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.GetBotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bot_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBotRequest {
    return new GetBotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBotRequest {
    return new GetBotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBotRequest {
    return new GetBotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBotRequest | PlainMessage<GetBotRequest> | undefined, b: GetBotRequest | PlainMessage<GetBotRequest> | undefined): boolean {
    return proto3.util.equals(GetBotRequest, a, b);
  }
}

/**
 * The request for ListBots.
 *
 * @generated from message teleport.machineid.v1.ListBotsRequest
 */
export class ListBotsRequest extends Message<ListBotsRequest> {
  /**
   * The maximum number of items to return.
   * The server may impose a different page size at its discretion.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * The next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListBotsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.ListBotsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBotsRequest {
    return new ListBotsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBotsRequest {
    return new ListBotsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBotsRequest {
    return new ListBotsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListBotsRequest | PlainMessage<ListBotsRequest> | undefined, b: ListBotsRequest | PlainMessage<ListBotsRequest> | undefined): boolean {
    return proto3.util.equals(ListBotsRequest, a, b);
  }
}

/**
 * The response for ListBots.
 *
 * @generated from message teleport.machineid.v1.ListBotsResponse
 */
export class ListBotsResponse extends Message<ListBotsResponse> {
  /**
   * The page of Bots that matched the request.
   *
   * @generated from field: repeated teleport.machineid.v1.Bot bots = 1;
   */
  bots: Bot[] = [];

  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListBotsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.ListBotsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bots", kind: "message", T: Bot, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBotsResponse {
    return new ListBotsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBotsResponse {
    return new ListBotsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBotsResponse {
    return new ListBotsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListBotsResponse | PlainMessage<ListBotsResponse> | undefined, b: ListBotsResponse | PlainMessage<ListBotsResponse> | undefined): boolean {
    return proto3.util.equals(ListBotsResponse, a, b);
  }
}

/**
 * The request for UpdateBot.
 *
 * @generated from message teleport.machineid.v1.UpdateBotRequest
 */
export class UpdateBotRequest extends Message<UpdateBotRequest> {
  /**
   * The values to apply based on the update mask. The name must be specified.
   *
   * @generated from field: teleport.machineid.v1.Bot bot = 1;
   */
  bot?: Bot;

  /**
   * The update mask applied to a Bot.
   * Fields are masked according to their proto name.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateBotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.UpdateBotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bot", kind: "message", T: Bot },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateBotRequest {
    return new UpdateBotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateBotRequest {
    return new UpdateBotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateBotRequest {
    return new UpdateBotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateBotRequest | PlainMessage<UpdateBotRequest> | undefined, b: UpdateBotRequest | PlainMessage<UpdateBotRequest> | undefined): boolean {
    return proto3.util.equals(UpdateBotRequest, a, b);
  }
}

/**
 * The request for UpsertBot.
 *
 * @generated from message teleport.machineid.v1.UpsertBotRequest
 */
export class UpsertBotRequest extends Message<UpsertBotRequest> {
  /**
   * The bot to create or replace.
   *
   * @generated from field: teleport.machineid.v1.Bot bot = 1;
   */
  bot?: Bot;

  constructor(data?: PartialMessage<UpsertBotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.UpsertBotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bot", kind: "message", T: Bot },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertBotRequest {
    return new UpsertBotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertBotRequest {
    return new UpsertBotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertBotRequest {
    return new UpsertBotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertBotRequest | PlainMessage<UpsertBotRequest> | undefined, b: UpsertBotRequest | PlainMessage<UpsertBotRequest> | undefined): boolean {
    return proto3.util.equals(UpsertBotRequest, a, b);
  }
}

/**
 * The request for DeleteBot.
 *
 * @generated from message teleport.machineid.v1.DeleteBotRequest
 */
export class DeleteBotRequest extends Message<DeleteBotRequest> {
  /**
   * The name of the bot to delete.
   *
   * @generated from field: string bot_name = 1;
   */
  botName = "";

  constructor(data?: PartialMessage<DeleteBotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.DeleteBotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bot_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteBotRequest {
    return new DeleteBotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteBotRequest {
    return new DeleteBotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteBotRequest {
    return new DeleteBotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteBotRequest | PlainMessage<DeleteBotRequest> | undefined, b: DeleteBotRequest | PlainMessage<DeleteBotRequest> | undefined): boolean {
    return proto3.util.equals(DeleteBotRequest, a, b);
  }
}

