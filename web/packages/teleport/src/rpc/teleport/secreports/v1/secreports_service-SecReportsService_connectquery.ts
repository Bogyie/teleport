// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts"
// @generated from file teleport/secreports/v1/secreports_service.proto (package teleport.secreports.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { DeleteAuditQueryRequest, DeleteReportRequest, GetAuditQueryRequest, GetAuditQueryResultRequest, GetAuditQueryResultResponse, GetReportRequest, GetReportResultRequest, GetReportResultResponse, GetReportStateRequest, GetSchemaRequest, GetSchemaResponse, ListAuditQueriesRequest, ListAuditQueriesResponse, ListReportsRequest, ListReportsResponse, RunAuditQueryRequest, RunAuditQueryResponse, RunReportRequest, UpsertAuditQueryRequest, UpsertReportRequest } from "./secreports_service_pb.js";
import { AuditQuery, Report, ReportState } from "./secreports_pb.js";

/**
 * UpsertAuditQuery upsets an audit query.
 *
 * @generated from rpc teleport.secreports.v1.SecReportsService.UpsertAuditQuery
 */
export const upsertAuditQuery = {
  localName: "upsertAuditQuery",
  name: "UpsertAuditQuery",
  kind: MethodKind.Unary,
  I: UpsertAuditQueryRequest,
  O: Empty,
  service: {
    typeName: "teleport.secreports.v1.SecReportsService"
  }
} as const;

/**
 * GetAuditQuery returns an audit query.
 *
 * @generated from rpc teleport.secreports.v1.SecReportsService.GetAuditQuery
 */
export const getAuditQuery = {
  localName: "getAuditQuery",
  name: "GetAuditQuery",
  kind: MethodKind.Unary,
  I: GetAuditQueryRequest,
  O: AuditQuery,
  service: {
    typeName: "teleport.secreports.v1.SecReportsService"
  }
} as const;

/**
 * ListAuditQueries returns a paginated list of all Okta import rule resources.
 *
 * @generated from rpc teleport.secreports.v1.SecReportsService.ListAuditQueries
 */
export const listAuditQueries = {
  localName: "listAuditQueries",
  name: "ListAuditQueries",
  kind: MethodKind.Unary,
  I: ListAuditQueriesRequest,
  O: ListAuditQueriesResponse,
  service: {
    typeName: "teleport.secreports.v1.SecReportsService"
  }
} as const;

/**
 * DeleteAuditQuery deletes an audit query.
 *
 * @generated from rpc teleport.secreports.v1.SecReportsService.DeleteAuditQuery
 */
export const deleteAuditQuery = {
  localName: "deleteAuditQuery",
  name: "DeleteAuditQuery",
  kind: MethodKind.Unary,
  I: DeleteAuditQueryRequest,
  O: Empty,
  service: {
    typeName: "teleport.secreports.v1.SecReportsService"
  }
} as const;

/**
 * UpsertReport upsets a report.
 *
 * @generated from rpc teleport.secreports.v1.SecReportsService.UpsertReport
 */
export const upsertReport = {
  localName: "upsertReport",
  name: "UpsertReport",
  kind: MethodKind.Unary,
  I: UpsertReportRequest,
  O: Empty,
  service: {
    typeName: "teleport.secreports.v1.SecReportsService"
  }
} as const;

/**
 * GetReport returns a report.
 *
 * @generated from rpc teleport.secreports.v1.SecReportsService.GetReport
 */
export const getReport = {
  localName: "getReport",
  name: "GetReport",
  kind: MethodKind.Unary,
  I: GetReportRequest,
  O: Report,
  service: {
    typeName: "teleport.secreports.v1.SecReportsService"
  }
} as const;

/**
 * ListReports returns a paginated list of all Okta import rule resources.
 *
 * @generated from rpc teleport.secreports.v1.SecReportsService.ListReports
 */
export const listReports = {
  localName: "listReports",
  name: "ListReports",
  kind: MethodKind.Unary,
  I: ListReportsRequest,
  O: ListReportsResponse,
  service: {
    typeName: "teleport.secreports.v1.SecReportsService"
  }
} as const;

/**
 * DeleteReport deletes a security report.
 *
 * @generated from rpc teleport.secreports.v1.SecReportsService.DeleteReport
 */
export const deleteReport = {
  localName: "deleteReport",
  name: "DeleteReport",
  kind: MethodKind.Unary,
  I: DeleteReportRequest,
  O: Empty,
  service: {
    typeName: "teleport.secreports.v1.SecReportsService"
  }
} as const;

/**
 * RunAuditQuery runs an audit query.
 *
 * @generated from rpc teleport.secreports.v1.SecReportsService.RunAuditQuery
 */
export const runAuditQuery = {
  localName: "runAuditQuery",
  name: "RunAuditQuery",
  kind: MethodKind.Unary,
  I: RunAuditQueryRequest,
  O: RunAuditQueryResponse,
  service: {
    typeName: "teleport.secreports.v1.SecReportsService"
  }
} as const;

/**
 * GetAuditQueryResult returns an audit query result.
 *
 * @generated from rpc teleport.secreports.v1.SecReportsService.GetAuditQueryResult
 */
export const getAuditQueryResult = {
  localName: "getAuditQueryResult",
  name: "GetAuditQueryResult",
  kind: MethodKind.Unary,
  I: GetAuditQueryResultRequest,
  O: GetAuditQueryResultResponse,
  service: {
    typeName: "teleport.secreports.v1.SecReportsService"
  }
} as const;

/**
 * RunReport runs a security report.
 *
 * @generated from rpc teleport.secreports.v1.SecReportsService.RunReport
 */
export const runReport = {
  localName: "runReport",
  name: "RunReport",
  kind: MethodKind.Unary,
  I: RunReportRequest,
  O: Empty,
  service: {
    typeName: "teleport.secreports.v1.SecReportsService"
  }
} as const;

/**
 * GetReportResult returns a security report result.
 *
 * @generated from rpc teleport.secreports.v1.SecReportsService.GetReportResult
 */
export const getReportResult = {
  localName: "getReportResult",
  name: "GetReportResult",
  kind: MethodKind.Unary,
  I: GetReportResultRequest,
  O: GetReportResultResponse,
  service: {
    typeName: "teleport.secreports.v1.SecReportsService"
  }
} as const;

/**
 * GetReportState returns a security report state.
 *
 * @generated from rpc teleport.secreports.v1.SecReportsService.GetReportState
 */
export const getReportState = {
  localName: "getReportState",
  name: "GetReportState",
  kind: MethodKind.Unary,
  I: GetReportStateRequest,
  O: ReportState,
  service: {
    typeName: "teleport.secreports.v1.SecReportsService"
  }
} as const;

/**
 * GetSchema returns a schema of audit query.
 *
 * @generated from rpc teleport.secreports.v1.SecReportsService.GetSchema
 */
export const getSchema = {
  localName: "getSchema",
  name: "GetSchema",
  kind: MethodKind.Unary,
  I: GetSchemaRequest,
  O: GetSchemaResponse,
  service: {
    typeName: "teleport.secreports.v1.SecReportsService"
  }
} as const;
