// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/secreports/v1/secreports_service.proto (package teleport.secreports.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { AuditQuery, AuditQuerySpec, Report } from "./secreports_pb.js";
import { ResourceHeader } from "../../header/v1/resourceheader_pb.js";

/**
 * GetAuditQueryResultRequest is a request for GetAuditQueryResult.
 *
 * @generated from message teleport.secreports.v1.GetAuditQueryResultRequest
 */
export class GetAuditQueryResultRequest extends Message<GetAuditQueryResultRequest> {
  /**
   * result_id is a unique id of the result.
   *
   * @generated from field: string result_id = 1;
   */
  resultId = "";

  /**
   * next_token is a token for pagination.
   *
   * @generated from field: string next_token = 2;
   */
  nextToken = "";

  /**
   * max_results is a maximum number of results to return.
   *
   * @generated from field: int32 max_results = 3;
   */
  maxResults = 0;

  constructor(data?: PartialMessage<GetAuditQueryResultRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.GetAuditQueryResultRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "next_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "max_results", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuditQueryResultRequest {
    return new GetAuditQueryResultRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuditQueryResultRequest {
    return new GetAuditQueryResultRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuditQueryResultRequest {
    return new GetAuditQueryResultRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuditQueryResultRequest | PlainMessage<GetAuditQueryResultRequest> | undefined, b: GetAuditQueryResultRequest | PlainMessage<GetAuditQueryResultRequest> | undefined): boolean {
    return proto3.util.equals(GetAuditQueryResultRequest, a, b);
  }
}

/**
 * QueryResultColumnInfo is a column info.
 *
 * @generated from message teleport.secreports.v1.QueryResultColumnInfo
 */
export class QueryResultColumnInfo extends Message<QueryResultColumnInfo> {
  /**
   * name is name of the column.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * type is type of the column.
   *
   * @generated from field: string type = 2;
   */
  type = "";

  constructor(data?: PartialMessage<QueryResultColumnInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.QueryResultColumnInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResultColumnInfo {
    return new QueryResultColumnInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResultColumnInfo {
    return new QueryResultColumnInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResultColumnInfo {
    return new QueryResultColumnInfo().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResultColumnInfo | PlainMessage<QueryResultColumnInfo> | undefined, b: QueryResultColumnInfo | PlainMessage<QueryResultColumnInfo> | undefined): boolean {
    return proto3.util.equals(QueryResultColumnInfo, a, b);
  }
}

/**
 * QueryRowResult is a row result.
 *
 * @generated from message teleport.secreports.v1.QueryRowResult
 */
export class QueryRowResult extends Message<QueryRowResult> {
  /**
   * data is a list of values.
   *
   * @generated from field: repeated string data = 1;
   */
  data: string[] = [];

  constructor(data?: PartialMessage<QueryRowResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.QueryRowResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRowResult {
    return new QueryRowResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRowResult {
    return new QueryRowResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRowResult {
    return new QueryRowResult().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRowResult | PlainMessage<QueryRowResult> | undefined, b: QueryRowResult | PlainMessage<QueryRowResult> | undefined): boolean {
    return proto3.util.equals(QueryRowResult, a, b);
  }
}

/**
 * QueryResultSet is a result set.
 *
 * @generated from message teleport.secreports.v1.QueryResultSet
 */
export class QueryResultSet extends Message<QueryResultSet> {
  /**
   * column_info contains information about columns.
   *
   * @generated from field: repeated teleport.secreports.v1.QueryResultColumnInfo column_info = 1;
   */
  columnInfo: QueryResultColumnInfo[] = [];

  /**
   * rows  is a list of rows containing values.
   *
   * @generated from field: repeated teleport.secreports.v1.QueryRowResult rows = 2;
   */
  rows: QueryRowResult[] = [];

  constructor(data?: PartialMessage<QueryResultSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.QueryResultSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "column_info", kind: "message", T: QueryResultColumnInfo, repeated: true },
    { no: 2, name: "rows", kind: "message", T: QueryRowResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResultSet {
    return new QueryResultSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResultSet {
    return new QueryResultSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResultSet {
    return new QueryResultSet().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResultSet | PlainMessage<QueryResultSet> | undefined, b: QueryResultSet | PlainMessage<QueryResultSet> | undefined): boolean {
    return proto3.util.equals(QueryResultSet, a, b);
  }
}

/**
 * GetAuditQueryResultResponse contains an audit query result.
 *
 * @generated from message teleport.secreports.v1.GetAuditQueryResultResponse
 */
export class GetAuditQueryResultResponse extends Message<GetAuditQueryResultResponse> {
  /**
   * result is a result set.
   *
   * @generated from field: teleport.secreports.v1.QueryResultSet result = 1;
   */
  result?: QueryResultSet;

  /**
   * next_token is a token for pagination.
   *
   * @generated from field: string next_token = 2;
   */
  nextToken = "";

  /**
   * result_id is a unique id of the result.
   *
   * @generated from field: string result_id = 3;
   */
  resultId = "";

  constructor(data?: PartialMessage<GetAuditQueryResultResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.GetAuditQueryResultResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: QueryResultSet },
    { no: 2, name: "next_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "result_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuditQueryResultResponse {
    return new GetAuditQueryResultResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuditQueryResultResponse {
    return new GetAuditQueryResultResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuditQueryResultResponse {
    return new GetAuditQueryResultResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuditQueryResultResponse | PlainMessage<GetAuditQueryResultResponse> | undefined, b: GetAuditQueryResultResponse | PlainMessage<GetAuditQueryResultResponse> | undefined): boolean {
    return proto3.util.equals(GetAuditQueryResultResponse, a, b);
  }
}

/**
 * RunReportRequest is a request for RunReport.
 *
 * @generated from message teleport.secreports.v1.RunReportRequest
 */
export class RunReportRequest extends Message<RunReportRequest> {
  /**
   * name is a name of the security report.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * days is a time range is days.
   *
   * @generated from field: uint32 days = 2;
   */
  days = 0;

  constructor(data?: PartialMessage<RunReportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.RunReportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "days", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunReportRequest {
    return new RunReportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunReportRequest {
    return new RunReportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunReportRequest {
    return new RunReportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RunReportRequest | PlainMessage<RunReportRequest> | undefined, b: RunReportRequest | PlainMessage<RunReportRequest> | undefined): boolean {
    return proto3.util.equals(RunReportRequest, a, b);
  }
}

/**
 * GetStateRequest is a request for GetReportState.
 *
 * @generated from message teleport.secreports.v1.GetReportStateRequest
 */
export class GetReportStateRequest extends Message<GetReportStateRequest> {
  /**
   * name is a name of the security report.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * days is a time range is days.
   *
   * @generated from field: uint32 days = 2;
   */
  days = 0;

  constructor(data?: PartialMessage<GetReportStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.GetReportStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "days", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetReportStateRequest {
    return new GetReportStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetReportStateRequest {
    return new GetReportStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetReportStateRequest {
    return new GetReportStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetReportStateRequest | PlainMessage<GetReportStateRequest> | undefined, b: GetReportStateRequest | PlainMessage<GetReportStateRequest> | undefined): boolean {
    return proto3.util.equals(GetReportStateRequest, a, b);
  }
}

/**
 * DeleteAuditQueryRequest is audit query delete request.
 *
 * @generated from message teleport.secreports.v1.DeleteAuditQueryRequest
 */
export class DeleteAuditQueryRequest extends Message<DeleteAuditQueryRequest> {
  /**
   * name is the name of the audit query to delete.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteAuditQueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.DeleteAuditQueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAuditQueryRequest {
    return new DeleteAuditQueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAuditQueryRequest {
    return new DeleteAuditQueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAuditQueryRequest {
    return new DeleteAuditQueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAuditQueryRequest | PlainMessage<DeleteAuditQueryRequest> | undefined, b: DeleteAuditQueryRequest | PlainMessage<DeleteAuditQueryRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAuditQueryRequest, a, b);
  }
}

/**
 * DeleteReportRequest is security report delete request.
 *
 * @generated from message teleport.secreports.v1.DeleteReportRequest
 */
export class DeleteReportRequest extends Message<DeleteReportRequest> {
  /**
   * name is the name of the security report to delete.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteReportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.DeleteReportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteReportRequest {
    return new DeleteReportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteReportRequest {
    return new DeleteReportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteReportRequest {
    return new DeleteReportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteReportRequest | PlainMessage<DeleteReportRequest> | undefined, b: DeleteReportRequest | PlainMessage<DeleteReportRequest> | undefined): boolean {
    return proto3.util.equals(DeleteReportRequest, a, b);
  }
}

/**
 * RunAuditQueryRequest is audit query run request.
 *
 * @generated from message teleport.secreports.v1.RunAuditQueryRequest
 */
export class RunAuditQueryRequest extends Message<RunAuditQueryRequest> {
  /**
   * name is the name of the audit query to run.
   *
   * @generated from field: string query = 1;
   */
  query = "";

  /**
   * days is a time range is days.
   *
   * @generated from field: int32 days = 2;
   */
  days = 0;

  constructor(data?: PartialMessage<RunAuditQueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.RunAuditQueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "days", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunAuditQueryRequest {
    return new RunAuditQueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunAuditQueryRequest {
    return new RunAuditQueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunAuditQueryRequest {
    return new RunAuditQueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RunAuditQueryRequest | PlainMessage<RunAuditQueryRequest> | undefined, b: RunAuditQueryRequest | PlainMessage<RunAuditQueryRequest> | undefined): boolean {
    return proto3.util.equals(RunAuditQueryRequest, a, b);
  }
}

/**
 * UpsertAuditQueryRequest is audit query upsert request.
 *
 * @generated from message teleport.secreports.v1.UpsertAuditQueryRequest
 */
export class UpsertAuditQueryRequest extends Message<UpsertAuditQueryRequest> {
  /**
   * audit_query is the audit query to upsert.
   *
   * @generated from field: teleport.secreports.v1.AuditQuery audit_query = 1;
   */
  auditQuery?: AuditQuery;

  constructor(data?: PartialMessage<UpsertAuditQueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.UpsertAuditQueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "audit_query", kind: "message", T: AuditQuery },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertAuditQueryRequest {
    return new UpsertAuditQueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertAuditQueryRequest {
    return new UpsertAuditQueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertAuditQueryRequest {
    return new UpsertAuditQueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertAuditQueryRequest | PlainMessage<UpsertAuditQueryRequest> | undefined, b: UpsertAuditQueryRequest | PlainMessage<UpsertAuditQueryRequest> | undefined): boolean {
    return proto3.util.equals(UpsertAuditQueryRequest, a, b);
  }
}

/**
 * UpsertReportRequest is security report upsert request.
 *
 * @generated from message teleport.secreports.v1.UpsertReportRequest
 */
export class UpsertReportRequest extends Message<UpsertReportRequest> {
  /**
   * report is the security report to upsert.
   *
   * @generated from field: teleport.secreports.v1.Report report = 1;
   */
  report?: Report;

  constructor(data?: PartialMessage<UpsertReportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.UpsertReportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "report", kind: "message", T: Report },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertReportRequest {
    return new UpsertReportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertReportRequest {
    return new UpsertReportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertReportRequest {
    return new UpsertReportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertReportRequest | PlainMessage<UpsertReportRequest> | undefined, b: UpsertReportRequest | PlainMessage<UpsertReportRequest> | undefined): boolean {
    return proto3.util.equals(UpsertReportRequest, a, b);
  }
}

/**
 * GetAuditQueryRequest is audit query get request.
 *
 * @generated from message teleport.secreports.v1.GetAuditQueryRequest
 */
export class GetAuditQueryRequest extends Message<GetAuditQueryRequest> {
  /**
   * name is the name of the audit query to get.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetAuditQueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.GetAuditQueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuditQueryRequest {
    return new GetAuditQueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuditQueryRequest {
    return new GetAuditQueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuditQueryRequest {
    return new GetAuditQueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuditQueryRequest | PlainMessage<GetAuditQueryRequest> | undefined, b: GetAuditQueryRequest | PlainMessage<GetAuditQueryRequest> | undefined): boolean {
    return proto3.util.equals(GetAuditQueryRequest, a, b);
  }
}

/**
 * GetReportRequest is security report get request.
 *
 * @generated from message teleport.secreports.v1.GetReportRequest
 */
export class GetReportRequest extends Message<GetReportRequest> {
  /**
   * name is the name of the security report to get.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetReportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.GetReportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetReportRequest {
    return new GetReportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetReportRequest {
    return new GetReportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetReportRequest {
    return new GetReportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetReportRequest | PlainMessage<GetReportRequest> | undefined, b: GetReportRequest | PlainMessage<GetReportRequest> | undefined): boolean {
    return proto3.util.equals(GetReportRequest, a, b);
  }
}

/**
 * GetReportResultRequest is report get request.
 *
 * @generated from message teleport.secreports.v1.GetReportResultRequest
 */
export class GetReportResultRequest extends Message<GetReportResultRequest> {
  /**
   * name is the name of the security report to get.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * days is a time range is days.
   *
   * @generated from field: uint32 days = 2;
   */
  days = 0;

  /**
   * execution_id is a unique id of the execution.
   *
   * @generated from field: string execution_id = 3;
   */
  executionId = "";

  constructor(data?: PartialMessage<GetReportResultRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.GetReportResultRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "days", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetReportResultRequest {
    return new GetReportResultRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetReportResultRequest {
    return new GetReportResultRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetReportResultRequest {
    return new GetReportResultRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetReportResultRequest | PlainMessage<GetReportResultRequest> | undefined, b: GetReportResultRequest | PlainMessage<GetReportResultRequest> | undefined): boolean {
    return proto3.util.equals(GetReportResultRequest, a, b);
  }
}

/**
 * ListAuditQueriesRequest is audit query list request.
 *
 * @generated from message teleport.secreports.v1.ListAuditQueriesRequest
 */
export class ListAuditQueriesRequest extends Message<ListAuditQueriesRequest> {
  /**
   * page_size is the number of results to return.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * page_token is the next_token value returned from a previous List request if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListAuditQueriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.ListAuditQueriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAuditQueriesRequest {
    return new ListAuditQueriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAuditQueriesRequest {
    return new ListAuditQueriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAuditQueriesRequest {
    return new ListAuditQueriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAuditQueriesRequest | PlainMessage<ListAuditQueriesRequest> | undefined, b: ListAuditQueriesRequest | PlainMessage<ListAuditQueriesRequest> | undefined): boolean {
    return proto3.util.equals(ListAuditQueriesRequest, a, b);
  }
}

/**
 * ListAuditQueryResponse is audit query list response.
 *
 * @generated from message teleport.secreports.v1.ListReportsRequest
 */
export class ListReportsRequest extends Message<ListReportsRequest> {
  /**
   * page_size is the number of results to return.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * page_token is the next_token value returned from a previous List request if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListReportsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.ListReportsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListReportsRequest {
    return new ListReportsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListReportsRequest {
    return new ListReportsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListReportsRequest {
    return new ListReportsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListReportsRequest | PlainMessage<ListReportsRequest> | undefined, b: ListReportsRequest | PlainMessage<ListReportsRequest> | undefined): boolean {
    return proto3.util.equals(ListReportsRequest, a, b);
  }
}

/**
 * ListAuditQueriesResponse is audit query list response.
 *
 * @generated from message teleport.secreports.v1.ListAuditQueriesResponse
 */
export class ListAuditQueriesResponse extends Message<ListAuditQueriesResponse> {
  /**
   * queries is a list of audit queries.
   *
   * @generated from field: repeated teleport.secreports.v1.AuditQuery queries = 1;
   */
  queries: AuditQuery[] = [];

  /**
   * next_page_token is the next page token. If there are no more results, it will be empty.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListAuditQueriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.ListAuditQueriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "queries", kind: "message", T: AuditQuery, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAuditQueriesResponse {
    return new ListAuditQueriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAuditQueriesResponse {
    return new ListAuditQueriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAuditQueriesResponse {
    return new ListAuditQueriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAuditQueriesResponse | PlainMessage<ListAuditQueriesResponse> | undefined, b: ListAuditQueriesResponse | PlainMessage<ListAuditQueriesResponse> | undefined): boolean {
    return proto3.util.equals(ListAuditQueriesResponse, a, b);
  }
}

/**
 * GetSchemaRequest is a request for GetSchema.
 *
 * @generated from message teleport.secreports.v1.GetSchemaRequest
 */
export class GetSchemaRequest extends Message<GetSchemaRequest> {
  constructor(data?: PartialMessage<GetSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.GetSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSchemaRequest {
    return new GetSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSchemaRequest {
    return new GetSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSchemaRequest {
    return new GetSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSchemaRequest | PlainMessage<GetSchemaRequest> | undefined, b: GetSchemaRequest | PlainMessage<GetSchemaRequest> | undefined): boolean {
    return proto3.util.equals(GetSchemaRequest, a, b);
  }
}

/**
 * GetSchemaResponse is a response for GetSchema.
 *
 * @generated from message teleport.secreports.v1.GetSchemaResponse
 */
export class GetSchemaResponse extends Message<GetSchemaResponse> {
  /**
   * views is the list of views.
   *
   * @generated from field: repeated teleport.secreports.v1.GetSchemaResponse.ViewDesc views = 1;
   */
  views: GetSchemaResponse_ViewDesc[] = [];

  constructor(data?: PartialMessage<GetSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.GetSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "views", kind: "message", T: GetSchemaResponse_ViewDesc, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSchemaResponse {
    return new GetSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSchemaResponse {
    return new GetSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSchemaResponse {
    return new GetSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSchemaResponse | PlainMessage<GetSchemaResponse> | undefined, b: GetSchemaResponse | PlainMessage<GetSchemaResponse> | undefined): boolean {
    return proto3.util.equals(GetSchemaResponse, a, b);
  }
}

/**
 * ViewDesc is a description of view.
 *
 * @generated from message teleport.secreports.v1.GetSchemaResponse.ViewDesc
 */
export class GetSchemaResponse_ViewDesc extends Message<GetSchemaResponse_ViewDesc> {
  /**
   * name is the name of the view.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * desc is the description of the view.
   *
   * @generated from field: string desc = 2;
   */
  desc = "";

  /**
   * columns is the list of columns.
   *
   * @generated from field: repeated teleport.secreports.v1.GetSchemaResponse.ViewDesc.ColumnDesc columns = 3;
   */
  columns: GetSchemaResponse_ViewDesc_ColumnDesc[] = [];

  constructor(data?: PartialMessage<GetSchemaResponse_ViewDesc>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.GetSchemaResponse.ViewDesc";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "desc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "columns", kind: "message", T: GetSchemaResponse_ViewDesc_ColumnDesc, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSchemaResponse_ViewDesc {
    return new GetSchemaResponse_ViewDesc().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSchemaResponse_ViewDesc {
    return new GetSchemaResponse_ViewDesc().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSchemaResponse_ViewDesc {
    return new GetSchemaResponse_ViewDesc().fromJsonString(jsonString, options);
  }

  static equals(a: GetSchemaResponse_ViewDesc | PlainMessage<GetSchemaResponse_ViewDesc> | undefined, b: GetSchemaResponse_ViewDesc | PlainMessage<GetSchemaResponse_ViewDesc> | undefined): boolean {
    return proto3.util.equals(GetSchemaResponse_ViewDesc, a, b);
  }
}

/**
 * ColumnDesc is a description of column.
 *
 * @generated from message teleport.secreports.v1.GetSchemaResponse.ViewDesc.ColumnDesc
 */
export class GetSchemaResponse_ViewDesc_ColumnDesc extends Message<GetSchemaResponse_ViewDesc_ColumnDesc> {
  /**
   * name is the name of the column.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * type is the type of the column.
   *
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * desc is the description of the column.
   *
   * @generated from field: string desc = 3;
   */
  desc = "";

  constructor(data?: PartialMessage<GetSchemaResponse_ViewDesc_ColumnDesc>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.GetSchemaResponse.ViewDesc.ColumnDesc";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "desc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSchemaResponse_ViewDesc_ColumnDesc {
    return new GetSchemaResponse_ViewDesc_ColumnDesc().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSchemaResponse_ViewDesc_ColumnDesc {
    return new GetSchemaResponse_ViewDesc_ColumnDesc().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSchemaResponse_ViewDesc_ColumnDesc {
    return new GetSchemaResponse_ViewDesc_ColumnDesc().fromJsonString(jsonString, options);
  }

  static equals(a: GetSchemaResponse_ViewDesc_ColumnDesc | PlainMessage<GetSchemaResponse_ViewDesc_ColumnDesc> | undefined, b: GetSchemaResponse_ViewDesc_ColumnDesc | PlainMessage<GetSchemaResponse_ViewDesc_ColumnDesc> | undefined): boolean {
    return proto3.util.equals(GetSchemaResponse_ViewDesc_ColumnDesc, a, b);
  }
}

/**
 * RunAuditQueryResponse is audit query run response.
 *
 * @generated from message teleport.secreports.v1.RunAuditQueryResponse
 */
export class RunAuditQueryResponse extends Message<RunAuditQueryResponse> {
  /**
   * result_id is a unique id of the result.
   *
   * @generated from field: string result_id = 1;
   */
  resultId = "";

  constructor(data?: PartialMessage<RunAuditQueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.RunAuditQueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunAuditQueryResponse {
    return new RunAuditQueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunAuditQueryResponse {
    return new RunAuditQueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunAuditQueryResponse {
    return new RunAuditQueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RunAuditQueryResponse | PlainMessage<RunAuditQueryResponse> | undefined, b: RunAuditQueryResponse | PlainMessage<RunAuditQueryResponse> | undefined): boolean {
    return proto3.util.equals(RunAuditQueryResponse, a, b);
  }
}

/**
 * ListReportResponse is security report list response.
 *
 * @generated from message teleport.secreports.v1.ListReportsResponse
 */
export class ListReportsResponse extends Message<ListReportsResponse> {
  /**
   * reports is a list of security reports.
   *
   * @generated from field: repeated teleport.secreports.v1.Report reports = 1;
   */
  reports: Report[] = [];

  /**
   * next_page_token is the next page token. If there are no more results, it will be empty.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListReportsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.ListReportsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reports", kind: "message", T: Report, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListReportsResponse {
    return new ListReportsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListReportsResponse {
    return new ListReportsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListReportsResponse {
    return new ListReportsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListReportsResponse | PlainMessage<ListReportsResponse> | undefined, b: ListReportsResponse | PlainMessage<ListReportsResponse> | undefined): boolean {
    return proto3.util.equals(ListReportsResponse, a, b);
  }
}

/**
 * GetReportResultResponse is report result get response.
 *
 * @generated from message teleport.secreports.v1.GetReportResultResponse
 */
export class GetReportResultResponse extends Message<GetReportResultResponse> {
  /**
   * result is a report execution result.
   *
   * @generated from field: teleport.secreports.v1.ReportResult result = 1;
   */
  result?: ReportResult;

  constructor(data?: PartialMessage<GetReportResultResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.GetReportResultResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: ReportResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetReportResultResponse {
    return new GetReportResultResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetReportResultResponse {
    return new GetReportResultResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetReportResultResponse {
    return new GetReportResultResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetReportResultResponse | PlainMessage<GetReportResultResponse> | undefined, b: GetReportResultResponse | PlainMessage<GetReportResultResponse> | undefined): boolean {
    return proto3.util.equals(GetReportResultResponse, a, b);
  }
}

/**
 * Report is the result of security report.
 *
 * @generated from message teleport.secreports.v1.ReportResult
 */
export class ReportResult extends Message<ReportResult> {
  /**
   * name is a name of the security report.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * description is a description of the security report.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * audit_query_results is a list of audit query results.
   *
   * @generated from field: repeated teleport.secreports.v1.ReportResult.AuditQueryResult audit_query_results = 3;
   */
  auditQueryResults: ReportResult_AuditQueryResult[] = [];

  /**
   * updated_at is a time when the security report was updated.
   *
   * @generated from field: string updated_at = 4;
   */
  updatedAt = "";

  /**
   * total_execution_time_in_millis is a time in milliseconds when the security report was executed.
   *
   * @generated from field: int64 total_execution_time_in_millis = 5;
   */
  totalExecutionTimeInMillis = protoInt64.zero;

  /**
   * total_data_scanned_in_bytes is a number of bytes scanned.
   *
   * @generated from field: int64 total_data_scanned_in_bytes = 6;
   */
  totalDataScannedInBytes = protoInt64.zero;

  constructor(data?: PartialMessage<ReportResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.ReportResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "audit_query_results", kind: "message", T: ReportResult_AuditQueryResult, repeated: true },
    { no: 4, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "total_execution_time_in_millis", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "total_data_scanned_in_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportResult {
    return new ReportResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportResult {
    return new ReportResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportResult {
    return new ReportResult().fromJsonString(jsonString, options);
  }

  static equals(a: ReportResult | PlainMessage<ReportResult> | undefined, b: ReportResult | PlainMessage<ReportResult> | undefined): boolean {
    return proto3.util.equals(ReportResult, a, b);
  }
}

/**
 * AuditQueryResult is a result of audit query.
 *
 * @generated from message teleport.secreports.v1.ReportResult.AuditQueryResult
 */
export class ReportResult_AuditQueryResult extends Message<ReportResult_AuditQueryResult> {
  /**
   * audit_query is the audit query spec containing information about audit query.
   *
   * @generated from field: teleport.secreports.v1.AuditQuerySpec audit_query = 1;
   */
  auditQuery?: AuditQuerySpec;

  /**
   * result is the result set.
   *
   * @generated from field: teleport.secreports.v1.QueryResultSet result = 2;
   */
  result?: QueryResultSet;

  /**
   * result_id is a unique id of the result.
   *
   * @generated from field: string result_id = 3;
   */
  resultId = "";

  /**
   * execution_time_in_millis is a time in milliseconds when the audit query was executed.
   *
   * @generated from field: int64 execution_time_in_millis = 4;
   */
  executionTimeInMillis = protoInt64.zero;

  /**
   * data_scanned_in_bytes is a number of bytes scanned.
   *
   * @generated from field: int64 data_scanned_in_bytes = 5;
   */
  dataScannedInBytes = protoInt64.zero;

  constructor(data?: PartialMessage<ReportResult_AuditQueryResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.ReportResult.AuditQueryResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "audit_query", kind: "message", T: AuditQuerySpec },
    { no: 2, name: "result", kind: "message", T: QueryResultSet },
    { no: 3, name: "result_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "execution_time_in_millis", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "data_scanned_in_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportResult_AuditQueryResult {
    return new ReportResult_AuditQueryResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportResult_AuditQueryResult {
    return new ReportResult_AuditQueryResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportResult_AuditQueryResult {
    return new ReportResult_AuditQueryResult().fromJsonString(jsonString, options);
  }

  static equals(a: ReportResult_AuditQueryResult | PlainMessage<ReportResult_AuditQueryResult> | undefined, b: ReportResult_AuditQueryResult | PlainMessage<ReportResult_AuditQueryResult> | undefined): boolean {
    return proto3.util.equals(ReportResult_AuditQueryResult, a, b);
  }
}

/**
 * Report is a security report.
 *
 * @generated from message teleport.secreports.v1.ReportSate
 */
export class ReportSate extends Message<ReportSate> {
  /**
   * header is a resource header.
   *
   * @generated from field: teleport.header.v1.ResourceHeader header = 1;
   */
  header?: ResourceHeader;

  /**
   * state is a state of the security report.
   *
   * @generated from field: teleport.secreports.v1.ReportSate.State state = 2;
   */
  state = ReportSate_State.UNSPECIFIED;

  /**
   * updated_at is a time when the security report state was updated.
   *
   * @generated from field: string updated_at = 3;
   */
  updatedAt = "";

  constructor(data?: PartialMessage<ReportSate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.ReportSate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: ResourceHeader },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(ReportSate_State) },
    { no: 3, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportSate {
    return new ReportSate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportSate {
    return new ReportSate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportSate {
    return new ReportSate().fromJsonString(jsonString, options);
  }

  static equals(a: ReportSate | PlainMessage<ReportSate> | undefined, b: ReportSate | PlainMessage<ReportSate> | undefined): boolean {
    return proto3.util.equals(ReportSate, a, b);
  }
}

/**
 * name is a name of the security report.
 *
 * @generated from enum teleport.secreports.v1.ReportSate.State
 */
export enum ReportSate_State {
  /**
   * STATE_UNSPECIFIED is an unspecified state.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * STATE_ERROR is an error state.
   *
   * @generated from enum value: STATE_ERROR = 1;
   */
  ERROR = 1,

  /**
   * STATE_SUCCESS is a success state.
   *
   * @generated from enum value: STATE_SUCCESS = 2;
   */
  SUCCESS = 2,

  /**
   * STATE_RUNNING is a running state.
   *
   * @generated from enum value: STATE_RUNNING = 3;
   */
  RUNNING = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ReportSate_State)
proto3.util.setEnumType(ReportSate_State, "teleport.secreports.v1.ReportSate.State", [
  { no: 0, name: "STATE_UNSPECIFIED" },
  { no: 1, name: "STATE_ERROR" },
  { no: 2, name: "STATE_SUCCESS" },
  { no: 3, name: "STATE_RUNNING" },
]);

