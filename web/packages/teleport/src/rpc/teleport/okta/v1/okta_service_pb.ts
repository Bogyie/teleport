// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/okta/v1/okta_service.proto (package teleport.okta.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";
import { OktaAssignmentSpecV1_OktaAssignmentStatus, OktaAssignmentV1, OktaImportRuleV1, PluginV1 } from "../../legacy/types/types_pb.js";

/**
 * GetAppsRequest is the request message for filtering apps.
 *
 * @generated from message teleport.okta.v1.GetAppsRequest
 */
export class GetAppsRequest extends Message<GetAppsRequest> {
  /**
   * URL of the Okta organization.
   *
   * @generated from field: string okta_organization_url = 1;
   */
  oktaOrganizationUrl = "";

  /**
   * Credentials to access the Okta API.
   *
   * @generated from field: teleport.okta.v1.OktaAPICredentials api_credentials = 2;
   */
  apiCredentials?: OktaAPICredentials;

  /**
   * List of filters to apply when fetching apps.
   *
   * @generated from field: repeated string filters = 3;
   */
  filters: string[] = [];

  constructor(data?: PartialMessage<GetAppsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.GetAppsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "okta_organization_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "api_credentials", kind: "message", T: OktaAPICredentials },
    { no: 3, name: "filters", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppsRequest {
    return new GetAppsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppsRequest {
    return new GetAppsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppsRequest {
    return new GetAppsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppsRequest | PlainMessage<GetAppsRequest> | undefined, b: GetAppsRequest | PlainMessage<GetAppsRequest> | undefined): boolean {
    return proto3.util.equals(GetAppsRequest, a, b);
  }
}

/**
 * GetAppsResponse is the response message for filtering apps.
 *
 * @generated from message teleport.okta.v1.GetAppsResponse
 */
export class GetAppsResponse extends Message<GetAppsResponse> {
  /**
   * List of apps that match the filter criteria.
   *
   * @generated from field: repeated teleport.okta.v1.GetAppsResponse.App apps = 1;
   */
  apps: GetAppsResponse_App[] = [];

  constructor(data?: PartialMessage<GetAppsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.GetAppsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apps", kind: "message", T: GetAppsResponse_App, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppsResponse {
    return new GetAppsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppsResponse {
    return new GetAppsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppsResponse {
    return new GetAppsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppsResponse | PlainMessage<GetAppsResponse> | undefined, b: GetAppsResponse | PlainMessage<GetAppsResponse> | undefined): boolean {
    return proto3.util.equals(GetAppsResponse, a, b);
  }
}

/**
 * App contains details of an individual Okta app.
 *
 * @generated from message teleport.okta.v1.GetAppsResponse.App
 */
export class GetAppsResponse_App extends Message<GetAppsResponse_App> {
  /**
   * Name of the app.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Description of the app.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  constructor(data?: PartialMessage<GetAppsResponse_App>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.GetAppsResponse.App";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppsResponse_App {
    return new GetAppsResponse_App().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppsResponse_App {
    return new GetAppsResponse_App().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppsResponse_App {
    return new GetAppsResponse_App().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppsResponse_App | PlainMessage<GetAppsResponse_App> | undefined, b: GetAppsResponse_App | PlainMessage<GetAppsResponse_App> | undefined): boolean {
    return proto3.util.equals(GetAppsResponse_App, a, b);
  }
}

/**
 * GetGroupsRequest is the request message.
 *
 * @generated from message teleport.okta.v1.GetGroupsRequest
 */
export class GetGroupsRequest extends Message<GetGroupsRequest> {
  /**
   * URL of the Okta organization.
   *
   * @generated from field: string okta_organization_url = 1;
   */
  oktaOrganizationUrl = "";

  /**
   * Credentials to access the Okta API.
   *
   * @generated from field: teleport.okta.v1.OktaAPICredentials api_credentials = 2;
   */
  apiCredentials?: OktaAPICredentials;

  /**
   * List of filters to apply when fetching groups.
   *
   * @generated from field: repeated string filters = 3;
   */
  filters: string[] = [];

  constructor(data?: PartialMessage<GetGroupsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.GetGroupsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "okta_organization_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "api_credentials", kind: "message", T: OktaAPICredentials },
    { no: 3, name: "filters", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGroupsRequest {
    return new GetGroupsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGroupsRequest {
    return new GetGroupsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGroupsRequest {
    return new GetGroupsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGroupsRequest | PlainMessage<GetGroupsRequest> | undefined, b: GetGroupsRequest | PlainMessage<GetGroupsRequest> | undefined): boolean {
    return proto3.util.equals(GetGroupsRequest, a, b);
  }
}

/**
 * GetGroupsResponse is the response message for filtering groups.
 *
 * @generated from message teleport.okta.v1.GetGroupsResponse
 */
export class GetGroupsResponse extends Message<GetGroupsResponse> {
  /**
   * List of groups that match the filter criteria.
   *
   * @generated from field: repeated teleport.okta.v1.GetGroupsResponse.Group groups = 1;
   */
  groups: GetGroupsResponse_Group[] = [];

  constructor(data?: PartialMessage<GetGroupsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.GetGroupsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "groups", kind: "message", T: GetGroupsResponse_Group, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGroupsResponse {
    return new GetGroupsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGroupsResponse {
    return new GetGroupsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGroupsResponse {
    return new GetGroupsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGroupsResponse | PlainMessage<GetGroupsResponse> | undefined, b: GetGroupsResponse | PlainMessage<GetGroupsResponse> | undefined): boolean {
    return proto3.util.equals(GetGroupsResponse, a, b);
  }
}

/**
 * Group contains details of an individual Okta group.
 *
 * @generated from message teleport.okta.v1.GetGroupsResponse.Group
 */
export class GetGroupsResponse_Group extends Message<GetGroupsResponse_Group> {
  /**
   * Name of the group.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Description of the group.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  constructor(data?: PartialMessage<GetGroupsResponse_Group>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.GetGroupsResponse.Group";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGroupsResponse_Group {
    return new GetGroupsResponse_Group().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGroupsResponse_Group {
    return new GetGroupsResponse_Group().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGroupsResponse_Group {
    return new GetGroupsResponse_Group().fromJsonString(jsonString, options);
  }

  static equals(a: GetGroupsResponse_Group | PlainMessage<GetGroupsResponse_Group> | undefined, b: GetGroupsResponse_Group | PlainMessage<GetGroupsResponse_Group> | undefined): boolean {
    return proto3.util.equals(GetGroupsResponse_Group, a, b);
  }
}

/**
 * CreateIntegrationRequest is the request message for enrolling a new Okta integration.
 *
 * @generated from message teleport.okta.v1.CreateIntegrationRequest
 */
export class CreateIntegrationRequest extends Message<CreateIntegrationRequest> {
  /**
   * URL of the Okta organization.
   *
   * @generated from field: string okta_organization_url = 1;
   */
  oktaOrganizationUrl = "";

  /**
   * Credentials to access the Okta API.
   *
   * @generated from field: teleport.okta.v1.OktaAPICredentials api_credentials = 2;
   */
  apiCredentials?: OktaAPICredentials;

  /**
   * SCIM token for integration.
   *
   * @generated from field: string scim_token = 3;
   */
  scimToken = "";

  /**
   * Enable synchronization of access lists.
   *
   * @generated from field: bool enable_access_list_sync = 4;
   */
  enableAccessListSync = false;

  /**
   * Enable user synchronization.
   *
   * @generated from field: bool enable_user_sync = 5;
   */
  enableUserSync = false;

  /**
   * Enable synchronization of app groups.
   *
   * @generated from field: bool enable_app_group_sync = 6;
   */
  enableAppGroupSync = false;

  /**
   * Settings related to access list synchronization.
   *
   * @generated from field: teleport.okta.v1.AccessListSettings access_list_settings = 7;
   */
  accessListSettings?: AccessListSettings;

  /**
   * Option to reuse an existing connector.
   *
   * @generated from field: string reuse_connector = 8;
   */
  reuseConnector = "";

  /**
   * SSO metadata URL for integration.
   *
   * @generated from field: string sso_metadata_url = 9;
   */
  ssoMetadataUrl = "";

  constructor(data?: PartialMessage<CreateIntegrationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.CreateIntegrationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "okta_organization_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "api_credentials", kind: "message", T: OktaAPICredentials },
    { no: 3, name: "scim_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "enable_access_list_sync", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "enable_user_sync", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "enable_app_group_sync", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "access_list_settings", kind: "message", T: AccessListSettings },
    { no: 8, name: "reuse_connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "sso_metadata_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateIntegrationRequest {
    return new CreateIntegrationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateIntegrationRequest {
    return new CreateIntegrationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateIntegrationRequest {
    return new CreateIntegrationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateIntegrationRequest | PlainMessage<CreateIntegrationRequest> | undefined, b: CreateIntegrationRequest | PlainMessage<CreateIntegrationRequest> | undefined): boolean {
    return proto3.util.equals(CreateIntegrationRequest, a, b);
  }
}

/**
 * UpdateIntegrationRequest is the request message for updating an existing Okta integration.
 *
 * @generated from message teleport.okta.v1.UpdateIntegrationRequest
 */
export class UpdateIntegrationRequest extends Message<UpdateIntegrationRequest> {
  /**
   * Credentials to access the Okta API.
   *
   * @generated from field: teleport.okta.v1.OktaAPICredentials api_credentials = 2;
   */
  apiCredentials?: OktaAPICredentials;

  /**
   * SCIM token for integration.
   *
   * @generated from field: string scim_token = 3;
   */
  scimToken = "";

  /**
   * Enable synchronization of access lists.
   *
   * @generated from field: bool enable_access_list_sync = 4;
   */
  enableAccessListSync = false;

  /**
   * Enable user synchronization.
   *
   * @generated from field: bool enable_user_sync = 5;
   */
  enableUserSync = false;

  /**
   * Enable synchronization of app groups.
   *
   * @generated from field: bool enable_app_group_sync = 6;
   */
  enableAppGroupSync = false;

  /**
   * Settings related to access list synchronization.
   *
   * @generated from field: teleport.okta.v1.AccessListSettings access_list_settings = 7;
   */
  accessListSettings?: AccessListSettings;

  /**
   * Option to reuse an existing connector.
   *
   * @generated from field: string reuse_connector = 8;
   */
  reuseConnector = "";

  /**
   * SSO metadata URL for integration.
   *
   * @generated from field: string sso_metadata_url = 9;
   */
  ssoMetadataUrl = "";

  constructor(data?: PartialMessage<UpdateIntegrationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.UpdateIntegrationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "api_credentials", kind: "message", T: OktaAPICredentials },
    { no: 3, name: "scim_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "enable_access_list_sync", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "enable_user_sync", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "enable_app_group_sync", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "access_list_settings", kind: "message", T: AccessListSettings },
    { no: 8, name: "reuse_connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "sso_metadata_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateIntegrationRequest {
    return new UpdateIntegrationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateIntegrationRequest {
    return new UpdateIntegrationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateIntegrationRequest {
    return new UpdateIntegrationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateIntegrationRequest | PlainMessage<UpdateIntegrationRequest> | undefined, b: UpdateIntegrationRequest | PlainMessage<UpdateIntegrationRequest> | undefined): boolean {
    return proto3.util.equals(UpdateIntegrationRequest, a, b);
  }
}

/**
 * AccessListSettings contains the settings for access list synchronization.
 *
 * @generated from message teleport.okta.v1.AccessListSettings
 */
export class AccessListSettings extends Message<AccessListSettings> {
  /**
   * Filters for groups to include in the access list.
   *
   * @generated from field: repeated string group_filters = 2;
   */
  groupFilters: string[] = [];

  /**
   * Filters for apps to include in the access list.
   *
   * @generated from field: repeated string app_filters = 3;
   */
  appFilters: string[] = [];

  /**
   * Default owner for access list items.
   *
   * @generated from field: repeated string default_owner = 4;
   */
  defaultOwner: string[] = [];

  constructor(data?: PartialMessage<AccessListSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.AccessListSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "group_filters", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "app_filters", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "default_owner", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListSettings {
    return new AccessListSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListSettings {
    return new AccessListSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListSettings {
    return new AccessListSettings().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListSettings | PlainMessage<AccessListSettings> | undefined, b: AccessListSettings | PlainMessage<AccessListSettings> | undefined): boolean {
    return proto3.util.equals(AccessListSettings, a, b);
  }
}

/**
 * OktaAPICredentials provides the authentication details for accessing Okta API.
 *
 * @generated from message teleport.okta.v1.OktaAPICredentials
 */
export class OktaAPICredentials extends Message<OktaAPICredentials> {
  /**
   * @generated from oneof teleport.okta.v1.OktaAPICredentials.auth
   */
  auth: {
    /**
     * OAuth ClientID for authentication.
     *
     * @generated from field: string oauth_id = 1;
     */
    value: string;
    case: "oauthId";
  } | {
    /**
     * SSWS Bearer token for authentication.
     *
     * @generated from field: string ssws_bearer_token = 2;
     */
    value: string;
    case: "sswsBearerToken";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<OktaAPICredentials>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.OktaAPICredentials";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "oauth_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "auth" },
    { no: 2, name: "ssws_bearer_token", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "auth" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OktaAPICredentials {
    return new OktaAPICredentials().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OktaAPICredentials {
    return new OktaAPICredentials().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OktaAPICredentials {
    return new OktaAPICredentials().fromJsonString(jsonString, options);
  }

  static equals(a: OktaAPICredentials | PlainMessage<OktaAPICredentials> | undefined, b: OktaAPICredentials | PlainMessage<OktaAPICredentials> | undefined): boolean {
    return proto3.util.equals(OktaAPICredentials, a, b);
  }
}

/**
 * CreateIntegrationResponse is the response message for enrolling a new Okta integration.
 *
 * @generated from message teleport.okta.v1.CreateIntegrationResponse
 */
export class CreateIntegrationResponse extends Message<CreateIntegrationResponse> {
  /**
   * Plugin information.
   *
   * @generated from field: types.PluginV1 plugin = 1;
   */
  plugin?: PluginV1;

  /**
   * Details of the connector.
   *
   * @generated from field: teleport.okta.v1.ConnectorInfo connector_info = 2;
   */
  connectorInfo?: ConnectorInfo;

  constructor(data?: PartialMessage<CreateIntegrationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.CreateIntegrationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plugin", kind: "message", T: PluginV1 },
    { no: 2, name: "connector_info", kind: "message", T: ConnectorInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateIntegrationResponse {
    return new CreateIntegrationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateIntegrationResponse {
    return new CreateIntegrationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateIntegrationResponse {
    return new CreateIntegrationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateIntegrationResponse | PlainMessage<CreateIntegrationResponse> | undefined, b: CreateIntegrationResponse | PlainMessage<CreateIntegrationResponse> | undefined): boolean {
    return proto3.util.equals(CreateIntegrationResponse, a, b);
  }
}

/**
 * UpdateIntegrationResponse is the request for listing paginated Okta import rules.
 *
 * @generated from message teleport.okta.v1.UpdateIntegrationResponse
 */
export class UpdateIntegrationResponse extends Message<UpdateIntegrationResponse> {
  /**
   * Plugin information.
   *
   * @generated from field: types.PluginV1 plugin = 1;
   */
  plugin?: PluginV1;

  /**
   * Details of the connector.
   *
   * @generated from field: teleport.okta.v1.ConnectorInfo connector_info = 2;
   */
  connectorInfo?: ConnectorInfo;

  constructor(data?: PartialMessage<UpdateIntegrationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.UpdateIntegrationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plugin", kind: "message", T: PluginV1 },
    { no: 2, name: "connector_info", kind: "message", T: ConnectorInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateIntegrationResponse {
    return new UpdateIntegrationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateIntegrationResponse {
    return new UpdateIntegrationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateIntegrationResponse {
    return new UpdateIntegrationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateIntegrationResponse | PlainMessage<UpdateIntegrationResponse> | undefined, b: UpdateIntegrationResponse | PlainMessage<UpdateIntegrationResponse> | undefined): boolean {
    return proto3.util.equals(UpdateIntegrationResponse, a, b);
  }
}

/**
 * ConnectorInfo contains information about the connector.
 *
 * @generated from message teleport.okta.v1.ConnectorInfo
 */
export class ConnectorInfo extends Message<ConnectorInfo> {
  /**
   * Okta application ID.
   *
   * @generated from field: string okta_app_id = 1;
   */
  oktaAppId = "";

  /**
   * Name of the Okta application.
   *
   * @generated from field: string okta_app_name = 2;
   */
  oktaAppName = "";

  /**
   * Labels associated with the Okta application.
   *
   * @generated from field: string okta_app_labels = 3;
   */
  oktaAppLabels = "";

  /**
   * Name of the Teleport connector.
   *
   * @generated from field: string teleport_connector_name = 4;
   */
  teleportConnectorName = "";

  constructor(data?: PartialMessage<ConnectorInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.ConnectorInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "okta_app_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "okta_app_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "okta_app_labels", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "teleport_connector_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectorInfo {
    return new ConnectorInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectorInfo {
    return new ConnectorInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectorInfo {
    return new ConnectorInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectorInfo | PlainMessage<ConnectorInfo> | undefined, b: ConnectorInfo | PlainMessage<ConnectorInfo> | undefined): boolean {
    return proto3.util.equals(ConnectorInfo, a, b);
  }
}

/**
 * ValidateClientCredentialsRequest is the request message for validating client credentials.
 *
 * @generated from message teleport.okta.v1.ValidateClientCredentialsRequest
 */
export class ValidateClientCredentialsRequest extends Message<ValidateClientCredentialsRequest> {
  /**
   * URL of the Okta organization.
   *
   * @generated from field: string okta_organization_url = 1;
   */
  oktaOrganizationUrl = "";

  /**
   * Credentials to access the Okta API.
   *
   * @generated from field: teleport.okta.v1.OktaAPICredentials api_credentials = 2;
   */
  apiCredentials?: OktaAPICredentials;

  constructor(data?: PartialMessage<ValidateClientCredentialsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.ValidateClientCredentialsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "okta_organization_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "api_credentials", kind: "message", T: OktaAPICredentials },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateClientCredentialsRequest {
    return new ValidateClientCredentialsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateClientCredentialsRequest {
    return new ValidateClientCredentialsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateClientCredentialsRequest {
    return new ValidateClientCredentialsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateClientCredentialsRequest | PlainMessage<ValidateClientCredentialsRequest> | undefined, b: ValidateClientCredentialsRequest | PlainMessage<ValidateClientCredentialsRequest> | undefined): boolean {
    return proto3.util.equals(ValidateClientCredentialsRequest, a, b);
  }
}

/**
 * ValidateClientCredentialsResponse is the response message for validating client credentials.
 *
 * @generated from message teleport.okta.v1.ValidateClientCredentialsResponse
 */
export class ValidateClientCredentialsResponse extends Message<ValidateClientCredentialsResponse> {
  constructor(data?: PartialMessage<ValidateClientCredentialsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.ValidateClientCredentialsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateClientCredentialsResponse {
    return new ValidateClientCredentialsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateClientCredentialsResponse {
    return new ValidateClientCredentialsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateClientCredentialsResponse {
    return new ValidateClientCredentialsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateClientCredentialsResponse | PlainMessage<ValidateClientCredentialsResponse> | undefined, b: ValidateClientCredentialsResponse | PlainMessage<ValidateClientCredentialsResponse> | undefined): boolean {
    return proto3.util.equals(ValidateClientCredentialsResponse, a, b);
  }
}

/**
 * ListOktaImportRulesRequest is the request for listing paginated Okta import rules.
 *
 * @generated from message teleport.okta.v1.ListOktaImportRulesRequest
 */
export class ListOktaImportRulesRequest extends Message<ListOktaImportRulesRequest> {
  /**
   * page_size is the number of results to return. If page_size is 0, a default page size of 200 will be chosen.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * page_token is the next_token value returned from a previous List request if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListOktaImportRulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.ListOktaImportRulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOktaImportRulesRequest {
    return new ListOktaImportRulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOktaImportRulesRequest {
    return new ListOktaImportRulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOktaImportRulesRequest {
    return new ListOktaImportRulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOktaImportRulesRequest | PlainMessage<ListOktaImportRulesRequest> | undefined, b: ListOktaImportRulesRequest | PlainMessage<ListOktaImportRulesRequest> | undefined): boolean {
    return proto3.util.equals(ListOktaImportRulesRequest, a, b);
  }
}

/**
 * ListOktaImportRulesResponse is the response for listing paginated Okta import rules.
 *
 * @generated from message teleport.okta.v1.ListOktaImportRulesResponse
 */
export class ListOktaImportRulesResponse extends Message<ListOktaImportRulesResponse> {
  /**
   * import_rules is the list of import rules.
   *
   * @generated from field: repeated types.OktaImportRuleV1 import_rules = 1;
   */
  importRules: OktaImportRuleV1[] = [];

  /**
   * next_page_token is the next page token. If there are no more results, it will be empty.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListOktaImportRulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.ListOktaImportRulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "import_rules", kind: "message", T: OktaImportRuleV1, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOktaImportRulesResponse {
    return new ListOktaImportRulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOktaImportRulesResponse {
    return new ListOktaImportRulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOktaImportRulesResponse {
    return new ListOktaImportRulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOktaImportRulesResponse | PlainMessage<ListOktaImportRulesResponse> | undefined, b: ListOktaImportRulesResponse | PlainMessage<ListOktaImportRulesResponse> | undefined): boolean {
    return proto3.util.equals(ListOktaImportRulesResponse, a, b);
  }
}

/**
 * GetOktaImportRuleRequest is the request for retrieving an Okta import rule.
 *
 * @generated from message teleport.okta.v1.GetOktaImportRuleRequest
 */
export class GetOktaImportRuleRequest extends Message<GetOktaImportRuleRequest> {
  /**
   * name is the name of the Okta import rule.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetOktaImportRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.GetOktaImportRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOktaImportRuleRequest {
    return new GetOktaImportRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOktaImportRuleRequest {
    return new GetOktaImportRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOktaImportRuleRequest {
    return new GetOktaImportRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOktaImportRuleRequest | PlainMessage<GetOktaImportRuleRequest> | undefined, b: GetOktaImportRuleRequest | PlainMessage<GetOktaImportRuleRequest> | undefined): boolean {
    return proto3.util.equals(GetOktaImportRuleRequest, a, b);
  }
}

/**
 * CreateOktaImportRuleRequest is a request for creating an Okta import rule.
 *
 * @generated from message teleport.okta.v1.CreateOktaImportRuleRequest
 */
export class CreateOktaImportRuleRequest extends Message<CreateOktaImportRuleRequest> {
  /**
   * import_rule is the Okta import rule to create.
   *
   * @generated from field: types.OktaImportRuleV1 import_rule = 1;
   */
  importRule?: OktaImportRuleV1;

  constructor(data?: PartialMessage<CreateOktaImportRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.CreateOktaImportRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "import_rule", kind: "message", T: OktaImportRuleV1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOktaImportRuleRequest {
    return new CreateOktaImportRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOktaImportRuleRequest {
    return new CreateOktaImportRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOktaImportRuleRequest {
    return new CreateOktaImportRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOktaImportRuleRequest | PlainMessage<CreateOktaImportRuleRequest> | undefined, b: CreateOktaImportRuleRequest | PlainMessage<CreateOktaImportRuleRequest> | undefined): boolean {
    return proto3.util.equals(CreateOktaImportRuleRequest, a, b);
  }
}

/**
 * UpdateOktaImportRuleRequest is a request for updating an Okta import rule.
 *
 * @generated from message teleport.okta.v1.UpdateOktaImportRuleRequest
 */
export class UpdateOktaImportRuleRequest extends Message<UpdateOktaImportRuleRequest> {
  /**
   * import_rule is the Okta import rule to update.
   *
   * @generated from field: types.OktaImportRuleV1 import_rule = 1;
   */
  importRule?: OktaImportRuleV1;

  constructor(data?: PartialMessage<UpdateOktaImportRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.UpdateOktaImportRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "import_rule", kind: "message", T: OktaImportRuleV1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOktaImportRuleRequest {
    return new UpdateOktaImportRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOktaImportRuleRequest {
    return new UpdateOktaImportRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOktaImportRuleRequest {
    return new UpdateOktaImportRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOktaImportRuleRequest | PlainMessage<UpdateOktaImportRuleRequest> | undefined, b: UpdateOktaImportRuleRequest | PlainMessage<UpdateOktaImportRuleRequest> | undefined): boolean {
    return proto3.util.equals(UpdateOktaImportRuleRequest, a, b);
  }
}

/**
 * DeleteOktaImportRuleRequest is the request for deleting an Okta import rule.
 *
 * @generated from message teleport.okta.v1.DeleteOktaImportRuleRequest
 */
export class DeleteOktaImportRuleRequest extends Message<DeleteOktaImportRuleRequest> {
  /**
   * name is the name of the Okta import rule.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteOktaImportRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.DeleteOktaImportRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOktaImportRuleRequest {
    return new DeleteOktaImportRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOktaImportRuleRequest {
    return new DeleteOktaImportRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOktaImportRuleRequest {
    return new DeleteOktaImportRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOktaImportRuleRequest | PlainMessage<DeleteOktaImportRuleRequest> | undefined, b: DeleteOktaImportRuleRequest | PlainMessage<DeleteOktaImportRuleRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOktaImportRuleRequest, a, b);
  }
}

/**
 * DeleteAllOktaImportRulesRequest is the request for deleting all Okta import rules.
 *
 * @generated from message teleport.okta.v1.DeleteAllOktaImportRulesRequest
 */
export class DeleteAllOktaImportRulesRequest extends Message<DeleteAllOktaImportRulesRequest> {
  constructor(data?: PartialMessage<DeleteAllOktaImportRulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.DeleteAllOktaImportRulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAllOktaImportRulesRequest {
    return new DeleteAllOktaImportRulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAllOktaImportRulesRequest {
    return new DeleteAllOktaImportRulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAllOktaImportRulesRequest {
    return new DeleteAllOktaImportRulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAllOktaImportRulesRequest | PlainMessage<DeleteAllOktaImportRulesRequest> | undefined, b: DeleteAllOktaImportRulesRequest | PlainMessage<DeleteAllOktaImportRulesRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAllOktaImportRulesRequest, a, b);
  }
}

/**
 * ListOktaAssignmentsRequest is the request for listing paginated Okta assignments.
 *
 * @generated from message teleport.okta.v1.ListOktaAssignmentsRequest
 */
export class ListOktaAssignmentsRequest extends Message<ListOktaAssignmentsRequest> {
  /**
   * page_size is the number of results to return. If page_size is 0, a default page size of 200 will be chosen.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * page_token is the next page token to use when retrieving results.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListOktaAssignmentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.ListOktaAssignmentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOktaAssignmentsRequest {
    return new ListOktaAssignmentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOktaAssignmentsRequest {
    return new ListOktaAssignmentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOktaAssignmentsRequest {
    return new ListOktaAssignmentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOktaAssignmentsRequest | PlainMessage<ListOktaAssignmentsRequest> | undefined, b: ListOktaAssignmentsRequest | PlainMessage<ListOktaAssignmentsRequest> | undefined): boolean {
    return proto3.util.equals(ListOktaAssignmentsRequest, a, b);
  }
}

/**
 * ListOktaAssignmentsResponse is the response for listing paginated Okta assignments.
 *
 * @generated from message teleport.okta.v1.ListOktaAssignmentsResponse
 */
export class ListOktaAssignmentsResponse extends Message<ListOktaAssignmentsResponse> {
  /**
   * assignments is the list of assignments.
   *
   * @generated from field: repeated types.OktaAssignmentV1 assignments = 1;
   */
  assignments: OktaAssignmentV1[] = [];

  /**
   * next_page_token is the next page token. If there are no more results, it will be empty.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListOktaAssignmentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.ListOktaAssignmentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assignments", kind: "message", T: OktaAssignmentV1, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOktaAssignmentsResponse {
    return new ListOktaAssignmentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOktaAssignmentsResponse {
    return new ListOktaAssignmentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOktaAssignmentsResponse {
    return new ListOktaAssignmentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOktaAssignmentsResponse | PlainMessage<ListOktaAssignmentsResponse> | undefined, b: ListOktaAssignmentsResponse | PlainMessage<ListOktaAssignmentsResponse> | undefined): boolean {
    return proto3.util.equals(ListOktaAssignmentsResponse, a, b);
  }
}

/**
 * GetOktaAssignmentRequest is the request for retrieving an Okta assignment.
 *
 * @generated from message teleport.okta.v1.GetOktaAssignmentRequest
 */
export class GetOktaAssignmentRequest extends Message<GetOktaAssignmentRequest> {
  /**
   * name is the name of the Okta assignment.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetOktaAssignmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.GetOktaAssignmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOktaAssignmentRequest {
    return new GetOktaAssignmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOktaAssignmentRequest {
    return new GetOktaAssignmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOktaAssignmentRequest {
    return new GetOktaAssignmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOktaAssignmentRequest | PlainMessage<GetOktaAssignmentRequest> | undefined, b: GetOktaAssignmentRequest | PlainMessage<GetOktaAssignmentRequest> | undefined): boolean {
    return proto3.util.equals(GetOktaAssignmentRequest, a, b);
  }
}

/**
 * CreateOktaAssignmentRequest is a request for creating an Okta assignment.
 *
 * @generated from message teleport.okta.v1.CreateOktaAssignmentRequest
 */
export class CreateOktaAssignmentRequest extends Message<CreateOktaAssignmentRequest> {
  /**
   * assignment is the Okta assignment to create.
   *
   * @generated from field: types.OktaAssignmentV1 assignment = 1;
   */
  assignment?: OktaAssignmentV1;

  constructor(data?: PartialMessage<CreateOktaAssignmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.CreateOktaAssignmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assignment", kind: "message", T: OktaAssignmentV1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOktaAssignmentRequest {
    return new CreateOktaAssignmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOktaAssignmentRequest {
    return new CreateOktaAssignmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOktaAssignmentRequest {
    return new CreateOktaAssignmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOktaAssignmentRequest | PlainMessage<CreateOktaAssignmentRequest> | undefined, b: CreateOktaAssignmentRequest | PlainMessage<CreateOktaAssignmentRequest> | undefined): boolean {
    return proto3.util.equals(CreateOktaAssignmentRequest, a, b);
  }
}

/**
 * UpdateOktaAssignmentRequest is a request for updating an Okta assignment.
 *
 * @generated from message teleport.okta.v1.UpdateOktaAssignmentRequest
 */
export class UpdateOktaAssignmentRequest extends Message<UpdateOktaAssignmentRequest> {
  /**
   * assignment is the Okta assignment to update.
   *
   * @generated from field: types.OktaAssignmentV1 assignment = 1;
   */
  assignment?: OktaAssignmentV1;

  constructor(data?: PartialMessage<UpdateOktaAssignmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.UpdateOktaAssignmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assignment", kind: "message", T: OktaAssignmentV1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOktaAssignmentRequest {
    return new UpdateOktaAssignmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOktaAssignmentRequest {
    return new UpdateOktaAssignmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOktaAssignmentRequest {
    return new UpdateOktaAssignmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOktaAssignmentRequest | PlainMessage<UpdateOktaAssignmentRequest> | undefined, b: UpdateOktaAssignmentRequest | PlainMessage<UpdateOktaAssignmentRequest> | undefined): boolean {
    return proto3.util.equals(UpdateOktaAssignmentRequest, a, b);
  }
}

/**
 * UpdateOktaAssignmentStatusRequest is a request for updating an Okta assignment status.
 *
 * @generated from message teleport.okta.v1.UpdateOktaAssignmentStatusRequest
 */
export class UpdateOktaAssignmentStatusRequest extends Message<UpdateOktaAssignmentStatusRequest> {
  /**
   * name is the name of the Okta assignment.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * status is the status to update the assignment to.
   *
   * @generated from field: types.OktaAssignmentSpecV1.OktaAssignmentStatus status = 2;
   */
  status = OktaAssignmentSpecV1_OktaAssignmentStatus.UNKNOWN;

  /**
   * timeHasPassed is the amount of time that must have passed since the last transition
   * in order to set the new transition.
   *
   * @generated from field: google.protobuf.Duration time_has_passed = 3;
   */
  timeHasPassed?: Duration;

  constructor(data?: PartialMessage<UpdateOktaAssignmentStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.UpdateOktaAssignmentStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(OktaAssignmentSpecV1_OktaAssignmentStatus) },
    { no: 3, name: "time_has_passed", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOktaAssignmentStatusRequest {
    return new UpdateOktaAssignmentStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOktaAssignmentStatusRequest {
    return new UpdateOktaAssignmentStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOktaAssignmentStatusRequest {
    return new UpdateOktaAssignmentStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOktaAssignmentStatusRequest | PlainMessage<UpdateOktaAssignmentStatusRequest> | undefined, b: UpdateOktaAssignmentStatusRequest | PlainMessage<UpdateOktaAssignmentStatusRequest> | undefined): boolean {
    return proto3.util.equals(UpdateOktaAssignmentStatusRequest, a, b);
  }
}

/**
 * DeleteOktaAssignmentRequest is the request for deleting an Okta assignment.
 *
 * @generated from message teleport.okta.v1.DeleteOktaAssignmentRequest
 */
export class DeleteOktaAssignmentRequest extends Message<DeleteOktaAssignmentRequest> {
  /**
   * name is the name of the Okta assignment.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteOktaAssignmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.DeleteOktaAssignmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOktaAssignmentRequest {
    return new DeleteOktaAssignmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOktaAssignmentRequest {
    return new DeleteOktaAssignmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOktaAssignmentRequest {
    return new DeleteOktaAssignmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOktaAssignmentRequest | PlainMessage<DeleteOktaAssignmentRequest> | undefined, b: DeleteOktaAssignmentRequest | PlainMessage<DeleteOktaAssignmentRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOktaAssignmentRequest, a, b);
  }
}

/**
 * DeleteAllOktaAssignmentsRequest is the request for deleting all Okta assignments.
 *
 * @generated from message teleport.okta.v1.DeleteAllOktaAssignmentsRequest
 */
export class DeleteAllOktaAssignmentsRequest extends Message<DeleteAllOktaAssignmentsRequest> {
  constructor(data?: PartialMessage<DeleteAllOktaAssignmentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.okta.v1.DeleteAllOktaAssignmentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAllOktaAssignmentsRequest {
    return new DeleteAllOktaAssignmentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAllOktaAssignmentsRequest {
    return new DeleteAllOktaAssignmentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAllOktaAssignmentsRequest {
    return new DeleteAllOktaAssignmentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAllOktaAssignmentsRequest | PlainMessage<DeleteAllOktaAssignmentsRequest> | undefined, b: DeleteAllOktaAssignmentsRequest | PlainMessage<DeleteAllOktaAssignmentsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAllOktaAssignmentsRequest, a, b);
  }
}

