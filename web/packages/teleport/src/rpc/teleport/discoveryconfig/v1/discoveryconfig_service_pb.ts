// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/discoveryconfig/v1/discoveryconfig_service.proto (package teleport.discoveryconfig.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { DiscoveryConfig, DiscoveryConfigStatus } from "./discoveryconfig_pb.js";

/**
 * ListDiscoveryConfigsRequest is a request for a paginated list of DiscoveryConfigs.
 *
 * @generated from message teleport.discoveryconfig.v1.ListDiscoveryConfigsRequest
 */
export class ListDiscoveryConfigsRequest extends Message<ListDiscoveryConfigsRequest> {
  /**
   * page_size is the size of the page to request.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * next_token is the page token.
   *
   * @generated from field: string next_token = 2;
   */
  nextToken = "";

  constructor(data?: PartialMessage<ListDiscoveryConfigsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.discoveryconfig.v1.ListDiscoveryConfigsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "next_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDiscoveryConfigsRequest {
    return new ListDiscoveryConfigsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDiscoveryConfigsRequest {
    return new ListDiscoveryConfigsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDiscoveryConfigsRequest {
    return new ListDiscoveryConfigsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDiscoveryConfigsRequest | PlainMessage<ListDiscoveryConfigsRequest> | undefined, b: ListDiscoveryConfigsRequest | PlainMessage<ListDiscoveryConfigsRequest> | undefined): boolean {
    return proto3.util.equals(ListDiscoveryConfigsRequest, a, b);
  }
}

/**
 * ListDiscoveryConfigsResponse is the response for ListDiscoveryConfigsRequest.
 *
 * @generated from message teleport.discoveryconfig.v1.ListDiscoveryConfigsResponse
 */
export class ListDiscoveryConfigsResponse extends Message<ListDiscoveryConfigsResponse> {
  /**
   * DiscoveryConfigs is a list of DiscoveryConfigs.
   *
   * @generated from field: repeated teleport.discoveryconfig.v1.DiscoveryConfig discovery_configs = 1;
   */
  discoveryConfigs: DiscoveryConfig[] = [];

  /**
   * NextKey is the key for the next page of DiscoveryConfigs.
   *
   * @generated from field: string next_key = 2;
   */
  nextKey = "";

  /**
   * TotalCount is the total number of discovery_config in all pages.
   *
   * @generated from field: int32 total_count = 3;
   */
  totalCount = 0;

  constructor(data?: PartialMessage<ListDiscoveryConfigsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.discoveryconfig.v1.ListDiscoveryConfigsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "discovery_configs", kind: "message", T: DiscoveryConfig, repeated: true },
    { no: 2, name: "next_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "total_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDiscoveryConfigsResponse {
    return new ListDiscoveryConfigsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDiscoveryConfigsResponse {
    return new ListDiscoveryConfigsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDiscoveryConfigsResponse {
    return new ListDiscoveryConfigsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDiscoveryConfigsResponse | PlainMessage<ListDiscoveryConfigsResponse> | undefined, b: ListDiscoveryConfigsResponse | PlainMessage<ListDiscoveryConfigsResponse> | undefined): boolean {
    return proto3.util.equals(ListDiscoveryConfigsResponse, a, b);
  }
}

/**
 * GetDiscoveryConfigRequest is a request for a specific DiscoveryConfig resource.
 *
 * @generated from message teleport.discoveryconfig.v1.GetDiscoveryConfigRequest
 */
export class GetDiscoveryConfigRequest extends Message<GetDiscoveryConfigRequest> {
  /**
   * Name is the name of the DiscoveryConfig to be requested.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetDiscoveryConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.discoveryconfig.v1.GetDiscoveryConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDiscoveryConfigRequest {
    return new GetDiscoveryConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDiscoveryConfigRequest {
    return new GetDiscoveryConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDiscoveryConfigRequest {
    return new GetDiscoveryConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDiscoveryConfigRequest | PlainMessage<GetDiscoveryConfigRequest> | undefined, b: GetDiscoveryConfigRequest | PlainMessage<GetDiscoveryConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetDiscoveryConfigRequest, a, b);
  }
}

/**
 * CreateDiscoveryConfigRequest is the request to create the provided DiscoveryConfig.
 *
 * @generated from message teleport.discoveryconfig.v1.CreateDiscoveryConfigRequest
 */
export class CreateDiscoveryConfigRequest extends Message<CreateDiscoveryConfigRequest> {
  /**
   * DiscoveryConfig is the DiscoveryConfig to be created.
   *
   * @generated from field: teleport.discoveryconfig.v1.DiscoveryConfig discovery_config = 1;
   */
  discoveryConfig?: DiscoveryConfig;

  constructor(data?: PartialMessage<CreateDiscoveryConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.discoveryconfig.v1.CreateDiscoveryConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "discovery_config", kind: "message", T: DiscoveryConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDiscoveryConfigRequest {
    return new CreateDiscoveryConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDiscoveryConfigRequest {
    return new CreateDiscoveryConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDiscoveryConfigRequest {
    return new CreateDiscoveryConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDiscoveryConfigRequest | PlainMessage<CreateDiscoveryConfigRequest> | undefined, b: CreateDiscoveryConfigRequest | PlainMessage<CreateDiscoveryConfigRequest> | undefined): boolean {
    return proto3.util.equals(CreateDiscoveryConfigRequest, a, b);
  }
}

/**
 * UpdateDiscoveryConfigRequest is the request to update the provided DiscoveryConfig.
 *
 * @generated from message teleport.discoveryconfig.v1.UpdateDiscoveryConfigRequest
 */
export class UpdateDiscoveryConfigRequest extends Message<UpdateDiscoveryConfigRequest> {
  /**
   * DiscoveryConfig is the DiscoveryConfig to be updated.
   *
   * @generated from field: teleport.discoveryconfig.v1.DiscoveryConfig discovery_config = 1;
   */
  discoveryConfig?: DiscoveryConfig;

  constructor(data?: PartialMessage<UpdateDiscoveryConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.discoveryconfig.v1.UpdateDiscoveryConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "discovery_config", kind: "message", T: DiscoveryConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDiscoveryConfigRequest {
    return new UpdateDiscoveryConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDiscoveryConfigRequest {
    return new UpdateDiscoveryConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDiscoveryConfigRequest {
    return new UpdateDiscoveryConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDiscoveryConfigRequest | PlainMessage<UpdateDiscoveryConfigRequest> | undefined, b: UpdateDiscoveryConfigRequest | PlainMessage<UpdateDiscoveryConfigRequest> | undefined): boolean {
    return proto3.util.equals(UpdateDiscoveryConfigRequest, a, b);
  }
}

/**
 * UpsertDiscoveryConfigRequest is the request to upsert the provided DiscoveryConfig.
 *
 * @generated from message teleport.discoveryconfig.v1.UpsertDiscoveryConfigRequest
 */
export class UpsertDiscoveryConfigRequest extends Message<UpsertDiscoveryConfigRequest> {
  /**
   * DiscoveryConfig is the DiscoveryConfig to be upserted.
   *
   * @generated from field: teleport.discoveryconfig.v1.DiscoveryConfig discovery_config = 1;
   */
  discoveryConfig?: DiscoveryConfig;

  constructor(data?: PartialMessage<UpsertDiscoveryConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.discoveryconfig.v1.UpsertDiscoveryConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "discovery_config", kind: "message", T: DiscoveryConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertDiscoveryConfigRequest {
    return new UpsertDiscoveryConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertDiscoveryConfigRequest {
    return new UpsertDiscoveryConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertDiscoveryConfigRequest {
    return new UpsertDiscoveryConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertDiscoveryConfigRequest | PlainMessage<UpsertDiscoveryConfigRequest> | undefined, b: UpsertDiscoveryConfigRequest | PlainMessage<UpsertDiscoveryConfigRequest> | undefined): boolean {
    return proto3.util.equals(UpsertDiscoveryConfigRequest, a, b);
  }
}

/**
 * DeleteDiscoveryConfigRequest is a request for deleting a specific DiscoveryConfig resource.
 *
 * @generated from message teleport.discoveryconfig.v1.DeleteDiscoveryConfigRequest
 */
export class DeleteDiscoveryConfigRequest extends Message<DeleteDiscoveryConfigRequest> {
  /**
   * Name is the name of the DiscoveryConfig to be deleted.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteDiscoveryConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.discoveryconfig.v1.DeleteDiscoveryConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDiscoveryConfigRequest {
    return new DeleteDiscoveryConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDiscoveryConfigRequest {
    return new DeleteDiscoveryConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDiscoveryConfigRequest {
    return new DeleteDiscoveryConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDiscoveryConfigRequest | PlainMessage<DeleteDiscoveryConfigRequest> | undefined, b: DeleteDiscoveryConfigRequest | PlainMessage<DeleteDiscoveryConfigRequest> | undefined): boolean {
    return proto3.util.equals(DeleteDiscoveryConfigRequest, a, b);
  }
}

/**
 * DeleteAllDiscoveryConfigsRequest is the request for deleting all DiscoveryConfigs.
 *
 * @generated from message teleport.discoveryconfig.v1.DeleteAllDiscoveryConfigsRequest
 */
export class DeleteAllDiscoveryConfigsRequest extends Message<DeleteAllDiscoveryConfigsRequest> {
  constructor(data?: PartialMessage<DeleteAllDiscoveryConfigsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.discoveryconfig.v1.DeleteAllDiscoveryConfigsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAllDiscoveryConfigsRequest {
    return new DeleteAllDiscoveryConfigsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAllDiscoveryConfigsRequest {
    return new DeleteAllDiscoveryConfigsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAllDiscoveryConfigsRequest {
    return new DeleteAllDiscoveryConfigsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAllDiscoveryConfigsRequest | PlainMessage<DeleteAllDiscoveryConfigsRequest> | undefined, b: DeleteAllDiscoveryConfigsRequest | PlainMessage<DeleteAllDiscoveryConfigsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAllDiscoveryConfigsRequest, a, b);
  }
}

/**
 * UpdateDiscoveryConfigStatusRequest is the request to update the status field of the provided
 * Discovery Config.
 *
 * @generated from message teleport.discoveryconfig.v1.UpdateDiscoveryConfigStatusRequest
 */
export class UpdateDiscoveryConfigStatusRequest extends Message<UpdateDiscoveryConfigStatusRequest> {
  /**
   * Name is the name of the DiscoveryConfig to receive the status update.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * status is the status payload to be persisted.
   *
   * @generated from field: teleport.discoveryconfig.v1.DiscoveryConfigStatus status = 2;
   */
  status?: DiscoveryConfigStatus;

  constructor(data?: PartialMessage<UpdateDiscoveryConfigStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.discoveryconfig.v1.UpdateDiscoveryConfigStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "message", T: DiscoveryConfigStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDiscoveryConfigStatusRequest {
    return new UpdateDiscoveryConfigStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDiscoveryConfigStatusRequest {
    return new UpdateDiscoveryConfigStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDiscoveryConfigStatusRequest {
    return new UpdateDiscoveryConfigStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDiscoveryConfigStatusRequest | PlainMessage<UpdateDiscoveryConfigStatusRequest> | undefined, b: UpdateDiscoveryConfigStatusRequest | PlainMessage<UpdateDiscoveryConfigStatusRequest> | undefined): boolean {
    return proto3.util.equals(UpdateDiscoveryConfigStatusRequest, a, b);
  }
}

