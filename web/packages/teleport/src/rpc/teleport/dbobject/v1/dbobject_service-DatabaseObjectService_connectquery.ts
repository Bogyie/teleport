// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts"
// @generated from file teleport/dbobject/v1/dbobject_service.proto (package teleport.dbobject.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { CreateDatabaseObjectRequest, DeleteDatabaseObjectRequest, GetDatabaseObjectRequest, ListDatabaseObjectsRequest, ListDatabaseObjectsResponse, UpdateDatabaseObjectRequest, UpsertDatabaseObjectRequest } from "./dbobject_service_pb.js";
import { DatabaseObject } from "./dbobject_pb.js";

/**
 * GetDatabaseObject is used to query a database object resource by its name.
 *
 * This will return a NotFound error if the specified database object does not exist.
 *
 * @generated from rpc teleport.dbobject.v1.DatabaseObjectService.GetDatabaseObject
 */
export const getDatabaseObject = {
  localName: "getDatabaseObject",
  name: "GetDatabaseObject",
  kind: MethodKind.Unary,
  I: GetDatabaseObjectRequest,
  O: DatabaseObject,
  service: {
    typeName: "teleport.dbobject.v1.DatabaseObjectService"
  }
} as const;

/**
 * ListDatabaseObjects is used to query database objects.
 *
 * Follows the pagination semantics of
 * https://cloud.google.com/apis/design/standard_methods#list.
 *
 * @generated from rpc teleport.dbobject.v1.DatabaseObjectService.ListDatabaseObjects
 */
export const listDatabaseObjects = {
  localName: "listDatabaseObjects",
  name: "ListDatabaseObjects",
  kind: MethodKind.Unary,
  I: ListDatabaseObjectsRequest,
  O: ListDatabaseObjectsResponse,
  service: {
    typeName: "teleport.dbobject.v1.DatabaseObjectService"
  }
} as const;

/**
 * CreateDatabaseObject is used to create a database object.
 *
 * This will return an error if a database object by that name already exists.
 *
 * @generated from rpc teleport.dbobject.v1.DatabaseObjectService.CreateDatabaseObject
 */
export const createDatabaseObject = {
  localName: "createDatabaseObject",
  name: "CreateDatabaseObject",
  kind: MethodKind.Unary,
  I: CreateDatabaseObjectRequest,
  O: DatabaseObject,
  service: {
    typeName: "teleport.dbobject.v1.DatabaseObjectService"
  }
} as const;

/**
 * UpdateDatabaseObject is used to modify an existing database object.
 *
 * @generated from rpc teleport.dbobject.v1.DatabaseObjectService.UpdateDatabaseObject
 */
export const updateDatabaseObject = {
  localName: "updateDatabaseObject",
  name: "UpdateDatabaseObject",
  kind: MethodKind.Unary,
  I: UpdateDatabaseObjectRequest,
  O: DatabaseObject,
  service: {
    typeName: "teleport.dbobject.v1.DatabaseObjectService"
  }
} as const;

/**
 * UpsertDatabaseObject is used to create or replace an existing database object.
 *
 * Prefer using CreateDatabaseObject and UpdateDatabaseObject.
 *
 * @generated from rpc teleport.dbobject.v1.DatabaseObjectService.UpsertDatabaseObject
 */
export const upsertDatabaseObject = {
  localName: "upsertDatabaseObject",
  name: "UpsertDatabaseObject",
  kind: MethodKind.Unary,
  I: UpsertDatabaseObjectRequest,
  O: DatabaseObject,
  service: {
    typeName: "teleport.dbobject.v1.DatabaseObjectService"
  }
} as const;

/**
 * DeleteDatabaseObject is used to delete a specific database object.
 *
 * This will return a NotFound error if the specified database object does not exist.
 *
 * @generated from rpc teleport.dbobject.v1.DatabaseObjectService.DeleteDatabaseObject
 */
export const deleteDatabaseObject = {
  localName: "deleteDatabaseObject",
  name: "DeleteDatabaseObject",
  kind: MethodKind.Unary,
  I: DeleteDatabaseObjectRequest,
  O: Empty,
  service: {
    typeName: "teleport.dbobject.v1.DatabaseObjectService"
  }
} as const;
