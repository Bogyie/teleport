// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/dbobject/v1/dbobject_service.proto (package teleport.dbobject.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { DatabaseObject } from "./dbobject_pb.js";

/**
 * The request for CreateDatabaseObject.
 *
 * @generated from message teleport.dbobject.v1.CreateDatabaseObjectRequest
 */
export class CreateDatabaseObjectRequest extends Message<CreateDatabaseObjectRequest> {
  /**
   * The database object to create.
   *
   * @generated from field: teleport.dbobject.v1.DatabaseObject object = 1;
   */
  object?: DatabaseObject;

  constructor(data?: PartialMessage<CreateDatabaseObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.dbobject.v1.CreateDatabaseObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: DatabaseObject },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDatabaseObjectRequest {
    return new CreateDatabaseObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDatabaseObjectRequest {
    return new CreateDatabaseObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDatabaseObjectRequest {
    return new CreateDatabaseObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDatabaseObjectRequest | PlainMessage<CreateDatabaseObjectRequest> | undefined, b: CreateDatabaseObjectRequest | PlainMessage<CreateDatabaseObjectRequest> | undefined): boolean {
    return proto3.util.equals(CreateDatabaseObjectRequest, a, b);
  }
}

/**
 * The request for GetDatabaseObject.
 *
 * @generated from message teleport.dbobject.v1.GetDatabaseObjectRequest
 */
export class GetDatabaseObjectRequest extends Message<GetDatabaseObjectRequest> {
  /**
   * The name of the database object to fetch.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetDatabaseObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.dbobject.v1.GetDatabaseObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDatabaseObjectRequest {
    return new GetDatabaseObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDatabaseObjectRequest {
    return new GetDatabaseObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDatabaseObjectRequest {
    return new GetDatabaseObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDatabaseObjectRequest | PlainMessage<GetDatabaseObjectRequest> | undefined, b: GetDatabaseObjectRequest | PlainMessage<GetDatabaseObjectRequest> | undefined): boolean {
    return proto3.util.equals(GetDatabaseObjectRequest, a, b);
  }
}

/**
 * The request for ListDatabaseObjects.
 *
 * @generated from message teleport.dbobject.v1.ListDatabaseObjectsRequest
 */
export class ListDatabaseObjectsRequest extends Message<ListDatabaseObjectsRequest> {
  /**
   * The maximum number of items to return.
   * The server may impose a different page size at its discretion.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * The page_token is the next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListDatabaseObjectsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.dbobject.v1.ListDatabaseObjectsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDatabaseObjectsRequest {
    return new ListDatabaseObjectsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDatabaseObjectsRequest {
    return new ListDatabaseObjectsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDatabaseObjectsRequest {
    return new ListDatabaseObjectsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDatabaseObjectsRequest | PlainMessage<ListDatabaseObjectsRequest> | undefined, b: ListDatabaseObjectsRequest | PlainMessage<ListDatabaseObjectsRequest> | undefined): boolean {
    return proto3.util.equals(ListDatabaseObjectsRequest, a, b);
  }
}

/**
 * The response for ListDatabaseObjects.
 *
 * @generated from message teleport.dbobject.v1.ListDatabaseObjectsResponse
 */
export class ListDatabaseObjectsResponse extends Message<ListDatabaseObjectsResponse> {
  /**
   * The page of database objects that matched the request.
   *
   * @generated from field: repeated teleport.dbobject.v1.DatabaseObject objects = 1;
   */
  objects: DatabaseObject[] = [];

  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListDatabaseObjectsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.dbobject.v1.ListDatabaseObjectsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "objects", kind: "message", T: DatabaseObject, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDatabaseObjectsResponse {
    return new ListDatabaseObjectsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDatabaseObjectsResponse {
    return new ListDatabaseObjectsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDatabaseObjectsResponse {
    return new ListDatabaseObjectsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDatabaseObjectsResponse | PlainMessage<ListDatabaseObjectsResponse> | undefined, b: ListDatabaseObjectsResponse | PlainMessage<ListDatabaseObjectsResponse> | undefined): boolean {
    return proto3.util.equals(ListDatabaseObjectsResponse, a, b);
  }
}

/**
 * The request for UpdateDatabaseObject.
 *
 * @generated from message teleport.dbobject.v1.UpdateDatabaseObjectRequest
 */
export class UpdateDatabaseObjectRequest extends Message<UpdateDatabaseObjectRequest> {
  /**
   * The database object to replace.
   *
   * @generated from field: teleport.dbobject.v1.DatabaseObject object = 1;
   */
  object?: DatabaseObject;

  constructor(data?: PartialMessage<UpdateDatabaseObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.dbobject.v1.UpdateDatabaseObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: DatabaseObject },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDatabaseObjectRequest {
    return new UpdateDatabaseObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDatabaseObjectRequest {
    return new UpdateDatabaseObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDatabaseObjectRequest {
    return new UpdateDatabaseObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDatabaseObjectRequest | PlainMessage<UpdateDatabaseObjectRequest> | undefined, b: UpdateDatabaseObjectRequest | PlainMessage<UpdateDatabaseObjectRequest> | undefined): boolean {
    return proto3.util.equals(UpdateDatabaseObjectRequest, a, b);
  }
}

/**
 * The request for UpsertDatabaseObject.
 *
 * @generated from message teleport.dbobject.v1.UpsertDatabaseObjectRequest
 */
export class UpsertDatabaseObjectRequest extends Message<UpsertDatabaseObjectRequest> {
  /**
   * The database object to create or replace.
   *
   * @generated from field: teleport.dbobject.v1.DatabaseObject object = 1;
   */
  object?: DatabaseObject;

  constructor(data?: PartialMessage<UpsertDatabaseObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.dbobject.v1.UpsertDatabaseObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: DatabaseObject },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertDatabaseObjectRequest {
    return new UpsertDatabaseObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertDatabaseObjectRequest {
    return new UpsertDatabaseObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertDatabaseObjectRequest {
    return new UpsertDatabaseObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertDatabaseObjectRequest | PlainMessage<UpsertDatabaseObjectRequest> | undefined, b: UpsertDatabaseObjectRequest | PlainMessage<UpsertDatabaseObjectRequest> | undefined): boolean {
    return proto3.util.equals(UpsertDatabaseObjectRequest, a, b);
  }
}

/**
 * The request for DeleteDatabaseObject.
 *
 * @generated from message teleport.dbobject.v1.DeleteDatabaseObjectRequest
 */
export class DeleteDatabaseObjectRequest extends Message<DeleteDatabaseObjectRequest> {
  /**
   * The name of the database object to delete.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteDatabaseObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.dbobject.v1.DeleteDatabaseObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDatabaseObjectRequest {
    return new DeleteDatabaseObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDatabaseObjectRequest {
    return new DeleteDatabaseObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDatabaseObjectRequest {
    return new DeleteDatabaseObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDatabaseObjectRequest | PlainMessage<DeleteDatabaseObjectRequest> | undefined, b: DeleteDatabaseObjectRequest | PlainMessage<DeleteDatabaseObjectRequest> | undefined): boolean {
    return proto3.util.equals(DeleteDatabaseObjectRequest, a, b);
  }
}

