// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/usageevents/v1/usageevents.proto (package teleport.usageevents.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * DiscoverResource represents a resource type.
 *
 * @generated from enum teleport.usageevents.v1.DiscoverResource
 */
export enum DiscoverResource {
  /**
   * @generated from enum value: DISCOVER_RESOURCE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_SERVER = 1;
   */
  SERVER = 1,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_KUBERNETES = 2;
   */
  KUBERNETES = 2,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_SELF_HOSTED = 3;
   */
  DATABASE_POSTGRES_SELF_HOSTED = 3,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_SELF_HOSTED = 4;
   */
  DATABASE_MYSQL_SELF_HOSTED = 4,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MONGODB_SELF_HOSTED = 5;
   */
  DATABASE_MONGODB_SELF_HOSTED = 5,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_RDS = 6;
   */
  DATABASE_POSTGRES_RDS = 6,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_RDS = 7;
   */
  DATABASE_MYSQL_RDS = 7,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_APPLICATION_HTTP = 8;
   */
  APPLICATION_HTTP = 8,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_APPLICATION_TCP = 9;
   */
  APPLICATION_TCP = 9,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_WINDOWS_DESKTOP = 10;
   */
  WINDOWS_DESKTOP = 10,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_RDS = 11;
   */
  DATABASE_SQLSERVER_RDS = 11,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT = 12;
   */
  DATABASE_POSTGRES_REDSHIFT = 12,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_SELF_HOSTED = 13;
   */
  DATABASE_SQLSERVER_SELF_HOSTED = 13,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_SELF_HOSTED = 14;
   */
  DATABASE_REDIS_SELF_HOSTED = 14,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_GCP = 15;
   */
  DATABASE_POSTGRES_GCP = 15,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_GCP = 16;
   */
  DATABASE_MYSQL_GCP = 16,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_GCP = 17;
   */
  DATABASE_SQLSERVER_GCP = 17,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT_SERVERLESS = 18;
   */
  DATABASE_POSTGRES_REDSHIFT_SERVERLESS = 18,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_AZURE = 19;
   */
  DATABASE_POSTGRES_AZURE = 19,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_DYNAMODB = 20;
   */
  DATABASE_DYNAMODB = 20,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_CASSANDRA_KEYSPACES = 21;
   */
  DATABASE_CASSANDRA_KEYSPACES = 21,

  /**
   * Cassandra & ScyllaDb
   *
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_CASSANDRA_SELF_HOSTED = 22;
   */
  DATABASE_CASSANDRA_SELF_HOSTED = 22,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_ELASTICSEARCH_SELF_HOSTED = 23;
   */
  DATABASE_ELASTICSEARCH_SELF_HOSTED = 23,

  /**
   * Elasticache & MemoryDb
   *
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_ELASTICACHE = 24;
   */
  DATABASE_REDIS_ELASTICACHE = 24,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_MEMORYDB = 25;
   */
  DATABASE_REDIS_MEMORYDB = 25,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_AZURE_CACHE = 26;
   */
  DATABASE_REDIS_AZURE_CACHE = 26,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_CLUSTER_SELF_HOSTED = 27;
   */
  DATABASE_REDIS_CLUSTER_SELF_HOSTED = 27,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_AZURE = 28;
   */
  DATABASE_MYSQL_AZURE = 28,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_AZURE = 29;
   */
  DATABASE_SQLSERVER_AZURE = 29,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_MICROSOFT = 30;
   */
  DATABASE_SQLSERVER_MICROSOFT = 30,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_COCKROACHDB_SELF_HOSTED = 31;
   */
  DATABASE_COCKROACHDB_SELF_HOSTED = 31,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MONGODB_ATLAS = 32;
   */
  DATABASE_MONGODB_ATLAS = 32,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SNOWFLAKE = 33;
   */
  DATABASE_SNOWFLAKE = 33,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DOC_DATABASE_RDS_PROXY = 34;
   */
  DOC_DATABASE_RDS_PROXY = 34,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DOC_DATABASE_HIGH_AVAILABILITY = 35;
   */
  DOC_DATABASE_HIGH_AVAILABILITY = 35,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DOC_DATABASE_DYNAMIC_REGISTRATION = 36;
   */
  DOC_DATABASE_DYNAMIC_REGISTRATION = 36,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_SAML_APPLICATION = 37;
   */
  SAML_APPLICATION = 37,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_EC2_INSTANCE = 38;
   */
  EC2_INSTANCE = 38,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DOC_WINDOWS_DESKTOP_NON_AD = 39;
   */
  DOC_WINDOWS_DESKTOP_NON_AD = 39,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_KUBERNETES_EKS = 40;
   */
  KUBERNETES_EKS = 40,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_APPLICATION_AWS_CONSOLE = 41;
   */
  APPLICATION_AWS_CONSOLE = 41,
}
// Retrieve enum metadata with: proto3.getEnumType(DiscoverResource)
proto3.util.setEnumType(DiscoverResource, "teleport.usageevents.v1.DiscoverResource", [
  { no: 0, name: "DISCOVER_RESOURCE_UNSPECIFIED" },
  { no: 1, name: "DISCOVER_RESOURCE_SERVER" },
  { no: 2, name: "DISCOVER_RESOURCE_KUBERNETES" },
  { no: 3, name: "DISCOVER_RESOURCE_DATABASE_POSTGRES_SELF_HOSTED" },
  { no: 4, name: "DISCOVER_RESOURCE_DATABASE_MYSQL_SELF_HOSTED" },
  { no: 5, name: "DISCOVER_RESOURCE_DATABASE_MONGODB_SELF_HOSTED" },
  { no: 6, name: "DISCOVER_RESOURCE_DATABASE_POSTGRES_RDS" },
  { no: 7, name: "DISCOVER_RESOURCE_DATABASE_MYSQL_RDS" },
  { no: 8, name: "DISCOVER_RESOURCE_APPLICATION_HTTP" },
  { no: 9, name: "DISCOVER_RESOURCE_APPLICATION_TCP" },
  { no: 10, name: "DISCOVER_RESOURCE_WINDOWS_DESKTOP" },
  { no: 11, name: "DISCOVER_RESOURCE_DATABASE_SQLSERVER_RDS" },
  { no: 12, name: "DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT" },
  { no: 13, name: "DISCOVER_RESOURCE_DATABASE_SQLSERVER_SELF_HOSTED" },
  { no: 14, name: "DISCOVER_RESOURCE_DATABASE_REDIS_SELF_HOSTED" },
  { no: 15, name: "DISCOVER_RESOURCE_DATABASE_POSTGRES_GCP" },
  { no: 16, name: "DISCOVER_RESOURCE_DATABASE_MYSQL_GCP" },
  { no: 17, name: "DISCOVER_RESOURCE_DATABASE_SQLSERVER_GCP" },
  { no: 18, name: "DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT_SERVERLESS" },
  { no: 19, name: "DISCOVER_RESOURCE_DATABASE_POSTGRES_AZURE" },
  { no: 20, name: "DISCOVER_RESOURCE_DATABASE_DYNAMODB" },
  { no: 21, name: "DISCOVER_RESOURCE_DATABASE_CASSANDRA_KEYSPACES" },
  { no: 22, name: "DISCOVER_RESOURCE_DATABASE_CASSANDRA_SELF_HOSTED" },
  { no: 23, name: "DISCOVER_RESOURCE_DATABASE_ELASTICSEARCH_SELF_HOSTED" },
  { no: 24, name: "DISCOVER_RESOURCE_DATABASE_REDIS_ELASTICACHE" },
  { no: 25, name: "DISCOVER_RESOURCE_DATABASE_REDIS_MEMORYDB" },
  { no: 26, name: "DISCOVER_RESOURCE_DATABASE_REDIS_AZURE_CACHE" },
  { no: 27, name: "DISCOVER_RESOURCE_DATABASE_REDIS_CLUSTER_SELF_HOSTED" },
  { no: 28, name: "DISCOVER_RESOURCE_DATABASE_MYSQL_AZURE" },
  { no: 29, name: "DISCOVER_RESOURCE_DATABASE_SQLSERVER_AZURE" },
  { no: 30, name: "DISCOVER_RESOURCE_DATABASE_SQLSERVER_MICROSOFT" },
  { no: 31, name: "DISCOVER_RESOURCE_DATABASE_COCKROACHDB_SELF_HOSTED" },
  { no: 32, name: "DISCOVER_RESOURCE_DATABASE_MONGODB_ATLAS" },
  { no: 33, name: "DISCOVER_RESOURCE_DATABASE_SNOWFLAKE" },
  { no: 34, name: "DISCOVER_RESOURCE_DOC_DATABASE_RDS_PROXY" },
  { no: 35, name: "DISCOVER_RESOURCE_DOC_DATABASE_HIGH_AVAILABILITY" },
  { no: 36, name: "DISCOVER_RESOURCE_DOC_DATABASE_DYNAMIC_REGISTRATION" },
  { no: 37, name: "DISCOVER_RESOURCE_SAML_APPLICATION" },
  { no: 38, name: "DISCOVER_RESOURCE_EC2_INSTANCE" },
  { no: 39, name: "DISCOVER_RESOURCE_DOC_WINDOWS_DESKTOP_NON_AD" },
  { no: 40, name: "DISCOVER_RESOURCE_KUBERNETES_EKS" },
  { no: 41, name: "DISCOVER_RESOURCE_APPLICATION_AWS_CONSOLE" },
]);

/**
 * DiscoverStatus represents a Discover Step outcome.
 *
 * @generated from enum teleport.usageevents.v1.DiscoverStatus
 */
export enum DiscoverStatus {
  /**
   * @generated from enum value: DISCOVER_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The user tried to complete the action and it succeeded.
   *
   * @generated from enum value: DISCOVER_STATUS_SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * The system skipped the step.
   * For example:
   * When setting up a Database and there's already a Database Service proxying the DB.
   * In this case the Database Agent installation is skipped.
   *
   * @generated from enum value: DISCOVER_STATUS_SKIPPED = 2;
   */
  SKIPPED = 2,

  /**
   * The user tried to complete the action and it failed.
   *
   * @generated from enum value: DISCOVER_STATUS_ERROR = 3;
   */
  ERROR = 3,

  /**
   * The user did not complete the action and left the wizard.
   *
   * @generated from enum value: DISCOVER_STATUS_ABORTED = 4;
   */
  ABORTED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(DiscoverStatus)
proto3.util.setEnumType(DiscoverStatus, "teleport.usageevents.v1.DiscoverStatus", [
  { no: 0, name: "DISCOVER_STATUS_UNSPECIFIED" },
  { no: 1, name: "DISCOVER_STATUS_SUCCESS" },
  { no: 2, name: "DISCOVER_STATUS_SKIPPED" },
  { no: 3, name: "DISCOVER_STATUS_ERROR" },
  { no: 4, name: "DISCOVER_STATUS_ABORTED" },
]);

/**
 * CTA represents teleport web UI's call to action buttons.
 * We can't use prehog.v1alpha.CTA here because AuthService (and thus this file)
 * is generated with gogofast, so we just copy the enum definition here instead.
 * Make sure you update both.
 *
 * @generated from enum teleport.usageevents.v1.CTA
 */
export enum CTA {
  /**
   * @generated from enum value: CTA_UNSPECIFIED = 0;
   */
  CTA_UNSPECIFIED = 0,

  /**
   * @generated from enum value: CTA_AUTH_CONNECTOR = 1;
   */
  CTA_AUTH_CONNECTOR = 1,

  /**
   * @generated from enum value: CTA_ACTIVE_SESSIONS = 2;
   */
  CTA_ACTIVE_SESSIONS = 2,

  /**
   * @generated from enum value: CTA_ACCESS_REQUESTS = 3;
   */
  CTA_ACCESS_REQUESTS = 3,

  /**
   * @generated from enum value: CTA_PREMIUM_SUPPORT = 4;
   */
  CTA_PREMIUM_SUPPORT = 4,

  /**
   * @generated from enum value: CTA_TRUSTED_DEVICES = 5;
   */
  CTA_TRUSTED_DEVICES = 5,

  /**
   * @generated from enum value: CTA_UPGRADE_BANNER = 6;
   */
  CTA_UPGRADE_BANNER = 6,

  /**
   * @generated from enum value: CTA_BILLING_SUMMARY = 7;
   */
  CTA_BILLING_SUMMARY = 7,

  /**
   * @generated from enum value: CTA_ACCESS_LIST = 8;
   */
  CTA_ACCESS_LIST = 8,

  /**
   * @generated from enum value: CTA_ACCESS_MONITORING = 9;
   */
  CTA_ACCESS_MONITORING = 9,

  /**
   * @generated from enum value: CTA_EXTERNAL_AUDIT_STORAGE = 10;
   */
  CTA_EXTERNAL_AUDIT_STORAGE = 10,

  /**
   * @generated from enum value: CTA_OKTA_USER_SYNC = 11;
   */
  CTA_OKTA_USER_SYNC = 11,

  /**
   * @generated from enum value: CTA_ENTRA_ID = 12;
   */
  CTA_ENTRA_ID = 12,
}
// Retrieve enum metadata with: proto3.getEnumType(CTA)
proto3.util.setEnumType(CTA, "teleport.usageevents.v1.CTA", [
  { no: 0, name: "CTA_UNSPECIFIED" },
  { no: 1, name: "CTA_AUTH_CONNECTOR" },
  { no: 2, name: "CTA_ACTIVE_SESSIONS" },
  { no: 3, name: "CTA_ACCESS_REQUESTS" },
  { no: 4, name: "CTA_PREMIUM_SUPPORT" },
  { no: 5, name: "CTA_TRUSTED_DEVICES" },
  { no: 6, name: "CTA_UPGRADE_BANNER" },
  { no: 7, name: "CTA_BILLING_SUMMARY" },
  { no: 8, name: "CTA_ACCESS_LIST" },
  { no: 9, name: "CTA_ACCESS_MONITORING" },
  { no: 10, name: "CTA_EXTERNAL_AUDIT_STORAGE" },
  { no: 11, name: "CTA_OKTA_USER_SYNC" },
  { no: 12, name: "CTA_ENTRA_ID" },
]);

/**
 * IntegrationEnrollKind represents the types of integration that
 * can be enrolled.
 *
 * @generated from enum teleport.usageevents.v1.IntegrationEnrollKind
 */
export enum IntegrationEnrollKind {
  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_SLACK = 1;
   */
  SLACK = 1,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_AWS_OIDC = 2;
   */
  AWS_OIDC = 2,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_PAGERDUTY = 3;
   */
  PAGERDUTY = 3,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_EMAIL = 4;
   */
  EMAIL = 4,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_JIRA = 5;
   */
  JIRA = 5,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_DISCORD = 6;
   */
  DISCORD = 6,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MATTERMOST = 7;
   */
  MATTERMOST = 7,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MS_TEAMS = 8;
   */
  MS_TEAMS = 8,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_OPSGENIE = 9;
   */
  OPSGENIE = 9,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_OKTA = 10;
   */
  OKTA = 10,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_JAMF = 11;
   */
  JAMF = 11,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID = 12;
   */
  MACHINE_ID = 12,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_GITHUB_ACTIONS = 13;
   */
  MACHINE_ID_GITHUB_ACTIONS = 13,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_CIRCLECI = 14;
   */
  MACHINE_ID_CIRCLECI = 14,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_GITLAB = 15;
   */
  MACHINE_ID_GITLAB = 15,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_JENKINS = 16;
   */
  MACHINE_ID_JENKINS = 16,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_ANSIBLE = 17;
   */
  MACHINE_ID_ANSIBLE = 17,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_SERVICENOW = 18;
   */
  SERVICENOW = 18,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_ENTRA_ID = 19;
   */
  ENTRA_ID = 19,
}
// Retrieve enum metadata with: proto3.getEnumType(IntegrationEnrollKind)
proto3.util.setEnumType(IntegrationEnrollKind, "teleport.usageevents.v1.IntegrationEnrollKind", [
  { no: 0, name: "INTEGRATION_ENROLL_KIND_UNSPECIFIED" },
  { no: 1, name: "INTEGRATION_ENROLL_KIND_SLACK" },
  { no: 2, name: "INTEGRATION_ENROLL_KIND_AWS_OIDC" },
  { no: 3, name: "INTEGRATION_ENROLL_KIND_PAGERDUTY" },
  { no: 4, name: "INTEGRATION_ENROLL_KIND_EMAIL" },
  { no: 5, name: "INTEGRATION_ENROLL_KIND_JIRA" },
  { no: 6, name: "INTEGRATION_ENROLL_KIND_DISCORD" },
  { no: 7, name: "INTEGRATION_ENROLL_KIND_MATTERMOST" },
  { no: 8, name: "INTEGRATION_ENROLL_KIND_MS_TEAMS" },
  { no: 9, name: "INTEGRATION_ENROLL_KIND_OPSGENIE" },
  { no: 10, name: "INTEGRATION_ENROLL_KIND_OKTA" },
  { no: 11, name: "INTEGRATION_ENROLL_KIND_JAMF" },
  { no: 12, name: "INTEGRATION_ENROLL_KIND_MACHINE_ID" },
  { no: 13, name: "INTEGRATION_ENROLL_KIND_MACHINE_ID_GITHUB_ACTIONS" },
  { no: 14, name: "INTEGRATION_ENROLL_KIND_MACHINE_ID_CIRCLECI" },
  { no: 15, name: "INTEGRATION_ENROLL_KIND_MACHINE_ID_GITLAB" },
  { no: 16, name: "INTEGRATION_ENROLL_KIND_MACHINE_ID_JENKINS" },
  { no: 17, name: "INTEGRATION_ENROLL_KIND_MACHINE_ID_ANSIBLE" },
  { no: 18, name: "INTEGRATION_ENROLL_KIND_SERVICENOW" },
  { no: 19, name: "INTEGRATION_ENROLL_KIND_ENTRA_ID" },
]);

/**
 * Feature is name of Teleport feature
 *
 * @generated from enum teleport.usageevents.v1.Feature
 */
export enum Feature {
  /**
   * @generated from enum value: FEATURE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FEATURE_TRUSTED_DEVICES = 1;
   */
  TRUSTED_DEVICES = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Feature)
proto3.util.setEnumType(Feature, "teleport.usageevents.v1.Feature", [
  { no: 0, name: "FEATURE_UNSPECIFIED" },
  { no: 1, name: "FEATURE_TRUSTED_DEVICES" },
]);

/**
 * FeatureRecommendationStatus is feature recommendation status.
 *
 * @generated from enum teleport.usageevents.v1.FeatureRecommendationStatus
 */
export enum FeatureRecommendationStatus {
  /**
   * @generated from enum value: FEATURE_RECOMMENDATION_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * FEATURE_RECOMMENDATION_STATUS_NOTIFIED is emitted when a feature is recommended (notified in UI) to user.
   *
   * @generated from enum value: FEATURE_RECOMMENDATION_STATUS_NOTIFIED = 1;
   */
  NOTIFIED = 1,

  /**
   * FEATURE_RECOMMENDATION_STATUS_DONE is emitted when user completes the desired CTA.
   *
   * @generated from enum value: FEATURE_RECOMMENDATION_STATUS_DONE = 2;
   */
  DONE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(FeatureRecommendationStatus)
proto3.util.setEnumType(FeatureRecommendationStatus, "teleport.usageevents.v1.FeatureRecommendationStatus", [
  { no: 0, name: "FEATURE_RECOMMENDATION_STATUS_UNSPECIFIED" },
  { no: 1, name: "FEATURE_RECOMMENDATION_STATUS_NOTIFIED" },
  { no: 2, name: "FEATURE_RECOMMENDATION_STATUS_DONE" },
]);

/**
 * UIBannerClickEvent is a usage event sent by the UI when the upgrade
 * banner is clicked.
 *
 * @generated from message teleport.usageevents.v1.UIBannerClickEvent
 */
export class UIBannerClickEvent extends Message<UIBannerClickEvent> {
  /**
   * The cluster alert name.
   *
   * @generated from field: string alert = 1;
   */
  alert = "";

  constructor(data?: PartialMessage<UIBannerClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIBannerClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alert", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIBannerClickEvent {
    return new UIBannerClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIBannerClickEvent {
    return new UIBannerClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIBannerClickEvent {
    return new UIBannerClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIBannerClickEvent | PlainMessage<UIBannerClickEvent> | undefined, b: UIBannerClickEvent | PlainMessage<UIBannerClickEvent> | undefined): boolean {
    return proto3.util.equals(UIBannerClickEvent, a, b);
  }
}

/**
 * UIOnboardCompleteGoToDashboardClickEvent is a UI event sent when initial
 * registration is complete.
 *
 * @generated from message teleport.usageevents.v1.UIOnboardCompleteGoToDashboardClickEvent
 */
export class UIOnboardCompleteGoToDashboardClickEvent extends Message<UIOnboardCompleteGoToDashboardClickEvent> {
  /**
   * The event username. Not extracted from identity as this is pre-registration.
   *
   * @generated from field: string username = 1;
   */
  username = "";

  constructor(data?: PartialMessage<UIOnboardCompleteGoToDashboardClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIOnboardCompleteGoToDashboardClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIOnboardCompleteGoToDashboardClickEvent {
    return new UIOnboardCompleteGoToDashboardClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIOnboardCompleteGoToDashboardClickEvent {
    return new UIOnboardCompleteGoToDashboardClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIOnboardCompleteGoToDashboardClickEvent {
    return new UIOnboardCompleteGoToDashboardClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIOnboardCompleteGoToDashboardClickEvent | PlainMessage<UIOnboardCompleteGoToDashboardClickEvent> | undefined, b: UIOnboardCompleteGoToDashboardClickEvent | PlainMessage<UIOnboardCompleteGoToDashboardClickEvent> | undefined): boolean {
    return proto3.util.equals(UIOnboardCompleteGoToDashboardClickEvent, a, b);
  }
}

/**
 * UIOnboardAddFirstResourceClickEvent is a UI event sent when a user clicks the
 * "add first resource" button.
 *
 * @generated from message teleport.usageevents.v1.UIOnboardAddFirstResourceClickEvent
 */
export class UIOnboardAddFirstResourceClickEvent extends Message<UIOnboardAddFirstResourceClickEvent> {
  constructor(data?: PartialMessage<UIOnboardAddFirstResourceClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIOnboardAddFirstResourceClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIOnboardAddFirstResourceClickEvent {
    return new UIOnboardAddFirstResourceClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIOnboardAddFirstResourceClickEvent {
    return new UIOnboardAddFirstResourceClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIOnboardAddFirstResourceClickEvent {
    return new UIOnboardAddFirstResourceClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIOnboardAddFirstResourceClickEvent | PlainMessage<UIOnboardAddFirstResourceClickEvent> | undefined, b: UIOnboardAddFirstResourceClickEvent | PlainMessage<UIOnboardAddFirstResourceClickEvent> | undefined): boolean {
    return proto3.util.equals(UIOnboardAddFirstResourceClickEvent, a, b);
  }
}

/**
 * UIOnboardAddFirstResourceLaterClickEvent is a UI event sent when a user
 * clicks the "add first resource later" button.
 *
 * @generated from message teleport.usageevents.v1.UIOnboardAddFirstResourceLaterClickEvent
 */
export class UIOnboardAddFirstResourceLaterClickEvent extends Message<UIOnboardAddFirstResourceLaterClickEvent> {
  constructor(data?: PartialMessage<UIOnboardAddFirstResourceLaterClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIOnboardAddFirstResourceLaterClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIOnboardAddFirstResourceLaterClickEvent {
    return new UIOnboardAddFirstResourceLaterClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIOnboardAddFirstResourceLaterClickEvent {
    return new UIOnboardAddFirstResourceLaterClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIOnboardAddFirstResourceLaterClickEvent {
    return new UIOnboardAddFirstResourceLaterClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIOnboardAddFirstResourceLaterClickEvent | PlainMessage<UIOnboardAddFirstResourceLaterClickEvent> | undefined, b: UIOnboardAddFirstResourceLaterClickEvent | PlainMessage<UIOnboardAddFirstResourceLaterClickEvent> | undefined): boolean {
    return proto3.util.equals(UIOnboardAddFirstResourceLaterClickEvent, a, b);
  }
}

/**
 * UIOnboardSetCredentialSubmitEvent is a UI event sent during registration when
 * users configure their credentials.
 *
 * @generated from message teleport.usageevents.v1.UIOnboardSetCredentialSubmitEvent
 */
export class UIOnboardSetCredentialSubmitEvent extends Message<UIOnboardSetCredentialSubmitEvent> {
  /**
   * The event username. Not extracted from identity as this is pre-registration.
   *
   * @generated from field: string username = 1;
   */
  username = "";

  constructor(data?: PartialMessage<UIOnboardSetCredentialSubmitEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIOnboardSetCredentialSubmitEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIOnboardSetCredentialSubmitEvent {
    return new UIOnboardSetCredentialSubmitEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIOnboardSetCredentialSubmitEvent {
    return new UIOnboardSetCredentialSubmitEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIOnboardSetCredentialSubmitEvent {
    return new UIOnboardSetCredentialSubmitEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIOnboardSetCredentialSubmitEvent | PlainMessage<UIOnboardSetCredentialSubmitEvent> | undefined, b: UIOnboardSetCredentialSubmitEvent | PlainMessage<UIOnboardSetCredentialSubmitEvent> | undefined): boolean {
    return proto3.util.equals(UIOnboardSetCredentialSubmitEvent, a, b);
  }
}

/**
 * UIOnboardQuestionnaireSubmitEvent is a UI event sent during registration when
 * the user submits their onboarding questionnaire.
 *
 * @generated from message teleport.usageevents.v1.UIOnboardQuestionnaireSubmitEvent
 */
export class UIOnboardQuestionnaireSubmitEvent extends Message<UIOnboardQuestionnaireSubmitEvent> {
  /**
   * The event username. Not extracted from identity as this is pre-registration.
   *
   * @generated from field: string username = 1;
   */
  username = "";

  constructor(data?: PartialMessage<UIOnboardQuestionnaireSubmitEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIOnboardQuestionnaireSubmitEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIOnboardQuestionnaireSubmitEvent {
    return new UIOnboardQuestionnaireSubmitEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIOnboardQuestionnaireSubmitEvent {
    return new UIOnboardQuestionnaireSubmitEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIOnboardQuestionnaireSubmitEvent {
    return new UIOnboardQuestionnaireSubmitEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIOnboardQuestionnaireSubmitEvent | PlainMessage<UIOnboardQuestionnaireSubmitEvent> | undefined, b: UIOnboardQuestionnaireSubmitEvent | PlainMessage<UIOnboardQuestionnaireSubmitEvent> | undefined): boolean {
    return proto3.util.equals(UIOnboardQuestionnaireSubmitEvent, a, b);
  }
}

/**
 * UIOnboardRegisterChallengeSubmitEvent is a UI event sent during registration
 * when the MFA challenge is completed.
 *
 * @generated from message teleport.usageevents.v1.UIOnboardRegisterChallengeSubmitEvent
 */
export class UIOnboardRegisterChallengeSubmitEvent extends Message<UIOnboardRegisterChallengeSubmitEvent> {
  /**
   * The event username. Not extracted from identity as this is pre-registration.
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * The type of MFA used.
   *
   * @generated from field: string mfa_type = 2;
   */
  mfaType = "";

  /**
   * The type of login used.
   *
   * @generated from field: string login_flow = 3;
   */
  loginFlow = "";

  constructor(data?: PartialMessage<UIOnboardRegisterChallengeSubmitEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIOnboardRegisterChallengeSubmitEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mfa_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "login_flow", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIOnboardRegisterChallengeSubmitEvent {
    return new UIOnboardRegisterChallengeSubmitEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIOnboardRegisterChallengeSubmitEvent {
    return new UIOnboardRegisterChallengeSubmitEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIOnboardRegisterChallengeSubmitEvent {
    return new UIOnboardRegisterChallengeSubmitEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIOnboardRegisterChallengeSubmitEvent | PlainMessage<UIOnboardRegisterChallengeSubmitEvent> | undefined, b: UIOnboardRegisterChallengeSubmitEvent | PlainMessage<UIOnboardRegisterChallengeSubmitEvent> | undefined): boolean {
    return proto3.util.equals(UIOnboardRegisterChallengeSubmitEvent, a, b);
  }
}

/**
 * UIRecoveryCodesContinueClickEvent is a UI event sent during
 * registration when the user configures cluster recovery codes.
 *
 * @generated from message teleport.usageevents.v1.UIRecoveryCodesContinueClickEvent
 */
export class UIRecoveryCodesContinueClickEvent extends Message<UIRecoveryCodesContinueClickEvent> {
  /**
   * The event username. Not extracted from identity as this is pre-registration.
   *
   * @generated from field: string username = 1;
   */
  username = "";

  constructor(data?: PartialMessage<UIRecoveryCodesContinueClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIRecoveryCodesContinueClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIRecoveryCodesContinueClickEvent {
    return new UIRecoveryCodesContinueClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIRecoveryCodesContinueClickEvent {
    return new UIRecoveryCodesContinueClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIRecoveryCodesContinueClickEvent {
    return new UIRecoveryCodesContinueClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIRecoveryCodesContinueClickEvent | PlainMessage<UIRecoveryCodesContinueClickEvent> | undefined, b: UIRecoveryCodesContinueClickEvent | PlainMessage<UIRecoveryCodesContinueClickEvent> | undefined): boolean {
    return proto3.util.equals(UIRecoveryCodesContinueClickEvent, a, b);
  }
}

/**
 * UIRecoveryCodesCopyClickEvent is a UI event sent during
 * registration when the user copies recovery codes.
 *
 * @generated from message teleport.usageevents.v1.UIRecoveryCodesCopyClickEvent
 */
export class UIRecoveryCodesCopyClickEvent extends Message<UIRecoveryCodesCopyClickEvent> {
  /**
   * The event username. Not extracted from identity as this is pre-registration.
   *
   * @generated from field: string username = 1;
   */
  username = "";

  constructor(data?: PartialMessage<UIRecoveryCodesCopyClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIRecoveryCodesCopyClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIRecoveryCodesCopyClickEvent {
    return new UIRecoveryCodesCopyClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIRecoveryCodesCopyClickEvent {
    return new UIRecoveryCodesCopyClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIRecoveryCodesCopyClickEvent {
    return new UIRecoveryCodesCopyClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIRecoveryCodesCopyClickEvent | PlainMessage<UIRecoveryCodesCopyClickEvent> | undefined, b: UIRecoveryCodesCopyClickEvent | PlainMessage<UIRecoveryCodesCopyClickEvent> | undefined): boolean {
    return proto3.util.equals(UIRecoveryCodesCopyClickEvent, a, b);
  }
}

/**
 * UIRecoveryCodesPrintClickEvent is a UI event sent during
 * registration when the user prints recovery codes.
 *
 * @generated from message teleport.usageevents.v1.UIRecoveryCodesPrintClickEvent
 */
export class UIRecoveryCodesPrintClickEvent extends Message<UIRecoveryCodesPrintClickEvent> {
  /**
   * The event username. Not extracted from identity as this is pre-registration.
   *
   * @generated from field: string username = 1;
   */
  username = "";

  constructor(data?: PartialMessage<UIRecoveryCodesPrintClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIRecoveryCodesPrintClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIRecoveryCodesPrintClickEvent {
    return new UIRecoveryCodesPrintClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIRecoveryCodesPrintClickEvent {
    return new UIRecoveryCodesPrintClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIRecoveryCodesPrintClickEvent {
    return new UIRecoveryCodesPrintClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIRecoveryCodesPrintClickEvent | PlainMessage<UIRecoveryCodesPrintClickEvent> | undefined, b: UIRecoveryCodesPrintClickEvent | PlainMessage<UIRecoveryCodesPrintClickEvent> | undefined): boolean {
    return proto3.util.equals(UIRecoveryCodesPrintClickEvent, a, b);
  }
}

/**
 * DiscoverMetadata contains common metadata for Discover related events.
 *
 * @generated from message teleport.usageevents.v1.DiscoverMetadata
 */
export class DiscoverMetadata extends Message<DiscoverMetadata> {
  /**
   * Uniquely identifies Discover wizard "session". Will allow to correlate
   * events within the same Discover wizard run.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DiscoverMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.DiscoverMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoverMetadata {
    return new DiscoverMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoverMetadata {
    return new DiscoverMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoverMetadata {
    return new DiscoverMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoverMetadata | PlainMessage<DiscoverMetadata> | undefined, b: DiscoverMetadata | PlainMessage<DiscoverMetadata> | undefined): boolean {
    return proto3.util.equals(DiscoverMetadata, a, b);
  }
}

/**
 * DiscoverResourceMetadata contains common metadata identifying resource type being added.
 *
 * @generated from message teleport.usageevents.v1.DiscoverResourceMetadata
 */
export class DiscoverResourceMetadata extends Message<DiscoverResourceMetadata> {
  /**
   * Resource type that is being added.
   *
   * @generated from field: teleport.usageevents.v1.DiscoverResource resource = 1;
   */
  resource = DiscoverResource.UNSPECIFIED;

  constructor(data?: PartialMessage<DiscoverResourceMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.DiscoverResourceMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "enum", T: proto3.getEnumType(DiscoverResource) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoverResourceMetadata {
    return new DiscoverResourceMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoverResourceMetadata {
    return new DiscoverResourceMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoverResourceMetadata {
    return new DiscoverResourceMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoverResourceMetadata | PlainMessage<DiscoverResourceMetadata> | undefined, b: DiscoverResourceMetadata | PlainMessage<DiscoverResourceMetadata> | undefined): boolean {
    return proto3.util.equals(DiscoverResourceMetadata, a, b);
  }
}

/**
 * DiscoverStepStatus contains fields that track a particular step outcome,
 * for example connection test failed or succeeded, or user aborted the step.
 *
 * @generated from message teleport.usageevents.v1.DiscoverStepStatus
 */
export class DiscoverStepStatus extends Message<DiscoverStepStatus> {
  /**
   * Indicates the step outcome.
   *
   * @generated from field: teleport.usageevents.v1.DiscoverStatus status = 1;
   */
  status = DiscoverStatus.UNSPECIFIED;

  /**
   * Contains error details in case of Error Status.
   * We have to be careful to not include any identifyable infomation like server addresses here.
   *
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<DiscoverStepStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.DiscoverStepStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(DiscoverStatus) },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoverStepStatus {
    return new DiscoverStepStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoverStepStatus {
    return new DiscoverStepStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoverStepStatus {
    return new DiscoverStepStatus().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoverStepStatus | PlainMessage<DiscoverStepStatus> | undefined, b: DiscoverStepStatus | PlainMessage<DiscoverStepStatus> | undefined): boolean {
    return proto3.util.equals(DiscoverStepStatus, a, b);
  }
}

/**
 * UIDiscoverStartedEvent is emitted when the wizard opens.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverStartedEvent
 */
export class UIDiscoverStartedEvent extends Message<UIDiscoverStartedEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 2;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverStartedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverStartedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverStartedEvent {
    return new UIDiscoverStartedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverStartedEvent {
    return new UIDiscoverStartedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverStartedEvent {
    return new UIDiscoverStartedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverStartedEvent | PlainMessage<UIDiscoverStartedEvent> | undefined, b: UIDiscoverStartedEvent | PlainMessage<UIDiscoverStartedEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverStartedEvent, a, b);
  }
}

/**
 * UIDiscoverResourceSelectionEvent is emitted when user selected resource type to add
 * and proceeded to the next step.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverResourceSelectionEvent
 */
export class UIDiscoverResourceSelectionEvent extends Message<UIDiscoverResourceSelectionEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverResourceSelectionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverResourceSelectionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverResourceSelectionEvent {
    return new UIDiscoverResourceSelectionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverResourceSelectionEvent {
    return new UIDiscoverResourceSelectionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverResourceSelectionEvent {
    return new UIDiscoverResourceSelectionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverResourceSelectionEvent | PlainMessage<UIDiscoverResourceSelectionEvent> | undefined, b: UIDiscoverResourceSelectionEvent | PlainMessage<UIDiscoverResourceSelectionEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverResourceSelectionEvent, a, b);
  }
}

/**
 * UIDiscoverIntegrationAWSOIDCConnectEvent is emitted when a user is finished with the step
 * that asks user to setup aws integration or select from a list of existing
 * aws integrations.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverIntegrationAWSOIDCConnectEvent
 */
export class UIDiscoverIntegrationAWSOIDCConnectEvent extends Message<UIDiscoverIntegrationAWSOIDCConnectEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverIntegrationAWSOIDCConnectEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverIntegrationAWSOIDCConnectEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverIntegrationAWSOIDCConnectEvent {
    return new UIDiscoverIntegrationAWSOIDCConnectEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverIntegrationAWSOIDCConnectEvent {
    return new UIDiscoverIntegrationAWSOIDCConnectEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverIntegrationAWSOIDCConnectEvent {
    return new UIDiscoverIntegrationAWSOIDCConnectEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverIntegrationAWSOIDCConnectEvent | PlainMessage<UIDiscoverIntegrationAWSOIDCConnectEvent> | undefined, b: UIDiscoverIntegrationAWSOIDCConnectEvent | PlainMessage<UIDiscoverIntegrationAWSOIDCConnectEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverIntegrationAWSOIDCConnectEvent, a, b);
  }
}

/**
 * UIDiscoverDatabaseRDSEnrollEvent is emitted when a user is finished with
 * the step that asks user to select from a list of RDS databases.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverDatabaseRDSEnrollEvent
 */
export class UIDiscoverDatabaseRDSEnrollEvent extends Message<UIDiscoverDatabaseRDSEnrollEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  /**
   * @generated from field: int64 selected_resources_count = 4;
   */
  selectedResourcesCount = protoInt64.zero;

  constructor(data?: PartialMessage<UIDiscoverDatabaseRDSEnrollEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverDatabaseRDSEnrollEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
    { no: 4, name: "selected_resources_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverDatabaseRDSEnrollEvent {
    return new UIDiscoverDatabaseRDSEnrollEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverDatabaseRDSEnrollEvent {
    return new UIDiscoverDatabaseRDSEnrollEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverDatabaseRDSEnrollEvent {
    return new UIDiscoverDatabaseRDSEnrollEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverDatabaseRDSEnrollEvent | PlainMessage<UIDiscoverDatabaseRDSEnrollEvent> | undefined, b: UIDiscoverDatabaseRDSEnrollEvent | PlainMessage<UIDiscoverDatabaseRDSEnrollEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverDatabaseRDSEnrollEvent, a, b);
  }
}

/**
 * UIDiscoverKubeEKSEnrollEvent is emitted when a user is finished with
 * the step that asks user to select from a list of EKS clusters.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverKubeEKSEnrollEvent
 */
export class UIDiscoverKubeEKSEnrollEvent extends Message<UIDiscoverKubeEKSEnrollEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverKubeEKSEnrollEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverKubeEKSEnrollEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverKubeEKSEnrollEvent {
    return new UIDiscoverKubeEKSEnrollEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverKubeEKSEnrollEvent {
    return new UIDiscoverKubeEKSEnrollEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverKubeEKSEnrollEvent {
    return new UIDiscoverKubeEKSEnrollEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverKubeEKSEnrollEvent | PlainMessage<UIDiscoverKubeEKSEnrollEvent> | undefined, b: UIDiscoverKubeEKSEnrollEvent | PlainMessage<UIDiscoverKubeEKSEnrollEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverKubeEKSEnrollEvent, a, b);
  }
}

/**
 * UICallToActionClickEvent is emmited when a user clicks a Teleport Web UI's CTA.
 *
 * @generated from message teleport.usageevents.v1.UICallToActionClickEvent
 */
export class UICallToActionClickEvent extends Message<UICallToActionClickEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.CTA cta = 1;
   */
  cta = CTA.CTA_UNSPECIFIED;

  constructor(data?: PartialMessage<UICallToActionClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UICallToActionClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cta", kind: "enum", T: proto3.getEnumType(CTA) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UICallToActionClickEvent {
    return new UICallToActionClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UICallToActionClickEvent {
    return new UICallToActionClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UICallToActionClickEvent {
    return new UICallToActionClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UICallToActionClickEvent | PlainMessage<UICallToActionClickEvent> | undefined, b: UICallToActionClickEvent | PlainMessage<UICallToActionClickEvent> | undefined): boolean {
    return proto3.util.equals(UICallToActionClickEvent, a, b);
  }
}

/**
 * UIDiscoverDeployServiceEvent is emitted after the user installs a Teleport Agent.
 * For SSH this is the Teleport 'install-node' script.
 *
 * For Kubernetes this is the teleport-agent helm chart installation.
 *
 * For Database Access this step is the installation of the teleport 'install-db' script.
 * It can be skipped if the cluster already has a Database Service capable of proxying the database.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverDeployServiceEvent
 */
export class UIDiscoverDeployServiceEvent extends Message<UIDiscoverDeployServiceEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  /**
   * @generated from field: teleport.usageevents.v1.UIDiscoverDeployServiceEvent.DeployMethod deploy_method = 4;
   */
  deployMethod = UIDiscoverDeployServiceEvent_DeployMethod.UNSPECIFIED;

  /**
   * @generated from field: teleport.usageevents.v1.UIDiscoverDeployServiceEvent.DeployType deploy_type = 5;
   */
  deployType = UIDiscoverDeployServiceEvent_DeployType.UNSPECIFIED;

  constructor(data?: PartialMessage<UIDiscoverDeployServiceEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverDeployServiceEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
    { no: 4, name: "deploy_method", kind: "enum", T: proto3.getEnumType(UIDiscoverDeployServiceEvent_DeployMethod) },
    { no: 5, name: "deploy_type", kind: "enum", T: proto3.getEnumType(UIDiscoverDeployServiceEvent_DeployType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverDeployServiceEvent {
    return new UIDiscoverDeployServiceEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverDeployServiceEvent {
    return new UIDiscoverDeployServiceEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverDeployServiceEvent {
    return new UIDiscoverDeployServiceEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverDeployServiceEvent | PlainMessage<UIDiscoverDeployServiceEvent> | undefined, b: UIDiscoverDeployServiceEvent | PlainMessage<UIDiscoverDeployServiceEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverDeployServiceEvent, a, b);
  }
}

/**
 * DeployMethod describes the method used to deploy a service.
 *
 * @generated from enum teleport.usageevents.v1.UIDiscoverDeployServiceEvent.DeployMethod
 */
export enum UIDiscoverDeployServiceEvent_DeployMethod {
  /**
   * DEPLOY_METHOD_UNSPECIFIED means there was an existing service
   * so deploying step got skipped.
   *
   * @generated from enum value: DEPLOY_METHOD_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * DEPLOY_METHOD_AUTO means Teleport deployed a service for the user.
   *
   * @generated from enum value: DEPLOY_METHOD_AUTO = 1;
   */
  AUTO = 1,

  /**
   * DEPLOY_METHOD_MANUAL means a user deployed a service by themselves.
   *
   * @generated from enum value: DEPLOY_METHOD_MANUAL = 2;
   */
  MANUAL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(UIDiscoverDeployServiceEvent_DeployMethod)
proto3.util.setEnumType(UIDiscoverDeployServiceEvent_DeployMethod, "teleport.usageevents.v1.UIDiscoverDeployServiceEvent.DeployMethod", [
  { no: 0, name: "DEPLOY_METHOD_UNSPECIFIED" },
  { no: 1, name: "DEPLOY_METHOD_AUTO" },
  { no: 2, name: "DEPLOY_METHOD_MANUAL" },
]);

/**
 * DeployType describes the type of deployment.
 *
 * @generated from enum teleport.usageevents.v1.UIDiscoverDeployServiceEvent.DeployType
 */
export enum UIDiscoverDeployServiceEvent_DeployType {
  /**
   * DEPLOY_METHOD_UNSPECIFIED means there was an existing service
   * so deploying step got skipped.
   *
   * @generated from enum value: DEPLOY_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * DEPLOY_TYPE_INSTALL_SCRIPT means service was deployed using an
   * install script.
   *
   * @generated from enum value: DEPLOY_TYPE_INSTALL_SCRIPT = 1;
   */
  INSTALL_SCRIPT = 1,

  /**
   * DEPLOY_TYPE_AMAZON_ECS means service was deployed using amazon's
   * elastic container service.
   *
   * @generated from enum value: DEPLOY_TYPE_AMAZON_ECS = 2;
   */
  AMAZON_ECS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(UIDiscoverDeployServiceEvent_DeployType)
proto3.util.setEnumType(UIDiscoverDeployServiceEvent_DeployType, "teleport.usageevents.v1.UIDiscoverDeployServiceEvent.DeployType", [
  { no: 0, name: "DEPLOY_TYPE_UNSPECIFIED" },
  { no: 1, name: "DEPLOY_TYPE_INSTALL_SCRIPT" },
  { no: 2, name: "DEPLOY_TYPE_AMAZON_ECS" },
]);

/**
 * UIDiscoverCreateDiscoveryConfigEvent is emitted when a discovery config is successfully created.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverCreateDiscoveryConfigEvent
 */
export class UIDiscoverCreateDiscoveryConfigEvent extends Message<UIDiscoverCreateDiscoveryConfigEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  /**
   * @generated from field: teleport.usageevents.v1.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod config_method = 4;
   */
  configMethod = UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod.UNSPECIFIED;

  constructor(data?: PartialMessage<UIDiscoverCreateDiscoveryConfigEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverCreateDiscoveryConfigEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
    { no: 4, name: "config_method", kind: "enum", T: proto3.getEnumType(UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverCreateDiscoveryConfigEvent {
    return new UIDiscoverCreateDiscoveryConfigEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverCreateDiscoveryConfigEvent {
    return new UIDiscoverCreateDiscoveryConfigEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverCreateDiscoveryConfigEvent {
    return new UIDiscoverCreateDiscoveryConfigEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverCreateDiscoveryConfigEvent | PlainMessage<UIDiscoverCreateDiscoveryConfigEvent> | undefined, b: UIDiscoverCreateDiscoveryConfigEvent | PlainMessage<UIDiscoverCreateDiscoveryConfigEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverCreateDiscoveryConfigEvent, a, b);
  }
}

/**
 * ConfigMethod describes how the discovery config is configured.
 *
 * @generated from enum teleport.usageevents.v1.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod
 */
export enum UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod {
  /**
   * CONFIG_METHOD_UNSPECIFIED means config method unspecified/unset.
   *
   * @generated from enum value: CONFIG_METHOD_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * CONFIG_METHOD_SSM means EC2 auto discovery configured with ssm.
   *
   * @generated from enum value: CONFIG_METHOD_AWS_EC2_SSM = 1;
   */
  AWS_EC2_SSM = 1,

  /**
   * CONFIG_METHOD_SSM means auto discovery configured for EC2 using EICE.
   *
   * @generated from enum value: CONFIG_METHOD_AWS_EC2_EICE = 2;
   */
  AWS_EC2_EICE = 2,

  /**
   * CONFIG_METHOD_SSM means auto discovery configured for RDS using ECS.
   *
   * @generated from enum value: CONFIG_METHOD_AWS_RDS_ECS = 3;
   */
  AWS_RDS_ECS = 3,

  /**
   * CONFIG_METHOD_SSM means auto discovery configured for EKS.
   *
   * @generated from enum value: CONFIG_METHOD_AWS_EKS = 4;
   */
  AWS_EKS = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod)
proto3.util.setEnumType(UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod, "teleport.usageevents.v1.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod", [
  { no: 0, name: "CONFIG_METHOD_UNSPECIFIED" },
  { no: 1, name: "CONFIG_METHOD_AWS_EC2_SSM" },
  { no: 2, name: "CONFIG_METHOD_AWS_EC2_EICE" },
  { no: 3, name: "CONFIG_METHOD_AWS_RDS_ECS" },
  { no: 4, name: "CONFIG_METHOD_AWS_EKS" },
]);

/**
 * UIDiscoverDatabaseRegisterEvent is emitted when a user is finished with the step that registers a database resource.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverDatabaseRegisterEvent
 */
export class UIDiscoverDatabaseRegisterEvent extends Message<UIDiscoverDatabaseRegisterEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverDatabaseRegisterEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverDatabaseRegisterEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverDatabaseRegisterEvent {
    return new UIDiscoverDatabaseRegisterEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverDatabaseRegisterEvent {
    return new UIDiscoverDatabaseRegisterEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverDatabaseRegisterEvent {
    return new UIDiscoverDatabaseRegisterEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverDatabaseRegisterEvent | PlainMessage<UIDiscoverDatabaseRegisterEvent> | undefined, b: UIDiscoverDatabaseRegisterEvent | PlainMessage<UIDiscoverDatabaseRegisterEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverDatabaseRegisterEvent, a, b);
  }
}

/**
 * UIDiscoverDatabaseConfigureMTLSEvent is emitted when a user is finished with the step that configures mutual TLS for a self-hosted database.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverDatabaseConfigureMTLSEvent
 */
export class UIDiscoverDatabaseConfigureMTLSEvent extends Message<UIDiscoverDatabaseConfigureMTLSEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverDatabaseConfigureMTLSEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverDatabaseConfigureMTLSEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverDatabaseConfigureMTLSEvent {
    return new UIDiscoverDatabaseConfigureMTLSEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverDatabaseConfigureMTLSEvent {
    return new UIDiscoverDatabaseConfigureMTLSEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverDatabaseConfigureMTLSEvent {
    return new UIDiscoverDatabaseConfigureMTLSEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverDatabaseConfigureMTLSEvent | PlainMessage<UIDiscoverDatabaseConfigureMTLSEvent> | undefined, b: UIDiscoverDatabaseConfigureMTLSEvent | PlainMessage<UIDiscoverDatabaseConfigureMTLSEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverDatabaseConfigureMTLSEvent, a, b);
  }
}

/**
 * UIDiscoverDesktopActiveDirectoryToolsInstallEvent is emitted when the user is finished with the step that asks user to run the install Active Directory tools script for the Desktop flow.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverDesktopActiveDirectoryToolsInstallEvent
 */
export class UIDiscoverDesktopActiveDirectoryToolsInstallEvent extends Message<UIDiscoverDesktopActiveDirectoryToolsInstallEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverDesktopActiveDirectoryToolsInstallEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverDesktopActiveDirectoryToolsInstallEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverDesktopActiveDirectoryToolsInstallEvent {
    return new UIDiscoverDesktopActiveDirectoryToolsInstallEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverDesktopActiveDirectoryToolsInstallEvent {
    return new UIDiscoverDesktopActiveDirectoryToolsInstallEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverDesktopActiveDirectoryToolsInstallEvent {
    return new UIDiscoverDesktopActiveDirectoryToolsInstallEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverDesktopActiveDirectoryToolsInstallEvent | PlainMessage<UIDiscoverDesktopActiveDirectoryToolsInstallEvent> | undefined, b: UIDiscoverDesktopActiveDirectoryToolsInstallEvent | PlainMessage<UIDiscoverDesktopActiveDirectoryToolsInstallEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverDesktopActiveDirectoryToolsInstallEvent, a, b);
  }
}

/**
 * UIDiscoverDesktopActiveDirectoryConfigureEvent is emitted when the user is finished with the step that asks user to run the Configure Active Directory script for the Desktop flow.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverDesktopActiveDirectoryConfigureEvent
 */
export class UIDiscoverDesktopActiveDirectoryConfigureEvent extends Message<UIDiscoverDesktopActiveDirectoryConfigureEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverDesktopActiveDirectoryConfigureEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverDesktopActiveDirectoryConfigureEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverDesktopActiveDirectoryConfigureEvent {
    return new UIDiscoverDesktopActiveDirectoryConfigureEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverDesktopActiveDirectoryConfigureEvent {
    return new UIDiscoverDesktopActiveDirectoryConfigureEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverDesktopActiveDirectoryConfigureEvent {
    return new UIDiscoverDesktopActiveDirectoryConfigureEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverDesktopActiveDirectoryConfigureEvent | PlainMessage<UIDiscoverDesktopActiveDirectoryConfigureEvent> | undefined, b: UIDiscoverDesktopActiveDirectoryConfigureEvent | PlainMessage<UIDiscoverDesktopActiveDirectoryConfigureEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverDesktopActiveDirectoryConfigureEvent, a, b);
  }
}

/**
 * UIDiscoverAutoDiscoveredResourcesEvent is emitted when the user is finished with the step that auto discovers resources (waiting until resources show up).
 * resources_count field must reflect the latest amount of discovered resources (get the number after user is finished with this step).
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverAutoDiscoveredResourcesEvent
 */
export class UIDiscoverAutoDiscoveredResourcesEvent extends Message<UIDiscoverAutoDiscoveredResourcesEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  /**
   * @generated from field: int64 resources_count = 4;
   */
  resourcesCount = protoInt64.zero;

  constructor(data?: PartialMessage<UIDiscoverAutoDiscoveredResourcesEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverAutoDiscoveredResourcesEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
    { no: 4, name: "resources_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverAutoDiscoveredResourcesEvent {
    return new UIDiscoverAutoDiscoveredResourcesEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverAutoDiscoveredResourcesEvent {
    return new UIDiscoverAutoDiscoveredResourcesEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverAutoDiscoveredResourcesEvent {
    return new UIDiscoverAutoDiscoveredResourcesEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverAutoDiscoveredResourcesEvent | PlainMessage<UIDiscoverAutoDiscoveredResourcesEvent> | undefined, b: UIDiscoverAutoDiscoveredResourcesEvent | PlainMessage<UIDiscoverAutoDiscoveredResourcesEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverAutoDiscoveredResourcesEvent, a, b);
  }
}

/**
 * UIDiscoverEC2InstanceSelectionEvent is emitted when the user is finished with the step that asks the user to select an EC2 Instance to enroll.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverEC2InstanceSelectionEvent
 */
export class UIDiscoverEC2InstanceSelectionEvent extends Message<UIDiscoverEC2InstanceSelectionEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverEC2InstanceSelectionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverEC2InstanceSelectionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverEC2InstanceSelectionEvent {
    return new UIDiscoverEC2InstanceSelectionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverEC2InstanceSelectionEvent {
    return new UIDiscoverEC2InstanceSelectionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverEC2InstanceSelectionEvent {
    return new UIDiscoverEC2InstanceSelectionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverEC2InstanceSelectionEvent | PlainMessage<UIDiscoverEC2InstanceSelectionEvent> | undefined, b: UIDiscoverEC2InstanceSelectionEvent | PlainMessage<UIDiscoverEC2InstanceSelectionEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverEC2InstanceSelectionEvent, a, b);
  }
}

/**
 * UIDiscoverDeployEICEEvent is emitted when the user deploys an EC2 Instance Connect Endpoint.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverDeployEICEEvent
 */
export class UIDiscoverDeployEICEEvent extends Message<UIDiscoverDeployEICEEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverDeployEICEEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverDeployEICEEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverDeployEICEEvent {
    return new UIDiscoverDeployEICEEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverDeployEICEEvent {
    return new UIDiscoverDeployEICEEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverDeployEICEEvent {
    return new UIDiscoverDeployEICEEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverDeployEICEEvent | PlainMessage<UIDiscoverDeployEICEEvent> | undefined, b: UIDiscoverDeployEICEEvent | PlainMessage<UIDiscoverDeployEICEEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverDeployEICEEvent, a, b);
  }
}

/**
 * UIDiscoverCreateNodeEvent is emitted when the node is created in Teleport.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverCreateNodeEvent
 */
export class UIDiscoverCreateNodeEvent extends Message<UIDiscoverCreateNodeEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverCreateNodeEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverCreateNodeEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverCreateNodeEvent {
    return new UIDiscoverCreateNodeEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverCreateNodeEvent {
    return new UIDiscoverCreateNodeEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverCreateNodeEvent {
    return new UIDiscoverCreateNodeEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverCreateNodeEvent | PlainMessage<UIDiscoverCreateNodeEvent> | undefined, b: UIDiscoverCreateNodeEvent | PlainMessage<UIDiscoverCreateNodeEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverCreateNodeEvent, a, b);
  }
}

/**
 * UIDiscoverCreateAppServerEvent is emitted when an app server is created.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverCreateAppServerEvent
 */
export class UIDiscoverCreateAppServerEvent extends Message<UIDiscoverCreateAppServerEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverCreateAppServerEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverCreateAppServerEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverCreateAppServerEvent {
    return new UIDiscoverCreateAppServerEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverCreateAppServerEvent {
    return new UIDiscoverCreateAppServerEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverCreateAppServerEvent {
    return new UIDiscoverCreateAppServerEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverCreateAppServerEvent | PlainMessage<UIDiscoverCreateAppServerEvent> | undefined, b: UIDiscoverCreateAppServerEvent | PlainMessage<UIDiscoverCreateAppServerEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverCreateAppServerEvent, a, b);
  }
}

/**
 * UIDiscoverDatabaseConfigureIAMPolicyEvent is emitted when a user is finished with the step that configures IAM policy for an RDS database.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverDatabaseConfigureIAMPolicyEvent
 */
export class UIDiscoverDatabaseConfigureIAMPolicyEvent extends Message<UIDiscoverDatabaseConfigureIAMPolicyEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverDatabaseConfigureIAMPolicyEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverDatabaseConfigureIAMPolicyEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverDatabaseConfigureIAMPolicyEvent {
    return new UIDiscoverDatabaseConfigureIAMPolicyEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverDatabaseConfigureIAMPolicyEvent {
    return new UIDiscoverDatabaseConfigureIAMPolicyEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverDatabaseConfigureIAMPolicyEvent {
    return new UIDiscoverDatabaseConfigureIAMPolicyEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverDatabaseConfigureIAMPolicyEvent | PlainMessage<UIDiscoverDatabaseConfigureIAMPolicyEvent> | undefined, b: UIDiscoverDatabaseConfigureIAMPolicyEvent | PlainMessage<UIDiscoverDatabaseConfigureIAMPolicyEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverDatabaseConfigureIAMPolicyEvent, a, b);
  }
}

/**
 * UIDiscoverPrincipalsConfigureEvent is emitted when a user is finished with the step that allows user to update their principals (setting up access).
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverPrincipalsConfigureEvent
 */
export class UIDiscoverPrincipalsConfigureEvent extends Message<UIDiscoverPrincipalsConfigureEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverPrincipalsConfigureEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverPrincipalsConfigureEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverPrincipalsConfigureEvent {
    return new UIDiscoverPrincipalsConfigureEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverPrincipalsConfigureEvent {
    return new UIDiscoverPrincipalsConfigureEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverPrincipalsConfigureEvent {
    return new UIDiscoverPrincipalsConfigureEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverPrincipalsConfigureEvent | PlainMessage<UIDiscoverPrincipalsConfigureEvent> | undefined, b: UIDiscoverPrincipalsConfigureEvent | PlainMessage<UIDiscoverPrincipalsConfigureEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverPrincipalsConfigureEvent, a, b);
  }
}

/**
 * UIDiscoverTestConnectionEvent emitted on the "Test Connection" screen
 * when the user clicked tested connection to their resource.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverTestConnectionEvent
 */
export class UIDiscoverTestConnectionEvent extends Message<UIDiscoverTestConnectionEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverTestConnectionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverTestConnectionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverTestConnectionEvent {
    return new UIDiscoverTestConnectionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverTestConnectionEvent {
    return new UIDiscoverTestConnectionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverTestConnectionEvent {
    return new UIDiscoverTestConnectionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverTestConnectionEvent | PlainMessage<UIDiscoverTestConnectionEvent> | undefined, b: UIDiscoverTestConnectionEvent | PlainMessage<UIDiscoverTestConnectionEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverTestConnectionEvent, a, b);
  }
}

/**
 * UIDiscoverCompletedEvent is emitted when user completes the Discover wizard.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverCompletedEvent
 */
export class UIDiscoverCompletedEvent extends Message<UIDiscoverCompletedEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverCompletedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIDiscoverCompletedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverCompletedEvent {
    return new UIDiscoverCompletedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverCompletedEvent {
    return new UIDiscoverCompletedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverCompletedEvent {
    return new UIDiscoverCompletedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverCompletedEvent | PlainMessage<UIDiscoverCompletedEvent> | undefined, b: UIDiscoverCompletedEvent | PlainMessage<UIDiscoverCompletedEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverCompletedEvent, a, b);
  }
}

/**
 * UICreateNewRoleClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from message teleport.usageevents.v1.UICreateNewRoleClickEvent
 */
export class UICreateNewRoleClickEvent extends Message<UICreateNewRoleClickEvent> {
  constructor(data?: PartialMessage<UICreateNewRoleClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UICreateNewRoleClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UICreateNewRoleClickEvent {
    return new UICreateNewRoleClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UICreateNewRoleClickEvent {
    return new UICreateNewRoleClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UICreateNewRoleClickEvent {
    return new UICreateNewRoleClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UICreateNewRoleClickEvent | PlainMessage<UICreateNewRoleClickEvent> | undefined, b: UICreateNewRoleClickEvent | PlainMessage<UICreateNewRoleClickEvent> | undefined): boolean {
    return proto3.util.equals(UICreateNewRoleClickEvent, a, b);
  }
}

/**
 * UICreateNewRoleSaveClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from message teleport.usageevents.v1.UICreateNewRoleSaveClickEvent
 */
export class UICreateNewRoleSaveClickEvent extends Message<UICreateNewRoleSaveClickEvent> {
  constructor(data?: PartialMessage<UICreateNewRoleSaveClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UICreateNewRoleSaveClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UICreateNewRoleSaveClickEvent {
    return new UICreateNewRoleSaveClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UICreateNewRoleSaveClickEvent {
    return new UICreateNewRoleSaveClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UICreateNewRoleSaveClickEvent {
    return new UICreateNewRoleSaveClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UICreateNewRoleSaveClickEvent | PlainMessage<UICreateNewRoleSaveClickEvent> | undefined, b: UICreateNewRoleSaveClickEvent | PlainMessage<UICreateNewRoleSaveClickEvent> | undefined): boolean {
    return proto3.util.equals(UICreateNewRoleSaveClickEvent, a, b);
  }
}

/**
 * UICreateNewRoleCancelClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from message teleport.usageevents.v1.UICreateNewRoleCancelClickEvent
 */
export class UICreateNewRoleCancelClickEvent extends Message<UICreateNewRoleCancelClickEvent> {
  constructor(data?: PartialMessage<UICreateNewRoleCancelClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UICreateNewRoleCancelClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UICreateNewRoleCancelClickEvent {
    return new UICreateNewRoleCancelClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UICreateNewRoleCancelClickEvent {
    return new UICreateNewRoleCancelClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UICreateNewRoleCancelClickEvent {
    return new UICreateNewRoleCancelClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UICreateNewRoleCancelClickEvent | PlainMessage<UICreateNewRoleCancelClickEvent> | undefined, b: UICreateNewRoleCancelClickEvent | PlainMessage<UICreateNewRoleCancelClickEvent> | undefined): boolean {
    return proto3.util.equals(UICreateNewRoleCancelClickEvent, a, b);
  }
}

/**
 * UICreateNewRoleViewDocumentationClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from message teleport.usageevents.v1.UICreateNewRoleViewDocumentationClickEvent
 */
export class UICreateNewRoleViewDocumentationClickEvent extends Message<UICreateNewRoleViewDocumentationClickEvent> {
  constructor(data?: PartialMessage<UICreateNewRoleViewDocumentationClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UICreateNewRoleViewDocumentationClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UICreateNewRoleViewDocumentationClickEvent {
    return new UICreateNewRoleViewDocumentationClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UICreateNewRoleViewDocumentationClickEvent {
    return new UICreateNewRoleViewDocumentationClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UICreateNewRoleViewDocumentationClickEvent {
    return new UICreateNewRoleViewDocumentationClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UICreateNewRoleViewDocumentationClickEvent | PlainMessage<UICreateNewRoleViewDocumentationClickEvent> | undefined, b: UICreateNewRoleViewDocumentationClickEvent | PlainMessage<UICreateNewRoleViewDocumentationClickEvent> | undefined): boolean {
    return proto3.util.equals(UICreateNewRoleViewDocumentationClickEvent, a, b);
  }
}

/**
 * AssistCompletionEvent is an event that is emitted when a completion occurs in the Assistant
 *
 * @generated from message teleport.usageevents.v1.AssistCompletionEvent
 */
export class AssistCompletionEvent extends Message<AssistCompletionEvent> {
  /**
   * ConversationId is the UUID that identifies a single Assist conversation
   *
   * @generated from field: string conversation_id = 1;
   */
  conversationId = "";

  /**
   * TotalTokens is the total amount of token used to satisfy this request
   *
   * @generated from field: int64 total_tokens = 2;
   */
  totalTokens = protoInt64.zero;

  /**
   * PromptTokens is the amount of estimated tokens used by the prompt
   *
   * @generated from field: int64 prompt_tokens = 3;
   */
  promptTokens = protoInt64.zero;

  /**
   * CompletionTokens is the amount of tokens that the completion response consists of
   *
   * @generated from field: int64 completion_tokens = 4;
   */
  completionTokens = protoInt64.zero;

  constructor(data?: PartialMessage<AssistCompletionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.AssistCompletionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "conversation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "prompt_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "completion_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssistCompletionEvent {
    return new AssistCompletionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssistCompletionEvent {
    return new AssistCompletionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssistCompletionEvent {
    return new AssistCompletionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AssistCompletionEvent | PlainMessage<AssistCompletionEvent> | undefined, b: AssistCompletionEvent | PlainMessage<AssistCompletionEvent> | undefined): boolean {
    return proto3.util.equals(AssistCompletionEvent, a, b);
  }
}

/**
 * AssistExecutionEvent is an event that is emitted when an Assist command
 * execution is triggered by the user.
 *
 * @generated from message teleport.usageevents.v1.AssistExecutionEvent
 */
export class AssistExecutionEvent extends Message<AssistExecutionEvent> {
  /**
   * ConversationId is the UUID that identifies a single Assist conversation
   *
   * @generated from field: string conversation_id = 1;
   */
  conversationId = "";

  /**
   * NodeCount is the number of nodes the command was executed on
   *
   * @generated from field: int64 node_count = 2;
   */
  nodeCount = protoInt64.zero;

  /**
   * TotalTokens is the total amount of token used to satisfy this request
   *
   * @generated from field: int64 total_tokens = 3;
   */
  totalTokens = protoInt64.zero;

  /**
   * PromptTokens is the amount of estimated tokens used by the prompt
   *
   * @generated from field: int64 prompt_tokens = 4;
   */
  promptTokens = protoInt64.zero;

  /**
   * CompletionTokens is the amount of tokens that the completion response consists of
   *
   * @generated from field: int64 completion_tokens = 5;
   */
  completionTokens = protoInt64.zero;

  constructor(data?: PartialMessage<AssistExecutionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.AssistExecutionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "conversation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "node_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "total_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "prompt_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "completion_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssistExecutionEvent {
    return new AssistExecutionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssistExecutionEvent {
    return new AssistExecutionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssistExecutionEvent {
    return new AssistExecutionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AssistExecutionEvent | PlainMessage<AssistExecutionEvent> | undefined, b: AssistExecutionEvent | PlainMessage<AssistExecutionEvent> | undefined): boolean {
    return proto3.util.equals(AssistExecutionEvent, a, b);
  }
}

/**
 * AssistNewConversationEvent is an event that is emitted for each new Assist
 * conversation and contains the conversation category.
 *
 * @generated from message teleport.usageevents.v1.AssistNewConversationEvent
 */
export class AssistNewConversationEvent extends Message<AssistNewConversationEvent> {
  /**
   * Category is the conversation category. This represents what kind of request
   * the user is asking Assist.
   *
   * @generated from field: string category = 1;
   */
  category = "";

  constructor(data?: PartialMessage<AssistNewConversationEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.AssistNewConversationEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "category", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssistNewConversationEvent {
    return new AssistNewConversationEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssistNewConversationEvent {
    return new AssistNewConversationEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssistNewConversationEvent {
    return new AssistNewConversationEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AssistNewConversationEvent | PlainMessage<AssistNewConversationEvent> | undefined, b: AssistNewConversationEvent | PlainMessage<AssistNewConversationEvent> | undefined): boolean {
    return proto3.util.equals(AssistNewConversationEvent, a, b);
  }
}

/**
 * AssistAccessRequest is an event that is emitted when a user requests access
 * to a resource via Assist.
 *
 * @generated from message teleport.usageevents.v1.AssistAccessRequest
 */
export class AssistAccessRequest extends Message<AssistAccessRequest> {
  /**
   * ResourceType describes the type of resource the user is requesting access to, e.g. "node", "db", "k8s" or "role".
   *
   * @generated from field: string resource_type = 1;
   */
  resourceType = "";

  /**
   * TotalTokens is the total amount of token used to generate the command summary
   *
   * @generated from field: int64 total_tokens = 2;
   */
  totalTokens = protoInt64.zero;

  /**
   * PromptTokens is the amount of estimated tokens used by the prompt to generate the command summary
   *
   * @generated from field: int64 prompt_tokens = 3;
   */
  promptTokens = protoInt64.zero;

  /**
   * CompletionTokens is the amount of tokens that the summary completion response consists of
   *
   * @generated from field: int64 completion_tokens = 4;
   */
  completionTokens = protoInt64.zero;

  constructor(data?: PartialMessage<AssistAccessRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.AssistAccessRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "prompt_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "completion_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssistAccessRequest {
    return new AssistAccessRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssistAccessRequest {
    return new AssistAccessRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssistAccessRequest {
    return new AssistAccessRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AssistAccessRequest | PlainMessage<AssistAccessRequest> | undefined, b: AssistAccessRequest | PlainMessage<AssistAccessRequest> | undefined): boolean {
    return proto3.util.equals(AssistAccessRequest, a, b);
  }
}

/**
 * AssistAction is an event that is emitted when a user triggers an action (SSH command generation, output explain, etc.)
 * via Assist.
 *
 * @generated from message teleport.usageevents.v1.AssistAction
 */
export class AssistAction extends Message<AssistAction> {
  /**
   * Action is the action that was triggered, e.g. "ssh-explain", "ssh-command-generate", etc.
   *
   * @generated from field: string action = 1;
   */
  action = "";

  /**
   * TotalTokens is the total amount of token used to generate the command summary
   *
   * @generated from field: int64 total_tokens = 2;
   */
  totalTokens = protoInt64.zero;

  /**
   * PromptTokens is the amount of estimated tokens used by the prompt to generate the command summary
   *
   * @generated from field: int64 prompt_tokens = 3;
   */
  promptTokens = protoInt64.zero;

  /**
   * CompletionTokens is the amount of tokens that the summary completion response consists of
   *
   * @generated from field: int64 completion_tokens = 4;
   */
  completionTokens = protoInt64.zero;

  constructor(data?: PartialMessage<AssistAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.AssistAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "prompt_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "completion_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssistAction {
    return new AssistAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssistAction {
    return new AssistAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssistAction {
    return new AssistAction().fromJsonString(jsonString, options);
  }

  static equals(a: AssistAction | PlainMessage<AssistAction> | undefined, b: AssistAction | PlainMessage<AssistAction> | undefined): boolean {
    return proto3.util.equals(AssistAction, a, b);
  }
}

/**
 * AccessListMetadata contains common metadata for Access List related events.
 *
 * @generated from message teleport.usageevents.v1.AccessListMetadata
 */
export class AccessListMetadata extends Message<AccessListMetadata> {
  /**
   * Uniquely identifies an Access List. Will allow correlation of events within an access list.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<AccessListMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.AccessListMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListMetadata {
    return new AccessListMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListMetadata {
    return new AccessListMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListMetadata {
    return new AccessListMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListMetadata | PlainMessage<AccessListMetadata> | undefined, b: AccessListMetadata | PlainMessage<AccessListMetadata> | undefined): boolean {
    return proto3.util.equals(AccessListMetadata, a, b);
  }
}

/**
 * AccessListCreate is an event that is emitted when an access list is created.
 *
 * @generated from message teleport.usageevents.v1.AccessListCreate
 */
export class AccessListCreate extends Message<AccessListCreate> {
  /**
   * @generated from field: teleport.usageevents.v1.AccessListMetadata metadata = 1;
   */
  metadata?: AccessListMetadata;

  constructor(data?: PartialMessage<AccessListCreate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.AccessListCreate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: AccessListMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListCreate {
    return new AccessListCreate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListCreate {
    return new AccessListCreate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListCreate {
    return new AccessListCreate().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListCreate | PlainMessage<AccessListCreate> | undefined, b: AccessListCreate | PlainMessage<AccessListCreate> | undefined): boolean {
    return proto3.util.equals(AccessListCreate, a, b);
  }
}

/**
 * AccessListUpdate is an event that is emitted when an access list is updated.
 *
 * @generated from message teleport.usageevents.v1.AccessListUpdate
 */
export class AccessListUpdate extends Message<AccessListUpdate> {
  /**
   * @generated from field: teleport.usageevents.v1.AccessListMetadata metadata = 1;
   */
  metadata?: AccessListMetadata;

  constructor(data?: PartialMessage<AccessListUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.AccessListUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: AccessListMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListUpdate {
    return new AccessListUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListUpdate {
    return new AccessListUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListUpdate {
    return new AccessListUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListUpdate | PlainMessage<AccessListUpdate> | undefined, b: AccessListUpdate | PlainMessage<AccessListUpdate> | undefined): boolean {
    return proto3.util.equals(AccessListUpdate, a, b);
  }
}

/**
 * AccessListDelete is an event that is emitted when an access list is deleted.
 *
 * @generated from message teleport.usageevents.v1.AccessListDelete
 */
export class AccessListDelete extends Message<AccessListDelete> {
  /**
   * @generated from field: teleport.usageevents.v1.AccessListMetadata metadata = 1;
   */
  metadata?: AccessListMetadata;

  constructor(data?: PartialMessage<AccessListDelete>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.AccessListDelete";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: AccessListMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListDelete {
    return new AccessListDelete().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListDelete {
    return new AccessListDelete().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListDelete {
    return new AccessListDelete().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListDelete | PlainMessage<AccessListDelete> | undefined, b: AccessListDelete | PlainMessage<AccessListDelete> | undefined): boolean {
    return proto3.util.equals(AccessListDelete, a, b);
  }
}

/**
 * AccessListMemberCreate is an event that is emitted when a member is added to an access list.
 *
 * @generated from message teleport.usageevents.v1.AccessListMemberCreate
 */
export class AccessListMemberCreate extends Message<AccessListMemberCreate> {
  /**
   * @generated from field: teleport.usageevents.v1.AccessListMetadata metadata = 1;
   */
  metadata?: AccessListMetadata;

  constructor(data?: PartialMessage<AccessListMemberCreate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.AccessListMemberCreate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: AccessListMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListMemberCreate {
    return new AccessListMemberCreate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListMemberCreate {
    return new AccessListMemberCreate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListMemberCreate {
    return new AccessListMemberCreate().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListMemberCreate | PlainMessage<AccessListMemberCreate> | undefined, b: AccessListMemberCreate | PlainMessage<AccessListMemberCreate> | undefined): boolean {
    return proto3.util.equals(AccessListMemberCreate, a, b);
  }
}

/**
 * AccessListMemberCreate is an event that is emitted when a member is updated in an access list.
 *
 * @generated from message teleport.usageevents.v1.AccessListMemberUpdate
 */
export class AccessListMemberUpdate extends Message<AccessListMemberUpdate> {
  /**
   * @generated from field: teleport.usageevents.v1.AccessListMetadata metadata = 1;
   */
  metadata?: AccessListMetadata;

  constructor(data?: PartialMessage<AccessListMemberUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.AccessListMemberUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: AccessListMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListMemberUpdate {
    return new AccessListMemberUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListMemberUpdate {
    return new AccessListMemberUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListMemberUpdate {
    return new AccessListMemberUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListMemberUpdate | PlainMessage<AccessListMemberUpdate> | undefined, b: AccessListMemberUpdate | PlainMessage<AccessListMemberUpdate> | undefined): boolean {
    return proto3.util.equals(AccessListMemberUpdate, a, b);
  }
}

/**
 * AccessListMemberDelete is an event that is emitted when a member is removed from an access list.
 *
 * @generated from message teleport.usageevents.v1.AccessListMemberDelete
 */
export class AccessListMemberDelete extends Message<AccessListMemberDelete> {
  /**
   * @generated from field: teleport.usageevents.v1.AccessListMetadata metadata = 1;
   */
  metadata?: AccessListMetadata;

  constructor(data?: PartialMessage<AccessListMemberDelete>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.AccessListMemberDelete";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: AccessListMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListMemberDelete {
    return new AccessListMemberDelete().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListMemberDelete {
    return new AccessListMemberDelete().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListMemberDelete {
    return new AccessListMemberDelete().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListMemberDelete | PlainMessage<AccessListMemberDelete> | undefined, b: AccessListMemberDelete | PlainMessage<AccessListMemberDelete> | undefined): boolean {
    return proto3.util.equals(AccessListMemberDelete, a, b);
  }
}

/**
 * AccessListGrantsToUser is an event that is emitted when access list permissions are granted to a user
 * on login.
 *
 * @generated from message teleport.usageevents.v1.AccessListGrantsToUser
 */
export class AccessListGrantsToUser extends Message<AccessListGrantsToUser> {
  /**
   * count_roles_granted is the number of roles granted to a user.
   *
   * @generated from field: int32 count_roles_granted = 1;
   */
  countRolesGranted = 0;

  /**
   * count_traits_granted is the number of traits granted to a user.
   *
   * @generated from field: int32 count_traits_granted = 2;
   */
  countTraitsGranted = 0;

  constructor(data?: PartialMessage<AccessListGrantsToUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.AccessListGrantsToUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count_roles_granted", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "count_traits_granted", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListGrantsToUser {
    return new AccessListGrantsToUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListGrantsToUser {
    return new AccessListGrantsToUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListGrantsToUser {
    return new AccessListGrantsToUser().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListGrantsToUser | PlainMessage<AccessListGrantsToUser> | undefined, b: AccessListGrantsToUser | PlainMessage<AccessListGrantsToUser> | undefined): boolean {
    return proto3.util.equals(AccessListGrantsToUser, a, b);
  }
}

/**
 * AccessListReviewCreate is an event that is emitted when an access list review is created.
 *
 * @generated from message teleport.usageevents.v1.AccessListReviewCreate
 */
export class AccessListReviewCreate extends Message<AccessListReviewCreate> {
  /**
   * @generated from field: teleport.usageevents.v1.AccessListMetadata metadata = 1;
   */
  metadata?: AccessListMetadata;

  /**
   * days_past_next_audit_date is how many days past the next audit date the review came in. Can be negative.
   *
   * @generated from field: int32 days_past_next_audit_date = 2;
   */
  daysPastNextAuditDate = 0;

  /**
   * membership_requirements_changed indicates that the membership requirements were changed.
   *
   * @generated from field: bool membership_requirements_changed = 3;
   */
  membershipRequirementsChanged = false;

  /**
   * review_frequency_changed indicates that the review frequency was changed.
   *
   * @generated from field: bool review_frequency_changed = 4;
   */
  reviewFrequencyChanged = false;

  /**
   * review_day_of_month_changed indicates that the review day of month was changed.
   *
   * @generated from field: bool review_day_of_month_changed = 5;
   */
  reviewDayOfMonthChanged = false;

  /**
   * number_of_removed_members is how many members were removed as part of this review.
   *
   * @generated from field: int32 number_of_removed_members = 6;
   */
  numberOfRemovedMembers = 0;

  constructor(data?: PartialMessage<AccessListReviewCreate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.AccessListReviewCreate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: AccessListMetadata },
    { no: 2, name: "days_past_next_audit_date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "membership_requirements_changed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "review_frequency_changed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "review_day_of_month_changed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "number_of_removed_members", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListReviewCreate {
    return new AccessListReviewCreate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListReviewCreate {
    return new AccessListReviewCreate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListReviewCreate {
    return new AccessListReviewCreate().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListReviewCreate | PlainMessage<AccessListReviewCreate> | undefined, b: AccessListReviewCreate | PlainMessage<AccessListReviewCreate> | undefined): boolean {
    return proto3.util.equals(AccessListReviewCreate, a, b);
  }
}

/**
 * AccessListReviewDelete is an event that is emitted when an access list review is deleted.
 *
 * @generated from message teleport.usageevents.v1.AccessListReviewDelete
 */
export class AccessListReviewDelete extends Message<AccessListReviewDelete> {
  /**
   * @generated from field: teleport.usageevents.v1.AccessListMetadata metadata = 1;
   */
  metadata?: AccessListMetadata;

  /**
   * access_list_review_id is the unique identifier for the access list review.
   *
   * @generated from field: string access_list_review_id = 2;
   */
  accessListReviewId = "";

  constructor(data?: PartialMessage<AccessListReviewDelete>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.AccessListReviewDelete";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: AccessListMetadata },
    { no: 2, name: "access_list_review_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListReviewDelete {
    return new AccessListReviewDelete().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListReviewDelete {
    return new AccessListReviewDelete().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListReviewDelete {
    return new AccessListReviewDelete().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListReviewDelete | PlainMessage<AccessListReviewDelete> | undefined, b: AccessListReviewDelete | PlainMessage<AccessListReviewDelete> | undefined): boolean {
    return proto3.util.equals(AccessListReviewDelete, a, b);
  }
}

/**
 * IntegrationEnrollMetadata contains common metadata
 * for Integration Enroll related events.
 *
 * @generated from message teleport.usageevents.v1.IntegrationEnrollMetadata
 */
export class IntegrationEnrollMetadata extends Message<IntegrationEnrollMetadata> {
  /**
   * id is used as a unique identifier to correlate events within the
   * same enroll wizard run.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * kind identifies what type of integration the user clicked on to enroll.
   *
   * @generated from field: teleport.usageevents.v1.IntegrationEnrollKind kind = 2;
   */
  kind = IntegrationEnrollKind.UNSPECIFIED;

  /**
   * user_name is anonymized.
   *
   * @generated from field: string user_name = 3;
   */
  userName = "";

  constructor(data?: PartialMessage<IntegrationEnrollMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.IntegrationEnrollMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "enum", T: proto3.getEnumType(IntegrationEnrollKind) },
    { no: 3, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntegrationEnrollMetadata {
    return new IntegrationEnrollMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntegrationEnrollMetadata {
    return new IntegrationEnrollMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntegrationEnrollMetadata {
    return new IntegrationEnrollMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: IntegrationEnrollMetadata | PlainMessage<IntegrationEnrollMetadata> | undefined, b: IntegrationEnrollMetadata | PlainMessage<IntegrationEnrollMetadata> | undefined): boolean {
    return proto3.util.equals(IntegrationEnrollMetadata, a, b);
  }
}

/**
 * UIIntegrationEnrollEvent is an event that is emitted when a user
 * clicks on a integration to enroll.
 *
 * @generated from message teleport.usageevents.v1.UIIntegrationEnrollStartEvent
 */
export class UIIntegrationEnrollStartEvent extends Message<UIIntegrationEnrollStartEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.IntegrationEnrollMetadata metadata = 1;
   */
  metadata?: IntegrationEnrollMetadata;

  constructor(data?: PartialMessage<UIIntegrationEnrollStartEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIIntegrationEnrollStartEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: IntegrationEnrollMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIIntegrationEnrollStartEvent {
    return new UIIntegrationEnrollStartEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIIntegrationEnrollStartEvent {
    return new UIIntegrationEnrollStartEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIIntegrationEnrollStartEvent {
    return new UIIntegrationEnrollStartEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIIntegrationEnrollStartEvent | PlainMessage<UIIntegrationEnrollStartEvent> | undefined, b: UIIntegrationEnrollStartEvent | PlainMessage<UIIntegrationEnrollStartEvent> | undefined): boolean {
    return proto3.util.equals(UIIntegrationEnrollStartEvent, a, b);
  }
}

/**
 * UIIntegrationEnrollEvent is an event that is emitted when a user
 * completed enrolling an integration.
 *
 * @generated from message teleport.usageevents.v1.UIIntegrationEnrollCompleteEvent
 */
export class UIIntegrationEnrollCompleteEvent extends Message<UIIntegrationEnrollCompleteEvent> {
  /**
   * @generated from field: teleport.usageevents.v1.IntegrationEnrollMetadata metadata = 1;
   */
  metadata?: IntegrationEnrollMetadata;

  constructor(data?: PartialMessage<UIIntegrationEnrollCompleteEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIIntegrationEnrollCompleteEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: IntegrationEnrollMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIIntegrationEnrollCompleteEvent {
    return new UIIntegrationEnrollCompleteEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIIntegrationEnrollCompleteEvent {
    return new UIIntegrationEnrollCompleteEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIIntegrationEnrollCompleteEvent {
    return new UIIntegrationEnrollCompleteEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIIntegrationEnrollCompleteEvent | PlainMessage<UIIntegrationEnrollCompleteEvent> | undefined, b: UIIntegrationEnrollCompleteEvent | PlainMessage<UIIntegrationEnrollCompleteEvent> | undefined): boolean {
    return proto3.util.equals(UIIntegrationEnrollCompleteEvent, a, b);
  }
}

/**
 * ResourceCreateEvent is emitted when a resource is created.
 *
 * @generated from message teleport.usageevents.v1.ResourceCreateEvent
 */
export class ResourceCreateEvent extends Message<ResourceCreateEvent> {
  /**
   * resource_type is the type of resource ("node", "node.openssh", "db", "k8s", "app").
   *
   * @generated from field: string resource_type = 1;
   */
  resourceType = "";

  /**
   * resource_origin is the origin of the resource ("cloud", "kubernetes").
   *
   * @generated from field: string resource_origin = 2;
   */
  resourceOrigin = "";

  /**
   * cloud_provider is the cloud provider the resource came from ("AWS", "Azure", "GCP")
   * if resource_origin == "cloud".
   *
   * @generated from field: string cloud_provider = 3;
   */
  cloudProvider = "";

  /**
   * database contains additional database information if resource_type == "db".
   *
   * @generated from field: teleport.usageevents.v1.DiscoveredDatabaseMetadata database = 4;
   */
  database?: DiscoveredDatabaseMetadata;

  constructor(data?: PartialMessage<ResourceCreateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.ResourceCreateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource_origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cloud_provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "database", kind: "message", T: DiscoveredDatabaseMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceCreateEvent {
    return new ResourceCreateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceCreateEvent {
    return new ResourceCreateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceCreateEvent {
    return new ResourceCreateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceCreateEvent | PlainMessage<ResourceCreateEvent> | undefined, b: ResourceCreateEvent | PlainMessage<ResourceCreateEvent> | undefined): boolean {
    return proto3.util.equals(ResourceCreateEvent, a, b);
  }
}

/**
 * DiscoveredDatabaseMetadata contains additional database information.
 *
 * @generated from message teleport.usageevents.v1.DiscoveredDatabaseMetadata
 */
export class DiscoveredDatabaseMetadata extends Message<DiscoveredDatabaseMetadata> {
  /**
   * database type.
   *
   * @generated from field: string db_type = 1;
   */
  dbType = "";

  /**
   * database protocol.
   *
   * @generated from field: string db_protocol = 2;
   */
  dbProtocol = "";

  constructor(data?: PartialMessage<DiscoveredDatabaseMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.DiscoveredDatabaseMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "db_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "db_protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoveredDatabaseMetadata {
    return new DiscoveredDatabaseMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoveredDatabaseMetadata {
    return new DiscoveredDatabaseMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoveredDatabaseMetadata {
    return new DiscoveredDatabaseMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoveredDatabaseMetadata | PlainMessage<DiscoveredDatabaseMetadata> | undefined, b: DiscoveredDatabaseMetadata | PlainMessage<DiscoveredDatabaseMetadata> | undefined): boolean {
    return proto3.util.equals(DiscoveredDatabaseMetadata, a, b);
  }
}

/**
 * FeatureRecommendationEvent captures event emitted when a feature is recommended to user or
 * when user completes the desired CTA for the feature.
 *
 * PostHost event: tp.ui.feature.recommendation
 *
 * @generated from message teleport.usageevents.v1.FeatureRecommendationEvent
 */
export class FeatureRecommendationEvent extends Message<FeatureRecommendationEvent> {
  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * feature is name of the Teleport feature.
   *
   * PostHost property: tp.feature
   *
   * @generated from field: teleport.usageevents.v1.Feature feature = 2;
   */
  feature = Feature.UNSPECIFIED;

  /**
   * feature_recommendation_status records recommendation state, which can be 'NOTIFIED' (feature is recommended)
   * OR 'DONE' (user completes desired CTA)
   *
   * PostHost property: tp.feature_recommendation_status
   *
   * @generated from field: teleport.usageevents.v1.FeatureRecommendationStatus feature_recommendation_status = 3;
   */
  featureRecommendationStatus = FeatureRecommendationStatus.UNSPECIFIED;

  constructor(data?: PartialMessage<FeatureRecommendationEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.FeatureRecommendationEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "feature", kind: "enum", T: proto3.getEnumType(Feature) },
    { no: 3, name: "feature_recommendation_status", kind: "enum", T: proto3.getEnumType(FeatureRecommendationStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureRecommendationEvent {
    return new FeatureRecommendationEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureRecommendationEvent {
    return new FeatureRecommendationEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureRecommendationEvent {
    return new FeatureRecommendationEvent().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureRecommendationEvent | PlainMessage<FeatureRecommendationEvent> | undefined, b: FeatureRecommendationEvent | PlainMessage<FeatureRecommendationEvent> | undefined): boolean {
    return proto3.util.equals(FeatureRecommendationEvent, a, b);
  }
}

/**
 * TAGExecuteQueryEvent is an event that is emitted
 * when a single query is executed in the Teleport Access Graph.
 * This event is emitted for both successful and failed queries and for
 * successful queries, the total number of nodes and edges is reported.
 *
 * @generated from message teleport.usageevents.v1.TAGExecuteQueryEvent
 */
export class TAGExecuteQueryEvent extends Message<TAGExecuteQueryEvent> {
  /**
   * total_nodes is the total amount of nodes returned by the query.
   *
   * @generated from field: int64 total_nodes = 1;
   */
  totalNodes = protoInt64.zero;

  /**
   * total_edges is the total amount of edges returned by the query.
   *
   * @generated from field: int64 total_edges = 2;
   */
  totalEdges = protoInt64.zero;

  /**
   * is_success is true if the query was successful and false it if failed.
   *
   * @generated from field: bool is_success = 3;
   */
  isSuccess = false;

  constructor(data?: PartialMessage<TAGExecuteQueryEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.TAGExecuteQueryEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_nodes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total_edges", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "is_success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TAGExecuteQueryEvent {
    return new TAGExecuteQueryEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TAGExecuteQueryEvent {
    return new TAGExecuteQueryEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TAGExecuteQueryEvent {
    return new TAGExecuteQueryEvent().fromJsonString(jsonString, options);
  }

  static equals(a: TAGExecuteQueryEvent | PlainMessage<TAGExecuteQueryEvent> | undefined, b: TAGExecuteQueryEvent | PlainMessage<TAGExecuteQueryEvent> | undefined): boolean {
    return proto3.util.equals(TAGExecuteQueryEvent, a, b);
  }
}

/**
 * AccessGraphAWSScanEvent is emitted when the Access Graph
 * AWS scan is enabled.
 *
 * @generated from message teleport.usageevents.v1.AccessGraphAWSScanEvent
 */
export class AccessGraphAWSScanEvent extends Message<AccessGraphAWSScanEvent> {
  /**
   * total_ec2_instances is the total amount of EC2 instances found in the AWS scan.
   *
   * @generated from field: uint64 total_ec2_instances = 1;
   */
  totalEc2Instances = protoInt64.zero;

  /**
   * total_users is the total amount of users found in the AWS scan.
   *
   * @generated from field: uint64 total_users = 2;
   */
  totalUsers = protoInt64.zero;

  /**
   * total_groups is the total amount of groups found in the AWS scan.
   *
   * @generated from field: uint64 total_groups = 3;
   */
  totalGroups = protoInt64.zero;

  /**
   * total_roles is the total amount of roles found in the AWS scan.
   *
   * @generated from field: uint64 total_roles = 4;
   */
  totalRoles = protoInt64.zero;

  /**
   * total_policies is the total amount of policies found in the AWS scan.
   *
   * @generated from field: uint64 total_policies = 5;
   */
  totalPolicies = protoInt64.zero;

  /**
   * total_eks_clusters is the total amount of EKS clusters found in the AWS scan.
   *
   * @generated from field: uint64 total_eks_clusters = 6;
   */
  totalEksClusters = protoInt64.zero;

  /**
   * total_rds_instances is the total amount of RDS instances found in the AWS scan.
   *
   * @generated from field: uint64 total_rds_instances = 7;
   */
  totalRdsInstances = protoInt64.zero;

  /**
   * total_s3_buckets is the total amount of S3 buckets found in the AWS scan.
   *
   * @generated from field: uint64 total_s3_buckets = 8;
   */
  totalS3Buckets = protoInt64.zero;

  /**
   * total_saml_providers is the total amount of SAML providers found in the AWS scan.
   *
   * @generated from field: uint64 total_saml_providers = 9;
   */
  totalSamlProviders = protoInt64.zero;

  /**
   * total_oidc_providers is the total amount of OIDC providers found in the AWS scan.
   *
   * @generated from field: uint64 total_oidc_providers = 10;
   */
  totalOidcProviders = protoInt64.zero;

  /**
   * total_accounts is the total amount of accounts synchronized in the AWS scan.
   *
   * @generated from field: uint64 total_accounts = 11;
   */
  totalAccounts = protoInt64.zero;

  constructor(data?: PartialMessage<AccessGraphAWSScanEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.AccessGraphAWSScanEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_ec2_instances", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "total_users", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total_groups", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "total_roles", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "total_policies", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "total_eks_clusters", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "total_rds_instances", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "total_s3_buckets", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "total_saml_providers", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "total_oidc_providers", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "total_accounts", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessGraphAWSScanEvent {
    return new AccessGraphAWSScanEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessGraphAWSScanEvent {
    return new AccessGraphAWSScanEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessGraphAWSScanEvent {
    return new AccessGraphAWSScanEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AccessGraphAWSScanEvent | PlainMessage<AccessGraphAWSScanEvent> | undefined, b: AccessGraphAWSScanEvent | PlainMessage<AccessGraphAWSScanEvent> | undefined): boolean {
    return proto3.util.equals(AccessGraphAWSScanEvent, a, b);
  }
}

/**
 * UIAccessGraphCrownJewelDiffViewEvent is emitted when a user reviews the output of a Crown Jewel access path dff.
 *
 * @generated from message teleport.usageevents.v1.UIAccessGraphCrownJewelDiffViewEvent
 */
export class UIAccessGraphCrownJewelDiffViewEvent extends Message<UIAccessGraphCrownJewelDiffViewEvent> {
  /**
   * affected_resource_source is the source of the affected resource.
   *
   * @generated from field: string affected_resource_source = 1;
   */
  affectedResourceSource = "";

  /**
   * affected_resource_type is the type of the affected resource.
   *
   * @generated from field: string affected_resource_type = 2;
   */
  affectedResourceType = "";

  constructor(data?: PartialMessage<UIAccessGraphCrownJewelDiffViewEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UIAccessGraphCrownJewelDiffViewEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "affected_resource_source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "affected_resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIAccessGraphCrownJewelDiffViewEvent {
    return new UIAccessGraphCrownJewelDiffViewEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIAccessGraphCrownJewelDiffViewEvent {
    return new UIAccessGraphCrownJewelDiffViewEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIAccessGraphCrownJewelDiffViewEvent {
    return new UIAccessGraphCrownJewelDiffViewEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIAccessGraphCrownJewelDiffViewEvent | PlainMessage<UIAccessGraphCrownJewelDiffViewEvent> | undefined, b: UIAccessGraphCrownJewelDiffViewEvent | PlainMessage<UIAccessGraphCrownJewelDiffViewEvent> | undefined): boolean {
    return proto3.util.equals(UIAccessGraphCrownJewelDiffViewEvent, a, b);
  }
}

/**
 * SecurityReportGetResultEvent is emitted when the user requests a security report.
 *
 * @generated from message teleport.usageevents.v1.SecurityReportGetResultEvent
 */
export class SecurityReportGetResultEvent extends Message<SecurityReportGetResultEvent> {
  /**
   * name is the name of the security report.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * days is the time range of the security reports in days.
   *
   * @generated from field: int32 days = 2;
   */
  days = 0;

  constructor(data?: PartialMessage<SecurityReportGetResultEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.SecurityReportGetResultEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "days", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecurityReportGetResultEvent {
    return new SecurityReportGetResultEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecurityReportGetResultEvent {
    return new SecurityReportGetResultEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecurityReportGetResultEvent {
    return new SecurityReportGetResultEvent().fromJsonString(jsonString, options);
  }

  static equals(a: SecurityReportGetResultEvent | PlainMessage<SecurityReportGetResultEvent> | undefined, b: SecurityReportGetResultEvent | PlainMessage<SecurityReportGetResultEvent> | undefined): boolean {
    return proto3.util.equals(SecurityReportGetResultEvent, a, b);
  }
}

/**
 * DiscoveryFetchEvent is emitted when a DiscoveryService polls for new resources of a given type
 *
 * @generated from message teleport.usageevents.v1.DiscoveryFetchEvent
 */
export class DiscoveryFetchEvent extends Message<DiscoveryFetchEvent> {
  /**
   * cloud_provider is the cloud provider used to fetch resources
   * Eg, AWS, Azure, GCP, Kubernetes
   *
   * @generated from field: string cloud_provider = 1;
   */
  cloudProvider = "";

  /**
   * resource_type is the type of resource that this fetch is polling.
   * It depends on the Cloud Provider (defined above).
   * Eg, rds, ec2, vm, aks, gce, app
   *
   * @generated from field: string resource_type = 2;
   */
  resourceType = "";

  constructor(data?: PartialMessage<DiscoveryFetchEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.DiscoveryFetchEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cloud_provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoveryFetchEvent {
    return new DiscoveryFetchEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoveryFetchEvent {
    return new DiscoveryFetchEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoveryFetchEvent {
    return new DiscoveryFetchEvent().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoveryFetchEvent | PlainMessage<DiscoveryFetchEvent> | undefined, b: DiscoveryFetchEvent | PlainMessage<DiscoveryFetchEvent> | undefined): boolean {
    return proto3.util.equals(DiscoveryFetchEvent, a, b);
  }
}

/**
 * UsageEventOneOf is a message that can accept a oneof of any supported
 * external usage event.
 *
 * @generated from message teleport.usageevents.v1.UsageEventOneOf
 */
export class UsageEventOneOf extends Message<UsageEventOneOf> {
  /**
   * @generated from oneof teleport.usageevents.v1.UsageEventOneOf.event
   */
  event: {
    /**
     * @generated from field: teleport.usageevents.v1.UIBannerClickEvent ui_banner_click = 1;
     */
    value: UIBannerClickEvent;
    case: "uiBannerClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIOnboardCompleteGoToDashboardClickEvent ui_onboard_complete_go_to_dashboard_click = 3;
     */
    value: UIOnboardCompleteGoToDashboardClickEvent;
    case: "uiOnboardCompleteGoToDashboardClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIOnboardAddFirstResourceClickEvent ui_onboard_add_first_resource_click = 4;
     */
    value: UIOnboardAddFirstResourceClickEvent;
    case: "uiOnboardAddFirstResourceClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIOnboardAddFirstResourceLaterClickEvent ui_onboard_add_first_resource_later_click = 5;
     */
    value: UIOnboardAddFirstResourceLaterClickEvent;
    case: "uiOnboardAddFirstResourceLaterClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIOnboardSetCredentialSubmitEvent ui_onboard_set_credential_submit = 6;
     */
    value: UIOnboardSetCredentialSubmitEvent;
    case: "uiOnboardSetCredentialSubmit";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIOnboardRegisterChallengeSubmitEvent ui_onboard_register_challenge_submit = 7;
     */
    value: UIOnboardRegisterChallengeSubmitEvent;
    case: "uiOnboardRegisterChallengeSubmit";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIRecoveryCodesContinueClickEvent ui_recovery_codes_continue_click = 8;
     */
    value: UIRecoveryCodesContinueClickEvent;
    case: "uiRecoveryCodesContinueClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIRecoveryCodesCopyClickEvent ui_recovery_codes_copy_click = 9;
     */
    value: UIRecoveryCodesCopyClickEvent;
    case: "uiRecoveryCodesCopyClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIRecoveryCodesPrintClickEvent ui_recovery_codes_print_click = 10;
     */
    value: UIRecoveryCodesPrintClickEvent;
    case: "uiRecoveryCodesPrintClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverStartedEvent ui_discover_started_event = 11;
     */
    value: UIDiscoverStartedEvent;
    case: "uiDiscoverStartedEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverResourceSelectionEvent ui_discover_resource_selection_event = 12;
     */
    value: UIDiscoverResourceSelectionEvent;
    case: "uiDiscoverResourceSelectionEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverDeployServiceEvent ui_discover_deploy_service_event = 13;
     */
    value: UIDiscoverDeployServiceEvent;
    case: "uiDiscoverDeployServiceEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverDatabaseRegisterEvent ui_discover_database_register_event = 14;
     */
    value: UIDiscoverDatabaseRegisterEvent;
    case: "uiDiscoverDatabaseRegisterEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverDatabaseConfigureMTLSEvent ui_discover_database_configure_mtls_event = 15;
     */
    value: UIDiscoverDatabaseConfigureMTLSEvent;
    case: "uiDiscoverDatabaseConfigureMtlsEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverDesktopActiveDirectoryToolsInstallEvent ui_discover_desktop_active_directory_tools_install_event = 16;
     */
    value: UIDiscoverDesktopActiveDirectoryToolsInstallEvent;
    case: "uiDiscoverDesktopActiveDirectoryToolsInstallEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverDesktopActiveDirectoryConfigureEvent ui_discover_desktop_active_directory_configure_event = 17;
     */
    value: UIDiscoverDesktopActiveDirectoryConfigureEvent;
    case: "uiDiscoverDesktopActiveDirectoryConfigureEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverAutoDiscoveredResourcesEvent ui_discover_auto_discovered_resources_event = 18;
     */
    value: UIDiscoverAutoDiscoveredResourcesEvent;
    case: "uiDiscoverAutoDiscoveredResourcesEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverDatabaseConfigureIAMPolicyEvent ui_discover_database_configure_iam_policy_event = 19;
     */
    value: UIDiscoverDatabaseConfigureIAMPolicyEvent;
    case: "uiDiscoverDatabaseConfigureIamPolicyEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverPrincipalsConfigureEvent ui_discover_principals_configure_event = 20;
     */
    value: UIDiscoverPrincipalsConfigureEvent;
    case: "uiDiscoverPrincipalsConfigureEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverTestConnectionEvent ui_discover_test_connection_event = 21;
     */
    value: UIDiscoverTestConnectionEvent;
    case: "uiDiscoverTestConnectionEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverCompletedEvent ui_discover_completed_event = 22;
     */
    value: UIDiscoverCompletedEvent;
    case: "uiDiscoverCompletedEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UICreateNewRoleClickEvent ui_create_new_role_click = 23;
     */
    value: UICreateNewRoleClickEvent;
    case: "uiCreateNewRoleClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UICreateNewRoleSaveClickEvent ui_create_new_role_save_click = 24;
     */
    value: UICreateNewRoleSaveClickEvent;
    case: "uiCreateNewRoleSaveClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UICreateNewRoleCancelClickEvent ui_create_new_role_cancel_click = 25;
     */
    value: UICreateNewRoleCancelClickEvent;
    case: "uiCreateNewRoleCancelClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UICreateNewRoleViewDocumentationClickEvent ui_create_new_role_view_documentation_click = 26;
     */
    value: UICreateNewRoleViewDocumentationClickEvent;
    case: "uiCreateNewRoleViewDocumentationClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverIntegrationAWSOIDCConnectEvent ui_discover_integration_aws_oidc_connect_event = 27;
     */
    value: UIDiscoverIntegrationAWSOIDCConnectEvent;
    case: "uiDiscoverIntegrationAwsOidcConnectEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverDatabaseRDSEnrollEvent ui_discover_database_rds_enroll_event = 28;
     */
    value: UIDiscoverDatabaseRDSEnrollEvent;
    case: "uiDiscoverDatabaseRdsEnrollEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UICallToActionClickEvent ui_call_to_action_click_event = 29;
     */
    value: UICallToActionClickEvent;
    case: "uiCallToActionClickEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AssistCompletionEvent assist_completion = 30;
     */
    value: AssistCompletionEvent;
    case: "assistCompletion";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIIntegrationEnrollStartEvent ui_integration_enroll_start_event = 31;
     */
    value: UIIntegrationEnrollStartEvent;
    case: "uiIntegrationEnrollStartEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIIntegrationEnrollCompleteEvent ui_integration_enroll_complete_event = 32;
     */
    value: UIIntegrationEnrollCompleteEvent;
    case: "uiIntegrationEnrollCompleteEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIOnboardQuestionnaireSubmitEvent ui_onboard_questionnaire_submit = 33;
     */
    value: UIOnboardQuestionnaireSubmitEvent;
    case: "uiOnboardQuestionnaireSubmit";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AssistExecutionEvent assist_execution = 34;
     */
    value: AssistExecutionEvent;
    case: "assistExecution";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AssistNewConversationEvent assist_new_conversation = 35;
     */
    value: AssistNewConversationEvent;
    case: "assistNewConversation";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.ResourceCreateEvent resource_create_event = 36;
     */
    value: ResourceCreateEvent;
    case: "resourceCreateEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.FeatureRecommendationEvent feature_recommendation_event = 37;
     */
    value: FeatureRecommendationEvent;
    case: "featureRecommendationEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AssistAccessRequest assist_access_request = 38;
     */
    value: AssistAccessRequest;
    case: "assistAccessRequest";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AssistAction assist_action = 39;
     */
    value: AssistAction;
    case: "assistAction";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessListCreate access_list_create = 40;
     */
    value: AccessListCreate;
    case: "accessListCreate";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessListUpdate access_list_update = 41;
     */
    value: AccessListUpdate;
    case: "accessListUpdate";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessListDelete access_list_delete = 42;
     */
    value: AccessListDelete;
    case: "accessListDelete";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessListMemberCreate access_list_member_create = 43;
     */
    value: AccessListMemberCreate;
    case: "accessListMemberCreate";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessListMemberUpdate access_list_member_update = 44;
     */
    value: AccessListMemberUpdate;
    case: "accessListMemberUpdate";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessListMemberDelete access_list_member_delete = 45;
     */
    value: AccessListMemberDelete;
    case: "accessListMemberDelete";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessListGrantsToUser access_list_grants_to_user = 46;
     */
    value: AccessListGrantsToUser;
    case: "accessListGrantsToUser";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverEC2InstanceSelectionEvent ui_discover_ec2_instance_selection = 47;
     */
    value: UIDiscoverEC2InstanceSelectionEvent;
    case: "uiDiscoverEc2InstanceSelection";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverDeployEICEEvent ui_discover_deploy_eice = 48;
     */
    value: UIDiscoverDeployEICEEvent;
    case: "uiDiscoverDeployEice";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverCreateNodeEvent ui_discover_create_node = 49;
     */
    value: UIDiscoverCreateNodeEvent;
    case: "uiDiscoverCreateNode";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.TAGExecuteQueryEvent tag_execute_query = 50;
     */
    value: TAGExecuteQueryEvent;
    case: "tagExecuteQuery";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.SecurityReportGetResultEvent security_report_get_result = 51;
     */
    value: SecurityReportGetResultEvent;
    case: "securityReportGetResult";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessListReviewCreate access_list_review_create = 52;
     */
    value: AccessListReviewCreate;
    case: "accessListReviewCreate";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessListReviewDelete access_list_review_delete = 53;
     */
    value: AccessListReviewDelete;
    case: "accessListReviewDelete";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.DiscoveryFetchEvent discovery_fetch_event = 54;
     */
    value: DiscoveryFetchEvent;
    case: "discoveryFetchEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverCreateDiscoveryConfigEvent ui_discover_create_discovery_config = 55;
     */
    value: UIDiscoverCreateDiscoveryConfigEvent;
    case: "uiDiscoverCreateDiscoveryConfig";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverKubeEKSEnrollEvent ui_discover_kube_eks_enroll_event = 56;
     */
    value: UIDiscoverKubeEKSEnrollEvent;
    case: "uiDiscoverKubeEksEnrollEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverCreateAppServerEvent ui_discover_create_app_server_event = 57;
     */
    value: UIDiscoverCreateAppServerEvent;
    case: "uiDiscoverCreateAppServerEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessGraphAWSScanEvent access_graph_aws_scan_event = 58;
     */
    value: AccessGraphAWSScanEvent;
    case: "accessGraphAwsScanEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIAccessGraphCrownJewelDiffViewEvent ui_access_graph_crown_jewel_diff_view = 59;
     */
    value: UIAccessGraphCrownJewelDiffViewEvent;
    case: "uiAccessGraphCrownJewelDiffView";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<UsageEventOneOf>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usageevents.v1.UsageEventOneOf";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ui_banner_click", kind: "message", T: UIBannerClickEvent, oneof: "event" },
    { no: 3, name: "ui_onboard_complete_go_to_dashboard_click", kind: "message", T: UIOnboardCompleteGoToDashboardClickEvent, oneof: "event" },
    { no: 4, name: "ui_onboard_add_first_resource_click", kind: "message", T: UIOnboardAddFirstResourceClickEvent, oneof: "event" },
    { no: 5, name: "ui_onboard_add_first_resource_later_click", kind: "message", T: UIOnboardAddFirstResourceLaterClickEvent, oneof: "event" },
    { no: 6, name: "ui_onboard_set_credential_submit", kind: "message", T: UIOnboardSetCredentialSubmitEvent, oneof: "event" },
    { no: 7, name: "ui_onboard_register_challenge_submit", kind: "message", T: UIOnboardRegisterChallengeSubmitEvent, oneof: "event" },
    { no: 8, name: "ui_recovery_codes_continue_click", kind: "message", T: UIRecoveryCodesContinueClickEvent, oneof: "event" },
    { no: 9, name: "ui_recovery_codes_copy_click", kind: "message", T: UIRecoveryCodesCopyClickEvent, oneof: "event" },
    { no: 10, name: "ui_recovery_codes_print_click", kind: "message", T: UIRecoveryCodesPrintClickEvent, oneof: "event" },
    { no: 11, name: "ui_discover_started_event", kind: "message", T: UIDiscoverStartedEvent, oneof: "event" },
    { no: 12, name: "ui_discover_resource_selection_event", kind: "message", T: UIDiscoverResourceSelectionEvent, oneof: "event" },
    { no: 13, name: "ui_discover_deploy_service_event", kind: "message", T: UIDiscoverDeployServiceEvent, oneof: "event" },
    { no: 14, name: "ui_discover_database_register_event", kind: "message", T: UIDiscoverDatabaseRegisterEvent, oneof: "event" },
    { no: 15, name: "ui_discover_database_configure_mtls_event", kind: "message", T: UIDiscoverDatabaseConfigureMTLSEvent, oneof: "event" },
    { no: 16, name: "ui_discover_desktop_active_directory_tools_install_event", kind: "message", T: UIDiscoverDesktopActiveDirectoryToolsInstallEvent, oneof: "event" },
    { no: 17, name: "ui_discover_desktop_active_directory_configure_event", kind: "message", T: UIDiscoverDesktopActiveDirectoryConfigureEvent, oneof: "event" },
    { no: 18, name: "ui_discover_auto_discovered_resources_event", kind: "message", T: UIDiscoverAutoDiscoveredResourcesEvent, oneof: "event" },
    { no: 19, name: "ui_discover_database_configure_iam_policy_event", kind: "message", T: UIDiscoverDatabaseConfigureIAMPolicyEvent, oneof: "event" },
    { no: 20, name: "ui_discover_principals_configure_event", kind: "message", T: UIDiscoverPrincipalsConfigureEvent, oneof: "event" },
    { no: 21, name: "ui_discover_test_connection_event", kind: "message", T: UIDiscoverTestConnectionEvent, oneof: "event" },
    { no: 22, name: "ui_discover_completed_event", kind: "message", T: UIDiscoverCompletedEvent, oneof: "event" },
    { no: 23, name: "ui_create_new_role_click", kind: "message", T: UICreateNewRoleClickEvent, oneof: "event" },
    { no: 24, name: "ui_create_new_role_save_click", kind: "message", T: UICreateNewRoleSaveClickEvent, oneof: "event" },
    { no: 25, name: "ui_create_new_role_cancel_click", kind: "message", T: UICreateNewRoleCancelClickEvent, oneof: "event" },
    { no: 26, name: "ui_create_new_role_view_documentation_click", kind: "message", T: UICreateNewRoleViewDocumentationClickEvent, oneof: "event" },
    { no: 27, name: "ui_discover_integration_aws_oidc_connect_event", kind: "message", T: UIDiscoverIntegrationAWSOIDCConnectEvent, oneof: "event" },
    { no: 28, name: "ui_discover_database_rds_enroll_event", kind: "message", T: UIDiscoverDatabaseRDSEnrollEvent, oneof: "event" },
    { no: 29, name: "ui_call_to_action_click_event", kind: "message", T: UICallToActionClickEvent, oneof: "event" },
    { no: 30, name: "assist_completion", kind: "message", T: AssistCompletionEvent, oneof: "event" },
    { no: 31, name: "ui_integration_enroll_start_event", kind: "message", T: UIIntegrationEnrollStartEvent, oneof: "event" },
    { no: 32, name: "ui_integration_enroll_complete_event", kind: "message", T: UIIntegrationEnrollCompleteEvent, oneof: "event" },
    { no: 33, name: "ui_onboard_questionnaire_submit", kind: "message", T: UIOnboardQuestionnaireSubmitEvent, oneof: "event" },
    { no: 34, name: "assist_execution", kind: "message", T: AssistExecutionEvent, oneof: "event" },
    { no: 35, name: "assist_new_conversation", kind: "message", T: AssistNewConversationEvent, oneof: "event" },
    { no: 36, name: "resource_create_event", kind: "message", T: ResourceCreateEvent, oneof: "event" },
    { no: 37, name: "feature_recommendation_event", kind: "message", T: FeatureRecommendationEvent, oneof: "event" },
    { no: 38, name: "assist_access_request", kind: "message", T: AssistAccessRequest, oneof: "event" },
    { no: 39, name: "assist_action", kind: "message", T: AssistAction, oneof: "event" },
    { no: 40, name: "access_list_create", kind: "message", T: AccessListCreate, oneof: "event" },
    { no: 41, name: "access_list_update", kind: "message", T: AccessListUpdate, oneof: "event" },
    { no: 42, name: "access_list_delete", kind: "message", T: AccessListDelete, oneof: "event" },
    { no: 43, name: "access_list_member_create", kind: "message", T: AccessListMemberCreate, oneof: "event" },
    { no: 44, name: "access_list_member_update", kind: "message", T: AccessListMemberUpdate, oneof: "event" },
    { no: 45, name: "access_list_member_delete", kind: "message", T: AccessListMemberDelete, oneof: "event" },
    { no: 46, name: "access_list_grants_to_user", kind: "message", T: AccessListGrantsToUser, oneof: "event" },
    { no: 47, name: "ui_discover_ec2_instance_selection", kind: "message", T: UIDiscoverEC2InstanceSelectionEvent, oneof: "event" },
    { no: 48, name: "ui_discover_deploy_eice", kind: "message", T: UIDiscoverDeployEICEEvent, oneof: "event" },
    { no: 49, name: "ui_discover_create_node", kind: "message", T: UIDiscoverCreateNodeEvent, oneof: "event" },
    { no: 50, name: "tag_execute_query", kind: "message", T: TAGExecuteQueryEvent, oneof: "event" },
    { no: 51, name: "security_report_get_result", kind: "message", T: SecurityReportGetResultEvent, oneof: "event" },
    { no: 52, name: "access_list_review_create", kind: "message", T: AccessListReviewCreate, oneof: "event" },
    { no: 53, name: "access_list_review_delete", kind: "message", T: AccessListReviewDelete, oneof: "event" },
    { no: 54, name: "discovery_fetch_event", kind: "message", T: DiscoveryFetchEvent, oneof: "event" },
    { no: 55, name: "ui_discover_create_discovery_config", kind: "message", T: UIDiscoverCreateDiscoveryConfigEvent, oneof: "event" },
    { no: 56, name: "ui_discover_kube_eks_enroll_event", kind: "message", T: UIDiscoverKubeEKSEnrollEvent, oneof: "event" },
    { no: 57, name: "ui_discover_create_app_server_event", kind: "message", T: UIDiscoverCreateAppServerEvent, oneof: "event" },
    { no: 58, name: "access_graph_aws_scan_event", kind: "message", T: AccessGraphAWSScanEvent, oneof: "event" },
    { no: 59, name: "ui_access_graph_crown_jewel_diff_view", kind: "message", T: UIAccessGraphCrownJewelDiffViewEvent, oneof: "event" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsageEventOneOf {
    return new UsageEventOneOf().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsageEventOneOf {
    return new UsageEventOneOf().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsageEventOneOf {
    return new UsageEventOneOf().fromJsonString(jsonString, options);
  }

  static equals(a: UsageEventOneOf | PlainMessage<UsageEventOneOf> | undefined, b: UsageEventOneOf | PlainMessage<UsageEventOneOf> | undefined): boolean {
    return proto3.util.equals(UsageEventOneOf, a, b);
  }
}

