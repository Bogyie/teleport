// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file teleport/userloginstate/v1/userloginstate_service.proto (package teleport.userloginstate.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { DeleteAllUserLoginStatesRequest, DeleteUserLoginStateRequest, GetUserLoginStateRequest, GetUserLoginStatesRequest, GetUserLoginStatesResponse, UpsertUserLoginStateRequest } from "./userloginstate_service_pb.js";
import { Empty, MethodKind } from "@bufbuild/protobuf";
import { UserLoginState } from "./userloginstate_pb.js";

/**
 * UserLoginStateService provides CRUD methods for user login state resources.
 *
 * @generated from service teleport.userloginstate.v1.UserLoginStateService
 */
export const UserLoginStateService = {
  typeName: "teleport.userloginstate.v1.UserLoginStateService",
  methods: {
    /**
     * GetUserLoginStates returns a list of all user login states.
     *
     * @generated from rpc teleport.userloginstate.v1.UserLoginStateService.GetUserLoginStates
     */
    getUserLoginStates: {
      name: "GetUserLoginStates",
      I: GetUserLoginStatesRequest,
      O: GetUserLoginStatesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetUserLoginState returns the specified user login state resource.
     *
     * @generated from rpc teleport.userloginstate.v1.UserLoginStateService.GetUserLoginState
     */
    getUserLoginState: {
      name: "GetUserLoginState",
      I: GetUserLoginStateRequest,
      O: UserLoginState,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertUserLoginState creates or updates a user login state resource.
     *
     * @generated from rpc teleport.userloginstate.v1.UserLoginStateService.UpsertUserLoginState
     */
    upsertUserLoginState: {
      name: "UpsertUserLoginState",
      I: UpsertUserLoginStateRequest,
      O: UserLoginState,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteUserLoginState hard deletes the specified user login state resource.
     *
     * @generated from rpc teleport.userloginstate.v1.UserLoginStateService.DeleteUserLoginState
     */
    deleteUserLoginState: {
      name: "DeleteUserLoginState",
      I: DeleteUserLoginStateRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllUserLoginStates hard deletes all user login states.
     *
     * @generated from rpc teleport.userloginstate.v1.UserLoginStateService.DeleteAllUserLoginStates
     */
    deleteAllUserLoginStates: {
      name: "DeleteAllUserLoginStates",
      I: DeleteAllUserLoginStatesRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
  }
} as const;

