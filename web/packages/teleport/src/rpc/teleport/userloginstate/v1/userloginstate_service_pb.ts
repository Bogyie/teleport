// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/userloginstate/v1/userloginstate_service.proto (package teleport.userloginstate.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { UserLoginState } from "./userloginstate_pb.js";

/**
 * GetUserLoginStatesRequest is the request for getting all user login states.
 *
 * @generated from message teleport.userloginstate.v1.GetUserLoginStatesRequest
 */
export class GetUserLoginStatesRequest extends Message<GetUserLoginStatesRequest> {
  constructor(data?: PartialMessage<GetUserLoginStatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userloginstate.v1.GetUserLoginStatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserLoginStatesRequest {
    return new GetUserLoginStatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserLoginStatesRequest {
    return new GetUserLoginStatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserLoginStatesRequest {
    return new GetUserLoginStatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserLoginStatesRequest | PlainMessage<GetUserLoginStatesRequest> | undefined, b: GetUserLoginStatesRequest | PlainMessage<GetUserLoginStatesRequest> | undefined): boolean {
    return proto3.util.equals(GetUserLoginStatesRequest, a, b);
  }
}

/**
 * GetUserLoginStatesResponse is the response for getting all user login states.
 *
 * @generated from message teleport.userloginstate.v1.GetUserLoginStatesResponse
 */
export class GetUserLoginStatesResponse extends Message<GetUserLoginStatesResponse> {
  /**
   * user_login_states is the list of user login states.
   *
   * @generated from field: repeated teleport.userloginstate.v1.UserLoginState user_login_states = 1;
   */
  userLoginStates: UserLoginState[] = [];

  constructor(data?: PartialMessage<GetUserLoginStatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userloginstate.v1.GetUserLoginStatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_login_states", kind: "message", T: UserLoginState, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserLoginStatesResponse {
    return new GetUserLoginStatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserLoginStatesResponse {
    return new GetUserLoginStatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserLoginStatesResponse {
    return new GetUserLoginStatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserLoginStatesResponse | PlainMessage<GetUserLoginStatesResponse> | undefined, b: GetUserLoginStatesResponse | PlainMessage<GetUserLoginStatesResponse> | undefined): boolean {
    return proto3.util.equals(GetUserLoginStatesResponse, a, b);
  }
}

/**
 * GetUserLoginStateRequest is the request for retrieving a user login state.
 *
 * @generated from message teleport.userloginstate.v1.GetUserLoginStateRequest
 */
export class GetUserLoginStateRequest extends Message<GetUserLoginStateRequest> {
  /**
   * name is the name of the user login state to retrieve.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetUserLoginStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userloginstate.v1.GetUserLoginStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserLoginStateRequest {
    return new GetUserLoginStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserLoginStateRequest {
    return new GetUserLoginStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserLoginStateRequest {
    return new GetUserLoginStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserLoginStateRequest | PlainMessage<GetUserLoginStateRequest> | undefined, b: GetUserLoginStateRequest | PlainMessage<GetUserLoginStateRequest> | undefined): boolean {
    return proto3.util.equals(GetUserLoginStateRequest, a, b);
  }
}

/**
 * UpsertUserLoginStateRequest is the request for upserting a user login state.
 *
 * @generated from message teleport.userloginstate.v1.UpsertUserLoginStateRequest
 */
export class UpsertUserLoginStateRequest extends Message<UpsertUserLoginStateRequest> {
  /**
   * user_login_state is the user login state to upsert.
   *
   * @generated from field: teleport.userloginstate.v1.UserLoginState user_login_state = 1;
   */
  userLoginState?: UserLoginState;

  constructor(data?: PartialMessage<UpsertUserLoginStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userloginstate.v1.UpsertUserLoginStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_login_state", kind: "message", T: UserLoginState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertUserLoginStateRequest {
    return new UpsertUserLoginStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertUserLoginStateRequest {
    return new UpsertUserLoginStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertUserLoginStateRequest {
    return new UpsertUserLoginStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertUserLoginStateRequest | PlainMessage<UpsertUserLoginStateRequest> | undefined, b: UpsertUserLoginStateRequest | PlainMessage<UpsertUserLoginStateRequest> | undefined): boolean {
    return proto3.util.equals(UpsertUserLoginStateRequest, a, b);
  }
}

/**
 * DeleteUserLoginStateRequest is the request for deleting a user login state.
 *
 * @generated from message teleport.userloginstate.v1.DeleteUserLoginStateRequest
 */
export class DeleteUserLoginStateRequest extends Message<DeleteUserLoginStateRequest> {
  /**
   * name is the name of the user login state to delete.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteUserLoginStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userloginstate.v1.DeleteUserLoginStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserLoginStateRequest {
    return new DeleteUserLoginStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserLoginStateRequest {
    return new DeleteUserLoginStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserLoginStateRequest {
    return new DeleteUserLoginStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUserLoginStateRequest | PlainMessage<DeleteUserLoginStateRequest> | undefined, b: DeleteUserLoginStateRequest | PlainMessage<DeleteUserLoginStateRequest> | undefined): boolean {
    return proto3.util.equals(DeleteUserLoginStateRequest, a, b);
  }
}

/**
 * DeleteAllUserLoginStatesRequest is the request for deleting all user login states.
 *
 * @generated from message teleport.userloginstate.v1.DeleteAllUserLoginStatesRequest
 */
export class DeleteAllUserLoginStatesRequest extends Message<DeleteAllUserLoginStatesRequest> {
  constructor(data?: PartialMessage<DeleteAllUserLoginStatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userloginstate.v1.DeleteAllUserLoginStatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAllUserLoginStatesRequest {
    return new DeleteAllUserLoginStatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAllUserLoginStatesRequest {
    return new DeleteAllUserLoginStatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAllUserLoginStatesRequest {
    return new DeleteAllUserLoginStatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAllUserLoginStatesRequest | PlainMessage<DeleteAllUserLoginStatesRequest> | undefined, b: DeleteAllUserLoginStatesRequest | PlainMessage<DeleteAllUserLoginStatesRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAllUserLoginStatesRequest, a, b);
  }
}

