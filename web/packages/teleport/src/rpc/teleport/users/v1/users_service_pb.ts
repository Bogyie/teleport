// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/users/v1/users_service.proto (package teleport.users.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty } from "@bufbuild/protobuf/wkt";
import type { UserFilter, UserV2 } from "../../legacy/types/types_pb";
import { file_teleport_legacy_types_types } from "../../legacy/types/types_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/users/v1/users_service.proto.
 */
export const file_teleport_users_v1_users_service: GenFile = /*@__PURE__*/
  fileDesc("CiV0ZWxlcG9ydC91c2Vycy92MS91c2Vyc19zZXJ2aWNlLnByb3RvEhF0ZWxlcG9ydC51c2Vycy52MSJKCg5HZXRVc2VyUmVxdWVzdBIMCgRuYW1lGAEgASgJEhQKDGN1cnJlbnRfdXNlchgCIAEoCBIUCgx3aXRoX3NlY3JldHMYAyABKAgiLgoPR2V0VXNlclJlc3BvbnNlEhsKBHVzZXIYASABKAsyDS50eXBlcy5Vc2VyVjIicgoQTGlzdFVzZXJzUmVxdWVzdBIRCglwYWdlX3NpemUYASABKAUSEgoKcGFnZV90b2tlbhgCIAEoCRIUCgx3aXRoX3NlY3JldHMYAyABKAgSIQoGZmlsdGVyGAQgASgLMhEudHlwZXMuVXNlckZpbHRlciJKChFMaXN0VXNlcnNSZXNwb25zZRIcCgV1c2VycxgBIAMoCzINLnR5cGVzLlVzZXJWMhIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiMAoRQ3JlYXRlVXNlclJlcXVlc3QSGwoEdXNlchgBIAEoCzINLnR5cGVzLlVzZXJWMiIxChJDcmVhdGVVc2VyUmVzcG9uc2USGwoEdXNlchgBIAEoCzINLnR5cGVzLlVzZXJWMiIwChFVcGRhdGVVc2VyUmVxdWVzdBIbCgR1c2VyGAIgASgLMg0udHlwZXMuVXNlclYyIjEKElVwZGF0ZVVzZXJSZXNwb25zZRIbCgR1c2VyGAEgASgLMg0udHlwZXMuVXNlclYyIjAKEVVwc2VydFVzZXJSZXF1ZXN0EhsKBHVzZXIYAiABKAsyDS50eXBlcy5Vc2VyVjIiMQoSVXBzZXJ0VXNlclJlc3BvbnNlEhsKBHVzZXIYASABKAsyDS50eXBlcy5Vc2VyVjIiIQoRRGVsZXRlVXNlclJlcXVlc3QSDAoEbmFtZRgBIAEoCTKVBAoMVXNlcnNTZXJ2aWNlElAKB0dldFVzZXISIS50ZWxlcG9ydC51c2Vycy52MS5HZXRVc2VyUmVxdWVzdBoiLnRlbGVwb3J0LnVzZXJzLnYxLkdldFVzZXJSZXNwb25zZRJWCglMaXN0VXNlcnMSIy50ZWxlcG9ydC51c2Vycy52MS5MaXN0VXNlcnNSZXF1ZXN0GiQudGVsZXBvcnQudXNlcnMudjEuTGlzdFVzZXJzUmVzcG9uc2USWQoKQ3JlYXRlVXNlchIkLnRlbGVwb3J0LnVzZXJzLnYxLkNyZWF0ZVVzZXJSZXF1ZXN0GiUudGVsZXBvcnQudXNlcnMudjEuQ3JlYXRlVXNlclJlc3BvbnNlElkKClVwZGF0ZVVzZXISJC50ZWxlcG9ydC51c2Vycy52MS5VcGRhdGVVc2VyUmVxdWVzdBolLnRlbGVwb3J0LnVzZXJzLnYxLlVwZGF0ZVVzZXJSZXNwb25zZRJZCgpVcHNlcnRVc2VyEiQudGVsZXBvcnQudXNlcnMudjEuVXBzZXJ0VXNlclJlcXVlc3QaJS50ZWxlcG9ydC51c2Vycy52MS5VcHNlcnRVc2VyUmVzcG9uc2USSgoKRGVsZXRlVXNlchIkLnRlbGVwb3J0LnVzZXJzLnYxLkRlbGV0ZVVzZXJSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5Qk5aTGdpdGh1Yi5jb20vZ3Jhdml0YXRpb25hbC90ZWxlcG9ydC9hcGkvZ2VuL3Byb3RvL2dvL3RlbGVwb3J0L3VzZXJzL3YxO3VzZXJzdjFiBnByb3RvMw", [file_google_protobuf_empty, file_teleport_legacy_types_types]);

/**
 * Request for GetUser.
 *
 * @generated from message teleport.users.v1.GetUserRequest
 */
export type GetUserRequest = Message<"teleport.users.v1.GetUserRequest"> & {
  /**
   * Name of the user to retrieve, this take priority over current_user.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Whether to return the current user. If the name is provided
   * then this field is ignored.
   *
   * @generated from field: bool current_user = 2;
   */
  currentUser: boolean;

  /**
   * Specifies whether to load associated secrets(password, mfa devices, etc.).
   *
   * @generated from field: bool with_secrets = 3;
   */
  withSecrets: boolean;
};

/**
 * Describes the message teleport.users.v1.GetUserRequest.
 * Use `create(GetUserRequestSchema)` to create a new message.
 */
export const GetUserRequestSchema: GenMessage<GetUserRequest> = /*@__PURE__*/
  messageDesc(file_teleport_users_v1_users_service, 0);

/**
 * Response for GetUser.
 *
 * @generated from message teleport.users.v1.GetUserResponse
 */
export type GetUserResponse = Message<"teleport.users.v1.GetUserResponse"> & {
  /**
   * The user matching the request filters.
   *
   * @generated from field: types.UserV2 user = 1;
   */
  user?: UserV2;
};

/**
 * Describes the message teleport.users.v1.GetUserResponse.
 * Use `create(GetUserResponseSchema)` to create a new message.
 */
export const GetUserResponseSchema: GenMessage<GetUserResponse> = /*@__PURE__*/
  messageDesc(file_teleport_users_v1_users_service, 1);

/**
 * Request for ListUsers.
 *
 * Follows the pagination semantics of
 * https://cloud.google.com/apis/design/standard_methods#list.
 *
 * @generated from message teleport.users.v1.ListUsersRequest
 */
export type ListUsersRequest = Message<"teleport.users.v1.ListUsersRequest"> & {
  /**
   * The maximum number of items to return.
   * The server may impose a different page size at its discretion.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * The next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Specifies whether to load associated secrets(password, mfa devices, etc.).
   *
   * @generated from field: bool with_secrets = 3;
   */
  withSecrets: boolean;

  /**
   * Filter matches users.
   *
   * @generated from field: types.UserFilter filter = 4;
   */
  filter?: UserFilter;
};

/**
 * Describes the message teleport.users.v1.ListUsersRequest.
 * Use `create(ListUsersRequestSchema)` to create a new message.
 */
export const ListUsersRequestSchema: GenMessage<ListUsersRequest> = /*@__PURE__*/
  messageDesc(file_teleport_users_v1_users_service, 2);

/**
 * Response for ListUsers.
 *
 * @generated from message teleport.users.v1.ListUsersResponse
 */
export type ListUsersResponse = Message<"teleport.users.v1.ListUsersResponse"> & {
  /**
   * Users that matched the search.
   *
   * @generated from field: repeated types.UserV2 users = 1;
   */
  users: UserV2[];

  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message teleport.users.v1.ListUsersResponse.
 * Use `create(ListUsersResponseSchema)` to create a new message.
 */
export const ListUsersResponseSchema: GenMessage<ListUsersResponse> = /*@__PURE__*/
  messageDesc(file_teleport_users_v1_users_service, 3);

/**
 * Request for CreateUser.
 *
 * @generated from message teleport.users.v1.CreateUserRequest
 */
export type CreateUserRequest = Message<"teleport.users.v1.CreateUserRequest"> & {
  /**
   * The user resource to create.
   *
   * @generated from field: types.UserV2 user = 1;
   */
  user?: UserV2;
};

/**
 * Describes the message teleport.users.v1.CreateUserRequest.
 * Use `create(CreateUserRequestSchema)` to create a new message.
 */
export const CreateUserRequestSchema: GenMessage<CreateUserRequest> = /*@__PURE__*/
  messageDesc(file_teleport_users_v1_users_service, 4);

/**
 * Response for CreateUser.
 *
 * @generated from message teleport.users.v1.CreateUserResponse
 */
export type CreateUserResponse = Message<"teleport.users.v1.CreateUserResponse"> & {
  /**
   * The created user with any server side generated fields populated.
   *
   * @generated from field: types.UserV2 user = 1;
   */
  user?: UserV2;
};

/**
 * Describes the message teleport.users.v1.CreateUserResponse.
 * Use `create(CreateUserResponseSchema)` to create a new message.
 */
export const CreateUserResponseSchema: GenMessage<CreateUserResponse> = /*@__PURE__*/
  messageDesc(file_teleport_users_v1_users_service, 5);

/**
 * Request for UpdateUser.
 *
 * @generated from message teleport.users.v1.UpdateUserRequest
 */
export type UpdateUserRequest = Message<"teleport.users.v1.UpdateUserRequest"> & {
  /**
   * The user resource to update.
   *
   * @generated from field: types.UserV2 user = 2;
   */
  user?: UserV2;
};

/**
 * Describes the message teleport.users.v1.UpdateUserRequest.
 * Use `create(UpdateUserRequestSchema)` to create a new message.
 */
export const UpdateUserRequestSchema: GenMessage<UpdateUserRequest> = /*@__PURE__*/
  messageDesc(file_teleport_users_v1_users_service, 6);

/**
 * Response for UpdateUser.
 *
 * @generated from message teleport.users.v1.UpdateUserResponse
 */
export type UpdateUserResponse = Message<"teleport.users.v1.UpdateUserResponse"> & {
  /**
   * The updated user with any server side generated fields populated.
   *
   * @generated from field: types.UserV2 user = 1;
   */
  user?: UserV2;
};

/**
 * Describes the message teleport.users.v1.UpdateUserResponse.
 * Use `create(UpdateUserResponseSchema)` to create a new message.
 */
export const UpdateUserResponseSchema: GenMessage<UpdateUserResponse> = /*@__PURE__*/
  messageDesc(file_teleport_users_v1_users_service, 7);

/**
 * Request for UpsertUser.
 *
 * @generated from message teleport.users.v1.UpsertUserRequest
 */
export type UpsertUserRequest = Message<"teleport.users.v1.UpsertUserRequest"> & {
  /**
   * The user resource to upsert.
   *
   * @generated from field: types.UserV2 user = 2;
   */
  user?: UserV2;
};

/**
 * Describes the message teleport.users.v1.UpsertUserRequest.
 * Use `create(UpsertUserRequestSchema)` to create a new message.
 */
export const UpsertUserRequestSchema: GenMessage<UpsertUserRequest> = /*@__PURE__*/
  messageDesc(file_teleport_users_v1_users_service, 8);

/**
 * Response for UpsertUser.
 *
 * @generated from message teleport.users.v1.UpsertUserResponse
 */
export type UpsertUserResponse = Message<"teleport.users.v1.UpsertUserResponse"> & {
  /**
   * The upserted user with any server side generated fields populated.
   *
   * @generated from field: types.UserV2 user = 1;
   */
  user?: UserV2;
};

/**
 * Describes the message teleport.users.v1.UpsertUserResponse.
 * Use `create(UpsertUserResponseSchema)` to create a new message.
 */
export const UpsertUserResponseSchema: GenMessage<UpsertUserResponse> = /*@__PURE__*/
  messageDesc(file_teleport_users_v1_users_service, 9);

/**
 * Request for DeleteUser.
 *
 * @generated from message teleport.users.v1.DeleteUserRequest
 */
export type DeleteUserRequest = Message<"teleport.users.v1.DeleteUserRequest"> & {
  /**
   * Name of the user to remove.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message teleport.users.v1.DeleteUserRequest.
 * Use `create(DeleteUserRequestSchema)` to create a new message.
 */
export const DeleteUserRequestSchema: GenMessage<DeleteUserRequest> = /*@__PURE__*/
  messageDesc(file_teleport_users_v1_users_service, 10);

/**
 * UsersService provides methods to manage Teleport users.
 *
 * @generated from service teleport.users.v1.UsersService
 */
export const UsersService: GenService<{
  /**
   * GetUser retrieves a user by name or looks up the current user if requested.
   *
   * @generated from rpc teleport.users.v1.UsersService.GetUser
   */
  getUser: {
    methodKind: "unary";
    input: typeof GetUserRequestSchema;
    output: typeof GetUserResponseSchema;
  },
  /**
   * ListUsers gets all existing users.
   *
   * @generated from rpc teleport.users.v1.UsersService.ListUsers
   */
  listUsers: {
    methodKind: "unary";
    input: typeof ListUsersRequestSchema;
    output: typeof ListUsersResponseSchema;
  },
  /**
   * CreateUser creates a user if one does not already exist.
   *
   * @generated from rpc teleport.users.v1.UsersService.CreateUser
   */
  createUser: {
    methodKind: "unary";
    input: typeof CreateUserRequestSchema;
    output: typeof CreateUserResponseSchema;
  },
  /**
   * UpdateUser updates an existing user.
   *
   * @generated from rpc teleport.users.v1.UsersService.UpdateUser
   */
  updateUser: {
    methodKind: "unary";
    input: typeof UpdateUserRequestSchema;
    output: typeof UpdateUserResponseSchema;
  },
  /**
   * UpsertUser creates a new user or forcefully updates an existing user.
   *
   * @generated from rpc teleport.users.v1.UsersService.UpsertUser
   */
  upsertUser: {
    methodKind: "unary";
    input: typeof UpsertUserRequestSchema;
    output: typeof UpsertUserResponseSchema;
  },
  /**
   * DeleteUser removes an existing user by name.
   *
   * @generated from rpc teleport.users.v1.UsersService.DeleteUser
   */
  deleteUser: {
    methodKind: "unary";
    input: typeof DeleteUserRequestSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_teleport_users_v1_users_service, 0);

