// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts"
// @generated from file teleport/users/v1/users_service.proto (package teleport.users.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { CreateUserRequest, CreateUserResponse, DeleteUserRequest, GetUserRequest, GetUserResponse, ListUsersRequest, ListUsersResponse, UpdateUserRequest, UpdateUserResponse, UpsertUserRequest, UpsertUserResponse } from "./users_service_pb.js";

/**
 * GetUser retrieves a user by name or looks up the current user if requested.
 *
 * @generated from rpc teleport.users.v1.UsersService.GetUser
 */
export const getUser = {
  localName: "getUser",
  name: "GetUser",
  kind: MethodKind.Unary,
  I: GetUserRequest,
  O: GetUserResponse,
  service: {
    typeName: "teleport.users.v1.UsersService"
  }
} as const;

/**
 * ListUsers gets all existing users.
 *
 * @generated from rpc teleport.users.v1.UsersService.ListUsers
 */
export const listUsers = {
  localName: "listUsers",
  name: "ListUsers",
  kind: MethodKind.Unary,
  I: ListUsersRequest,
  O: ListUsersResponse,
  service: {
    typeName: "teleport.users.v1.UsersService"
  }
} as const;

/**
 * CreateUser creates a user if one does not already exist.
 *
 * @generated from rpc teleport.users.v1.UsersService.CreateUser
 */
export const createUser = {
  localName: "createUser",
  name: "CreateUser",
  kind: MethodKind.Unary,
  I: CreateUserRequest,
  O: CreateUserResponse,
  service: {
    typeName: "teleport.users.v1.UsersService"
  }
} as const;

/**
 * UpdateUser updates an existing user.
 *
 * @generated from rpc teleport.users.v1.UsersService.UpdateUser
 */
export const updateUser = {
  localName: "updateUser",
  name: "UpdateUser",
  kind: MethodKind.Unary,
  I: UpdateUserRequest,
  O: UpdateUserResponse,
  service: {
    typeName: "teleport.users.v1.UsersService"
  }
} as const;

/**
 * UpsertUser creates a new user or forcefully updates an existing user.
 *
 * @generated from rpc teleport.users.v1.UsersService.UpsertUser
 */
export const upsertUser = {
  localName: "upsertUser",
  name: "UpsertUser",
  kind: MethodKind.Unary,
  I: UpsertUserRequest,
  O: UpsertUserResponse,
  service: {
    typeName: "teleport.users.v1.UsersService"
  }
} as const;

/**
 * DeleteUser removes an existing user by name.
 *
 * @generated from rpc teleport.users.v1.UsersService.DeleteUser
 */
export const deleteUser = {
  localName: "deleteUser",
  name: "DeleteUser",
  kind: MethodKind.Unary,
  I: DeleteUserRequest,
  O: Empty,
  service: {
    typeName: "teleport.users.v1.UsersService"
  }
} as const;
