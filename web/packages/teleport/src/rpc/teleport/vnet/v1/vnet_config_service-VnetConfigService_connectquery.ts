// Copyright 2024 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts"
// @generated from file teleport/vnet/v1/vnet_config_service.proto (package teleport.vnet.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { CreateVnetConfigRequest, DeleteVnetConfigRequest, GetVnetConfigRequest, UpdateVnetConfigRequest, UpsertVnetConfigRequest } from "./vnet_config_service_pb.js";
import { VnetConfig } from "./vnet_config_pb.js";

/**
 * GetVnetConfig returns the specified VnetConfig.
 *
 * @generated from rpc teleport.vnet.v1.VnetConfigService.GetVnetConfig
 */
export const getVnetConfig = {
  localName: "getVnetConfig",
  name: "GetVnetConfig",
  kind: MethodKind.Unary,
  I: GetVnetConfigRequest,
  O: VnetConfig,
  service: {
    typeName: "teleport.vnet.v1.VnetConfigService"
  }
} as const;

/**
 * CreateVnetConfig creates a new VnetConfig.
 *
 * @generated from rpc teleport.vnet.v1.VnetConfigService.CreateVnetConfig
 */
export const createVnetConfig = {
  localName: "createVnetConfig",
  name: "CreateVnetConfig",
  kind: MethodKind.Unary,
  I: CreateVnetConfigRequest,
  O: VnetConfig,
  service: {
    typeName: "teleport.vnet.v1.VnetConfigService"
  }
} as const;

/**
 * UpdateVnetConfig updates an existing VnetConfig.
 *
 * @generated from rpc teleport.vnet.v1.VnetConfigService.UpdateVnetConfig
 */
export const updateVnetConfig = {
  localName: "updateVnetConfig",
  name: "UpdateVnetConfig",
  kind: MethodKind.Unary,
  I: UpdateVnetConfigRequest,
  O: VnetConfig,
  service: {
    typeName: "teleport.vnet.v1.VnetConfigService"
  }
} as const;

/**
 * UpsertVnetConfig creates a new VnetConfig or replaces an existing VnetConfig.
 *
 * @generated from rpc teleport.vnet.v1.VnetConfigService.UpsertVnetConfig
 */
export const upsertVnetConfig = {
  localName: "upsertVnetConfig",
  name: "UpsertVnetConfig",
  kind: MethodKind.Unary,
  I: UpsertVnetConfigRequest,
  O: VnetConfig,
  service: {
    typeName: "teleport.vnet.v1.VnetConfigService"
  }
} as const;

/**
 * DeleteVnetConfig hard deletes the specified VnetConfig.
 *
 * @generated from rpc teleport.vnet.v1.VnetConfigService.DeleteVnetConfig
 */
export const deleteVnetConfig = {
  localName: "deleteVnetConfig",
  name: "DeleteVnetConfig",
  kind: MethodKind.Unary,
  I: DeleteVnetConfigRequest,
  O: Empty,
  service: {
    typeName: "teleport.vnet.v1.VnetConfigService"
  }
} as const;
