// Copyright 2024 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/vnet/v1/vnet_config_service.proto (package teleport.vnet.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { VnetConfig } from "./vnet_config_pb.js";

/**
 * Request for GetVnetConfig.
 *
 * @generated from message teleport.vnet.v1.GetVnetConfigRequest
 */
export class GetVnetConfigRequest extends Message<GetVnetConfigRequest> {
  constructor(data?: PartialMessage<GetVnetConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.vnet.v1.GetVnetConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVnetConfigRequest {
    return new GetVnetConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVnetConfigRequest {
    return new GetVnetConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVnetConfigRequest {
    return new GetVnetConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVnetConfigRequest | PlainMessage<GetVnetConfigRequest> | undefined, b: GetVnetConfigRequest | PlainMessage<GetVnetConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetVnetConfigRequest, a, b);
  }
}

/**
 * Request for CreateVnetConfig.
 *
 * @generated from message teleport.vnet.v1.CreateVnetConfigRequest
 */
export class CreateVnetConfigRequest extends Message<CreateVnetConfigRequest> {
  /**
   * The VnetConfig resource to create.
   *
   * @generated from field: teleport.vnet.v1.VnetConfig vnet_config = 1;
   */
  vnetConfig?: VnetConfig;

  constructor(data?: PartialMessage<CreateVnetConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.vnet.v1.CreateVnetConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vnet_config", kind: "message", T: VnetConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateVnetConfigRequest {
    return new CreateVnetConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateVnetConfigRequest {
    return new CreateVnetConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateVnetConfigRequest {
    return new CreateVnetConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateVnetConfigRequest | PlainMessage<CreateVnetConfigRequest> | undefined, b: CreateVnetConfigRequest | PlainMessage<CreateVnetConfigRequest> | undefined): boolean {
    return proto3.util.equals(CreateVnetConfigRequest, a, b);
  }
}

/**
 * Request for UpdateVnetConfig.
 *
 * @generated from message teleport.vnet.v1.UpdateVnetConfigRequest
 */
export class UpdateVnetConfigRequest extends Message<UpdateVnetConfigRequest> {
  /**
   * The VnetConfig resource to create.
   *
   * @generated from field: teleport.vnet.v1.VnetConfig vnet_config = 1;
   */
  vnetConfig?: VnetConfig;

  constructor(data?: PartialMessage<UpdateVnetConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.vnet.v1.UpdateVnetConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vnet_config", kind: "message", T: VnetConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateVnetConfigRequest {
    return new UpdateVnetConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateVnetConfigRequest {
    return new UpdateVnetConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateVnetConfigRequest {
    return new UpdateVnetConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateVnetConfigRequest | PlainMessage<UpdateVnetConfigRequest> | undefined, b: UpdateVnetConfigRequest | PlainMessage<UpdateVnetConfigRequest> | undefined): boolean {
    return proto3.util.equals(UpdateVnetConfigRequest, a, b);
  }
}

/**
 * Request for UpsertVnetConfig.
 *
 * @generated from message teleport.vnet.v1.UpsertVnetConfigRequest
 */
export class UpsertVnetConfigRequest extends Message<UpsertVnetConfigRequest> {
  /**
   * The VnetConfig resource to create.
   *
   * @generated from field: teleport.vnet.v1.VnetConfig vnet_config = 1;
   */
  vnetConfig?: VnetConfig;

  constructor(data?: PartialMessage<UpsertVnetConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.vnet.v1.UpsertVnetConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vnet_config", kind: "message", T: VnetConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertVnetConfigRequest {
    return new UpsertVnetConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertVnetConfigRequest {
    return new UpsertVnetConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertVnetConfigRequest {
    return new UpsertVnetConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertVnetConfigRequest | PlainMessage<UpsertVnetConfigRequest> | undefined, b: UpsertVnetConfigRequest | PlainMessage<UpsertVnetConfigRequest> | undefined): boolean {
    return proto3.util.equals(UpsertVnetConfigRequest, a, b);
  }
}

/**
 * Request for DeleteVnetConfig.
 *
 * @generated from message teleport.vnet.v1.DeleteVnetConfigRequest
 */
export class DeleteVnetConfigRequest extends Message<DeleteVnetConfigRequest> {
  constructor(data?: PartialMessage<DeleteVnetConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.vnet.v1.DeleteVnetConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteVnetConfigRequest {
    return new DeleteVnetConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteVnetConfigRequest {
    return new DeleteVnetConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteVnetConfigRequest {
    return new DeleteVnetConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteVnetConfigRequest | PlainMessage<DeleteVnetConfigRequest> | undefined, b: DeleteVnetConfigRequest | PlainMessage<DeleteVnetConfigRequest> | undefined): boolean {
    return proto3.util.equals(DeleteVnetConfigRequest, a, b);
  }
}

