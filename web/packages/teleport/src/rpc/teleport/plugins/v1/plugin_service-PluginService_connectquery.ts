// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts"
// @generated from file teleport/plugins/v1/plugin_service.proto (package teleport.plugins.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { CleanupRequest, CreatePluginRequest, DeletePluginRequest, GetAvailablePluginTypesRequest, GetAvailablePluginTypesResponse, GetPluginRequest, ListPluginsRequest, ListPluginsResponse, NeedsCleanupRequest, NeedsCleanupResponse, SearchPluginStaticCredentialsRequest, SearchPluginStaticCredentialsResponse, SetPluginCredentialsRequest, SetPluginStatusRequest, UpdatePluginRequest } from "./plugin_service_pb.js";
import { PluginV1 } from "../../legacy/types/types_pb.js";

/**
 * CreatePlugin creates a new plugin instance.
 *
 * @generated from rpc teleport.plugins.v1.PluginService.CreatePlugin
 */
export const createPlugin = {
  localName: "createPlugin",
  name: "CreatePlugin",
  kind: MethodKind.Unary,
  I: CreatePluginRequest,
  O: Empty,
  service: {
    typeName: "teleport.plugins.v1.PluginService"
  }
} as const;

/**
 * GetPlugin returns a plugin instance by name.
 *
 * @generated from rpc teleport.plugins.v1.PluginService.GetPlugin
 */
export const getPlugin = {
  localName: "getPlugin",
  name: "GetPlugin",
  kind: MethodKind.Unary,
  I: GetPluginRequest,
  O: PluginV1,
  service: {
    typeName: "teleport.plugins.v1.PluginService"
  }
} as const;

/**
 * UpdatePlugin updates a plugin instance.
 *
 * @generated from rpc teleport.plugins.v1.PluginService.UpdatePlugin
 */
export const updatePlugin = {
  localName: "updatePlugin",
  name: "UpdatePlugin",
  kind: MethodKind.Unary,
  I: UpdatePluginRequest,
  O: PluginV1,
  service: {
    typeName: "teleport.plugins.v1.PluginService"
  }
} as const;

/**
 * DeletePlugin removes the specified plugin instance.
 *
 * @generated from rpc teleport.plugins.v1.PluginService.DeletePlugin
 */
export const deletePlugin = {
  localName: "deletePlugin",
  name: "DeletePlugin",
  kind: MethodKind.Unary,
  I: DeletePluginRequest,
  O: Empty,
  service: {
    typeName: "teleport.plugins.v1.PluginService"
  }
} as const;

/**
 * ListPlugins returns a paginated view of plugin instances.
 *
 * @generated from rpc teleport.plugins.v1.PluginService.ListPlugins
 */
export const listPlugins = {
  localName: "listPlugins",
  name: "ListPlugins",
  kind: MethodKind.Unary,
  I: ListPluginsRequest,
  O: ListPluginsResponse,
  service: {
    typeName: "teleport.plugins.v1.PluginService"
  }
} as const;

/**
 * SetPluginCredentials sets the credentials for the given plugin.
 *
 * @generated from rpc teleport.plugins.v1.PluginService.SetPluginCredentials
 */
export const setPluginCredentials = {
  localName: "setPluginCredentials",
  name: "SetPluginCredentials",
  kind: MethodKind.Unary,
  I: SetPluginCredentialsRequest,
  O: Empty,
  service: {
    typeName: "teleport.plugins.v1.PluginService"
  }
} as const;

/**
 * SetPluginCredentials sets the status for the given plugin.
 *
 * @generated from rpc teleport.plugins.v1.PluginService.SetPluginStatus
 */
export const setPluginStatus = {
  localName: "setPluginStatus",
  name: "SetPluginStatus",
  kind: MethodKind.Unary,
  I: SetPluginStatusRequest,
  O: Empty,
  service: {
    typeName: "teleport.plugins.v1.PluginService"
  }
} as const;

/**
 * GetAvailablePluginTypes returns the types of plugins
 * that the auth server supports onboarding.
 *
 * @generated from rpc teleport.plugins.v1.PluginService.GetAvailablePluginTypes
 */
export const getAvailablePluginTypes = {
  localName: "getAvailablePluginTypes",
  name: "GetAvailablePluginTypes",
  kind: MethodKind.Unary,
  I: GetAvailablePluginTypesRequest,
  O: GetAvailablePluginTypesResponse,
  service: {
    typeName: "teleport.plugins.v1.PluginService"
  }
} as const;

/**
 * SearchPluginStaticCredentials returns static credentials that are searched
 * for. Only accessible by RoleAdmin and, in the case of Teleport Assist,
 * RoleProxy.
 *
 * @generated from rpc teleport.plugins.v1.PluginService.SearchPluginStaticCredentials
 */
export const searchPluginStaticCredentials = {
  localName: "searchPluginStaticCredentials",
  name: "SearchPluginStaticCredentials",
  kind: MethodKind.Unary,
  I: SearchPluginStaticCredentialsRequest,
  O: SearchPluginStaticCredentialsResponse,
  service: {
    typeName: "teleport.plugins.v1.PluginService"
  }
} as const;

/**
 * NeedsCleanup will indicate whether a plugin of the given type needs cleanup
 * before it can be created.
 *
 * @generated from rpc teleport.plugins.v1.PluginService.NeedsCleanup
 */
export const needsCleanup = {
  localName: "needsCleanup",
  name: "NeedsCleanup",
  kind: MethodKind.Unary,
  I: NeedsCleanupRequest,
  O: NeedsCleanupResponse,
  service: {
    typeName: "teleport.plugins.v1.PluginService"
  }
} as const;

/**
 * Cleanup will clean up the resources for the given plugin type.
 *
 * @generated from rpc teleport.plugins.v1.PluginService.Cleanup
 */
export const cleanup = {
  localName: "cleanup",
  name: "Cleanup",
  kind: MethodKind.Unary,
  I: CleanupRequest,
  O: Empty,
  service: {
    typeName: "teleport.plugins.v1.PluginService"
  }
} as const;
