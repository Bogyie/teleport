// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file teleport/plugins/v1/plugin_service.proto (package teleport.plugins.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CleanupRequest, CreatePluginRequest, DeletePluginRequest, GetAvailablePluginTypesRequest, GetAvailablePluginTypesResponse, GetPluginRequest, ListPluginsRequest, ListPluginsResponse, NeedsCleanupRequest, NeedsCleanupResponse, SearchPluginStaticCredentialsRequest, SearchPluginStaticCredentialsResponse, SetPluginCredentialsRequest, SetPluginStatusRequest, UpdatePluginRequest } from "./plugin_service_pb.js";
import { Empty, MethodKind } from "@bufbuild/protobuf";
import { PluginV1 } from "../../legacy/types/types_pb.js";

/**
 * PluginService provides CRUD operations for Plugin resources.
 *
 * @generated from service teleport.plugins.v1.PluginService
 */
export const PluginService = {
  typeName: "teleport.plugins.v1.PluginService",
  methods: {
    /**
     * CreatePlugin creates a new plugin instance.
     *
     * @generated from rpc teleport.plugins.v1.PluginService.CreatePlugin
     */
    createPlugin: {
      name: "CreatePlugin",
      I: CreatePluginRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetPlugin returns a plugin instance by name.
     *
     * @generated from rpc teleport.plugins.v1.PluginService.GetPlugin
     */
    getPlugin: {
      name: "GetPlugin",
      I: GetPluginRequest,
      O: PluginV1,
      kind: MethodKind.Unary,
    },
    /**
     * UpdatePlugin updates a plugin instance.
     *
     * @generated from rpc teleport.plugins.v1.PluginService.UpdatePlugin
     */
    updatePlugin: {
      name: "UpdatePlugin",
      I: UpdatePluginRequest,
      O: PluginV1,
      kind: MethodKind.Unary,
    },
    /**
     * DeletePlugin removes the specified plugin instance.
     *
     * @generated from rpc teleport.plugins.v1.PluginService.DeletePlugin
     */
    deletePlugin: {
      name: "DeletePlugin",
      I: DeletePluginRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * ListPlugins returns a paginated view of plugin instances.
     *
     * @generated from rpc teleport.plugins.v1.PluginService.ListPlugins
     */
    listPlugins: {
      name: "ListPlugins",
      I: ListPluginsRequest,
      O: ListPluginsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SetPluginCredentials sets the credentials for the given plugin.
     *
     * @generated from rpc teleport.plugins.v1.PluginService.SetPluginCredentials
     */
    setPluginCredentials: {
      name: "SetPluginCredentials",
      I: SetPluginCredentialsRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * SetPluginCredentials sets the status for the given plugin.
     *
     * @generated from rpc teleport.plugins.v1.PluginService.SetPluginStatus
     */
    setPluginStatus: {
      name: "SetPluginStatus",
      I: SetPluginStatusRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetAvailablePluginTypes returns the types of plugins
     * that the auth server supports onboarding.
     *
     * @generated from rpc teleport.plugins.v1.PluginService.GetAvailablePluginTypes
     */
    getAvailablePluginTypes: {
      name: "GetAvailablePluginTypes",
      I: GetAvailablePluginTypesRequest,
      O: GetAvailablePluginTypesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SearchPluginStaticCredentials returns static credentials that are searched
     * for. Only accessible by RoleAdmin and, in the case of Teleport Assist,
     * RoleProxy.
     *
     * @generated from rpc teleport.plugins.v1.PluginService.SearchPluginStaticCredentials
     */
    searchPluginStaticCredentials: {
      name: "SearchPluginStaticCredentials",
      I: SearchPluginStaticCredentialsRequest,
      O: SearchPluginStaticCredentialsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * NeedsCleanup will indicate whether a plugin of the given type needs cleanup
     * before it can be created.
     *
     * @generated from rpc teleport.plugins.v1.PluginService.NeedsCleanup
     */
    needsCleanup: {
      name: "NeedsCleanup",
      I: NeedsCleanupRequest,
      O: NeedsCleanupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Cleanup will clean up the resources for the given plugin type.
     *
     * @generated from rpc teleport.plugins.v1.PluginService.Cleanup
     */
    cleanup: {
      name: "Cleanup",
      I: CleanupRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
  }
} as const;

