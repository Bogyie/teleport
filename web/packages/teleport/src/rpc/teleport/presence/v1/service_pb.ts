// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file teleport/presence/v1/service.proto (package teleport.presence.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";
import { RemoteClusterV3 } from "../../legacy/types/types_pb.js";

/**
 * Request for GetRemoteCluster
 *
 * @generated from message teleport.presence.v1.GetRemoteClusterRequest
 */
export class GetRemoteClusterRequest extends Message<GetRemoteClusterRequest> {
  /**
   * Name is the name of the RemoteCluster to retrieve.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetRemoteClusterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.presence.v1.GetRemoteClusterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRemoteClusterRequest {
    return new GetRemoteClusterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRemoteClusterRequest {
    return new GetRemoteClusterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRemoteClusterRequest {
    return new GetRemoteClusterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRemoteClusterRequest | PlainMessage<GetRemoteClusterRequest> | undefined, b: GetRemoteClusterRequest | PlainMessage<GetRemoteClusterRequest> | undefined): boolean {
    return proto3.util.equals(GetRemoteClusterRequest, a, b);
  }
}

/**
 * Request for ListRemoteClusters
 *
 * @generated from message teleport.presence.v1.ListRemoteClustersRequest
 */
export class ListRemoteClustersRequest extends Message<ListRemoteClustersRequest> {
  /**
   * The maximum number of items to return.
   * The server may impose a different page size at its discretion.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * The page_token is the next_page_token value returned from a previous List
   * request, if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListRemoteClustersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.presence.v1.ListRemoteClustersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRemoteClustersRequest {
    return new ListRemoteClustersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRemoteClustersRequest {
    return new ListRemoteClustersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRemoteClustersRequest {
    return new ListRemoteClustersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRemoteClustersRequest | PlainMessage<ListRemoteClustersRequest> | undefined, b: ListRemoteClustersRequest | PlainMessage<ListRemoteClustersRequest> | undefined): boolean {
    return proto3.util.equals(ListRemoteClustersRequest, a, b);
  }
}

/**
 * Response for ListRemoteClusters
 *
 * @generated from message teleport.presence.v1.ListRemoteClustersResponse
 */
export class ListRemoteClustersResponse extends Message<ListRemoteClustersResponse> {
  /**
   * RemoteClusters is the list of RemoteClusters that were retrieved.
   *
   * @generated from field: repeated types.RemoteClusterV3 remote_clusters = 1;
   */
  remoteClusters: RemoteClusterV3[] = [];

  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListRemoteClustersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.presence.v1.ListRemoteClustersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "remote_clusters", kind: "message", T: RemoteClusterV3, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRemoteClustersResponse {
    return new ListRemoteClustersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRemoteClustersResponse {
    return new ListRemoteClustersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRemoteClustersResponse {
    return new ListRemoteClustersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListRemoteClustersResponse | PlainMessage<ListRemoteClustersResponse> | undefined, b: ListRemoteClustersResponse | PlainMessage<ListRemoteClustersResponse> | undefined): boolean {
    return proto3.util.equals(ListRemoteClustersResponse, a, b);
  }
}

/**
 * Request for UpdateRemoteCluster
 *
 * @generated from message teleport.presence.v1.UpdateRemoteClusterRequest
 */
export class UpdateRemoteClusterRequest extends Message<UpdateRemoteClusterRequest> {
  /**
   * RemoteCluster is the RemoteCluster to update.
   *
   * @generated from field: types.RemoteClusterV3 remote_cluster = 1;
   */
  remoteCluster?: RemoteClusterV3;

  /**
   * The update mask applied to the RemoteCluster.
   * Fields are masked according to their proto name.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateRemoteClusterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.presence.v1.UpdateRemoteClusterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "remote_cluster", kind: "message", T: RemoteClusterV3 },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRemoteClusterRequest {
    return new UpdateRemoteClusterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRemoteClusterRequest {
    return new UpdateRemoteClusterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRemoteClusterRequest {
    return new UpdateRemoteClusterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRemoteClusterRequest | PlainMessage<UpdateRemoteClusterRequest> | undefined, b: UpdateRemoteClusterRequest | PlainMessage<UpdateRemoteClusterRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRemoteClusterRequest, a, b);
  }
}

/**
 * Request for DeleteRemoteCluster
 *
 * @generated from message teleport.presence.v1.DeleteRemoteClusterRequest
 */
export class DeleteRemoteClusterRequest extends Message<DeleteRemoteClusterRequest> {
  /**
   * Name is the name of the RemoteCluster to delete.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteRemoteClusterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.presence.v1.DeleteRemoteClusterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRemoteClusterRequest {
    return new DeleteRemoteClusterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRemoteClusterRequest {
    return new DeleteRemoteClusterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRemoteClusterRequest {
    return new DeleteRemoteClusterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRemoteClusterRequest | PlainMessage<DeleteRemoteClusterRequest> | undefined, b: DeleteRemoteClusterRequest | PlainMessage<DeleteRemoteClusterRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRemoteClusterRequest, a, b);
  }
}

