// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file teleport/presence/v1/service.proto (package teleport.presence.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { DeleteRemoteClusterRequest, GetRemoteClusterRequest, ListRemoteClustersRequest, ListRemoteClustersResponse, UpdateRemoteClusterRequest } from "./service_pb.js";
import { RemoteClusterV3 } from "../../legacy/types/types_pb.js";
import { Empty, MethodKind } from "@bufbuild/protobuf";

/**
 * PresenceService provides methods to manage presence of RemoteClusters
 *
 * @generated from service teleport.presence.v1.PresenceService
 */
export const PresenceService = {
  typeName: "teleport.presence.v1.PresenceService",
  methods: {
    /**
     * GetRemoteCluster retrieves a RemoteCluster by name.
     *
     * @generated from rpc teleport.presence.v1.PresenceService.GetRemoteCluster
     */
    getRemoteCluster: {
      name: "GetRemoteCluster",
      I: GetRemoteClusterRequest,
      O: RemoteClusterV3,
      kind: MethodKind.Unary,
    },
    /**
     * ListRemoteClusters retrieves a page of RemoteClusters.
     *
     * @generated from rpc teleport.presence.v1.PresenceService.ListRemoteClusters
     */
    listRemoteClusters: {
      name: "ListRemoteClusters",
      I: ListRemoteClustersRequest,
      O: ListRemoteClustersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateRemoteCluster updates an existing RemoteCluster.
     *
     * @generated from rpc teleport.presence.v1.PresenceService.UpdateRemoteCluster
     */
    updateRemoteCluster: {
      name: "UpdateRemoteCluster",
      I: UpdateRemoteClusterRequest,
      O: RemoteClusterV3,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteRemoteCluster removes an existing RemoteCluster by name.
     *
     * @generated from rpc teleport.presence.v1.PresenceService.DeleteRemoteCluster
     */
    deleteRemoteCluster: {
      name: "DeleteRemoteCluster",
      I: DeleteRemoteClusterRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
  }
} as const;

