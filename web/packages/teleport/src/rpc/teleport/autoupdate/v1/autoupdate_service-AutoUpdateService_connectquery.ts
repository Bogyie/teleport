// Copyright 2024 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts"
// @generated from file teleport/autoupdate/v1/autoupdate_service.proto (package teleport.autoupdate.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { CreateAutoUpdateConfigRequest, CreateAutoUpdateVersionRequest, DeleteAutoUpdateConfigRequest, DeleteAutoUpdateVersionRequest, GetAutoUpdateConfigRequest, GetAutoUpdateVersionRequest, UpdateAutoUpdateConfigRequest, UpdateAutoUpdateVersionRequest, UpsertAutoUpdateConfigRequest, UpsertAutoUpdateVersionRequest } from "./autoupdate_service_pb.js";
import { AutoUpdateConfig, AutoUpdateVersion } from "./autoupdate_pb.js";

/**
 * GetAutoUpdateConfig gets the current autoupdate config singleton.
 *
 * @generated from rpc teleport.autoupdate.v1.AutoUpdateService.GetAutoUpdateConfig
 */
export const getAutoUpdateConfig = {
  localName: "getAutoUpdateConfig",
  name: "GetAutoUpdateConfig",
  kind: MethodKind.Unary,
  I: GetAutoUpdateConfigRequest,
  O: AutoUpdateConfig,
  service: {
    typeName: "teleport.autoupdate.v1.AutoUpdateService"
  }
} as const;

/**
 * CreateAutoUpdateConfig creates a new AutoUpdateConfig.
 *
 * @generated from rpc teleport.autoupdate.v1.AutoUpdateService.CreateAutoUpdateConfig
 */
export const createAutoUpdateConfig = {
  localName: "createAutoUpdateConfig",
  name: "CreateAutoUpdateConfig",
  kind: MethodKind.Unary,
  I: CreateAutoUpdateConfigRequest,
  O: AutoUpdateConfig,
  service: {
    typeName: "teleport.autoupdate.v1.AutoUpdateService"
  }
} as const;

/**
 * CreateAutoUpdateConfig updates AutoUpdateConfig singleton.
 *
 * @generated from rpc teleport.autoupdate.v1.AutoUpdateService.UpdateAutoUpdateConfig
 */
export const updateAutoUpdateConfig = {
  localName: "updateAutoUpdateConfig",
  name: "UpdateAutoUpdateConfig",
  kind: MethodKind.Unary,
  I: UpdateAutoUpdateConfigRequest,
  O: AutoUpdateConfig,
  service: {
    typeName: "teleport.autoupdate.v1.AutoUpdateService"
  }
} as const;

/**
 * UpsertAutoUpdateConfig creates a new AutoUpdateConfig or replaces an existing AutoUpdateConfig.
 *
 * @generated from rpc teleport.autoupdate.v1.AutoUpdateService.UpsertAutoUpdateConfig
 */
export const upsertAutoUpdateConfig = {
  localName: "upsertAutoUpdateConfig",
  name: "UpsertAutoUpdateConfig",
  kind: MethodKind.Unary,
  I: UpsertAutoUpdateConfigRequest,
  O: AutoUpdateConfig,
  service: {
    typeName: "teleport.autoupdate.v1.AutoUpdateService"
  }
} as const;

/**
 * DeleteAutoUpdateConfig hard deletes the specified AutoUpdateConfig.
 *
 * @generated from rpc teleport.autoupdate.v1.AutoUpdateService.DeleteAutoUpdateConfig
 */
export const deleteAutoUpdateConfig = {
  localName: "deleteAutoUpdateConfig",
  name: "DeleteAutoUpdateConfig",
  kind: MethodKind.Unary,
  I: DeleteAutoUpdateConfigRequest,
  O: Empty,
  service: {
    typeName: "teleport.autoupdate.v1.AutoUpdateService"
  }
} as const;

/**
 * GetAutoUpdateVersion gets the current autoupdate version singleton.
 *
 * @generated from rpc teleport.autoupdate.v1.AutoUpdateService.GetAutoUpdateVersion
 */
export const getAutoUpdateVersion = {
  localName: "getAutoUpdateVersion",
  name: "GetAutoUpdateVersion",
  kind: MethodKind.Unary,
  I: GetAutoUpdateVersionRequest,
  O: AutoUpdateVersion,
  service: {
    typeName: "teleport.autoupdate.v1.AutoUpdateService"
  }
} as const;

/**
 * CreateAutoUpdateVersion creates a new AutoUpdateVersion.
 *
 * @generated from rpc teleport.autoupdate.v1.AutoUpdateService.CreateAutoUpdateVersion
 */
export const createAutoUpdateVersion = {
  localName: "createAutoUpdateVersion",
  name: "CreateAutoUpdateVersion",
  kind: MethodKind.Unary,
  I: CreateAutoUpdateVersionRequest,
  O: AutoUpdateVersion,
  service: {
    typeName: "teleport.autoupdate.v1.AutoUpdateService"
  }
} as const;

/**
 * UpdateAutoUpdateVersion updates AutoUpdateVersion singleton.
 *
 * @generated from rpc teleport.autoupdate.v1.AutoUpdateService.UpdateAutoUpdateVersion
 */
export const updateAutoUpdateVersion = {
  localName: "updateAutoUpdateVersion",
  name: "UpdateAutoUpdateVersion",
  kind: MethodKind.Unary,
  I: UpdateAutoUpdateVersionRequest,
  O: AutoUpdateVersion,
  service: {
    typeName: "teleport.autoupdate.v1.AutoUpdateService"
  }
} as const;

/**
 * UpsertAutoUpdateVersion creates a new AutoUpdateVersion or replaces an existing AutoUpdateVersion.
 *
 * @generated from rpc teleport.autoupdate.v1.AutoUpdateService.UpsertAutoUpdateVersion
 */
export const upsertAutoUpdateVersion = {
  localName: "upsertAutoUpdateVersion",
  name: "UpsertAutoUpdateVersion",
  kind: MethodKind.Unary,
  I: UpsertAutoUpdateVersionRequest,
  O: AutoUpdateVersion,
  service: {
    typeName: "teleport.autoupdate.v1.AutoUpdateService"
  }
} as const;

/**
 * DeleteAutoUpdateVersion hard deletes the specified AutoUpdateVersionRequest.
 *
 * @generated from rpc teleport.autoupdate.v1.AutoUpdateService.DeleteAutoUpdateVersion
 */
export const deleteAutoUpdateVersion = {
  localName: "deleteAutoUpdateVersion",
  name: "DeleteAutoUpdateVersion",
  kind: MethodKind.Unary,
  I: DeleteAutoUpdateVersionRequest,
  O: Empty,
  service: {
    typeName: "teleport.autoupdate.v1.AutoUpdateService"
  }
} as const;
