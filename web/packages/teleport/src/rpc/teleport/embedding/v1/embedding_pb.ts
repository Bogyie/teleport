// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/embedding/v1/embedding.proto (package teleport.embedding.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/embedding/v1/embedding.proto.
 */
export const file_teleport_embedding_v1_embedding: GenFile = /*@__PURE__*/
  fileDesc("CiV0ZWxlcG9ydC9lbWJlZGRpbmcvdjEvZW1iZWRkaW5nLnByb3RvEhV0ZWxlcG9ydC5lbWJlZGRpbmcudjEiXgoJRW1iZWRkaW5nEhUKDWVtYmVkZGVkX2tpbmQYASABKAkSEwoLZW1iZWRkZWRfaWQYAiABKAkSFQoNZW1iZWRkZWRfaGFzaBgDIAEoDBIOCgZ2ZWN0b3IYBCADKAFCVlpUZ2l0aHViLmNvbS9ncmF2aXRhdGlvbmFsL3RlbGVwb3J0L2FwaS9nZW4vcHJvdG8vZ28vdGVsZXBvcnQvZW1iZWRkaW5nL3YxO2VtYmVkZGluZ3YxYgZwcm90bzM");

/**
 * Embedding contains a Teleport resource embedding. Embeddings are small semantic
 * representations of larger and more complex data. Embeddings can be compared,
 * the smaller the distance between two vectors, the closer the concepts are.
 * Teleport Assist embeds resources to perform semantic search.
 *
 * @generated from message teleport.embedding.v1.Embedding
 */
export type Embedding = Message<"teleport.embedding.v1.Embedding"> & {
  /**
   * EmbeddedKind is the kind of the embedded resource.
   *
   * @generated from field: string embedded_kind = 1;
   */
  embeddedKind: string;

  /**
   * EmbeddedId is the ID of the embedded resource.
   *
   * @generated from field: string embedded_id = 2;
   */
  embeddedId: string;

  /**
   * EmbeddedHash is the hash of the embedded resource after serialization.
   * This helps checking if the resource has changed and needs a new embedding.
   *
   * @generated from field: bytes embedded_hash = 3;
   */
  embeddedHash: Uint8Array;

  /**
   * Vector is the embedding itself, as provided by the model.
   *
   * @generated from field: repeated double vector = 4;
   */
  vector: number[];
};

/**
 * Describes the message teleport.embedding.v1.Embedding.
 * Use `create(EmbeddingSchema)` to create a new message.
 */
export const EmbeddingSchema: GenMessage<Embedding> = /*@__PURE__*/
  messageDesc(file_teleport_embedding_v1_embedding, 0);

