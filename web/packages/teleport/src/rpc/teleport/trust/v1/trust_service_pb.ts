// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/trust/v1/trust_service.proto (package teleport.trust.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Duration, EmptySchema, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { CertAuthorityV2, CertAuthorityV2Schema } from "../../legacy/types/types_pb";
import { file_teleport_legacy_types_types } from "../../legacy/types/types_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/trust/v1/trust_service.proto.
 */
export const file_teleport_trust_v1_trust_service: GenFile = /*@__PURE__*/
  fileDesc("CiV0ZWxlcG9ydC90cnVzdC92MS90cnVzdF9zZXJ2aWNlLnByb3RvEhF0ZWxlcG9ydC50cnVzdC52MSJMChdHZXRDZXJ0QXV0aG9yaXR5UmVxdWVzdBIMCgR0eXBlGAEgASgJEg4KBmRvbWFpbhgCIAEoCRITCgtpbmNsdWRlX2tleRgDIAEoCCI+ChlHZXRDZXJ0QXV0aG9yaXRpZXNSZXF1ZXN0EgwKBHR5cGUYASABKAkSEwoLaW5jbHVkZV9rZXkYAiABKAgiUQoaR2V0Q2VydEF1dGhvcml0aWVzUmVzcG9uc2USMwoTY2VydF9hdXRob3JpdGllc192MhgBIAMoCzIWLnR5cGVzLkNlcnRBdXRob3JpdHlWMiI6ChpEZWxldGVDZXJ0QXV0aG9yaXR5UmVxdWVzdBIMCgR0eXBlGAEgASgJEg4KBmRvbWFpbhgCIAEoCSJMChpVcHNlcnRDZXJ0QXV0aG9yaXR5UmVxdWVzdBIuCg5jZXJ0X2F1dGhvcml0eRgBIAEoCzIWLnR5cGVzLkNlcnRBdXRob3JpdHlWMiK2AQoaUm90YXRlQ2VydEF1dGhvcml0eVJlcXVlc3QSDAoEdHlwZRgBIAEoCRIvCgxncmFjZV9wZXJpb2QYAiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SFAoMdGFyZ2V0X3BoYXNlGAMgASgJEgwKBG1vZGUYBCABKAkSNQoIc2NoZWR1bGUYBSABKAsyIy50ZWxlcG9ydC50cnVzdC52MS5Sb3RhdGlvblNjaGVkdWxlIqcBChBSb3RhdGlvblNjaGVkdWxlEjIKDnVwZGF0ZV9jbGllbnRzGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIyCg51cGRhdGVfc2VydmVycxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASKwoHc3RhbmRieRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiHQobUm90YXRlQ2VydEF1dGhvcml0eVJlc3BvbnNlIlQKIlJvdGF0ZUV4dGVybmFsQ2VydEF1dGhvcml0eVJlcXVlc3QSLgoOY2VydF9hdXRob3JpdHkYASABKAsyFi50eXBlcy5DZXJ0QXV0aG9yaXR5VjIiJQojUm90YXRlRXh0ZXJuYWxDZXJ0QXV0aG9yaXR5UmVzcG9uc2UiqgEKF0dlbmVyYXRlSG9zdENlcnRSZXF1ZXN0EgsKA2tleRgBIAEoDBIPCgdob3N0X2lkGAIgASgJEhEKCW5vZGVfbmFtZRgDIAEoCRISCgpwcmluY2lwYWxzGAQgAygJEhQKDGNsdXN0ZXJfbmFtZRgFIAEoCRIMCgRyb2xlGAYgASgJEiYKA3R0bBgHIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbiIzChhHZW5lcmF0ZUhvc3RDZXJ0UmVzcG9uc2USFwoPc3NoX2NlcnRpZmljYXRlGAEgASgMMocGCgxUcnVzdFNlcnZpY2USVgoQR2V0Q2VydEF1dGhvcml0eRIqLnRlbGVwb3J0LnRydXN0LnYxLkdldENlcnRBdXRob3JpdHlSZXF1ZXN0GhYudHlwZXMuQ2VydEF1dGhvcml0eVYyEnEKEkdldENlcnRBdXRob3JpdGllcxIsLnRlbGVwb3J0LnRydXN0LnYxLkdldENlcnRBdXRob3JpdGllc1JlcXVlc3QaLS50ZWxlcG9ydC50cnVzdC52MS5HZXRDZXJ0QXV0aG9yaXRpZXNSZXNwb25zZRJcChNEZWxldGVDZXJ0QXV0aG9yaXR5Ei0udGVsZXBvcnQudHJ1c3QudjEuRGVsZXRlQ2VydEF1dGhvcml0eVJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkSXAoTVXBzZXJ0Q2VydEF1dGhvcml0eRItLnRlbGVwb3J0LnRydXN0LnYxLlVwc2VydENlcnRBdXRob3JpdHlSZXF1ZXN0GhYudHlwZXMuQ2VydEF1dGhvcml0eVYyEnQKE1JvdGF0ZUNlcnRBdXRob3JpdHkSLS50ZWxlcG9ydC50cnVzdC52MS5Sb3RhdGVDZXJ0QXV0aG9yaXR5UmVxdWVzdBouLnRlbGVwb3J0LnRydXN0LnYxLlJvdGF0ZUNlcnRBdXRob3JpdHlSZXNwb25zZRKMAQobUm90YXRlRXh0ZXJuYWxDZXJ0QXV0aG9yaXR5EjUudGVsZXBvcnQudHJ1c3QudjEuUm90YXRlRXh0ZXJuYWxDZXJ0QXV0aG9yaXR5UmVxdWVzdBo2LnRlbGVwb3J0LnRydXN0LnYxLlJvdGF0ZUV4dGVybmFsQ2VydEF1dGhvcml0eVJlc3BvbnNlEmsKEEdlbmVyYXRlSG9zdENlcnQSKi50ZWxlcG9ydC50cnVzdC52MS5HZW5lcmF0ZUhvc3RDZXJ0UmVxdWVzdBorLnRlbGVwb3J0LnRydXN0LnYxLkdlbmVyYXRlSG9zdENlcnRSZXNwb25zZUJOWkxnaXRodWIuY29tL2dyYXZpdGF0aW9uYWwvdGVsZXBvcnQvYXBpL2dlbi9wcm90by9nby90ZWxlcG9ydC90cnVzdC92MTt0cnVzdHYxYgZwcm90bzM", [file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_timestamp, file_teleport_legacy_types_types]);

/**
 * Request for GetCertAuthority
 *
 * @generated from message teleport.trust.v1.GetCertAuthorityRequest
 */
export type GetCertAuthorityRequest = Message<"teleport.trust.v1.GetCertAuthorityRequest"> & {
  /**
   * Type of certificate authority.
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * The domain for the certificate authority.
   *
   * @generated from field: string domain = 2;
   */
  domain: string;

  /**
   * Whether the private key should be included in the response.
   *
   * @generated from field: bool include_key = 3;
   */
  includeKey: boolean;
};

/**
 * Describes the message teleport.trust.v1.GetCertAuthorityRequest.
 * Use `create(GetCertAuthorityRequestSchema)` to create a new message.
 */
export const GetCertAuthorityRequestSchema: GenMessage<GetCertAuthorityRequest> = /*@__PURE__*/
  messageDesc(file_teleport_trust_v1_trust_service, 0);

/**
 * Request for GetCertAuthorities
 *
 * @generated from message teleport.trust.v1.GetCertAuthoritiesRequest
 */
export type GetCertAuthoritiesRequest = Message<"teleport.trust.v1.GetCertAuthoritiesRequest"> & {
  /**
   * Type of certificate authority.
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * Whether the private key should be included in the response.
   *
   * @generated from field: bool include_key = 2;
   */
  includeKey: boolean;
};

/**
 * Describes the message teleport.trust.v1.GetCertAuthoritiesRequest.
 * Use `create(GetCertAuthoritiesRequestSchema)` to create a new message.
 */
export const GetCertAuthoritiesRequestSchema: GenMessage<GetCertAuthoritiesRequest> = /*@__PURE__*/
  messageDesc(file_teleport_trust_v1_trust_service, 1);

/**
 * Response for GetCertAuthorities
 *
 * @generated from message teleport.trust.v1.GetCertAuthoritiesResponse
 */
export type GetCertAuthoritiesResponse = Message<"teleport.trust.v1.GetCertAuthoritiesResponse"> & {
  /**
   * The matching certificate authorities.
   *
   * @generated from field: repeated types.CertAuthorityV2 cert_authorities_v2 = 1;
   */
  certAuthoritiesV2: CertAuthorityV2[];
};

/**
 * Describes the message teleport.trust.v1.GetCertAuthoritiesResponse.
 * Use `create(GetCertAuthoritiesResponseSchema)` to create a new message.
 */
export const GetCertAuthoritiesResponseSchema: GenMessage<GetCertAuthoritiesResponse> = /*@__PURE__*/
  messageDesc(file_teleport_trust_v1_trust_service, 2);

/**
 * Request for DeleteCertAuthority
 *
 * @generated from message teleport.trust.v1.DeleteCertAuthorityRequest
 */
export type DeleteCertAuthorityRequest = Message<"teleport.trust.v1.DeleteCertAuthorityRequest"> & {
  /**
   * Type of certificate authority.
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * The domain for the certificate authority.
   *
   * @generated from field: string domain = 2;
   */
  domain: string;
};

/**
 * Describes the message teleport.trust.v1.DeleteCertAuthorityRequest.
 * Use `create(DeleteCertAuthorityRequestSchema)` to create a new message.
 */
export const DeleteCertAuthorityRequestSchema: GenMessage<DeleteCertAuthorityRequest> = /*@__PURE__*/
  messageDesc(file_teleport_trust_v1_trust_service, 3);

/**
 * Request for UpsertCertAuthority
 *
 * @generated from message teleport.trust.v1.UpsertCertAuthorityRequest
 */
export type UpsertCertAuthorityRequest = Message<"teleport.trust.v1.UpsertCertAuthorityRequest"> & {
  /**
   * The certificate authority to create or update.
   *
   * @generated from field: types.CertAuthorityV2 cert_authority = 1;
   */
  certAuthority?: CertAuthorityV2;
};

/**
 * Describes the message teleport.trust.v1.UpsertCertAuthorityRequest.
 * Use `create(UpsertCertAuthorityRequestSchema)` to create a new message.
 */
export const UpsertCertAuthorityRequestSchema: GenMessage<UpsertCertAuthorityRequest> = /*@__PURE__*/
  messageDesc(file_teleport_trust_v1_trust_service, 4);

/**
 * Request for RotateCertAuthority.
 *
 * @generated from message teleport.trust.v1.RotateCertAuthorityRequest
 */
export type RotateCertAuthorityRequest = Message<"teleport.trust.v1.RotateCertAuthorityRequest"> & {
  /**
   * Type is a certificate authority type, if omitted, both user and host CA
   * will be rotated.
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * GracePeriod is used to generate cert rotation schedule that defines
   * times at which different rotation phases will be applied by the auth server
   * in auto mode. It is not used in manual rotation mode.
   * If omitted, default value is set, if 0 is supplied, it is interpreted as
   * forcing rotation of all certificate authorities with no grace period,
   * all existing users and hosts will have to re-login and re-added
   * into the cluster.
   *
   * @generated from field: google.protobuf.Duration grace_period = 2;
   */
  gracePeriod?: Duration;

  /**
   * TargetPhase sets desired rotation phase to move to, if not set
   * will be set automatically, it is a required argument
   * for manual rotation.
   *
   * @generated from field: string target_phase = 3;
   */
  targetPhase: string;

  /**
   * Mode sets manual or auto rotation mode.
   *
   * @generated from field: string mode = 4;
   */
  mode: string;

  /**
   * Schedule is an optional rotation schedule,
   * autogenerated based on GracePeriod parameter if not set.
   *
   * @generated from field: teleport.trust.v1.RotationSchedule schedule = 5;
   */
  schedule?: RotationSchedule;
};

/**
 * Describes the message teleport.trust.v1.RotateCertAuthorityRequest.
 * Use `create(RotateCertAuthorityRequestSchema)` to create a new message.
 */
export const RotateCertAuthorityRequestSchema: GenMessage<RotateCertAuthorityRequest> = /*@__PURE__*/
  messageDesc(file_teleport_trust_v1_trust_service, 5);

/**
 * RotationSchedule is a rotation schedule setting time switches for different phases.
 *
 * @generated from message teleport.trust.v1.RotationSchedule
 */
export type RotationSchedule = Message<"teleport.trust.v1.RotationSchedule"> & {
  /**
   * UpdateClients specifies time to switch to the "Update clients" phase
   *
   * @generated from field: google.protobuf.Timestamp update_clients = 1;
   */
  updateClients?: Timestamp;

  /**
   * UpdateServers specifies time to switch to the "Update servers" phase.
   *
   * @generated from field: google.protobuf.Timestamp update_servers = 2;
   */
  updateServers?: Timestamp;

  /**
   * Standby specifies time to switch to the "Standby" phase.
   *
   * @generated from field: google.protobuf.Timestamp standby = 3;
   */
  standby?: Timestamp;
};

/**
 * Describes the message teleport.trust.v1.RotationSchedule.
 * Use `create(RotationScheduleSchema)` to create a new message.
 */
export const RotationScheduleSchema: GenMessage<RotationSchedule> = /*@__PURE__*/
  messageDesc(file_teleport_trust_v1_trust_service, 6);

/**
 * Response for RotateCertAuthority.
 *
 * @generated from message teleport.trust.v1.RotateCertAuthorityResponse
 */
export type RotateCertAuthorityResponse = Message<"teleport.trust.v1.RotateCertAuthorityResponse"> & {
};

/**
 * Describes the message teleport.trust.v1.RotateCertAuthorityResponse.
 * Use `create(RotateCertAuthorityResponseSchema)` to create a new message.
 */
export const RotateCertAuthorityResponseSchema: GenMessage<RotateCertAuthorityResponse> = /*@__PURE__*/
  messageDesc(file_teleport_trust_v1_trust_service, 7);

/**
 * Request for RotateExternalCertAuthority.
 *
 * @generated from message teleport.trust.v1.RotateExternalCertAuthorityRequest
 */
export type RotateExternalCertAuthorityRequest = Message<"teleport.trust.v1.RotateExternalCertAuthorityRequest"> & {
  /**
   * The certificate authority to rotate.
   *
   * @generated from field: types.CertAuthorityV2 cert_authority = 1;
   */
  certAuthority?: CertAuthorityV2;
};

/**
 * Describes the message teleport.trust.v1.RotateExternalCertAuthorityRequest.
 * Use `create(RotateExternalCertAuthorityRequestSchema)` to create a new message.
 */
export const RotateExternalCertAuthorityRequestSchema: GenMessage<RotateExternalCertAuthorityRequest> = /*@__PURE__*/
  messageDesc(file_teleport_trust_v1_trust_service, 8);

/**
 * Response for RotateExternalCertAuthority.
 *
 * @generated from message teleport.trust.v1.RotateExternalCertAuthorityResponse
 */
export type RotateExternalCertAuthorityResponse = Message<"teleport.trust.v1.RotateExternalCertAuthorityResponse"> & {
};

/**
 * Describes the message teleport.trust.v1.RotateExternalCertAuthorityResponse.
 * Use `create(RotateExternalCertAuthorityResponseSchema)` to create a new message.
 */
export const RotateExternalCertAuthorityResponseSchema: GenMessage<RotateExternalCertAuthorityResponse> = /*@__PURE__*/
  messageDesc(file_teleport_trust_v1_trust_service, 9);

/**
 * GenerateHostCertRequest is the request for GenerateHostCert.
 *
 * @generated from message teleport.trust.v1.GenerateHostCertRequest
 */
export type GenerateHostCertRequest = Message<"teleport.trust.v1.GenerateHostCertRequest"> & {
  /**
   * key is the SSH public key that the certificate should include.
   *
   * @generated from field: bytes key = 1;
   */
  key: Uint8Array;

  /**
   * host_id is the ID of the host the certificate should include.
   *
   * @generated from field: string host_id = 2;
   */
  hostId: string;

  /**
   * node_name is the name of the node the certificate should include.
   *
   * @generated from field: string node_name = 3;
   */
  nodeName: string;

  /**
   * principals is a list of principals that the certificate should include.
   *
   * @generated from field: repeated string principals = 4;
   */
  principals: string[];

  /**
   * cluster_name is a list of principals that the certificate should include.
   *
   * @generated from field: string cluster_name = 5;
   */
  clusterName: string;

  /**
   * role is a system role assigned to the host that will be included on the certificate.
   *
   * @generated from field: string role = 6;
   */
  role: string;

  /**
   * ttl is the duration the certificate will be valid for. This may be zero for indefinite.
   *
   * @generated from field: google.protobuf.Duration ttl = 7;
   */
  ttl?: Duration;
};

/**
 * Describes the message teleport.trust.v1.GenerateHostCertRequest.
 * Use `create(GenerateHostCertRequestSchema)` to create a new message.
 */
export const GenerateHostCertRequestSchema: GenMessage<GenerateHostCertRequest> = /*@__PURE__*/
  messageDesc(file_teleport_trust_v1_trust_service, 10);

/**
 * GenerateHostCertResponse is the response for GenerateHostCert.
 *
 * @generated from message teleport.trust.v1.GenerateHostCertResponse
 */
export type GenerateHostCertResponse = Message<"teleport.trust.v1.GenerateHostCertResponse"> & {
  /**
   * ssh_certificate is the encoded bytes of the SSH certificate generated by the RPC.
   *
   * @generated from field: bytes ssh_certificate = 1;
   */
  sshCertificate: Uint8Array;
};

/**
 * Describes the message teleport.trust.v1.GenerateHostCertResponse.
 * Use `create(GenerateHostCertResponseSchema)` to create a new message.
 */
export const GenerateHostCertResponseSchema: GenMessage<GenerateHostCertResponse> = /*@__PURE__*/
  messageDesc(file_teleport_trust_v1_trust_service, 11);

/**
 * TrustService provides methods to manage certificate authorities.
 *
 * @generated from service teleport.trust.v1.TrustService
 */
export const TrustService: GenService<{
  /**
   * GetCertAuthority returns a cert authority by type and domain.
   *
   * @generated from rpc teleport.trust.v1.TrustService.GetCertAuthority
   */
  getCertAuthority: {
    methodKind: "unary";
    input: typeof GetCertAuthorityRequestSchema;
    output: typeof CertAuthorityV2Schema;
  },
  /**
   * GetCertAuthorities returns all cert authorities with the specified type.
   *
   * @generated from rpc teleport.trust.v1.TrustService.GetCertAuthorities
   */
  getCertAuthorities: {
    methodKind: "unary";
    input: typeof GetCertAuthoritiesRequestSchema;
    output: typeof GetCertAuthoritiesResponseSchema;
  },
  /**
   * DeleteCertAuthority deletes the matching cert authority.
   *
   * @generated from rpc teleport.trust.v1.TrustService.DeleteCertAuthority
   */
  deleteCertAuthority: {
    methodKind: "unary";
    input: typeof DeleteCertAuthorityRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * UpsertCertAuthority creates or updates the provided cert authority.
   *
   * @generated from rpc teleport.trust.v1.TrustService.UpsertCertAuthority
   */
  upsertCertAuthority: {
    methodKind: "unary";
    input: typeof UpsertCertAuthorityRequestSchema;
    output: typeof CertAuthorityV2Schema;
  },
  /**
   * RotateCertAuthority is a request to start rotation of the certificate authority.
   *
   * @generated from rpc teleport.trust.v1.TrustService.RotateCertAuthority
   */
  rotateCertAuthority: {
    methodKind: "unary";
    input: typeof RotateCertAuthorityRequestSchema;
    output: typeof RotateCertAuthorityResponseSchema;
  },
  /**
   * RotateExternalCertAuthority rotates an external cert authority.
   *
   * @generated from rpc teleport.trust.v1.TrustService.RotateExternalCertAuthority
   */
  rotateExternalCertAuthority: {
    methodKind: "unary";
    input: typeof RotateExternalCertAuthorityRequestSchema;
    output: typeof RotateExternalCertAuthorityResponseSchema;
  },
  /**
   * GenerateHostCert takes a public key in the OpenSSH `authorized_keys` format and returns
   * a SSH certificate signed by the Host CA.
   *
   * @generated from rpc teleport.trust.v1.TrustService.GenerateHostCert
   */
  generateHostCert: {
    methodKind: "unary";
    input: typeof GenerateHostCertRequestSchema;
    output: typeof GenerateHostCertResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_teleport_trust_v1_trust_service, 0);

