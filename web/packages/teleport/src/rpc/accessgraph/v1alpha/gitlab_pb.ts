//
// Teleport
// Copyright (C) 2024  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file accessgraph/v1alpha/gitlab.proto (package accessgraph.v1alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * AccessLevelType defines the access level a user has
 * to a project or Gitlab group.
 *
 * @generated from enum accessgraph.v1alpha.AccessLevelType
 */
export enum AccessLevelType {
  /**
   * ACCESS_LEVEL_TYPE_UNSPECIFIED is an unspecified permissions.
   *
   * @generated from enum value: ACCESS_LEVEL_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * ACCESS_LEVEL_TYPE_NO_PERMISSIONS represents no permissions.
   *
   * @generated from enum value: ACCESS_LEVEL_TYPE_NO_PERMISSIONS = 1;
   */
  NO_PERMISSIONS = 1,

  /**
   * ACCESS_LEVEL_TYPE_MINIMAL represents "minimal" permissions to a project/group.
   *
   * @generated from enum value: ACCESS_LEVEL_TYPE_MINIMAL = 2;
   */
  MINIMAL = 2,

  /**
   * ACCESS_LEVEL_TYPE_GUEST represents "guest" permissions to a project/group.
   *
   * @generated from enum value: ACCESS_LEVEL_TYPE_GUEST = 3;
   */
  GUEST = 3,

  /**
   * ACCESS_LEVEL_TYPE_REPORTER represents "reporter" permissions to a project/group.
   *
   * @generated from enum value: ACCESS_LEVEL_TYPE_REPORTER = 4;
   */
  REPORTER = 4,

  /**
   * ACCESS_LEVEL_TYPE_DEVELOPER represents "developer" permissions to a project/group.
   *
   * @generated from enum value: ACCESS_LEVEL_TYPE_DEVELOPER = 5;
   */
  DEVELOPER = 5,

  /**
   * ACCESS_LEVEL_TYPE_MAINTAINER represents "master" permissions to a project/group.
   *
   * @generated from enum value: ACCESS_LEVEL_TYPE_MAINTAINER = 6;
   */
  MAINTAINER = 6,

  /**
   * ACCESS_LEVEL_TYPE_OWNER represents "owner" permissions to a project/group.
   *
   * @generated from enum value: ACCESS_LEVEL_TYPE_OWNER = 7;
   */
  OWNER = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(AccessLevelType)
proto3.util.setEnumType(AccessLevelType, "accessgraph.v1alpha.AccessLevelType", [
  { no: 0, name: "ACCESS_LEVEL_TYPE_UNSPECIFIED" },
  { no: 1, name: "ACCESS_LEVEL_TYPE_NO_PERMISSIONS" },
  { no: 2, name: "ACCESS_LEVEL_TYPE_MINIMAL" },
  { no: 3, name: "ACCESS_LEVEL_TYPE_GUEST" },
  { no: 4, name: "ACCESS_LEVEL_TYPE_REPORTER" },
  { no: 5, name: "ACCESS_LEVEL_TYPE_DEVELOPER" },
  { no: 6, name: "ACCESS_LEVEL_TYPE_MAINTAINER" },
  { no: 7, name: "ACCESS_LEVEL_TYPE_OWNER" },
]);

/**
 * GitlabSyncOperation is a request to sync Gitlab resources
 *
 * @generated from message accessgraph.v1alpha.GitlabSyncOperation
 */
export class GitlabSyncOperation extends Message<GitlabSyncOperation> {
  constructor(data?: PartialMessage<GitlabSyncOperation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accessgraph.v1alpha.GitlabSyncOperation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitlabSyncOperation {
    return new GitlabSyncOperation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitlabSyncOperation {
    return new GitlabSyncOperation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitlabSyncOperation {
    return new GitlabSyncOperation().fromJsonString(jsonString, options);
  }

  static equals(a: GitlabSyncOperation | PlainMessage<GitlabSyncOperation> | undefined, b: GitlabSyncOperation | PlainMessage<GitlabSyncOperation> | undefined): boolean {
    return proto3.util.equals(GitlabSyncOperation, a, b);
  }
}

/**
 * GitlabResourceList is a request that contains resources to be sync.
 *
 * @generated from message accessgraph.v1alpha.GitlabResourceList
 */
export class GitlabResourceList extends Message<GitlabResourceList> {
  /**
   * resources is a list of gitlab resources to sync.
   *
   * @generated from field: repeated accessgraph.v1alpha.GitlabResource resources = 1;
   */
  resources: GitlabResource[] = [];

  constructor(data?: PartialMessage<GitlabResourceList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accessgraph.v1alpha.GitlabResourceList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resources", kind: "message", T: GitlabResource, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitlabResourceList {
    return new GitlabResourceList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitlabResourceList {
    return new GitlabResourceList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitlabResourceList {
    return new GitlabResourceList().fromJsonString(jsonString, options);
  }

  static equals(a: GitlabResourceList | PlainMessage<GitlabResourceList> | undefined, b: GitlabResourceList | PlainMessage<GitlabResourceList> | undefined): boolean {
    return proto3.util.equals(GitlabResourceList, a, b);
  }
}

/**
 * GitlabResource represents a Gitlab resource
 *
 * @generated from message accessgraph.v1alpha.GitlabResource
 */
export class GitlabResource extends Message<GitlabResource> {
  /**
   * @generated from oneof accessgraph.v1alpha.GitlabResource.resource
   */
  resource: {
    /**
     * group represents a gitlab group or subgroup in an organization.
     *
     * @generated from field: accessgraph.v1alpha.GitlabGroup group = 1;
     */
    value: GitlabGroup;
    case: "group";
  } | {
    /**
     * project represents a gitlab repository.
     *
     * @generated from field: accessgraph.v1alpha.GitlabProject project = 2;
     */
    value: GitlabProject;
    case: "project";
  } | {
    /**
     * project_member represents a user with certain access levels to a project.
     *
     * @generated from field: accessgraph.v1alpha.GitlabProjectMember project_member = 3;
     */
    value: GitlabProjectMember;
    case: "projectMember";
  } | {
    /**
     * group_member represents a user with certain access levels to a group and all subgroups/projects within.
     *
     * @generated from field: accessgraph.v1alpha.GitlabGroupMember group_member = 4;
     */
    value: GitlabGroupMember;
    case: "groupMember";
  } | {
    /**
     * user represents a gitlab user.
     *
     * @generated from field: accessgraph.v1alpha.GitlabUser user = 5;
     */
    value: GitlabUser;
    case: "user";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GitlabResource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accessgraph.v1alpha.GitlabResource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group", kind: "message", T: GitlabGroup, oneof: "resource" },
    { no: 2, name: "project", kind: "message", T: GitlabProject, oneof: "resource" },
    { no: 3, name: "project_member", kind: "message", T: GitlabProjectMember, oneof: "resource" },
    { no: 4, name: "group_member", kind: "message", T: GitlabGroupMember, oneof: "resource" },
    { no: 5, name: "user", kind: "message", T: GitlabUser, oneof: "resource" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitlabResource {
    return new GitlabResource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitlabResource {
    return new GitlabResource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitlabResource {
    return new GitlabResource().fromJsonString(jsonString, options);
  }

  static equals(a: GitlabResource | PlainMessage<GitlabResource> | undefined, b: GitlabResource | PlainMessage<GitlabResource> | undefined): boolean {
    return proto3.util.equals(GitlabResource, a, b);
  }
}

/**
 * GitlabGroup represents a Gitlab group
 *
 * @generated from message accessgraph.v1alpha.GitlabGroup
 */
export class GitlabGroup extends Message<GitlabGroup> {
  /**
   * name is the group name.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * path is the universal identifier for the group location.
   *
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * full_name is the group full name.
   *
   * @generated from field: string full_name = 3;
   */
  fullName = "";

  /**
   * description is the group description.
   *
   * @generated from field: string description = 4;
   */
  description = "";

  constructor(data?: PartialMessage<GitlabGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accessgraph.v1alpha.GitlabGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "full_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitlabGroup {
    return new GitlabGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitlabGroup {
    return new GitlabGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitlabGroup {
    return new GitlabGroup().fromJsonString(jsonString, options);
  }

  static equals(a: GitlabGroup | PlainMessage<GitlabGroup> | undefined, b: GitlabGroup | PlainMessage<GitlabGroup> | undefined): boolean {
    return proto3.util.equals(GitlabGroup, a, b);
  }
}

/**
 * GitlabProject represents a Gitlab project
 *
 * @generated from message accessgraph.v1alpha.GitlabProject
 */
export class GitlabProject extends Message<GitlabProject> {
  /**
   * name is the repository name.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * path is the universal identifier for the project location.
   *
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * description is the project description.
   *
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<GitlabProject>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accessgraph.v1alpha.GitlabProject";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitlabProject {
    return new GitlabProject().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitlabProject {
    return new GitlabProject().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitlabProject {
    return new GitlabProject().fromJsonString(jsonString, options);
  }

  static equals(a: GitlabProject | PlainMessage<GitlabProject> | undefined, b: GitlabProject | PlainMessage<GitlabProject> | undefined): boolean {
    return proto3.util.equals(GitlabProject, a, b);
  }
}

/**
 * GitlabProjectMember represents a Gitlab project member
 *
 * @generated from message accessgraph.v1alpha.GitlabProjectMember
 */
export class GitlabProjectMember extends Message<GitlabProjectMember> {
  /**
   * username is the username of the user.
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * access_level defines the permissions the user has to the project.
   *
   * @generated from field: accessgraph.v1alpha.AccessLevelType access_level = 2;
   */
  accessLevel = AccessLevelType.UNSPECIFIED;

  /**
   * project identifies the project that the user is member of.
   *
   * @generated from field: accessgraph.v1alpha.GitlabProject project = 3;
   */
  project?: GitlabProject;

  constructor(data?: PartialMessage<GitlabProjectMember>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accessgraph.v1alpha.GitlabProjectMember";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "access_level", kind: "enum", T: proto3.getEnumType(AccessLevelType) },
    { no: 3, name: "project", kind: "message", T: GitlabProject },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitlabProjectMember {
    return new GitlabProjectMember().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitlabProjectMember {
    return new GitlabProjectMember().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitlabProjectMember {
    return new GitlabProjectMember().fromJsonString(jsonString, options);
  }

  static equals(a: GitlabProjectMember | PlainMessage<GitlabProjectMember> | undefined, b: GitlabProjectMember | PlainMessage<GitlabProjectMember> | undefined): boolean {
    return proto3.util.equals(GitlabProjectMember, a, b);
  }
}

/**
 * GitlabGroupMember represents a Gitlab group member
 *
 * @generated from message accessgraph.v1alpha.GitlabGroupMember
 */
export class GitlabGroupMember extends Message<GitlabGroupMember> {
  /**
   * username is the username of the user.
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * access_level defines the permissions the user has to the group and all projects within.
   *
   * @generated from field: accessgraph.v1alpha.AccessLevelType access_level = 2;
   */
  accessLevel = AccessLevelType.UNSPECIFIED;

  /**
   * project identifies the project that the user is member of.
   *
   * @generated from field: accessgraph.v1alpha.GitlabGroup group = 3;
   */
  group?: GitlabGroup;

  constructor(data?: PartialMessage<GitlabGroupMember>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accessgraph.v1alpha.GitlabGroupMember";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "access_level", kind: "enum", T: proto3.getEnumType(AccessLevelType) },
    { no: 3, name: "group", kind: "message", T: GitlabGroup },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitlabGroupMember {
    return new GitlabGroupMember().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitlabGroupMember {
    return new GitlabGroupMember().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitlabGroupMember {
    return new GitlabGroupMember().fromJsonString(jsonString, options);
  }

  static equals(a: GitlabGroupMember | PlainMessage<GitlabGroupMember> | undefined, b: GitlabGroupMember | PlainMessage<GitlabGroupMember> | undefined): boolean {
    return proto3.util.equals(GitlabGroupMember, a, b);
  }
}

/**
 * GitlabGroupMember represents a Gitlab user.
 *
 * @generated from message accessgraph.v1alpha.GitlabUser
 */
export class GitlabUser extends Message<GitlabUser> {
  /**
   * username is the username of the user.
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * email is the user's email.
   *
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * name is the user's name.
   *
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * is_admin indicates if a user is admin.
   *
   * @generated from field: bool is_admin = 4;
   */
  isAdmin = false;

  /**
   * organization is the user's organization.
   *
   * @generated from field: string organization = 5;
   */
  organization = "";

  /**
   * last_sign_in_at identifies the last sign in date.
   *
   * @generated from field: google.protobuf.Timestamp last_sign_in_at = 6;
   */
  lastSignInAt?: Timestamp;

  /**
   * can_create_group identifies if the user can create groups.
   *
   * @generated from field: bool can_create_group = 7;
   */
  canCreateGroup = false;

  /**
   * can_create_project identifies if the user can create projects.
   *
   * @generated from field: bool can_create_project = 8;
   */
  canCreateProject = false;

  /**
   * two_factor_enabled identifies if the user has two factor authentication enabled.
   *
   * @generated from field: bool two_factor_enabled = 9;
   */
  twoFactorEnabled = false;

  /**
   * identities represents the identity source for the user.
   *
   * @generated from field: repeated accessgraph.v1alpha.GitlabUserIdentity identities = 10;
   */
  identities: GitlabUserIdentity[] = [];

  constructor(data?: PartialMessage<GitlabUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accessgraph.v1alpha.GitlabUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "is_admin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "last_sign_in_at", kind: "message", T: Timestamp },
    { no: 7, name: "can_create_group", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "can_create_project", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "two_factor_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "identities", kind: "message", T: GitlabUserIdentity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitlabUser {
    return new GitlabUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitlabUser {
    return new GitlabUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitlabUser {
    return new GitlabUser().fromJsonString(jsonString, options);
  }

  static equals(a: GitlabUser | PlainMessage<GitlabUser> | undefined, b: GitlabUser | PlainMessage<GitlabUser> | undefined): boolean {
    return proto3.util.equals(GitlabUser, a, b);
  }
}

/**
 * GitlabUserIdentity identifies the external identity of the user.
 *
 * @generated from message accessgraph.v1alpha.GitlabUserIdentity
 */
export class GitlabUserIdentity extends Message<GitlabUserIdentity> {
  /**
   * provider identifies the identity provider.
   *
   * @generated from field: string provider = 1;
   */
  provider = "";

  /**
   * extern_uid identifies the external uid of the identity.
   *
   * @generated from field: string extern_uid = 2;
   */
  externUid = "";

  constructor(data?: PartialMessage<GitlabUserIdentity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accessgraph.v1alpha.GitlabUserIdentity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "extern_uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitlabUserIdentity {
    return new GitlabUserIdentity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitlabUserIdentity {
    return new GitlabUserIdentity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitlabUserIdentity {
    return new GitlabUserIdentity().fromJsonString(jsonString, options);
  }

  static equals(a: GitlabUserIdentity | PlainMessage<GitlabUserIdentity> | undefined, b: GitlabUserIdentity | PlainMessage<GitlabUserIdentity> | undefined): boolean {
    return proto3.util.equals(GitlabUserIdentity, a, b);
  }
}

