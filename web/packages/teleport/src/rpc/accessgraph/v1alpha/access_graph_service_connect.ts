//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file accessgraph/v1alpha/access_graph_service.proto (package accessgraph.v1alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AWSEventsStreamRequest, AWSEventsStreamResponse, EntraEventsStreamRequest, EntraEventsStreamResponse, EventsStreamRequest, EventsStreamResponse, EventsStreamV2Request, EventsStreamV2Response, GetFileRequest, GetFileResponse, GitlabEventsStreamRequest, GitlabEventsStreamResponse, QueryRequest, QueryResponse, RegisterRequest, RegisterResponse, ReplaceCAsRequest, ReplaceCAsResponse } from "./access_graph_service_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * AccessGraphService is a service for interacting the access graph service.
 *
 * @generated from service accessgraph.v1alpha.AccessGraphService
 */
export const AccessGraphService = {
  typeName: "accessgraph.v1alpha.AccessGraphService",
  methods: {
    /**
     * Query queries the access graph.
     * Currently only used by WebUI.
     *
     * @generated from rpc accessgraph.v1alpha.AccessGraphService.Query
     */
    query: {
      name: "Query",
      I: QueryRequest,
      O: QueryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetFile gets a static UI file from the access graph container.
     *
     * @generated from rpc accessgraph.v1alpha.AccessGraphService.GetFile
     */
    getFile: {
      name: "GetFile",
      I: GetFileRequest,
      O: GetFileResponse,
      kind: MethodKind.Unary,
    },
    /**
     * EventsStream is a stream of commands to the access graph service.
     * Teleport Auth server creates a stream to the access graph service
     * and pushes all resources and following events to it.
     * This stream is used to sync the access graph with the Teleport database state.
     * Once Teleport finishes syncing the current state, it sends a sync command
     * to the access graph service and resumes sending events.
     *
     * @generated from rpc accessgraph.v1alpha.AccessGraphService.EventsStream
     */
    eventsStream: {
      name: "EventsStream",
      I: EventsStreamRequest,
      O: EventsStreamResponse,
      kind: MethodKind.ClientStreaming,
    },
    /**
     * EventsStreamV2 is a stream of commands to the access graph service.
     * This stream works the same way as EventsStream, but it returns a stream of events
     * instead of a single response.
     *
     * @generated from rpc accessgraph.v1alpha.AccessGraphService.EventsStreamV2
     */
    eventsStreamV2: {
      name: "EventsStreamV2",
      I: EventsStreamV2Request,
      O: EventsStreamV2Response,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * Register submits a new tenant representing this Teleport cluster to the TAG service,
     * identified by its HostCA certificate.
     * The method is idempotent: it succeeds if the tenant has already registered and has the specific CA associated.
     *
     * This method, unlike all others, expects the client to authenticate using a TLS certificate signed by the registration CA,
     * rather than the Teleport cluster's Host CA.
     *
     * @generated from rpc accessgraph.v1alpha.AccessGraphService.Register
     */
    register: {
      name: "Register",
      I: RegisterRequest,
      O: RegisterResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ReplaceCAs is a request to completely replace the set of Host CAs that authenticate this tenant with the given set.
     * This accommodates Teleport Host CA rotation. In a transition from certificate authority A to authority B,
     * the client is expected to call the RPC as follows:
     * 1. Authenticate via existing authority A and call ReplaceCAs([A, B]) -- introduce the incoming CA
     * 2.a. If rotation succeeds, authenticate via the new authority B and call ReplaceCAs([B]) -- delete the previous CA
     * 2.b. If rotation is rolled back, authenticate via the old authority A and call ReplaceCAs([A]) -- delete the candidate CA
     *
     * @generated from rpc accessgraph.v1alpha.AccessGraphService.ReplaceCAs
     */
    replaceCAs: {
      name: "ReplaceCAs",
      I: ReplaceCAsRequest,
      O: ReplaceCAsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AWSEventsStream is a stream of commands to the AWS importer.
     * Teleport Discovery Service creates a stream to the access graph service
     * and pushes all AWS resources and following events to it.
     * This stream is used to sync the access graph with the AWS database state.
     *
     * @generated from rpc accessgraph.v1alpha.AccessGraphService.AWSEventsStream
     */
    aWSEventsStream: {
      name: "AWSEventsStream",
      I: AWSEventsStreamRequest,
      O: AWSEventsStreamResponse,
      kind: MethodKind.ClientStreaming,
    },
    /**
     * GitlabEventsStream is a stream of commands to the Gitlab importer.
     *
     * @generated from rpc accessgraph.v1alpha.AccessGraphService.GitlabEventsStream
     */
    gitlabEventsStream: {
      name: "GitlabEventsStream",
      I: GitlabEventsStreamRequest,
      O: GitlabEventsStreamResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * EntraEventsStream is a stream of commands to the Entra ID SSO importer.
     *
     * @generated from rpc accessgraph.v1alpha.AccessGraphService.EntraEventsStream
     */
    entraEventsStream: {
      name: "EntraEventsStream",
      I: EntraEventsStreamRequest,
      O: EntraEventsStreamResponse,
      kind: MethodKind.BiDiStreaming,
    },
  }
} as const;

