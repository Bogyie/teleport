//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file accessgraph/v1alpha/access_graph_service.proto (package accessgraph.v1alpha, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { AWSResourceList } from "./aws_pb";
import { file_accessgraph_v1alpha_aws } from "./aws_pb";
import type { EntraResourceList, EntraSyncOperation } from "./entra_pb";
import { file_accessgraph_v1alpha_entra } from "./entra_pb";
import type { AccessPathChanged } from "./events_pb";
import { file_accessgraph_v1alpha_events } from "./events_pb";
import type { GitlabResourceList, GitlabSyncOperation } from "./gitlab_pb";
import { file_accessgraph_v1alpha_gitlab } from "./gitlab_pb";
import type { Edge, Node } from "./graph_pb";
import { file_accessgraph_v1alpha_graph } from "./graph_pb";
import type { AccessListsMembers, ExcludeAccessListsMembers, ResourceHeaderList, ResourceList } from "./resources_pb";
import { file_accessgraph_v1alpha_resources } from "./resources_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file accessgraph/v1alpha/access_graph_service.proto.
 */
export const file_accessgraph_v1alpha_access_graph_service: GenFile = /*@__PURE__*/
  fileDesc("Ci5hY2Nlc3NncmFwaC92MWFscGhhL2FjY2Vzc19ncmFwaF9zZXJ2aWNlLnByb3RvEhNhY2Nlc3NncmFwaC52MWFscGhhIh0KDFF1ZXJ5UmVxdWVzdBINCgVxdWVyeRgBIAEoCSJjCg1RdWVyeVJlc3BvbnNlEigKBW5vZGVzGAEgAygLMhkuYWNjZXNzZ3JhcGgudjFhbHBoYS5Ob2RlEigKBWVkZ2VzGAIgAygLMhkuYWNjZXNzZ3JhcGgudjFhbHBoYS5FZGdlIiIKDkdldEZpbGVSZXF1ZXN0EhAKCGZpbGVwYXRoGAEgASgJIh8KD0dldEZpbGVSZXNwb25zZRIMCgRkYXRhGAEgASgMIuYCChNFdmVudHNTdHJlYW1SZXF1ZXN0EjIKBHN5bmMYASABKAsyIi5hY2Nlc3NncmFwaC52MWFscGhhLlN5bmNPcGVyYXRpb25IABIzCgZ1cHNlcnQYAiABKAsyIS5hY2Nlc3NncmFwaC52MWFscGhhLlJlc291cmNlTGlzdEgAEjkKBmRlbGV0ZRgDIAEoCzInLmFjY2Vzc2dyYXBoLnYxYWxwaGEuUmVzb3VyY2VIZWFkZXJMaXN0SAASRwoUYWNjZXNzX2xpc3RzX21lbWJlcnMYBCABKAsyJy5hY2Nlc3NncmFwaC52MWFscGhhLkFjY2Vzc0xpc3RzTWVtYmVyc0gAElUKG2V4Y2x1ZGVfYWNjZXNzX2xpc3RfbWVtYmVycxgFIAEoCzIuLmFjY2Vzc2dyYXBoLnYxYWxwaGEuRXhjbHVkZUFjY2Vzc0xpc3RzTWVtYmVyc0gAQgsKCW9wZXJhdGlvbiLoAgoVRXZlbnRzU3RyZWFtVjJSZXF1ZXN0EjIKBHN5bmMYASABKAsyIi5hY2Nlc3NncmFwaC52MWFscGhhLlN5bmNPcGVyYXRpb25IABIzCgZ1cHNlcnQYAiABKAsyIS5hY2Nlc3NncmFwaC52MWFscGhhLlJlc291cmNlTGlzdEgAEjkKBmRlbGV0ZRgDIAEoCzInLmFjY2Vzc2dyYXBoLnYxYWxwaGEuUmVzb3VyY2VIZWFkZXJMaXN0SAASRwoUYWNjZXNzX2xpc3RzX21lbWJlcnMYBCABKAsyJy5hY2Nlc3NncmFwaC52MWFscGhhLkFjY2Vzc0xpc3RzTWVtYmVyc0gAElUKG2V4Y2x1ZGVfYWNjZXNzX2xpc3RfbWVtYmVycxgFIAEoCzIuLmFjY2Vzc2dyYXBoLnYxYWxwaGEuRXhjbHVkZUFjY2Vzc0xpc3RzTWVtYmVyc0gAQgsKCW9wZXJhdGlvbiIPCg1TeW5jT3BlcmF0aW9uIhYKFEV2ZW50c1N0cmVhbVJlc3BvbnNlIlQKFkV2ZW50c1N0cmVhbVYyUmVzcG9uc2USMAoFZXZlbnQYASABKAsyHy5hY2Nlc3NncmFwaC52MWFscGhhLkF1ZGl0RXZlbnRIAEIICgZhY3Rpb24iXAoKQXVkaXRFdmVudBJFChNhY2Nlc3NfcGF0aF9jaGFuZ2VkGAEgASgLMiYuYWNjZXNzZ3JhcGgudjFhbHBoYS5BY2Nlc3NQYXRoQ2hhbmdlZEgAQgcKBWV2ZW50IjwKD1JlZ2lzdGVyUmVxdWVzdBITCgtob3N0X2NhX3BlbRgBIAEoDBIUCgxjbHVzdGVyX25hbWUYAiABKAkiEgoQUmVnaXN0ZXJSZXNwb25zZSIoChFSZXBsYWNlQ0FzUmVxdWVzdBITCgtob3N0X2NhX3BlbRgBIAMoDCIUChJSZXBsYWNlQ0FzUmVzcG9uc2UizAEKFkFXU0V2ZW50c1N0cmVhbVJlcXVlc3QSNQoEc3luYxgBIAEoCzIlLmFjY2Vzc2dyYXBoLnYxYWxwaGEuQVdTU3luY09wZXJhdGlvbkgAEjYKBnVwc2VydBgCIAEoCzIkLmFjY2Vzc2dyYXBoLnYxYWxwaGEuQVdTUmVzb3VyY2VMaXN0SAASNgoGZGVsZXRlGAMgASgLMiQuYWNjZXNzZ3JhcGgudjFhbHBoYS5BV1NSZXNvdXJjZUxpc3RIAEILCglvcGVyYXRpb24iEgoQQVdTU3luY09wZXJhdGlvbiIZChdBV1NFdmVudHNTdHJlYW1SZXNwb25zZSLYAQoZR2l0bGFiRXZlbnRzU3RyZWFtUmVxdWVzdBI4CgRzeW5jGAEgASgLMiguYWNjZXNzZ3JhcGgudjFhbHBoYS5HaXRsYWJTeW5jT3BlcmF0aW9uSAASOQoGdXBzZXJ0GAIgASgLMicuYWNjZXNzZ3JhcGgudjFhbHBoYS5HaXRsYWJSZXNvdXJjZUxpc3RIABI5CgZkZWxldGUYAyABKAsyJy5hY2Nlc3NncmFwaC52MWFscGhhLkdpdGxhYlJlc291cmNlTGlzdEgAQgsKCW9wZXJhdGlvbiIcChpHaXRsYWJFdmVudHNTdHJlYW1SZXNwb25zZSLUAQoYRW50cmFFdmVudHNTdHJlYW1SZXF1ZXN0EjcKBHN5bmMYASABKAsyJy5hY2Nlc3NncmFwaC52MWFscGhhLkVudHJhU3luY09wZXJhdGlvbkgAEjgKBnVwc2VydBgCIAEoCzImLmFjY2Vzc2dyYXBoLnYxYWxwaGEuRW50cmFSZXNvdXJjZUxpc3RIABI4CgZkZWxldGUYAyABKAsyJi5hY2Nlc3NncmFwaC52MWFscGhhLkVudHJhUmVzb3VyY2VMaXN0SABCCwoJb3BlcmF0aW9uIhsKGUVudHJhRXZlbnRzU3RyZWFtUmVzcG9uc2UyqwcKEkFjY2Vzc0dyYXBoU2VydmljZRJOCgVRdWVyeRIhLmFjY2Vzc2dyYXBoLnYxYWxwaGEuUXVlcnlSZXF1ZXN0GiIuYWNjZXNzZ3JhcGgudjFhbHBoYS5RdWVyeVJlc3BvbnNlElQKB0dldEZpbGUSIy5hY2Nlc3NncmFwaC52MWFscGhhLkdldEZpbGVSZXF1ZXN0GiQuYWNjZXNzZ3JhcGgudjFhbHBoYS5HZXRGaWxlUmVzcG9uc2USZQoMRXZlbnRzU3RyZWFtEiguYWNjZXNzZ3JhcGgudjFhbHBoYS5FdmVudHNTdHJlYW1SZXF1ZXN0GikuYWNjZXNzZ3JhcGgudjFhbHBoYS5FdmVudHNTdHJlYW1SZXNwb25zZSgBEm0KDkV2ZW50c1N0cmVhbVYyEiouYWNjZXNzZ3JhcGgudjFhbHBoYS5FdmVudHNTdHJlYW1WMlJlcXVlc3QaKy5hY2Nlc3NncmFwaC52MWFscGhhLkV2ZW50c1N0cmVhbVYyUmVzcG9uc2UoATABElcKCFJlZ2lzdGVyEiQuYWNjZXNzZ3JhcGgudjFhbHBoYS5SZWdpc3RlclJlcXVlc3QaJS5hY2Nlc3NncmFwaC52MWFscGhhLlJlZ2lzdGVyUmVzcG9uc2USXQoKUmVwbGFjZUNBcxImLmFjY2Vzc2dyYXBoLnYxYWxwaGEuUmVwbGFjZUNBc1JlcXVlc3QaJy5hY2Nlc3NncmFwaC52MWFscGhhLlJlcGxhY2VDQXNSZXNwb25zZRJuCg9BV1NFdmVudHNTdHJlYW0SKy5hY2Nlc3NncmFwaC52MWFscGhhLkFXU0V2ZW50c1N0cmVhbVJlcXVlc3QaLC5hY2Nlc3NncmFwaC52MWFscGhhLkFXU0V2ZW50c1N0cmVhbVJlc3BvbnNlKAESeQoSR2l0bGFiRXZlbnRzU3RyZWFtEi4uYWNjZXNzZ3JhcGgudjFhbHBoYS5HaXRsYWJFdmVudHNTdHJlYW1SZXF1ZXN0Gi8uYWNjZXNzZ3JhcGgudjFhbHBoYS5HaXRsYWJFdmVudHNTdHJlYW1SZXNwb25zZSgBMAESdgoRRW50cmFFdmVudHNTdHJlYW0SLS5hY2Nlc3NncmFwaC52MWFscGhhLkVudHJhRXZlbnRzU3RyZWFtUmVxdWVzdBouLmFjY2Vzc2dyYXBoLnYxYWxwaGEuRW50cmFFdmVudHNTdHJlYW1SZXNwb25zZSgBMAFCV1pVZ2l0aHViLmNvbS9ncmF2aXRhdGlvbmFsL3RlbGVwb3J0L2dlbi9wcm90by9nby9hY2Nlc3NncmFwaC92MWFscGhhO2FjY2Vzc2dyYXBodjFhbHBoYWIGcHJvdG8z", [file_accessgraph_v1alpha_aws, file_accessgraph_v1alpha_entra, file_accessgraph_v1alpha_events, file_accessgraph_v1alpha_gitlab, file_accessgraph_v1alpha_graph, file_accessgraph_v1alpha_resources]);

/**
 * QueryRequest is a request to query the access graph.
 *
 * @generated from message accessgraph.v1alpha.QueryRequest
 */
export type QueryRequest = Message<"accessgraph.v1alpha.QueryRequest"> & {
  /**
   * query is a SQL query.
   *
   * @generated from field: string query = 1;
   */
  query: string;
};

/**
 * Describes the message accessgraph.v1alpha.QueryRequest.
 * Use `create(QueryRequestSchema)` to create a new message.
 */
export const QueryRequestSchema: GenMessage<QueryRequest> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 0);

/**
 * QueryResponse is a response to a query.
 *
 * @generated from message accessgraph.v1alpha.QueryResponse
 */
export type QueryResponse = Message<"accessgraph.v1alpha.QueryResponse"> & {
  /**
   * nodes is a list of nodes returned by the query. The response may contain only nodes.
   *
   * @generated from field: repeated accessgraph.v1alpha.Node nodes = 1;
   */
  nodes: Node[];

  /**
   * edges is a list of edges returned by the query.
   *
   * @generated from field: repeated accessgraph.v1alpha.Edge edges = 2;
   */
  edges: Edge[];
};

/**
 * Describes the message accessgraph.v1alpha.QueryResponse.
 * Use `create(QueryResponseSchema)` to create a new message.
 */
export const QueryResponseSchema: GenMessage<QueryResponse> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 1);

/**
 * GetFileRequest is a request to get a file.
 *
 * @generated from message accessgraph.v1alpha.GetFileRequest
 */
export type GetFileRequest = Message<"accessgraph.v1alpha.GetFileRequest"> & {
  /**
   * filepath is a path to the file.
   *
   * @generated from field: string filepath = 1;
   */
  filepath: string;
};

/**
 * Describes the message accessgraph.v1alpha.GetFileRequest.
 * Use `create(GetFileRequestSchema)` to create a new message.
 */
export const GetFileRequestSchema: GenMessage<GetFileRequest> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 2);

/**
 * GetFileResponse is a response to a file request.
 *
 * @generated from message accessgraph.v1alpha.GetFileResponse
 */
export type GetFileResponse = Message<"accessgraph.v1alpha.GetFileResponse"> & {
  /**
   * data is a raw file content.
   *
   * @generated from field: bytes data = 1;
   */
  data: Uint8Array;
};

/**
 * Describes the message accessgraph.v1alpha.GetFileResponse.
 * Use `create(GetFileResponseSchema)` to create a new message.
 */
export const GetFileResponseSchema: GenMessage<GetFileResponse> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 3);

/**
 * EventsStreamRequest is a request to send commands to the access graph.
 * This command is used to sync the access graph with the Teleport database state.
 *
 * @generated from message accessgraph.v1alpha.EventsStreamRequest
 */
export type EventsStreamRequest = Message<"accessgraph.v1alpha.EventsStreamRequest"> & {
  /**
   * operation contains the desired operation
   *
   * @generated from oneof accessgraph.v1alpha.EventsStreamRequest.operation
   */
  operation: {
    /**
     * sync is a command to sync the access graph with the Teleport database state.
     * it's issued once Teleport finishes syncing all resources with the database.
     *
     * @generated from field: accessgraph.v1alpha.SyncOperation sync = 1;
     */
    value: SyncOperation;
    case: "sync";
  } | {
    /**
     * upsert is a command to put a resource into the access graph or update it.
     *
     * @generated from field: accessgraph.v1alpha.ResourceList upsert = 2;
     */
    value: ResourceList;
    case: "upsert";
  } | {
    /**
     * delete is a command to delete a resource from the access graph when it's deleted from Teleport.
     *
     * @generated from field: accessgraph.v1alpha.ResourceHeaderList delete = 3;
     */
    value: ResourceHeaderList;
    case: "delete";
  } | {
    /**
     * access_lists_members is a command to upsert access lists members.
     * It's issued when a user is added to an access list or when their membership is updated.
     * It's also issued when a user membership expires but the user remains in the access list.
     * In that case, the state of the user reflects the expiration reason.
     *
     * @generated from field: accessgraph.v1alpha.AccessListsMembers access_lists_members = 4;
     */
    value: AccessListsMembers;
    case: "accessListsMembers";
  } | {
    /**
     * exclude_access_list_members is a command to exclude access lists members
     * when they are manually removed from the access list.
     * If their membership remains but it's expired, they are not excluded
     * from the access list but they don't receive any access - in that case,
     * the request is [access_lists_members].
     *
     * @generated from field: accessgraph.v1alpha.ExcludeAccessListsMembers exclude_access_list_members = 5;
     */
    value: ExcludeAccessListsMembers;
    case: "excludeAccessListMembers";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message accessgraph.v1alpha.EventsStreamRequest.
 * Use `create(EventsStreamRequestSchema)` to create a new message.
 */
export const EventsStreamRequestSchema: GenMessage<EventsStreamRequest> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 4);

/**
 * EventsStreamV2Request is a request to send commands to the access graph.
 * This command is used to sync the access graph with the Teleport database state.
 *
 * @generated from message accessgraph.v1alpha.EventsStreamV2Request
 */
export type EventsStreamV2Request = Message<"accessgraph.v1alpha.EventsStreamV2Request"> & {
  /**
   * operation contains the desired operation
   *
   * @generated from oneof accessgraph.v1alpha.EventsStreamV2Request.operation
   */
  operation: {
    /**
     * sync is a command to sync the access graph with the Teleport database state.
     * it's issued once Teleport finishes syncing all resources with the database.
     *
     * @generated from field: accessgraph.v1alpha.SyncOperation sync = 1;
     */
    value: SyncOperation;
    case: "sync";
  } | {
    /**
     * upsert is a command to put a resource into the access graph or update it.
     *
     * @generated from field: accessgraph.v1alpha.ResourceList upsert = 2;
     */
    value: ResourceList;
    case: "upsert";
  } | {
    /**
     * delete is a command to delete a resource from the access graph when it's deleted from Teleport.
     *
     * @generated from field: accessgraph.v1alpha.ResourceHeaderList delete = 3;
     */
    value: ResourceHeaderList;
    case: "delete";
  } | {
    /**
     * access_lists_members is a command to upsert access lists members.
     * It's issued when a user is added to an access list or when their membership is updated.
     * It's also issued when a user membership expires but the user remains in the access list.
     * In that case, the state of the user reflects the expiration reason.
     *
     * @generated from field: accessgraph.v1alpha.AccessListsMembers access_lists_members = 4;
     */
    value: AccessListsMembers;
    case: "accessListsMembers";
  } | {
    /**
     * exclude_access_list_members is a command to exclude access lists members
     * when they are manually removed from the access list.
     * If their membership remains but it's expired, they are not excluded
     * from the access list but they don't receive any access - in that case,
     * the request is [access_lists_members].
     *
     * @generated from field: accessgraph.v1alpha.ExcludeAccessListsMembers exclude_access_list_members = 5;
     */
    value: ExcludeAccessListsMembers;
    case: "excludeAccessListMembers";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message accessgraph.v1alpha.EventsStreamV2Request.
 * Use `create(EventsStreamV2RequestSchema)` to create a new message.
 */
export const EventsStreamV2RequestSchema: GenMessage<EventsStreamV2Request> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 5);

/**
 * SyncOperation is a command that Teleport sends to the access graph service
 * at the end of the sync process.
 *
 * @generated from message accessgraph.v1alpha.SyncOperation
 */
export type SyncOperation = Message<"accessgraph.v1alpha.SyncOperation"> & {
};

/**
 * Describes the message accessgraph.v1alpha.SyncOperation.
 * Use `create(SyncOperationSchema)` to create a new message.
 */
export const SyncOperationSchema: GenMessage<SyncOperation> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 6);

/**
 * EventsStreamResponse is the response from EventsStream.
 *
 * @generated from message accessgraph.v1alpha.EventsStreamResponse
 */
export type EventsStreamResponse = Message<"accessgraph.v1alpha.EventsStreamResponse"> & {
};

/**
 * Describes the message accessgraph.v1alpha.EventsStreamResponse.
 * Use `create(EventsStreamResponseSchema)` to create a new message.
 */
export const EventsStreamResponseSchema: GenMessage<EventsStreamResponse> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 7);

/**
 * EventsStreamV2Response is the response from EventsStreamV2.
 *
 * @generated from message accessgraph.v1alpha.EventsStreamV2Response
 */
export type EventsStreamV2Response = Message<"accessgraph.v1alpha.EventsStreamV2Response"> & {
  /**
   * action is a action that should be performed by Teleport on behalf of the access graph service.
   *
   * @generated from oneof accessgraph.v1alpha.EventsStreamV2Response.action
   */
  action: {
    /**
     * event is a audit event that should be logged by Teleport.
     *
     * @generated from field: accessgraph.v1alpha.AuditEvent event = 1;
     */
    value: AuditEvent;
    case: "event";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message accessgraph.v1alpha.EventsStreamV2Response.
 * Use `create(EventsStreamV2ResponseSchema)` to create a new message.
 */
export const EventsStreamV2ResponseSchema: GenMessage<EventsStreamV2Response> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 8);

/**
 * AuditEvent is an event that should be logged by Teleport.
 *
 * @generated from message accessgraph.v1alpha.AuditEvent
 */
export type AuditEvent = Message<"accessgraph.v1alpha.AuditEvent"> & {
  /**
   * @generated from oneof accessgraph.v1alpha.AuditEvent.event
   */
  event: {
    /**
     * access_path_changed is an event that should be logged when the access path changes.
     *
     * @generated from field: accessgraph.v1alpha.AccessPathChanged access_path_changed = 1;
     */
    value: AccessPathChanged;
    case: "accessPathChanged";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message accessgraph.v1alpha.AuditEvent.
 * Use `create(AuditEventSchema)` to create a new message.
 */
export const AuditEventSchema: GenMessage<AuditEvent> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 9);

/**
 * RegisterRequest is the request for Register.
 *
 * @generated from message accessgraph.v1alpha.RegisterRequest
 */
export type RegisterRequest = Message<"accessgraph.v1alpha.RegisterRequest"> & {
  /**
   * @generated from field: bytes host_ca_pem = 1;
   */
  hostCaPem: Uint8Array;

  /**
   * ClusterName is the self-submitted name of the Teleport cluster (usually a FQDN).
   * This may not uniquely identify the cluster, and is only used to make identification easier for debugging purposes.
   *
   * @generated from field: string cluster_name = 2;
   */
  clusterName: string;
};

/**
 * Describes the message accessgraph.v1alpha.RegisterRequest.
 * Use `create(RegisterRequestSchema)` to create a new message.
 */
export const RegisterRequestSchema: GenMessage<RegisterRequest> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 10);

/**
 * RegisterResponse is the response for Register.
 *
 * @generated from message accessgraph.v1alpha.RegisterResponse
 */
export type RegisterResponse = Message<"accessgraph.v1alpha.RegisterResponse"> & {
};

/**
 * Describes the message accessgraph.v1alpha.RegisterResponse.
 * Use `create(RegisterResponseSchema)` to create a new message.
 */
export const RegisterResponseSchema: GenMessage<RegisterResponse> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 11);

/**
 * ReplaceCAsRequest is the request for ReplaceCAs.
 *
 * @generated from message accessgraph.v1alpha.ReplaceCAsRequest
 */
export type ReplaceCAsRequest = Message<"accessgraph.v1alpha.ReplaceCAsRequest"> & {
  /**
   * @generated from field: repeated bytes host_ca_pem = 1;
   */
  hostCaPem: Uint8Array[];
};

/**
 * Describes the message accessgraph.v1alpha.ReplaceCAsRequest.
 * Use `create(ReplaceCAsRequestSchema)` to create a new message.
 */
export const ReplaceCAsRequestSchema: GenMessage<ReplaceCAsRequest> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 12);

/**
 * ReplaceCAsResponse is the response for ReplaceCAs.
 *
 * @generated from message accessgraph.v1alpha.ReplaceCAsResponse
 */
export type ReplaceCAsResponse = Message<"accessgraph.v1alpha.ReplaceCAsResponse"> & {
};

/**
 * Describes the message accessgraph.v1alpha.ReplaceCAsResponse.
 * Use `create(ReplaceCAsResponseSchema)` to create a new message.
 */
export const ReplaceCAsResponseSchema: GenMessage<ReplaceCAsResponse> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 13);

/**
 * AWSEventsStreamRequest is a request to send commands to the AWS importer.
 * This command is used to sync the access graph with the AWS database state.
 *
 * @generated from message accessgraph.v1alpha.AWSEventsStreamRequest
 */
export type AWSEventsStreamRequest = Message<"accessgraph.v1alpha.AWSEventsStreamRequest"> & {
  /**
   * operation contains the desired operation
   *
   * @generated from oneof accessgraph.v1alpha.AWSEventsStreamRequest.operation
   */
  operation: {
    /**
     * sync is a command to sync the access graph with the Teleport database state.
     * it's issued once Teleport finishes syncing all resources with the database.
     *
     * @generated from field: accessgraph.v1alpha.AWSSyncOperation sync = 1;
     */
    value: AWSSyncOperation;
    case: "sync";
  } | {
    /**
     * upsert is a command to put a resource into the access graph or update it.
     *
     * @generated from field: accessgraph.v1alpha.AWSResourceList upsert = 2;
     */
    value: AWSResourceList;
    case: "upsert";
  } | {
    /**
     * delete is a command to delete a resource from the access graph when it's deleted from Teleport.
     *
     * @generated from field: accessgraph.v1alpha.AWSResourceList delete = 3;
     */
    value: AWSResourceList;
    case: "delete";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message accessgraph.v1alpha.AWSEventsStreamRequest.
 * Use `create(AWSEventsStreamRequestSchema)` to create a new message.
 */
export const AWSEventsStreamRequestSchema: GenMessage<AWSEventsStreamRequest> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 14);

/**
 * AWSSyncOperation is a command that Teleport sends to the access graph service
 * at the end of the sync process.
 *
 * @generated from message accessgraph.v1alpha.AWSSyncOperation
 */
export type AWSSyncOperation = Message<"accessgraph.v1alpha.AWSSyncOperation"> & {
};

/**
 * Describes the message accessgraph.v1alpha.AWSSyncOperation.
 * Use `create(AWSSyncOperationSchema)` to create a new message.
 */
export const AWSSyncOperationSchema: GenMessage<AWSSyncOperation> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 15);

/**
 * AWSEventsStreamResponse is the response from AWSEventsStream.
 *
 * @generated from message accessgraph.v1alpha.AWSEventsStreamResponse
 */
export type AWSEventsStreamResponse = Message<"accessgraph.v1alpha.AWSEventsStreamResponse"> & {
};

/**
 * Describes the message accessgraph.v1alpha.AWSEventsStreamResponse.
 * Use `create(AWSEventsStreamResponseSchema)` to create a new message.
 */
export const AWSEventsStreamResponseSchema: GenMessage<AWSEventsStreamResponse> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 16);

/**
 * GitlabEventsStreamRequest is a request to send commands to the Gitlab importer.
 *
 * @generated from message accessgraph.v1alpha.GitlabEventsStreamRequest
 */
export type GitlabEventsStreamRequest = Message<"accessgraph.v1alpha.GitlabEventsStreamRequest"> & {
  /**
   * operation contains the desired operation
   *
   * @generated from oneof accessgraph.v1alpha.GitlabEventsStreamRequest.operation
   */
  operation: {
    /**
     * sync is a command to sync the access graph with the Teleport database state.
     * it's issued once Teleport finishes syncing all resources with the database.
     *
     * @generated from field: accessgraph.v1alpha.GitlabSyncOperation sync = 1;
     */
    value: GitlabSyncOperation;
    case: "sync";
  } | {
    /**
     * upsert is a command to put a resource into the access graph or update it.
     *
     * @generated from field: accessgraph.v1alpha.GitlabResourceList upsert = 2;
     */
    value: GitlabResourceList;
    case: "upsert";
  } | {
    /**
     * delete is a command to delete a resource from the access graph when it's deleted from Teleport.
     *
     * @generated from field: accessgraph.v1alpha.GitlabResourceList delete = 3;
     */
    value: GitlabResourceList;
    case: "delete";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message accessgraph.v1alpha.GitlabEventsStreamRequest.
 * Use `create(GitlabEventsStreamRequestSchema)` to create a new message.
 */
export const GitlabEventsStreamRequestSchema: GenMessage<GitlabEventsStreamRequest> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 17);

/**
 * GitlabEventsStreamResponse is the response from GitlabEventsStream.
 *
 * @generated from message accessgraph.v1alpha.GitlabEventsStreamResponse
 */
export type GitlabEventsStreamResponse = Message<"accessgraph.v1alpha.GitlabEventsStreamResponse"> & {
};

/**
 * Describes the message accessgraph.v1alpha.GitlabEventsStreamResponse.
 * Use `create(GitlabEventsStreamResponseSchema)` to create a new message.
 */
export const GitlabEventsStreamResponseSchema: GenMessage<GitlabEventsStreamResponse> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 18);

/**
 * EntraEventsStreamRequest is a request to send commands to the Gitlab importer.
 *
 * @generated from message accessgraph.v1alpha.EntraEventsStreamRequest
 */
export type EntraEventsStreamRequest = Message<"accessgraph.v1alpha.EntraEventsStreamRequest"> & {
  /**
   * operation contains the desired operation
   *
   * @generated from oneof accessgraph.v1alpha.EntraEventsStreamRequest.operation
   */
  operation: {
    /**
     * sync is a command to sync the access graph with the Teleport database state.
     * it's issued once Teleport finishes syncing all resources with the database.
     *
     * @generated from field: accessgraph.v1alpha.EntraSyncOperation sync = 1;
     */
    value: EntraSyncOperation;
    case: "sync";
  } | {
    /**
     * upsert is a command to put a resource into the access graph or update it.
     *
     * @generated from field: accessgraph.v1alpha.EntraResourceList upsert = 2;
     */
    value: EntraResourceList;
    case: "upsert";
  } | {
    /**
     * delete is a command to delete a resource from the access graph when it's deleted from Teleport.
     *
     * @generated from field: accessgraph.v1alpha.EntraResourceList delete = 3;
     */
    value: EntraResourceList;
    case: "delete";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message accessgraph.v1alpha.EntraEventsStreamRequest.
 * Use `create(EntraEventsStreamRequestSchema)` to create a new message.
 */
export const EntraEventsStreamRequestSchema: GenMessage<EntraEventsStreamRequest> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 19);

/**
 * EntraEventsStreamResponse is the response from GitlabEventsStream.
 *
 * @generated from message accessgraph.v1alpha.EntraEventsStreamResponse
 */
export type EntraEventsStreamResponse = Message<"accessgraph.v1alpha.EntraEventsStreamResponse"> & {
};

/**
 * Describes the message accessgraph.v1alpha.EntraEventsStreamResponse.
 * Use `create(EntraEventsStreamResponseSchema)` to create a new message.
 */
export const EntraEventsStreamResponseSchema: GenMessage<EntraEventsStreamResponse> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_access_graph_service, 20);

/**
 * AccessGraphService is a service for interacting the access graph service.
 *
 * @generated from service accessgraph.v1alpha.AccessGraphService
 */
export const AccessGraphService: GenService<{
  /**
   * Query queries the access graph.
   * Currently only used by WebUI.
   *
   * @generated from rpc accessgraph.v1alpha.AccessGraphService.Query
   */
  query: {
    methodKind: "unary";
    input: typeof QueryRequestSchema;
    output: typeof QueryResponseSchema;
  },
  /**
   * GetFile gets a static UI file from the access graph container.
   *
   * @generated from rpc accessgraph.v1alpha.AccessGraphService.GetFile
   */
  getFile: {
    methodKind: "unary";
    input: typeof GetFileRequestSchema;
    output: typeof GetFileResponseSchema;
  },
  /**
   * EventsStream is a stream of commands to the access graph service.
   * Teleport Auth server creates a stream to the access graph service
   * and pushes all resources and following events to it.
   * This stream is used to sync the access graph with the Teleport database state.
   * Once Teleport finishes syncing the current state, it sends a sync command
   * to the access graph service and resumes sending events.
   *
   * @generated from rpc accessgraph.v1alpha.AccessGraphService.EventsStream
   */
  eventsStream: {
    methodKind: "client_streaming";
    input: typeof EventsStreamRequestSchema;
    output: typeof EventsStreamResponseSchema;
  },
  /**
   * EventsStreamV2 is a stream of commands to the access graph service.
   * This stream works the same way as EventsStream, but it returns a stream of events
   * instead of a single response.
   *
   * @generated from rpc accessgraph.v1alpha.AccessGraphService.EventsStreamV2
   */
  eventsStreamV2: {
    methodKind: "bidi_streaming";
    input: typeof EventsStreamV2RequestSchema;
    output: typeof EventsStreamV2ResponseSchema;
  },
  /**
   * Register submits a new tenant representing this Teleport cluster to the TAG service,
   * identified by its HostCA certificate.
   * The method is idempotent: it succeeds if the tenant has already registered and has the specific CA associated.
   *
   * This method, unlike all others, expects the client to authenticate using a TLS certificate signed by the registration CA,
   * rather than the Teleport cluster's Host CA.
   *
   * @generated from rpc accessgraph.v1alpha.AccessGraphService.Register
   */
  register: {
    methodKind: "unary";
    input: typeof RegisterRequestSchema;
    output: typeof RegisterResponseSchema;
  },
  /**
   * ReplaceCAs is a request to completely replace the set of Host CAs that authenticate this tenant with the given set.
   * This accommodates Teleport Host CA rotation. In a transition from certificate authority A to authority B,
   * the client is expected to call the RPC as follows:
   * 1. Authenticate via existing authority A and call ReplaceCAs([A, B]) -- introduce the incoming CA
   * 2.a. If rotation succeeds, authenticate via the new authority B and call ReplaceCAs([B]) -- delete the previous CA
   * 2.b. If rotation is rolled back, authenticate via the old authority A and call ReplaceCAs([A]) -- delete the candidate CA
   *
   * @generated from rpc accessgraph.v1alpha.AccessGraphService.ReplaceCAs
   */
  replaceCAs: {
    methodKind: "unary";
    input: typeof ReplaceCAsRequestSchema;
    output: typeof ReplaceCAsResponseSchema;
  },
  /**
   * AWSEventsStream is a stream of commands to the AWS importer.
   * Teleport Discovery Service creates a stream to the access graph service
   * and pushes all AWS resources and following events to it.
   * This stream is used to sync the access graph with the AWS database state.
   *
   * @generated from rpc accessgraph.v1alpha.AccessGraphService.AWSEventsStream
   */
  aWSEventsStream: {
    methodKind: "client_streaming";
    input: typeof AWSEventsStreamRequestSchema;
    output: typeof AWSEventsStreamResponseSchema;
  },
  /**
   * GitlabEventsStream is a stream of commands to the Gitlab importer.
   *
   * @generated from rpc accessgraph.v1alpha.AccessGraphService.GitlabEventsStream
   */
  gitlabEventsStream: {
    methodKind: "bidi_streaming";
    input: typeof GitlabEventsStreamRequestSchema;
    output: typeof GitlabEventsStreamResponseSchema;
  },
  /**
   * EntraEventsStream is a stream of commands to the Entra ID SSO importer.
   *
   * @generated from rpc accessgraph.v1alpha.AccessGraphService.EntraEventsStream
   */
  entraEventsStream: {
    methodKind: "bidi_streaming";
    input: typeof EntraEventsStreamRequestSchema;
    output: typeof EntraEventsStreamResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_accessgraph_v1alpha_access_graph_service, 0);

