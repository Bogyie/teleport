//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file accessgraph/v1alpha/graph.proto (package accessgraph.v1alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Node is a node in the access graph.
 *
 * @generated from message accessgraph.v1alpha.Node
 */
export class Node extends Message<Node> {
  /**
   * ID is the unique ID of the node.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Kind is the kind of the node, ex: "user", "user_group", "resource", etc.
   *
   * @generated from field: string kind = 2;
   */
  kind = "";

  /**
   * SubKind is the subkind of the node, ex: "ssh", "db", "k8s", etc.
   *
   * @generated from field: string sub_kind = 3;
   */
  subKind = "";

  /**
   * Name is the name of the node.
   *
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * Labels is a set of labels for the resource.
   *
   * @generated from field: map<string, string> labels = 5;
   */
  labels: { [key: string]: string } = {};

  /**
   * Hostname is the hostname of the node.
   *
   * @generated from field: string hostname = 6;
   */
  hostname = "";

  /**
   * Properties is a set of properties for the resource.
   *
   * @generated from field: map<string, string> properties = 7;
   */
  properties: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Node>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accessgraph.v1alpha.Node";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sub_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "properties", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Node {
    return new Node().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJsonString(jsonString, options);
  }

  static equals(a: Node | PlainMessage<Node> | undefined, b: Node | PlainMessage<Node> | undefined): boolean {
    return proto3.util.equals(Node, a, b);
  }
}

/**
 * Edge is an edge in the access graph.
 *
 * @generated from message accessgraph.v1alpha.Edge
 */
export class Edge extends Message<Edge> {
  /**
   * from is the ID of the node the edge is from.
   *
   * @generated from field: string from = 1;
   */
  from = "";

  /**
   * to is the ID of the node the edge is to.
   *
   * @generated from field: string to = 2;
   */
  to = "";

  /**
   * edge_type is the type of the edge, e.g. "member_of", "belongs_to", etc.
   *
   * @generated from field: string edge_type = 3;
   */
  edgeType = "";

  /**
   * Properties is a set of properties for the edges.
   *
   * @generated from field: map<string, string> properties = 4;
   */
  properties: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Edge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accessgraph.v1alpha.Edge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "edge_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "properties", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Edge {
    return new Edge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Edge {
    return new Edge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Edge {
    return new Edge().fromJsonString(jsonString, options);
  }

  static equals(a: Edge | PlainMessage<Edge> | undefined, b: Edge | PlainMessage<Edge> | undefined): boolean {
    return proto3.util.equals(Edge, a, b);
  }
}

