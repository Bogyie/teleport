// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/legacy/types/device.proto (package types, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { ResourceHeader } from "./types_pb";

/**
 * DeviceV1 is the resource representation of teleport.devicetrust.v1.Device.
 *
 * @generated from message types.DeviceV1
 */
export class DeviceV1 extends Message<DeviceV1> {
  /**
   * Header is the common resource header.
   *
   * - Kind is always "device".
   * - SubKind is unused.
   * - Version is equivalent to teleport.devicetrust.v1.Device.api_version.
   * - Metadata.Name is equivalent to teleport.devicetrust.v1.Device.Id.
   *
   * @generated from field: types.ResourceHeader Header = 1;
   */
  Header?: ResourceHeader;

  /**
   * Specification of the device.
   *
   * @generated from field: types.DeviceSpec spec = 5;
   */
  spec?: DeviceSpec;

  constructor(data?: PartialMessage<DeviceV1>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.DeviceV1";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Header", kind: "message", T: ResourceHeader },
    { no: 5, name: "spec", kind: "message", T: DeviceSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceV1 {
    return new DeviceV1().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceV1 {
    return new DeviceV1().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceV1 {
    return new DeviceV1().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceV1 | PlainMessage<DeviceV1> | undefined, b: DeviceV1 | PlainMessage<DeviceV1> | undefined): boolean {
    return proto3.util.equals(DeviceV1, a, b);
  }
}

/**
 * DeviceSpec is a device specification.
 * Roughly matches teleport.devicetrust.v1.Device, with some fields changed for
 * better UX.
 *
 * @generated from message types.DeviceSpec
 */
export class DeviceSpec extends Message<DeviceSpec> {
  /**
   * @generated from field: string os_type = 1;
   */
  osType = "";

  /**
   * @generated from field: string asset_tag = 2;
   */
  assetTag = "";

  /**
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp update_time = 4;
   */
  updateTime?: Timestamp;

  /**
   * @generated from field: string enroll_status = 5;
   */
  enrollStatus = "";

  /**
   * @generated from field: types.DeviceCredential credential = 6;
   */
  credential?: DeviceCredential;

  /**
   * @generated from field: repeated types.DeviceCollectedData collected_data = 7;
   */
  collectedData: DeviceCollectedData[] = [];

  /**
   * @generated from field: types.DeviceSource source = 8;
   */
  source?: DeviceSource;

  /**
   * @generated from field: types.DeviceProfile profile = 9;
   */
  profile?: DeviceProfile;

  /**
   * @generated from field: string owner = 10;
   */
  owner = "";

  constructor(data?: PartialMessage<DeviceSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.DeviceSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "os_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset_tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "create_time", kind: "message", T: Timestamp },
    { no: 4, name: "update_time", kind: "message", T: Timestamp },
    { no: 5, name: "enroll_status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "credential", kind: "message", T: DeviceCredential },
    { no: 7, name: "collected_data", kind: "message", T: DeviceCollectedData, repeated: true },
    { no: 8, name: "source", kind: "message", T: DeviceSource },
    { no: 9, name: "profile", kind: "message", T: DeviceProfile },
    { no: 10, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceSpec {
    return new DeviceSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceSpec {
    return new DeviceSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceSpec {
    return new DeviceSpec().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceSpec | PlainMessage<DeviceSpec> | undefined, b: DeviceSpec | PlainMessage<DeviceSpec> | undefined): boolean {
    return proto3.util.equals(DeviceSpec, a, b);
  }
}

/**
 * DeviceCredential is the resource representation of
 * teleport.devicetrust.v1.DeviceCredential.
 *
 * @generated from message types.DeviceCredential
 */
export class DeviceCredential extends Message<DeviceCredential> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: bytes public_key_der = 2;
   */
  publicKeyDer = new Uint8Array(0);

  /**
   * @generated from field: string device_attestation_type = 3;
   */
  deviceAttestationType = "";

  /**
   * @generated from field: string tpm_ekcert_serial = 4;
   */
  tpmEkcertSerial = "";

  /**
   * @generated from field: bytes tpm_ak_public = 5;
   */
  tpmAkPublic = new Uint8Array(0);

  constructor(data?: PartialMessage<DeviceCredential>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.DeviceCredential";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "public_key_der", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "device_attestation_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tpm_ekcert_serial", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "tpm_ak_public", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceCredential {
    return new DeviceCredential().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceCredential {
    return new DeviceCredential().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceCredential {
    return new DeviceCredential().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceCredential | PlainMessage<DeviceCredential> | undefined, b: DeviceCredential | PlainMessage<DeviceCredential> | undefined): boolean {
    return proto3.util.equals(DeviceCredential, a, b);
  }
}

/**
 * DeviceCollectedData is the resource representation of
 * teleport.devicetrust.v1.DeviceCollectedData.
 *
 * @generated from message types.DeviceCollectedData
 */
export class DeviceCollectedData extends Message<DeviceCollectedData> {
  /**
   * @generated from field: google.protobuf.Timestamp collect_time = 1;
   */
  collectTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp record_time = 2;
   */
  recordTime?: Timestamp;

  /**
   * @generated from field: string os_type = 3;
   */
  osType = "";

  /**
   * @generated from field: string serial_number = 4;
   */
  serialNumber = "";

  /**
   * @generated from field: string model_identifier = 5;
   */
  modelIdentifier = "";

  /**
   * @generated from field: string os_version = 6;
   */
  osVersion = "";

  /**
   * @generated from field: string os_build = 7;
   */
  osBuild = "";

  /**
   * @generated from field: string os_username = 8;
   */
  osUsername = "";

  /**
   * @generated from field: string jamf_binary_version = 9;
   */
  jamfBinaryVersion = "";

  /**
   * @generated from field: string macos_enrollment_profiles = 10;
   */
  macosEnrollmentProfiles = "";

  /**
   * @generated from field: string reported_asset_tag = 11;
   */
  reportedAssetTag = "";

  /**
   * @generated from field: string system_serial_number = 12;
   */
  systemSerialNumber = "";

  /**
   * @generated from field: string base_board_serial_number = 13;
   */
  baseBoardSerialNumber = "";

  /**
   * @generated from field: types.TPMPlatformAttestation tpm_platform_attestation = 14;
   */
  tpmPlatformAttestation?: TPMPlatformAttestation;

  /**
   * @generated from field: string os_id = 15;
   */
  osId = "";

  constructor(data?: PartialMessage<DeviceCollectedData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.DeviceCollectedData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collect_time", kind: "message", T: Timestamp },
    { no: 2, name: "record_time", kind: "message", T: Timestamp },
    { no: 3, name: "os_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "serial_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "model_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "os_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "os_build", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "os_username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "jamf_binary_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "macos_enrollment_profiles", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "reported_asset_tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "system_serial_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "base_board_serial_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "tpm_platform_attestation", kind: "message", T: TPMPlatformAttestation },
    { no: 15, name: "os_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceCollectedData {
    return new DeviceCollectedData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceCollectedData {
    return new DeviceCollectedData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceCollectedData {
    return new DeviceCollectedData().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceCollectedData | PlainMessage<DeviceCollectedData> | undefined, b: DeviceCollectedData | PlainMessage<DeviceCollectedData> | undefined): boolean {
    return proto3.util.equals(DeviceCollectedData, a, b);
  }
}

/**
 * TPMPCR is the resource representation of teleport.devicetrust.v1.TPMPCR.
 *
 * @generated from message types.TPMPCR
 */
export class TPMPCR extends Message<TPMPCR> {
  /**
   * @generated from field: int32 index = 1;
   */
  index = 0;

  /**
   * @generated from field: bytes digest = 2;
   */
  digest = new Uint8Array(0);

  /**
   * @generated from field: uint64 digest_alg = 3;
   */
  digestAlg = protoInt64.zero;

  constructor(data?: PartialMessage<TPMPCR>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.TPMPCR";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "digest", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "digest_alg", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TPMPCR {
    return new TPMPCR().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TPMPCR {
    return new TPMPCR().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TPMPCR {
    return new TPMPCR().fromJsonString(jsonString, options);
  }

  static equals(a: TPMPCR | PlainMessage<TPMPCR> | undefined, b: TPMPCR | PlainMessage<TPMPCR> | undefined): boolean {
    return proto3.util.equals(TPMPCR, a, b);
  }
}

/**
 * TPMQuote is the resource representation of teleport.devicetrust.v1.TPMQuote.
 *
 * @generated from message types.TPMQuote
 */
export class TPMQuote extends Message<TPMQuote> {
  /**
   * @generated from field: bytes quote = 1;
   */
  quote = new Uint8Array(0);

  /**
   * @generated from field: bytes signature = 2;
   */
  signature = new Uint8Array(0);

  constructor(data?: PartialMessage<TPMQuote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.TPMQuote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "quote", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TPMQuote {
    return new TPMQuote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TPMQuote {
    return new TPMQuote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TPMQuote {
    return new TPMQuote().fromJsonString(jsonString, options);
  }

  static equals(a: TPMQuote | PlainMessage<TPMQuote> | undefined, b: TPMQuote | PlainMessage<TPMQuote> | undefined): boolean {
    return proto3.util.equals(TPMQuote, a, b);
  }
}

/**
 * TPMPlatformParameters is the resource representation of
 * teleport.devicetrust.v1.TPMPlatformParameters.
 *
 * @generated from message types.TPMPlatformParameters
 */
export class TPMPlatformParameters extends Message<TPMPlatformParameters> {
  /**
   * @generated from field: repeated types.TPMQuote quotes = 1;
   */
  quotes: TPMQuote[] = [];

  /**
   * @generated from field: repeated types.TPMPCR pcrs = 2;
   */
  pcrs: TPMPCR[] = [];

  /**
   * @generated from field: bytes event_log = 3;
   */
  eventLog = new Uint8Array(0);

  constructor(data?: PartialMessage<TPMPlatformParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.TPMPlatformParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "quotes", kind: "message", T: TPMQuote, repeated: true },
    { no: 2, name: "pcrs", kind: "message", T: TPMPCR, repeated: true },
    { no: 3, name: "event_log", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TPMPlatformParameters {
    return new TPMPlatformParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TPMPlatformParameters {
    return new TPMPlatformParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TPMPlatformParameters {
    return new TPMPlatformParameters().fromJsonString(jsonString, options);
  }

  static equals(a: TPMPlatformParameters | PlainMessage<TPMPlatformParameters> | undefined, b: TPMPlatformParameters | PlainMessage<TPMPlatformParameters> | undefined): boolean {
    return proto3.util.equals(TPMPlatformParameters, a, b);
  }
}

/**
 * TPMPlatformAttestation is the resource representation of
 * teleport.devicetrust.v1.TPMPlatformAttestation.
 *
 * @generated from message types.TPMPlatformAttestation
 */
export class TPMPlatformAttestation extends Message<TPMPlatformAttestation> {
  /**
   * @generated from field: bytes nonce = 1;
   */
  nonce = new Uint8Array(0);

  /**
   * @generated from field: types.TPMPlatformParameters platform_parameters = 2;
   */
  platformParameters?: TPMPlatformParameters;

  constructor(data?: PartialMessage<TPMPlatformAttestation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.TPMPlatformAttestation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nonce", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "platform_parameters", kind: "message", T: TPMPlatformParameters },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TPMPlatformAttestation {
    return new TPMPlatformAttestation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TPMPlatformAttestation {
    return new TPMPlatformAttestation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TPMPlatformAttestation {
    return new TPMPlatformAttestation().fromJsonString(jsonString, options);
  }

  static equals(a: TPMPlatformAttestation | PlainMessage<TPMPlatformAttestation> | undefined, b: TPMPlatformAttestation | PlainMessage<TPMPlatformAttestation> | undefined): boolean {
    return proto3.util.equals(TPMPlatformAttestation, a, b);
  }
}

/**
 * DeviceSource is the resource representation of
 * teleport.devicetrust.v1.DeviceSource..
 *
 * @generated from message types.DeviceSource
 */
export class DeviceSource extends Message<DeviceSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string origin = 2;
   */
  origin = "";

  constructor(data?: PartialMessage<DeviceSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.DeviceSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceSource {
    return new DeviceSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceSource {
    return new DeviceSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceSource {
    return new DeviceSource().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceSource | PlainMessage<DeviceSource> | undefined, b: DeviceSource | PlainMessage<DeviceSource> | undefined): boolean {
    return proto3.util.equals(DeviceSource, a, b);
  }
}

/**
 * DeviceProfile is the resource representation of
 * teleport.devicetrust.v1.DeviceProfile.
 *
 * @generated from message types.DeviceProfile
 */
export class DeviceProfile extends Message<DeviceProfile> {
  /**
   * @generated from field: google.protobuf.Timestamp update_time = 1;
   */
  updateTime?: Timestamp;

  /**
   * @generated from field: string model_identifier = 2;
   */
  modelIdentifier = "";

  /**
   * @generated from field: string os_version = 3;
   */
  osVersion = "";

  /**
   * @generated from field: string os_build = 4;
   */
  osBuild = "";

  /**
   * @generated from field: repeated string os_usernames = 5;
   */
  osUsernames: string[] = [];

  /**
   * @generated from field: string jamf_binary_version = 6;
   */
  jamfBinaryVersion = "";

  /**
   * @generated from field: string external_id = 7;
   */
  externalId = "";

  /**
   * @generated from field: string os_build_supplemental = 8;
   */
  osBuildSupplemental = "";

  /**
   * @generated from field: string os_id = 9;
   */
  osId = "";

  constructor(data?: PartialMessage<DeviceProfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.DeviceProfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "update_time", kind: "message", T: Timestamp },
    { no: 2, name: "model_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "os_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "os_build", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "os_usernames", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "jamf_binary_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "external_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "os_build_supplemental", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "os_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceProfile {
    return new DeviceProfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceProfile {
    return new DeviceProfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceProfile {
    return new DeviceProfile().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceProfile | PlainMessage<DeviceProfile> | undefined, b: DeviceProfile | PlainMessage<DeviceProfile> | undefined): boolean {
    return proto3.util.equals(DeviceProfile, a, b);
  }
}

