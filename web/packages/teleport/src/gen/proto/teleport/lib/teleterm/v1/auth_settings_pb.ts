//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/lib/teleterm/v1/auth_settings.proto (package teleport.lib.teleterm.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * AuthSettings contains the form of authentication the auth server supports.
 *
 * @generated from message teleport.lib.teleterm.v1.AuthSettings
 */
export class AuthSettings extends Message<AuthSettings> {
  /**
   * local_auth_enabled is a flag that enables local authentication
   *
   * @generated from field: bool local_auth_enabled = 1;
   */
  localAuthEnabled = false;

  /**
   * second_factor is the type of second factor to use in authentication.
   *
   * @generated from field: string second_factor = 2;
   */
  secondFactor = "";

  /**
   * preferred_mfa is the prefered mfa for local logins
   *
   * @generated from field: string preferred_mfa = 3;
   */
  preferredMfa = "";

  /**
   * auth_providers contains a list of auth providers
   *
   * @generated from field: repeated teleport.lib.teleterm.v1.AuthProvider auth_providers = 4;
   */
  authProviders: AuthProvider[] = [];

  /**
   * has_message_of_the_day is a flag indicating that the cluster has MOTD
   * banner text that must be retrieved, displayed and acknowledged by
   * the user.
   *
   * @generated from field: bool has_message_of_the_day = 5;
   */
  hasMessageOfTheDay = false;

  /**
   * auth_type is the authentication type e.g. "local", "github", "saml", "oidc"
   *
   * @generated from field: string auth_type = 6;
   */
  authType = "";

  /**
   * allow_passwordless is true if passwordless logins are allowed.
   *
   * @generated from field: bool allow_passwordless = 7;
   */
  allowPasswordless = false;

  /**
   * local_connector_name is the name of the local connector.
   *
   * @generated from field: string local_connector_name = 8;
   */
  localConnectorName = "";

  constructor(data?: PartialMessage<AuthSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.lib.teleterm.v1.AuthSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "local_auth_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "second_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "preferred_mfa", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "auth_providers", kind: "message", T: AuthProvider, repeated: true },
    { no: 5, name: "has_message_of_the_day", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "auth_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "allow_passwordless", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "local_connector_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthSettings {
    return new AuthSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthSettings {
    return new AuthSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthSettings {
    return new AuthSettings().fromJsonString(jsonString, options);
  }

  static equals(a: AuthSettings | PlainMessage<AuthSettings> | undefined, b: AuthSettings | PlainMessage<AuthSettings> | undefined): boolean {
    return proto3.util.equals(AuthSettings, a, b);
  }
}

/**
 * AuthProvider describes a way of authentication that is supported by the server. Auth provider is
 * referred to as "auth connector" on the backend.
 *
 * @generated from message teleport.lib.teleterm.v1.AuthProvider
 */
export class AuthProvider extends Message<AuthProvider> {
  /**
   * Type is the auth provider type (github|oidc|etc)
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * Name is the internal name of the connector.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Display is the display name for the connector.
   *
   * @generated from field: string display_name = 3;
   */
  displayName = "";

  constructor(data?: PartialMessage<AuthProvider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.lib.teleterm.v1.AuthProvider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthProvider {
    return new AuthProvider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthProvider {
    return new AuthProvider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthProvider {
    return new AuthProvider().fromJsonString(jsonString, options);
  }

  static equals(a: AuthProvider | PlainMessage<AuthProvider> | undefined, b: AuthProvider | PlainMessage<AuthProvider> | undefined): boolean {
    return proto3.util.equals(AuthProvider, a, b);
  }
}

