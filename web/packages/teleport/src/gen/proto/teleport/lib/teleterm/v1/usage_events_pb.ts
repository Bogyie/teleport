//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/lib/teleterm/v1/usage_events.proto (package teleport.lib.teleterm.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { SubmitConnectEventRequest } from "../../../../prehog/v1alpha/connect_pb";

/**
 * @generated from message teleport.lib.teleterm.v1.ReportUsageEventRequest
 */
export class ReportUsageEventRequest extends Message<ReportUsageEventRequest> {
  /**
   * @generated from field: string auth_cluster_id = 1;
   */
  authClusterId = "";

  /**
   * @generated from field: prehog.v1alpha.SubmitConnectEventRequest prehog_req = 2;
   */
  prehogReq?: SubmitConnectEventRequest;

  constructor(data?: PartialMessage<ReportUsageEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.lib.teleterm.v1.ReportUsageEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auth_cluster_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "prehog_req", kind: "message", T: SubmitConnectEventRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportUsageEventRequest {
    return new ReportUsageEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportUsageEventRequest {
    return new ReportUsageEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportUsageEventRequest {
    return new ReportUsageEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReportUsageEventRequest | PlainMessage<ReportUsageEventRequest> | undefined, b: ReportUsageEventRequest | PlainMessage<ReportUsageEventRequest> | undefined): boolean {
    return proto3.util.equals(ReportUsageEventRequest, a, b);
  }
}

