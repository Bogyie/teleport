// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/userloginstate/v1/userloginstate.proto (package teleport.userloginstate.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ResourceHeader } from "../../header/v1/resourceheader_pb";
import { Trait } from "../../trait/v1/trait_pb";

/**
 * UserLoginState describes the ephemeral user login state for a user.
 *
 * @generated from message teleport.userloginstate.v1.UserLoginState
 */
export class UserLoginState extends Message<UserLoginState> {
  /**
   * header is the header for the resource.
   *
   * @generated from field: teleport.header.v1.ResourceHeader header = 1;
   */
  header?: ResourceHeader;

  /**
   * spec is the specification for the user login state.
   *
   * @generated from field: teleport.userloginstate.v1.Spec spec = 2;
   */
  spec?: Spec;

  constructor(data?: PartialMessage<UserLoginState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userloginstate.v1.UserLoginState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: ResourceHeader },
    { no: 2, name: "spec", kind: "message", T: Spec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserLoginState {
    return new UserLoginState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserLoginState {
    return new UserLoginState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserLoginState {
    return new UserLoginState().fromJsonString(jsonString, options);
  }

  static equals(a: UserLoginState | PlainMessage<UserLoginState> | undefined, b: UserLoginState | PlainMessage<UserLoginState> | undefined): boolean {
    return proto3.util.equals(UserLoginState, a, b);
  }
}

/**
 * Spec is the specification for a user login state.
 *
 * @generated from message teleport.userloginstate.v1.Spec
 */
export class Spec extends Message<Spec> {
  /**
   * roles are the user roles attached to the user.
   *
   * @generated from field: repeated string roles = 1;
   */
  roles: string[] = [];

  /**
   * traits are the traits attached to the user.
   *
   * @generated from field: repeated teleport.trait.v1.Trait traits = 2;
   */
  traits: Trait[] = [];

  /**
   * user_type is the type of user this state represents.
   *
   * @generated from field: string user_type = 3;
   */
  userType = "";

  /**
   * original_roles are the user roles that are part of the user's static definition. These roles are
   * not affected by access granted by access lists and are obtained prior to granting access list access.
   *
   * @generated from field: repeated string original_roles = 4;
   */
  originalRoles: string[] = [];

  /**
   * original_traits are the user traits that are part of the user's static definition. These traits are
   * not affected by access granted by access lists and are obtained prior to granting access list access.
   *
   * @generated from field: repeated teleport.trait.v1.Trait original_traits = 5;
   */
  originalTraits: Trait[] = [];

  constructor(data?: PartialMessage<Spec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userloginstate.v1.Spec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "traits", kind: "message", T: Trait, repeated: true },
    { no: 3, name: "user_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "original_roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "original_traits", kind: "message", T: Trait, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Spec {
    return new Spec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Spec {
    return new Spec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Spec {
    return new Spec().fromJsonString(jsonString, options);
  }

  static equals(a: Spec | PlainMessage<Spec> | undefined, b: Spec | PlainMessage<Spec> | undefined): boolean {
    return proto3.util.equals(Spec, a, b);
  }
}

