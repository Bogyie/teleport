// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/dbobject/v1/dbobject.proto (package teleport.dbobject.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Metadata } from "../../header/v1/metadata_pb";

/**
 * DatabaseObject represents a database object that can be imported into Teleport.
 * An example of such object would be a database table, along with various metadata.
 * For rationale behind this type, see the RFD 151.
 *
 * @generated from message teleport.dbobject.v1.DatabaseObject
 */
export class DatabaseObject extends Message<DatabaseObject> {
  /**
   * The kind of resource represented.
   *
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * Mandatory field for all resources. Not populated for this resource type.
   *
   * @generated from field: string sub_kind = 2;
   */
  subKind = "";

  /**
   * The version of the resource being represented.
   *
   * @generated from field: string version = 3;
   */
  version = "";

  /**
   * Common metadata that all resources share.
   *
   * @generated from field: teleport.header.v1.Metadata metadata = 4;
   */
  metadata?: Metadata;

  /**
   * Specification for the database object.
   *
   * @generated from field: teleport.dbobject.v1.DatabaseObjectSpec spec = 5;
   */
  spec?: DatabaseObjectSpec;

  constructor(data?: PartialMessage<DatabaseObject>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.dbobject.v1.DatabaseObject";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sub_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata", kind: "message", T: Metadata },
    { no: 5, name: "spec", kind: "message", T: DatabaseObjectSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatabaseObject {
    return new DatabaseObject().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatabaseObject {
    return new DatabaseObject().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatabaseObject {
    return new DatabaseObject().fromJsonString(jsonString, options);
  }

  static equals(a: DatabaseObject | PlainMessage<DatabaseObject> | undefined, b: DatabaseObject | PlainMessage<DatabaseObject> | undefined): boolean {
    return proto3.util.equals(DatabaseObject, a, b);
  }
}

/**
 * DatabaseObjectSpec is the spec for the database object.
 *
 * @generated from message teleport.dbobject.v1.DatabaseObjectSpec
 */
export class DatabaseObjectSpec extends Message<DatabaseObjectSpec> {
  /**
   * The protocol used to connect to the database (e.g., postgres). Required.
   *
   * @generated from field: string protocol = 1;
   */
  protocol = "";

  /**
   * The name of the database service that this object belongs to. Required.
   *
   * @generated from field: string database_service_name = 2;
   */
  databaseServiceName = "";

  /**
   * The kind of database object (e.g., table, view). Required.
   *
   * @generated from field: string object_kind = 3;
   */
  objectKind = "";

  /**
   * The database containing the object. Optional.
   *
   * @generated from field: string database = 4;
   */
  database = "";

  /**
   * The schema containing the object (if applicable). Optional.
   *
   * @generated from field: string schema = 5;
   */
  schema = "";

  /**
   * The name of the object. Required.
   *
   * @generated from field: string name = 6;
   */
  name = "";

  constructor(data?: PartialMessage<DatabaseObjectSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.dbobject.v1.DatabaseObjectSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "database_service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "object_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatabaseObjectSpec {
    return new DatabaseObjectSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatabaseObjectSpec {
    return new DatabaseObjectSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatabaseObjectSpec {
    return new DatabaseObjectSpec().fromJsonString(jsonString, options);
  }

  static equals(a: DatabaseObjectSpec | PlainMessage<DatabaseObjectSpec> | undefined, b: DatabaseObjectSpec | PlainMessage<DatabaseObjectSpec> | undefined): boolean {
    return proto3.util.equals(DatabaseObjectSpec, a, b);
  }
}

