// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/machineid/v1/bot.proto (package teleport.machineid.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Metadata } from "../../header/v1/metadata_pb";

/**
 * A Bot is a Teleport identity intended to be used by Machines. The Bot
 * resource defines a Bot and configures its properties.
 *
 * @generated from message teleport.machineid.v1.Bot
 */
export class Bot extends Message<Bot> {
  /**
   * The kind of resource represented.
   *
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * Differentiates variations of the same kind. All resources should
   * contain one, even if it is never populated.
   *
   * @generated from field: string sub_kind = 2;
   */
  subKind = "";

  /**
   * The version of the resource being represented.
   *
   * @generated from field: string version = 3;
   */
  version = "";

  /**
   * Common metadata that all resources share.
   *
   * @generated from field: teleport.header.v1.Metadata metadata = 4;
   */
  metadata?: Metadata;

  /**
   * The configured properties of a Bot.
   *
   * @generated from field: teleport.machineid.v1.BotSpec spec = 5;
   */
  spec?: BotSpec;

  /**
   * Fields that are set by the server as results of operations. These should
   * not be modified by users.
   *
   * @generated from field: teleport.machineid.v1.BotStatus status = 6;
   */
  status?: BotStatus;

  constructor(data?: PartialMessage<Bot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.Bot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sub_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata", kind: "message", T: Metadata },
    { no: 5, name: "spec", kind: "message", T: BotSpec },
    { no: 6, name: "status", kind: "message", T: BotStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bot {
    return new Bot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bot {
    return new Bot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bot {
    return new Bot().fromJsonString(jsonString, options);
  }

  static equals(a: Bot | PlainMessage<Bot> | undefined, b: Bot | PlainMessage<Bot> | undefined): boolean {
    return proto3.util.equals(Bot, a, b);
  }
}

/**
 * Trait is an individual trait that will be applied to the bot user.
 *
 * @generated from message teleport.machineid.v1.Trait
 */
export class Trait extends Message<Trait> {
  /**
   * The name of the trait. This is what allows the trait to be queried in
   * role templates.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The values associated with the named trait.
   *
   * @generated from field: repeated string values = 2;
   */
  values: string[] = [];

  constructor(data?: PartialMessage<Trait>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.Trait";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trait {
    return new Trait().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trait {
    return new Trait().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trait {
    return new Trait().fromJsonString(jsonString, options);
  }

  static equals(a: Trait | PlainMessage<Trait> | undefined, b: Trait | PlainMessage<Trait> | undefined): boolean {
    return proto3.util.equals(Trait, a, b);
  }
}

/**
 * The configured properties of a Bot.
 *
 * @generated from message teleport.machineid.v1.BotSpec
 */
export class BotSpec extends Message<BotSpec> {
  /**
   * The roles that the bot should be able to impersonate.
   *
   * @generated from field: repeated string roles = 1;
   */
  roles: string[] = [];

  /**
   * The traits that will be associated with the bot for the purposes of role
   * templating.
   *
   * Where multiple specified with the same name, these will be merged by the
   * server.
   *
   * @generated from field: repeated teleport.machineid.v1.Trait traits = 2;
   */
  traits: Trait[] = [];

  constructor(data?: PartialMessage<BotSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.BotSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "traits", kind: "message", T: Trait, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BotSpec {
    return new BotSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BotSpec {
    return new BotSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BotSpec {
    return new BotSpec().fromJsonString(jsonString, options);
  }

  static equals(a: BotSpec | PlainMessage<BotSpec> | undefined, b: BotSpec | PlainMessage<BotSpec> | undefined): boolean {
    return proto3.util.equals(BotSpec, a, b);
  }
}

/**
 * Fields that are set by the server as results of operations. These should not
 * be modified by users.
 *
 * @generated from message teleport.machineid.v1.BotStatus
 */
export class BotStatus extends Message<BotStatus> {
  /**
   * The name of the user associated with the bot.
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * The name of the role associated with the bot.
   *
   * @generated from field: string role_name = 3;
   */
  roleName = "";

  constructor(data?: PartialMessage<BotStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.BotStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BotStatus {
    return new BotStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BotStatus {
    return new BotStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BotStatus {
    return new BotStatus().fromJsonString(jsonString, options);
  }

  static equals(a: BotStatus | PlainMessage<BotStatus> | undefined, b: BotStatus | PlainMessage<BotStatus> | undefined): boolean {
    return proto3.util.equals(BotStatus, a, b);
  }
}

