// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/machineid/v1/federation_service.proto (package teleport.machineid.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { SPIFFEFederation } from "./federation_pb";

/**
 * GetSPIFFEFederationRequest is the request message for GetSPIFFEFederation.
 *
 * @generated from message teleport.machineid.v1.GetSPIFFEFederationRequest
 */
export class GetSPIFFEFederationRequest extends Message<GetSPIFFEFederationRequest> {
  /**
   * The name of the SPIFFEFederation resource to fetch.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetSPIFFEFederationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.GetSPIFFEFederationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSPIFFEFederationRequest {
    return new GetSPIFFEFederationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSPIFFEFederationRequest {
    return new GetSPIFFEFederationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSPIFFEFederationRequest {
    return new GetSPIFFEFederationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSPIFFEFederationRequest | PlainMessage<GetSPIFFEFederationRequest> | undefined, b: GetSPIFFEFederationRequest | PlainMessage<GetSPIFFEFederationRequest> | undefined): boolean {
    return proto3.util.equals(GetSPIFFEFederationRequest, a, b);
  }
}

/**
 * Request for ListSPIFFEFederations.
 *
 * Follows the pagination semantics of
 * https://cloud.google.com/apis/design/standard_methods#list
 *
 * @generated from message teleport.machineid.v1.ListSPIFFEFederationsRequest
 */
export class ListSPIFFEFederationsRequest extends Message<ListSPIFFEFederationsRequest> {
  /**
   * The maximum number of items to return.
   * The server may impose a different page size at its discretion.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * The page_token value returned from a previous ListSPIFFEFederations
   * request, if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListSPIFFEFederationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.ListSPIFFEFederationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSPIFFEFederationsRequest {
    return new ListSPIFFEFederationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSPIFFEFederationsRequest {
    return new ListSPIFFEFederationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSPIFFEFederationsRequest {
    return new ListSPIFFEFederationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSPIFFEFederationsRequest | PlainMessage<ListSPIFFEFederationsRequest> | undefined, b: ListSPIFFEFederationsRequest | PlainMessage<ListSPIFFEFederationsRequest> | undefined): boolean {
    return proto3.util.equals(ListSPIFFEFederationsRequest, a, b);
  }
}

/**
 * ListSPIFFEFederationsResponse is the response message for ListSPIFFEFederations.
 *
 * @generated from message teleport.machineid.v1.ListSPIFFEFederationsResponse
 */
export class ListSPIFFEFederationsResponse extends Message<ListSPIFFEFederationsResponse> {
  /**
   * @generated from field: repeated teleport.machineid.v1.SPIFFEFederation spiffe_federations = 1;
   */
  spiffeFederations: SPIFFEFederation[] = [];

  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results exist.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListSPIFFEFederationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.ListSPIFFEFederationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spiffe_federations", kind: "message", T: SPIFFEFederation, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSPIFFEFederationsResponse {
    return new ListSPIFFEFederationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSPIFFEFederationsResponse {
    return new ListSPIFFEFederationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSPIFFEFederationsResponse {
    return new ListSPIFFEFederationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSPIFFEFederationsResponse | PlainMessage<ListSPIFFEFederationsResponse> | undefined, b: ListSPIFFEFederationsResponse | PlainMessage<ListSPIFFEFederationsResponse> | undefined): boolean {
    return proto3.util.equals(ListSPIFFEFederationsResponse, a, b);
  }
}

/**
 * DeleteSPIFFEFederationRequest is the request message for DeleteSPIFFEFederation.
 *
 * @generated from message teleport.machineid.v1.DeleteSPIFFEFederationRequest
 */
export class DeleteSPIFFEFederationRequest extends Message<DeleteSPIFFEFederationRequest> {
  /**
   * The name of the SPIFFEFederation resource to delete.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteSPIFFEFederationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.DeleteSPIFFEFederationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSPIFFEFederationRequest {
    return new DeleteSPIFFEFederationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSPIFFEFederationRequest {
    return new DeleteSPIFFEFederationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSPIFFEFederationRequest {
    return new DeleteSPIFFEFederationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSPIFFEFederationRequest | PlainMessage<DeleteSPIFFEFederationRequest> | undefined, b: DeleteSPIFFEFederationRequest | PlainMessage<DeleteSPIFFEFederationRequest> | undefined): boolean {
    return proto3.util.equals(DeleteSPIFFEFederationRequest, a, b);
  }
}

/**
 * CreateSPIFFEFederationRequest is the request message for CreateSPIFFEFederation.
 *
 * @generated from message teleport.machineid.v1.CreateSPIFFEFederationRequest
 */
export class CreateSPIFFEFederationRequest extends Message<CreateSPIFFEFederationRequest> {
  /**
   * The SPIFFEFederation resource to create.
   *
   * @generated from field: teleport.machineid.v1.SPIFFEFederation spiffe_federation = 1;
   */
  spiffeFederation?: SPIFFEFederation;

  constructor(data?: PartialMessage<CreateSPIFFEFederationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.machineid.v1.CreateSPIFFEFederationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spiffe_federation", kind: "message", T: SPIFFEFederation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSPIFFEFederationRequest {
    return new CreateSPIFFEFederationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSPIFFEFederationRequest {
    return new CreateSPIFFEFederationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSPIFFEFederationRequest {
    return new CreateSPIFFEFederationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSPIFFEFederationRequest | PlainMessage<CreateSPIFFEFederationRequest> | undefined, b: CreateSPIFFEFederationRequest | PlainMessage<CreateSPIFFEFederationRequest> | undefined): boolean {
    return proto3.util.equals(CreateSPIFFEFederationRequest, a, b);
  }
}

