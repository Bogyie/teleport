// Copyright 2024 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/userprovisioning/v2/statichostuser.proto (package teleport.userprovisioning.v2, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Metadata } from "../../header/v1/metadata_pb";
import { Label } from "../../label/v1/label_pb";

/**
 * StaticHostUser is a resource that represents host users that should be
 * created on matching nodes.
 *
 * @generated from message teleport.userprovisioning.v2.StaticHostUser
 */
export class StaticHostUser extends Message<StaticHostUser> {
  /**
   * kind is a resource kind.
   *
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * sub_kind is an optional resource sub kind, used in some resources.
   *
   * @generated from field: string sub_kind = 2;
   */
  subKind = "";

  /**
   * version is the resource version. It must be specified.
   * Supported values are: `v2`.
   *
   * @generated from field: string version = 3;
   */
  version = "";

  /**
   * metadata is resource metadata.
   *
   * @generated from field: teleport.header.v1.Metadata metadata = 4;
   */
  metadata?: Metadata;

  /**
   * spec is the static host user spec.
   *
   * @generated from field: teleport.userprovisioning.v2.StaticHostUserSpec spec = 5;
   */
  spec?: StaticHostUserSpec;

  constructor(data?: PartialMessage<StaticHostUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userprovisioning.v2.StaticHostUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sub_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata", kind: "message", T: Metadata },
    { no: 5, name: "spec", kind: "message", T: StaticHostUserSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StaticHostUser {
    return new StaticHostUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StaticHostUser {
    return new StaticHostUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StaticHostUser {
    return new StaticHostUser().fromJsonString(jsonString, options);
  }

  static equals(a: StaticHostUser | PlainMessage<StaticHostUser> | undefined, b: StaticHostUser | PlainMessage<StaticHostUser> | undefined): boolean {
    return proto3.util.equals(StaticHostUser, a, b);
  }
}

/**
 * Matcher is a matcher for nodes to add the user to.
 *
 * @generated from message teleport.userprovisioning.v2.Matcher
 */
export class Matcher extends Message<Matcher> {
  /**
   * node_labels is a map of node labels that will create a user from this
   * resource.
   *
   * @generated from field: repeated teleport.label.v1.Label node_labels = 1;
   */
  nodeLabels: Label[] = [];

  /**
   * node_labels_expression is a predicate expression to create a user from
   * this resource.
   *
   * @generated from field: string node_labels_expression = 2;
   */
  nodeLabelsExpression = "";

  /**
   * groups is a list of additional groups to add the user to.
   *
   * @generated from field: repeated string groups = 3;
   */
  groups: string[] = [];

  /**
   * sudoers is a list of sudoer entries to add.
   *
   * @generated from field: repeated string sudoers = 4;
   */
  sudoers: string[] = [];

  /**
   * uid is the new user's uid.
   *
   * @generated from field: int64 uid = 5;
   */
  uid = protoInt64.zero;

  /**
   * gid is the new user's gid.
   *
   * @generated from field: int64 gid = 6;
   */
  gid = protoInt64.zero;

  /**
   * default_shell is the new user's default shell
   *
   * @generated from field: string default_shell = 7;
   */
  defaultShell = "";

  /**
   * take_ownership_if_user_exists will take ownership of existing, unmanaged users
   *
   * @generated from field: bool take_ownership_if_user_exists = 8;
   */
  takeOwnershipIfUserExists = false;

  constructor(data?: PartialMessage<Matcher>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userprovisioning.v2.Matcher";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node_labels", kind: "message", T: Label, repeated: true },
    { no: 2, name: "node_labels_expression", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "groups", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "sudoers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "uid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "gid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "default_shell", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "take_ownership_if_user_exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Matcher {
    return new Matcher().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Matcher {
    return new Matcher().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Matcher {
    return new Matcher().fromJsonString(jsonString, options);
  }

  static equals(a: Matcher | PlainMessage<Matcher> | undefined, b: Matcher | PlainMessage<Matcher> | undefined): boolean {
    return proto3.util.equals(Matcher, a, b);
  }
}

/**
 * StaticHostUserSpec is the static host user spec.
 *
 * @generated from message teleport.userprovisioning.v2.StaticHostUserSpec
 */
export class StaticHostUserSpec extends Message<StaticHostUserSpec> {
  /**
   * @generated from field: repeated teleport.userprovisioning.v2.Matcher matchers = 1;
   */
  matchers: Matcher[] = [];

  constructor(data?: PartialMessage<StaticHostUserSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userprovisioning.v2.StaticHostUserSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "matchers", kind: "message", T: Matcher, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StaticHostUserSpec {
    return new StaticHostUserSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StaticHostUserSpec {
    return new StaticHostUserSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StaticHostUserSpec {
    return new StaticHostUserSpec().fromJsonString(jsonString, options);
  }

  static equals(a: StaticHostUserSpec | PlainMessage<StaticHostUserSpec> | undefined, b: StaticHostUserSpec | PlainMessage<StaticHostUserSpec> | undefined): boolean {
    return proto3.util.equals(StaticHostUserSpec, a, b);
  }
}

