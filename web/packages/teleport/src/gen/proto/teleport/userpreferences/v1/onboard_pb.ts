// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/userpreferences/v1/onboard.proto (package teleport.userpreferences.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Resources are the Resource options in the onboarding questionnaire
 *
 * @generated from enum teleport.userpreferences.v1.Resource
 */
export enum Resource {
  /**
   * @generated from enum value: RESOURCE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RESOURCE_WINDOWS_DESKTOPS = 1;
   */
  WINDOWS_DESKTOPS = 1,

  /**
   * @generated from enum value: RESOURCE_SERVER_SSH = 2;
   */
  SERVER_SSH = 2,

  /**
   * @generated from enum value: RESOURCE_DATABASES = 3;
   */
  DATABASES = 3,

  /**
   * @generated from enum value: RESOURCE_KUBERNETES = 4;
   */
  KUBERNETES = 4,

  /**
   * @generated from enum value: RESOURCE_WEB_APPLICATIONS = 5;
   */
  WEB_APPLICATIONS = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(Resource)
proto3.util.setEnumType(Resource, "teleport.userpreferences.v1.Resource", [
  { no: 0, name: "RESOURCE_UNSPECIFIED" },
  { no: 1, name: "RESOURCE_WINDOWS_DESKTOPS" },
  { no: 2, name: "RESOURCE_SERVER_SSH" },
  { no: 3, name: "RESOURCE_DATABASES" },
  { no: 4, name: "RESOURCE_KUBERNETES" },
  { no: 5, name: "RESOURCE_WEB_APPLICATIONS" },
]);

/**
 * MarketingParams are the parameters associated with a user via marketing campaign at the time of sign up.
 * They contain both traditional Urchin Tracking Module (UTM) parameters as well as custom parameters.
 *
 * @generated from message teleport.userpreferences.v1.MarketingParams
 */
export class MarketingParams extends Message<MarketingParams> {
  /**
   * campaign is the UTM campaign parameter which identifies a specific product promotion
   *
   * @generated from field: string campaign = 1;
   */
  campaign = "";

  /**
   * source is the UTM source parameter which identifies which site sent the traffic
   *
   * @generated from field: string source = 2;
   */
  source = "";

  /**
   * medium is the UTM medium parameter which identifies what type of link was used
   *
   * @generated from field: string medium = 3;
   */
  medium = "";

  /**
   * intent is the internal query param, which identifies any additional marketing intentions
   * via internally set and directed parameters.
   *
   * @generated from field: string intent = 4;
   */
  intent = "";

  constructor(data?: PartialMessage<MarketingParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userpreferences.v1.MarketingParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "campaign", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "medium", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "intent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MarketingParams {
    return new MarketingParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MarketingParams {
    return new MarketingParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MarketingParams {
    return new MarketingParams().fromJsonString(jsonString, options);
  }

  static equals(a: MarketingParams | PlainMessage<MarketingParams> | undefined, b: MarketingParams | PlainMessage<MarketingParams> | undefined): boolean {
    return proto3.util.equals(MarketingParams, a, b);
  }
}

/**
 * OnboardUserPreferences is the user preferences selected during onboarding.
 *
 * @generated from message teleport.userpreferences.v1.OnboardUserPreferences
 */
export class OnboardUserPreferences extends Message<OnboardUserPreferences> {
  /**
   * preferredResources is an array of the resources a user selected during their onboarding questionnaire.
   *
   * @generated from field: repeated teleport.userpreferences.v1.Resource preferred_resources = 1;
   */
  preferredResources: Resource[] = [];

  /**
   * marketingParams are the parameters associated with a user via marketing campaign at the time of sign up
   *
   * @generated from field: teleport.userpreferences.v1.MarketingParams marketing_params = 2;
   */
  marketingParams?: MarketingParams;

  constructor(data?: PartialMessage<OnboardUserPreferences>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userpreferences.v1.OnboardUserPreferences";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preferred_resources", kind: "enum", T: proto3.getEnumType(Resource), repeated: true },
    { no: 2, name: "marketing_params", kind: "message", T: MarketingParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OnboardUserPreferences {
    return new OnboardUserPreferences().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OnboardUserPreferences {
    return new OnboardUserPreferences().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OnboardUserPreferences {
    return new OnboardUserPreferences().fromJsonString(jsonString, options);
  }

  static equals(a: OnboardUserPreferences | PlainMessage<OnboardUserPreferences> | undefined, b: OnboardUserPreferences | PlainMessage<OnboardUserPreferences> | undefined): boolean {
    return proto3.util.equals(OnboardUserPreferences, a, b);
  }
}

