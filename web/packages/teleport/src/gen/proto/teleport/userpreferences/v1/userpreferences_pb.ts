// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/userpreferences/v1/userpreferences.proto (package teleport.userpreferences.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Theme } from "./theme_pb";
import { OnboardUserPreferences } from "./onboard_pb";
import { ClusterUserPreferences } from "./cluster_preferences_pb";
import { UnifiedResourcePreferences } from "./unified_resource_preferences_pb";
import { AccessGraphUserPreferences } from "./access_graph_pb";

/**
 * UserPreferences is a collection of different user changeable preferences for the frontend.
 *
 * @generated from message teleport.userpreferences.v1.UserPreferences
 */
export class UserPreferences extends Message<UserPreferences> {
  /**
   * theme is the theme of the frontend.
   *
   * @generated from field: teleport.userpreferences.v1.Theme theme = 2;
   */
  theme = Theme.UNSPECIFIED;

  /**
   * onboard is the preferences from the onboarding questionnaire.
   *
   * @generated from field: teleport.userpreferences.v1.OnboardUserPreferences onboard = 3;
   */
  onboard?: OnboardUserPreferences;

  /**
   * cluster_preferences are user preferences saved per cluster.
   *
   * @generated from field: teleport.userpreferences.v1.ClusterUserPreferences cluster_preferences = 4;
   */
  clusterPreferences?: ClusterUserPreferences;

  /**
   * unified_resource_preferences are user preferences saved for the Unified Resource web UI
   *
   * @generated from field: teleport.userpreferences.v1.UnifiedResourcePreferences unified_resource_preferences = 5;
   */
  unifiedResourcePreferences?: UnifiedResourcePreferences;

  /**
   * access_graph is the preferences for Access Graph.
   *
   * @generated from field: teleport.userpreferences.v1.AccessGraphUserPreferences access_graph = 6;
   */
  accessGraph?: AccessGraphUserPreferences;

  constructor(data?: PartialMessage<UserPreferences>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userpreferences.v1.UserPreferences";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "theme", kind: "enum", T: proto3.getEnumType(Theme) },
    { no: 3, name: "onboard", kind: "message", T: OnboardUserPreferences },
    { no: 4, name: "cluster_preferences", kind: "message", T: ClusterUserPreferences },
    { no: 5, name: "unified_resource_preferences", kind: "message", T: UnifiedResourcePreferences },
    { no: 6, name: "access_graph", kind: "message", T: AccessGraphUserPreferences },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserPreferences {
    return new UserPreferences().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserPreferences {
    return new UserPreferences().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserPreferences {
    return new UserPreferences().fromJsonString(jsonString, options);
  }

  static equals(a: UserPreferences | PlainMessage<UserPreferences> | undefined, b: UserPreferences | PlainMessage<UserPreferences> | undefined): boolean {
    return proto3.util.equals(UserPreferences, a, b);
  }
}

/**
 * GetUserPreferencesRequest is a request to get the user preferences.
 *
 * @generated from message teleport.userpreferences.v1.GetUserPreferencesRequest
 */
export class GetUserPreferencesRequest extends Message<GetUserPreferencesRequest> {
  constructor(data?: PartialMessage<GetUserPreferencesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userpreferences.v1.GetUserPreferencesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserPreferencesRequest {
    return new GetUserPreferencesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserPreferencesRequest {
    return new GetUserPreferencesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserPreferencesRequest {
    return new GetUserPreferencesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserPreferencesRequest | PlainMessage<GetUserPreferencesRequest> | undefined, b: GetUserPreferencesRequest | PlainMessage<GetUserPreferencesRequest> | undefined): boolean {
    return proto3.util.equals(GetUserPreferencesRequest, a, b);
  }
}

/**
 * GetUserPreferencesResponse is a response to get the user preferences.
 *
 * @generated from message teleport.userpreferences.v1.GetUserPreferencesResponse
 */
export class GetUserPreferencesResponse extends Message<GetUserPreferencesResponse> {
  /**
   * preferences is the user preferences.
   *
   * @generated from field: teleport.userpreferences.v1.UserPreferences preferences = 1;
   */
  preferences?: UserPreferences;

  constructor(data?: PartialMessage<GetUserPreferencesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userpreferences.v1.GetUserPreferencesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preferences", kind: "message", T: UserPreferences },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserPreferencesResponse {
    return new GetUserPreferencesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserPreferencesResponse {
    return new GetUserPreferencesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserPreferencesResponse {
    return new GetUserPreferencesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserPreferencesResponse | PlainMessage<GetUserPreferencesResponse> | undefined, b: GetUserPreferencesResponse | PlainMessage<GetUserPreferencesResponse> | undefined): boolean {
    return proto3.util.equals(GetUserPreferencesResponse, a, b);
  }
}

/**
 * UpsertUserPreferencesRequest is a request to create or update the user preferences.
 *
 * @generated from message teleport.userpreferences.v1.UpsertUserPreferencesRequest
 */
export class UpsertUserPreferencesRequest extends Message<UpsertUserPreferencesRequest> {
  /**
   * preferences is the new user preferences to set.
   *
   * @generated from field: teleport.userpreferences.v1.UserPreferences preferences = 1;
   */
  preferences?: UserPreferences;

  constructor(data?: PartialMessage<UpsertUserPreferencesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.userpreferences.v1.UpsertUserPreferencesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preferences", kind: "message", T: UserPreferences },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertUserPreferencesRequest {
    return new UpsertUserPreferencesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertUserPreferencesRequest {
    return new UpsertUserPreferencesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertUserPreferencesRequest {
    return new UpsertUserPreferencesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertUserPreferencesRequest | PlainMessage<UpsertUserPreferencesRequest> | undefined, b: UpsertUserPreferencesRequest | PlainMessage<UpsertUserPreferencesRequest> | undefined): boolean {
    return proto3.util.equals(UpsertUserPreferencesRequest, a, b);
  }
}

