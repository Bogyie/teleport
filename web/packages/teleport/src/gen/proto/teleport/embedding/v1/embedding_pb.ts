// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/embedding/v1/embedding.proto (package teleport.embedding.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Embedding contains a Teleport resource embedding. Embeddings are small semantic
 * representations of larger and more complex data. Embeddings can be compared,
 * the smaller the distance between two vectors, the closer the concepts are.
 * Teleport Assist embeds resources to perform semantic search.
 *
 * @generated from message teleport.embedding.v1.Embedding
 */
export class Embedding extends Message<Embedding> {
  /**
   * EmbeddedKind is the kind of the embedded resource.
   *
   * @generated from field: string embedded_kind = 1;
   */
  embeddedKind = "";

  /**
   * EmbeddedId is the ID of the embedded resource.
   *
   * @generated from field: string embedded_id = 2;
   */
  embeddedId = "";

  /**
   * EmbeddedHash is the hash of the embedded resource after serialization.
   * This helps checking if the resource has changed and needs a new embedding.
   *
   * @generated from field: bytes embedded_hash = 3;
   */
  embeddedHash = new Uint8Array(0);

  /**
   * Vector is the embedding itself, as provided by the model.
   *
   * @generated from field: repeated double vector = 4;
   */
  vector: number[] = [];

  constructor(data?: PartialMessage<Embedding>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.embedding.v1.Embedding";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "embedded_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "embedded_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "embedded_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "vector", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Embedding {
    return new Embedding().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Embedding {
    return new Embedding().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Embedding {
    return new Embedding().fromJsonString(jsonString, options);
  }

  static equals(a: Embedding | PlainMessage<Embedding> | undefined, b: Embedding | PlainMessage<Embedding> | undefined): boolean {
    return proto3.util.equals(Embedding, a, b);
  }
}

