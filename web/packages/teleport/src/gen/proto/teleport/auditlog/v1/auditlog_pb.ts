// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/auditlog/v1/auditlog.proto (package teleport.auditlog.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Struct, Timestamp } from "@bufbuild/protobuf";

/**
 * Order controls the ordering of objects returned based on the timestamp field.
 *
 * @generated from enum teleport.auditlog.v1.Order
 */
export enum Order {
  /**
   * @generated from enum value: ORDER_DESCENDING_UNSPECIFIED = 0;
   */
  DESCENDING_UNSPECIFIED = 0,

  /**
   * @generated from enum value: ORDER_ASCENDING = 1;
   */
  ASCENDING = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Order)
proto3.util.setEnumType(Order, "teleport.auditlog.v1.Order", [
  { no: 0, name: "ORDER_DESCENDING_UNSPECIFIED" },
  { no: 1, name: "ORDER_ASCENDING" },
]);

/**
 * StreamUnstructuredSessionEventsRequest is a request containing data needed to fetch a session recording.
 *
 * @generated from message teleport.auditlog.v1.StreamUnstructuredSessionEventsRequest
 */
export class StreamUnstructuredSessionEventsRequest extends Message<StreamUnstructuredSessionEventsRequest> {
  /**
   * session_id is the ID for a given session in an UUIDv4 format.
   *
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  /**
   * start_index is the index of the event to resume the stream after.
   * A start_index of 0 creates a new stream.
   *
   * @generated from field: int32 start_index = 2;
   */
  startIndex = 0;

  constructor(data?: PartialMessage<StreamUnstructuredSessionEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.auditlog.v1.StreamUnstructuredSessionEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamUnstructuredSessionEventsRequest {
    return new StreamUnstructuredSessionEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamUnstructuredSessionEventsRequest {
    return new StreamUnstructuredSessionEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamUnstructuredSessionEventsRequest {
    return new StreamUnstructuredSessionEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamUnstructuredSessionEventsRequest | PlainMessage<StreamUnstructuredSessionEventsRequest> | undefined, b: StreamUnstructuredSessionEventsRequest | PlainMessage<StreamUnstructuredSessionEventsRequest> | undefined): boolean {
    return proto3.util.equals(StreamUnstructuredSessionEventsRequest, a, b);
  }
}

/**
 * GetUnstructuredEventsRequest is a request with the needed data to fetch events.
 *
 * @generated from message teleport.auditlog.v1.GetUnstructuredEventsRequest
 */
export class GetUnstructuredEventsRequest extends Message<GetUnstructuredEventsRequest> {
  /**
   * namespace, if not set, defaults to 'default'.
   *
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * start_date is the oldest date of returned events.
   *
   * @generated from field: google.protobuf.Timestamp start_date = 2;
   */
  startDate?: Timestamp;

  /**
   * end_date is the newest date of returned events.
   *
   * @generated from field: google.protobuf.Timestamp end_date = 3;
   */
  endDate?: Timestamp;

  /**
   * event_types is optional, if not set, returns all events.
   *
   * @generated from field: repeated string event_types = 4;
   */
  eventTypes: string[] = [];

  /**
   * limit is the maximum amount of events returned.
   *
   * @generated from field: int32 limit = 5;
   */
  limit = 0;

  /**
   * start_key is used to resume a query in order to enable pagination.
   * If the previous response had LastKey set then this should be
   * set to its value. Otherwise leave empty.
   *
   * @generated from field: string start_key = 6;
   */
  startKey = "";

  /**
   * order specifies an ascending or descending order of events.
   * A value of 0 means a descending order and a value of 1 means an ascending order.
   *
   * @generated from field: teleport.auditlog.v1.Order order = 7;
   */
  order = Order.DESCENDING_UNSPECIFIED;

  constructor(data?: PartialMessage<GetUnstructuredEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.auditlog.v1.GetUnstructuredEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_date", kind: "message", T: Timestamp },
    { no: 3, name: "end_date", kind: "message", T: Timestamp },
    { no: 4, name: "event_types", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "start_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "order", kind: "enum", T: proto3.getEnumType(Order) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUnstructuredEventsRequest {
    return new GetUnstructuredEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUnstructuredEventsRequest {
    return new GetUnstructuredEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUnstructuredEventsRequest {
    return new GetUnstructuredEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUnstructuredEventsRequest | PlainMessage<GetUnstructuredEventsRequest> | undefined, b: GetUnstructuredEventsRequest | PlainMessage<GetUnstructuredEventsRequest> | undefined): boolean {
    return proto3.util.equals(GetUnstructuredEventsRequest, a, b);
  }
}

/**
 * EventsUnstructured represents a list of events.AuditEvent in an unstructured format.
 *
 * @generated from message teleport.auditlog.v1.EventsUnstructured
 */
export class EventsUnstructured extends Message<EventsUnstructured> {
  /**
   * items is a list of unstructured formatted audit events.
   *
   * @generated from field: repeated teleport.auditlog.v1.EventUnstructured items = 1;
   */
  items: EventUnstructured[] = [];

  /**
   * last_key is the key of the last event if the returned set did not contain all events found i.e limit <
   * actual amount. this is the key clients can supply in another API request to continue fetching
   * events from the previous last position.
   *
   * @generated from field: string last_key = 2;
   */
  lastKey = "";

  constructor(data?: PartialMessage<EventsUnstructured>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.auditlog.v1.EventsUnstructured";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: EventUnstructured, repeated: true },
    { no: 2, name: "last_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventsUnstructured {
    return new EventsUnstructured().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventsUnstructured {
    return new EventsUnstructured().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventsUnstructured {
    return new EventsUnstructured().fromJsonString(jsonString, options);
  }

  static equals(a: EventsUnstructured | PlainMessage<EventsUnstructured> | undefined, b: EventsUnstructured | PlainMessage<EventsUnstructured> | undefined): boolean {
    return proto3.util.equals(EventsUnstructured, a, b);
  }
}

/**
 * ExportUnstructuredEventsRequest is a request with the needed data to export events.
 *
 * @generated from message teleport.auditlog.v1.ExportUnstructuredEventsRequest
 */
export class ExportUnstructuredEventsRequest extends Message<ExportUnstructuredEventsRequest> {
  /**
   * date is the target date from which to export events. note that only the UTC date of the
   * timestamp value is used. use of a specific local timestamp may produce confusing results.
   *
   * @generated from field: google.protobuf.Timestamp date = 1;
   */
  date?: Timestamp;

  /**
   * chunk is the chunk to export events from.
   *
   * @generated from field: string chunk = 2;
   */
  chunk = "";

  /**
   * cursor is an optional mechanism to resume interrupted streams for a given chunk.
   *
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<ExportUnstructuredEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.auditlog.v1.ExportUnstructuredEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "message", T: Timestamp },
    { no: 2, name: "chunk", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportUnstructuredEventsRequest {
    return new ExportUnstructuredEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportUnstructuredEventsRequest {
    return new ExportUnstructuredEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportUnstructuredEventsRequest {
    return new ExportUnstructuredEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExportUnstructuredEventsRequest | PlainMessage<ExportUnstructuredEventsRequest> | undefined, b: ExportUnstructuredEventsRequest | PlainMessage<ExportUnstructuredEventsRequest> | undefined): boolean {
    return proto3.util.equals(ExportUnstructuredEventsRequest, a, b);
  }
}

/**
 * ExportEventUnstructured is the stream item of the ExportUnstructuredEvents method.
 *
 * @generated from message teleport.auditlog.v1.ExportEventUnstructured
 */
export class ExportEventUnstructured extends Message<ExportEventUnstructured> {
  /**
   * event is the unstructured representation of the event payload.
   *
   * @generated from field: teleport.auditlog.v1.EventUnstructured event = 1;
   */
  event?: EventUnstructured;

  /**
   * cursor is the cursor to resume the stream after this point.
   *
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<ExportEventUnstructured>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.auditlog.v1.ExportEventUnstructured";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "message", T: EventUnstructured },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportEventUnstructured {
    return new ExportEventUnstructured().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportEventUnstructured {
    return new ExportEventUnstructured().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportEventUnstructured {
    return new ExportEventUnstructured().fromJsonString(jsonString, options);
  }

  static equals(a: ExportEventUnstructured | PlainMessage<ExportEventUnstructured> | undefined, b: ExportEventUnstructured | PlainMessage<ExportEventUnstructured> | undefined): boolean {
    return proto3.util.equals(ExportEventUnstructured, a, b);
  }
}

/**
 * EventUnstructured represents a single events.AuditEvent in an unstructured format.
 *
 * @generated from message teleport.auditlog.v1.EventUnstructured
 */
export class EventUnstructured extends Message<EventUnstructured> {
  /**
   * type is the type of the event.
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * id is the unique ID of the event.
   * If the underlying event defines an ID, it will be used, otherwise
   * it is a SHA256 hash of the event payload.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * time is the time when the event was generated.
   *
   * @generated from field: google.protobuf.Timestamp time = 3;
   */
  time?: Timestamp;

  /**
   * index is the index of the event.
   *
   * @generated from field: int64 index = 4;
   */
  index = protoInt64.zero;

  /**
   * unstructured is the unstructured representation of the event payload.
   *
   * @generated from field: google.protobuf.Struct unstructured = 5;
   */
  unstructured?: Struct;

  constructor(data?: PartialMessage<EventUnstructured>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.auditlog.v1.EventUnstructured";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "time", kind: "message", T: Timestamp },
    { no: 4, name: "index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "unstructured", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventUnstructured {
    return new EventUnstructured().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventUnstructured {
    return new EventUnstructured().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventUnstructured {
    return new EventUnstructured().fromJsonString(jsonString, options);
  }

  static equals(a: EventUnstructured | PlainMessage<EventUnstructured> | undefined, b: EventUnstructured | PlainMessage<EventUnstructured> | undefined): boolean {
    return proto3.util.equals(EventUnstructured, a, b);
  }
}

/**
 * GetEventExportChunksRequest is used to request the next set of event chunks to export.
 *
 * @generated from message teleport.auditlog.v1.GetEventExportChunksRequest
 */
export class GetEventExportChunksRequest extends Message<GetEventExportChunksRequest> {
  /**
   * date is the date for which to list export shards.
   *
   * @generated from field: google.protobuf.Timestamp date = 1;
   */
  date?: Timestamp;

  constructor(data?: PartialMessage<GetEventExportChunksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.auditlog.v1.GetEventExportChunksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventExportChunksRequest {
    return new GetEventExportChunksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventExportChunksRequest {
    return new GetEventExportChunksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventExportChunksRequest {
    return new GetEventExportChunksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventExportChunksRequest | PlainMessage<GetEventExportChunksRequest> | undefined, b: GetEventExportChunksRequest | PlainMessage<GetEventExportChunksRequest> | undefined): boolean {
    return proto3.util.equals(GetEventExportChunksRequest, a, b);
  }
}

/**
 * EventExportChunk represents a chunk of events to export.
 *
 * @generated from message teleport.auditlog.v1.EventExportChunk
 */
export class EventExportChunk extends Message<EventExportChunk> {
  /**
   * chunk is the chunk to export.
   *
   * @generated from field: string chunk = 1;
   */
  chunk = "";

  constructor(data?: PartialMessage<EventExportChunk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.auditlog.v1.EventExportChunk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chunk", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventExportChunk {
    return new EventExportChunk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventExportChunk {
    return new EventExportChunk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventExportChunk {
    return new EventExportChunk().fromJsonString(jsonString, options);
  }

  static equals(a: EventExportChunk | PlainMessage<EventExportChunk> | undefined, b: EventExportChunk | PlainMessage<EventExportChunk> | undefined): boolean {
    return proto3.util.equals(EventExportChunk, a, b);
  }
}

