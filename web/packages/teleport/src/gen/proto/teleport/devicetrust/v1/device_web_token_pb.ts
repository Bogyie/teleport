// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/devicetrust/v1/device_web_token.proto (package teleport.devicetrust.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * A device web token is a token used to device-authenticate a Web UI session.
 *
 * Tokens are generally acquired on login and exchanged for a single
 * on-behalf-of device authentication attempt, performed by Connect.
 *
 * See
 * https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-token.
 *
 * @generated from message teleport.devicetrust.v1.DeviceWebToken
 */
export class DeviceWebToken extends Message<DeviceWebToken> {
  /**
   * Opaque token identifier.
   * Required for token usage.
   * System-generated.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Opaque device web token, in plaintext, encoded in base64.RawURLEncoding
   * (so it is inherently safe for URl use).
   * Required for token usage.
   * System-generated.
   *
   * @generated from field: string token = 2;
   */
  token = "";

  /**
   * Identifier for the Web Session being device-authorized.
   * Required for creation.
   *
   * @generated from field: string web_session_id = 3;
   */
  webSessionId = "";

  /**
   * Browser user agent, as acquired from the Web UI browser.
   * Used as part of expected device checks.
   * Required for creation.
   *
   * @generated from field: string browser_user_agent = 4;
   */
  browserUserAgent = "";

  /**
   * Browser public IP, as acquired from the Web UI browser.
   * Used as part of expected device checks.
   * Required for creation.
   *
   * @generated from field: string browser_ip = 5;
   */
  browserIp = "";

  /**
   * Owner of the Web Session and trusted device.
   * Used internally by the Device Trust system.
   * Transient.
   *
   * @generated from field: string user = 6;
   */
  user = "";

  /**
   * ID of the devices allowed to perform on-behalf-of device authentication.
   * Used internally by the Device Trust system.
   * Transient.
   *
   * @generated from field: repeated string expected_device_ids = 7;
   */
  expectedDeviceIds: string[] = [];

  constructor(data?: PartialMessage<DeviceWebToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.devicetrust.v1.DeviceWebToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "web_session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "browser_user_agent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "browser_ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "expected_device_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceWebToken {
    return new DeviceWebToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceWebToken {
    return new DeviceWebToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceWebToken {
    return new DeviceWebToken().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceWebToken | PlainMessage<DeviceWebToken> | undefined, b: DeviceWebToken | PlainMessage<DeviceWebToken> | undefined): boolean {
    return proto3.util.equals(DeviceWebToken, a, b);
  }
}

