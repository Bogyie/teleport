// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/devicetrust/v1/device_collected_data.proto (package teleport.devicetrust.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { OSType } from "./os_type_pb";
import { TPMPlatformAttestation } from "./tpm_pb";

/**
 * DeviceCollectedData contains information gathered from the device during
 * various ceremonies.
 * Gathered information must match, within reason, the original registration
 * data and previous instances of collected data.
 *
 * @generated from message teleport.devicetrust.v1.DeviceCollectedData
 */
export class DeviceCollectedData extends Message<DeviceCollectedData> {
  /**
   * Time of data collection, set by the client.
   * Required.
   *
   * @generated from field: google.protobuf.Timestamp collect_time = 1;
   */
  collectTime?: Timestamp;

  /**
   * Time of data collection, as received by the server.
   * System managed.
   *
   * @generated from field: google.protobuf.Timestamp record_time = 2;
   */
  recordTime?: Timestamp;

  /**
   * Device operating system.
   * Required.
   *
   * @generated from field: teleport.devicetrust.v1.OSType os_type = 3;
   */
  osType = OSType.OS_TYPE_UNSPECIFIED;

  /**
   * Device serial number used to match the device with the inventory.
   * This field is one of the three following
   * values in this precedence:
   * - reported_asset_tag
   * - system_serial_number
   * - base_board_serial_number
   * Required.
   *
   * @generated from field: string serial_number = 4;
   */
  serialNumber = "";

  /**
   * Non-descriptive model identifier.
   * Example: "MacBookPro9,2".
   *
   * @generated from field: string model_identifier = 5;
   */
  modelIdentifier = "";

  /**
   * OS version number, without the leading 'v'.
   * Example: "13.2.1".
   *
   * @generated from field: string os_version = 6;
   */
  osVersion = "";

  /**
   * OS build identifier. Augments the os_version.
   * May match either the DeviceProfile os_build or os_build_supplemental.
   * Example: "22D68" or "22F770820d".
   *
   * @generated from field: string os_build = 7;
   */
  osBuild = "";

  /**
   * OS username (distinct from the Teleport user).
   *
   * @generated from field: string os_username = 8;
   */
  osUsername = "";

  /**
   * Jamf binary version, without the leading 'v'.
   * Example: "9.27" or "10.44.1-t1677509507".
   *
   * @generated from field: string jamf_binary_version = 9;
   */
  jamfBinaryVersion = "";

  /**
   * Unmodified output of `/usr/bin/profiles status -type enrollment`.
   * Used to verify the presence of an enrollment profile.
   *
   * @generated from field: string macos_enrollment_profiles = 10;
   */
  macosEnrollmentProfiles = "";

  /**
   * The asset tag of the device as reported by the BIOS DMI Type 3. Tools
   * used by customers to manage their fleet may set this value.
   *
   * @generated from field: string reported_asset_tag = 11;
   */
  reportedAssetTag = "";

  /**
   * The serial number of the "system" as reported by the BIOS DMI Type 1.
   * This field can be empty if no value has been configured.
   *
   * @generated from field: string system_serial_number = 12;
   */
  systemSerialNumber = "";

  /**
   * The serial number of the "base board" as reported by BIOS DMI Type 2.
   * This field can be empty if no value has been configured.
   *
   * @generated from field: string base_board_serial_number = 13;
   */
  baseBoardSerialNumber = "";

  /**
   * If during the collection of this device data, the device performed a TPM
   * platform attestation (e.g during enrollment or authentication), then this
   * field holds the record of this attestation. This allows the state of the
   * device to be compared to historical state, and allows for the platform
   * attestations to be revalidated at a later date.
   *
   * This field is not explicitly sent up by the client, and any DCD sent by a
   * client including this field should be rejected. The server should inject
   * this field once verifying that the submitted platform attestation during
   * the enrollment or authentication.
   *
   * System managed.
   *
   * @generated from field: teleport.devicetrust.v1.TPMPlatformAttestation tpm_platform_attestation = 14;
   */
  tpmPlatformAttestation?: TPMPlatformAttestation;

  /**
   * OS identifier.
   * Mainly used to differentiate Linux distros, as there is be no variation
   * for systems like macOS or Windows.
   * Example: "ubuntu", "centos", "fedora", "rhel".
   *
   * @generated from field: string os_id = 15;
   */
  osId = "";

  constructor(data?: PartialMessage<DeviceCollectedData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.devicetrust.v1.DeviceCollectedData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collect_time", kind: "message", T: Timestamp },
    { no: 2, name: "record_time", kind: "message", T: Timestamp },
    { no: 3, name: "os_type", kind: "enum", T: proto3.getEnumType(OSType) },
    { no: 4, name: "serial_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "model_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "os_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "os_build", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "os_username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "jamf_binary_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "macos_enrollment_profiles", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "reported_asset_tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "system_serial_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "base_board_serial_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "tpm_platform_attestation", kind: "message", T: TPMPlatformAttestation },
    { no: 15, name: "os_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceCollectedData {
    return new DeviceCollectedData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceCollectedData {
    return new DeviceCollectedData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceCollectedData {
    return new DeviceCollectedData().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceCollectedData | PlainMessage<DeviceCollectedData> | undefined, b: DeviceCollectedData | PlainMessage<DeviceCollectedData> | undefined): boolean {
    return proto3.util.equals(DeviceCollectedData, a, b);
  }
}

