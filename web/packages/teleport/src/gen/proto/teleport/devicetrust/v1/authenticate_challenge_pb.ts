// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/devicetrust/v1/authenticate_challenge.proto (package teleport.devicetrust.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { TPMPlatformParameters } from "./tpm_pb";

/**
 * AuthenticateDeviceChallenge carries the authentication challenge.
 *
 * @generated from message teleport.devicetrust.v1.AuthenticateDeviceChallenge
 */
export class AuthenticateDeviceChallenge extends Message<AuthenticateDeviceChallenge> {
  /**
   * Randomly-generated, opaque challenge to be signed using the device key.
   *
   * @generated from field: bytes challenge = 1;
   */
  challenge = new Uint8Array(0);

  constructor(data?: PartialMessage<AuthenticateDeviceChallenge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.devicetrust.v1.AuthenticateDeviceChallenge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "challenge", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthenticateDeviceChallenge {
    return new AuthenticateDeviceChallenge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthenticateDeviceChallenge {
    return new AuthenticateDeviceChallenge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthenticateDeviceChallenge {
    return new AuthenticateDeviceChallenge().fromJsonString(jsonString, options);
  }

  static equals(a: AuthenticateDeviceChallenge | PlainMessage<AuthenticateDeviceChallenge> | undefined, b: AuthenticateDeviceChallenge | PlainMessage<AuthenticateDeviceChallenge> | undefined): boolean {
    return proto3.util.equals(AuthenticateDeviceChallenge, a, b);
  }
}

/**
 * AuthenticateDeviceChallengeResponse carries the authentication challenge
 * response.
 *
 * @generated from message teleport.devicetrust.v1.AuthenticateDeviceChallengeResponse
 */
export class AuthenticateDeviceChallengeResponse extends Message<AuthenticateDeviceChallengeResponse> {
  /**
   * Signature over the challenge, using the device key.
   *
   * @generated from field: bytes signature = 1;
   */
  signature = new Uint8Array(0);

  /**
   * Signature over the challenge, using the SSH key. This is required when the
   * SSH and TLS public keys do not match, to prove ownership of the private key
   * associated with the SSH certificate being augmented.
   *
   * @generated from field: bytes ssh_signature = 2;
   */
  sshSignature = new Uint8Array(0);

  constructor(data?: PartialMessage<AuthenticateDeviceChallengeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.devicetrust.v1.AuthenticateDeviceChallengeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "ssh_signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthenticateDeviceChallengeResponse {
    return new AuthenticateDeviceChallengeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthenticateDeviceChallengeResponse {
    return new AuthenticateDeviceChallengeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthenticateDeviceChallengeResponse {
    return new AuthenticateDeviceChallengeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AuthenticateDeviceChallengeResponse | PlainMessage<AuthenticateDeviceChallengeResponse> | undefined, b: AuthenticateDeviceChallengeResponse | PlainMessage<AuthenticateDeviceChallengeResponse> | undefined): boolean {
    return proto3.util.equals(AuthenticateDeviceChallengeResponse, a, b);
  }
}

/**
 * TPMAuthenticateDeviceChallenge carries the authentication challenge
 * specific to TPMs.
 *
 * @generated from message teleport.devicetrust.v1.TPMAuthenticateDeviceChallenge
 */
export class TPMAuthenticateDeviceChallenge extends Message<TPMAuthenticateDeviceChallenge> {
  /**
   * Randomly-generated nonce to be used during platform attestation by the
   * TPM.
   *
   * @generated from field: bytes attestation_nonce = 1;
   */
  attestationNonce = new Uint8Array(0);

  constructor(data?: PartialMessage<TPMAuthenticateDeviceChallenge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.devicetrust.v1.TPMAuthenticateDeviceChallenge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attestation_nonce", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TPMAuthenticateDeviceChallenge {
    return new TPMAuthenticateDeviceChallenge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TPMAuthenticateDeviceChallenge {
    return new TPMAuthenticateDeviceChallenge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TPMAuthenticateDeviceChallenge {
    return new TPMAuthenticateDeviceChallenge().fromJsonString(jsonString, options);
  }

  static equals(a: TPMAuthenticateDeviceChallenge | PlainMessage<TPMAuthenticateDeviceChallenge> | undefined, b: TPMAuthenticateDeviceChallenge | PlainMessage<TPMAuthenticateDeviceChallenge> | undefined): boolean {
    return proto3.util.equals(TPMAuthenticateDeviceChallenge, a, b);
  }
}

/**
 * TPMAuthenticateDeviceChallengeResponse carries the authentication challenge
 * response specific to TPMs.
 *
 * @generated from message teleport.devicetrust.v1.TPMAuthenticateDeviceChallengeResponse
 */
export class TPMAuthenticateDeviceChallengeResponse extends Message<TPMAuthenticateDeviceChallengeResponse> {
  /**
   * The result of the client's platform attestation with the nonce provided
   * in `TPMAuthenticateDeviceChallenge`.
   *
   * @generated from field: teleport.devicetrust.v1.TPMPlatformParameters platform_parameters = 1;
   */
  platformParameters?: TPMPlatformParameters;

  /**
   * Signature over the attestation_nonce, using the SSH key. This is required
   * when the SSH and TLS public keys do not match, to prove ownership of the
   * private key associated with the SSH certificate being augmented.
   *
   * @generated from field: bytes ssh_signature = 2;
   */
  sshSignature = new Uint8Array(0);

  constructor(data?: PartialMessage<TPMAuthenticateDeviceChallengeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.devicetrust.v1.TPMAuthenticateDeviceChallengeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platform_parameters", kind: "message", T: TPMPlatformParameters },
    { no: 2, name: "ssh_signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TPMAuthenticateDeviceChallengeResponse {
    return new TPMAuthenticateDeviceChallengeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TPMAuthenticateDeviceChallengeResponse {
    return new TPMAuthenticateDeviceChallengeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TPMAuthenticateDeviceChallengeResponse {
    return new TPMAuthenticateDeviceChallengeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TPMAuthenticateDeviceChallengeResponse | PlainMessage<TPMAuthenticateDeviceChallengeResponse> | undefined, b: TPMAuthenticateDeviceChallengeResponse | PlainMessage<TPMAuthenticateDeviceChallengeResponse> | undefined): boolean {
    return proto3.util.equals(TPMAuthenticateDeviceChallengeResponse, a, b);
  }
}

