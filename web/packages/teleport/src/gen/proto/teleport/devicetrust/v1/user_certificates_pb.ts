// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/devicetrust/v1/user_certificates.proto (package teleport.devicetrust.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * UserCertificates is used to transport X.509 and SSH certificates during
 * device authentication.
 * See the AuthenticateDevice RPC.
 *
 * @generated from message teleport.devicetrust.v1.UserCertificates
 */
export class UserCertificates extends Message<UserCertificates> {
  /**
   * DER-encoded X.509 user certificate.
   *
   * @generated from field: bytes x509_der = 1;
   */
  x509Der = new Uint8Array(0);

  /**
   * SSH certificate marshaled in the authorized key format.
   *
   * @generated from field: bytes ssh_authorized_key = 2;
   */
  sshAuthorizedKey = new Uint8Array(0);

  constructor(data?: PartialMessage<UserCertificates>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.devicetrust.v1.UserCertificates";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "x509_der", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "ssh_authorized_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserCertificates {
    return new UserCertificates().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserCertificates {
    return new UserCertificates().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserCertificates {
    return new UserCertificates().fromJsonString(jsonString, options);
  }

  static equals(a: UserCertificates | PlainMessage<UserCertificates> | undefined, b: UserCertificates | PlainMessage<UserCertificates> | undefined): boolean {
    return proto3.util.equals(UserCertificates, a, b);
  }
}

