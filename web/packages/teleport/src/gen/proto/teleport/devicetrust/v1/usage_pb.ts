// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/devicetrust/v1/usage.proto (package teleport.devicetrust.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Superseded by ResourceUsageService.GetUsage.
 *
 * @generated from enum teleport.devicetrust.v1.AccountUsageType
 */
export enum AccountUsageType {
  /**
   * @generated from enum value: ACCOUNT_USAGE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ACCOUNT_USAGE_TYPE_UNLIMITED = 1;
   */
  UNLIMITED = 1,

  /**
   * @generated from enum value: ACCOUNT_USAGE_TYPE_USAGE_BASED = 2;
   */
  USAGE_BASED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AccountUsageType)
proto3.util.setEnumType(AccountUsageType, "teleport.devicetrust.v1.AccountUsageType", [
  { no: 0, name: "ACCOUNT_USAGE_TYPE_UNSPECIFIED" },
  { no: 1, name: "ACCOUNT_USAGE_TYPE_UNLIMITED" },
  { no: 2, name: "ACCOUNT_USAGE_TYPE_USAGE_BASED" },
]);

/**
 * Superseded by ResourceUsageService.GetUsage.
 *
 * @generated from message teleport.devicetrust.v1.DevicesUsage
 */
export class DevicesUsage extends Message<DevicesUsage> {
  constructor(data?: PartialMessage<DevicesUsage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.devicetrust.v1.DevicesUsage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DevicesUsage {
    return new DevicesUsage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DevicesUsage {
    return new DevicesUsage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DevicesUsage {
    return new DevicesUsage().fromJsonString(jsonString, options);
  }

  static equals(a: DevicesUsage | PlainMessage<DevicesUsage> | undefined, b: DevicesUsage | PlainMessage<DevicesUsage> | undefined): boolean {
    return proto3.util.equals(DevicesUsage, a, b);
  }
}

