// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/devicetrust/v1/device_source.proto (package teleport.devicetrust.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Origin of a device.
 *
 * @generated from enum teleport.devicetrust.v1.DeviceOrigin
 */
export enum DeviceOrigin {
  /**
   * Unspecified or absent origin.
   *
   * @generated from enum value: DEVICE_ORIGIN_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Devices originated from direct API usage.
   *
   * @generated from enum value: DEVICE_ORIGIN_API = 1;
   */
  API = 1,

  /**
   * Devices originated from Jamf sync.
   *
   * @generated from enum value: DEVICE_ORIGIN_JAMF = 2;
   */
  JAMF = 2,

  /**
   * Source originated from Microsoft Intune sync.
   *
   * @generated from enum value: DEVICE_ORIGIN_INTUNE = 3;
   */
  INTUNE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(DeviceOrigin)
proto3.util.setEnumType(DeviceOrigin, "teleport.devicetrust.v1.DeviceOrigin", [
  { no: 0, name: "DEVICE_ORIGIN_UNSPECIFIED" },
  { no: 1, name: "DEVICE_ORIGIN_API" },
  { no: 2, name: "DEVICE_ORIGIN_JAMF" },
  { no: 3, name: "DEVICE_ORIGIN_INTUNE" },
]);

/**
 * Source of device, for devices that are managed by external systems
 * (for example, MDMs).
 *
 * @generated from message teleport.devicetrust.v1.DeviceSource
 */
export class DeviceSource extends Message<DeviceSource> {
  /**
   * Name of the source.
   * Matches the name of the corresponding MDM service, if applicable.
   * Readonly.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Origin of the source.
   * Readonly.
   *
   * @generated from field: teleport.devicetrust.v1.DeviceOrigin origin = 2;
   */
  origin = DeviceOrigin.UNSPECIFIED;

  constructor(data?: PartialMessage<DeviceSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.devicetrust.v1.DeviceSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "origin", kind: "enum", T: proto3.getEnumType(DeviceOrigin) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceSource {
    return new DeviceSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceSource {
    return new DeviceSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceSource {
    return new DeviceSource().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceSource | PlainMessage<DeviceSource> | undefined, b: DeviceSource | PlainMessage<DeviceSource> | undefined): boolean {
    return proto3.util.equals(DeviceSource, a, b);
  }
}

