// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/devicetrust/v1/device_profile.proto (package teleport.devicetrust.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Device profile information acquired from an external source.
 * If present, it's used to further validate collected data.
 *
 * @generated from message teleport.devicetrust.v1.DeviceProfile
 */
export class DeviceProfile extends Message<DeviceProfile> {
  /**
   * Latest profile update time.
   * System managed.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 1;
   */
  updateTime?: Timestamp;

  /**
   * Non-descriptive model identifier.
   * Example: "MacBookPro9,2".
   *
   * @generated from field: string model_identifier = 2;
   */
  modelIdentifier = "";

  /**
   * OS version number, without the leading 'v'.
   * See the Device's os_type for the general OS category.
   * Example: "13.2.1".
   *
   * @generated from field: string os_version = 3;
   */
  osVersion = "";

  /**
   * OS build identifier. Augments the os_version.
   * Example: "22D68".
   *
   * @generated from field: string os_build = 4;
   */
  osBuild = "";

  /**
   * Known OS users (distinct from the Teleport user).
   *
   * @generated from field: repeated string os_usernames = 5;
   */
  osUsernames: string[] = [];

  /**
   * Jamf binary version, without the leading 'v'.
   * Example: "9.27" or "10.44.1-t1677509507".
   *
   * @generated from field: string jamf_binary_version = 6;
   */
  jamfBinaryVersion = "";

  /**
   * External device identifier, for example the Jamf or Intune ID.
   *
   * @generated from field: string external_id = 7;
   */
  externalId = "";

  /**
   * OS build supplemental number.
   * May match `sw_vers` BuildVersion more closely in certain situations, like
   * macOS rapid security response builds.
   * Example: "22F770820d".
   *
   * @generated from field: string os_build_supplemental = 8;
   */
  osBuildSupplemental = "";

  /**
   * OS identifier.
   * Mainly used to differentiate Linux distros, as there is be no variation
   * for systems like macOS or Windows.
   * Example: "ubuntu", "centos", "fedora", "rhel".
   *
   * @generated from field: string os_id = 9;
   */
  osId = "";

  constructor(data?: PartialMessage<DeviceProfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.devicetrust.v1.DeviceProfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "update_time", kind: "message", T: Timestamp },
    { no: 2, name: "model_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "os_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "os_build", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "os_usernames", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "jamf_binary_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "external_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "os_build_supplemental", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "os_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceProfile {
    return new DeviceProfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceProfile {
    return new DeviceProfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceProfile {
    return new DeviceProfile().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceProfile | PlainMessage<DeviceProfile> | undefined, b: DeviceProfile | PlainMessage<DeviceProfile> | undefined): boolean {
    return proto3.util.equals(DeviceProfile, a, b);
  }
}

