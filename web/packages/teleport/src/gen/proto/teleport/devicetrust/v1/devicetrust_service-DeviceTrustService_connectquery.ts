// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/devicetrust/v1/devicetrust_service.proto (package teleport.devicetrust.v1, syntax proto3)
/* eslint-disable */

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { BulkCreateDevicesRequest, BulkCreateDevicesResponse, ConfirmDeviceWebAuthenticationRequest, ConfirmDeviceWebAuthenticationResponse, CreateDeviceEnrollTokenRequest, CreateDeviceRequest, DeleteDeviceRequest, FindDevicesRequest, FindDevicesResponse, GetDeviceRequest, GetDevicesUsageRequest, ListDevicesRequest, ListDevicesResponse, UpdateDeviceRequest, UpsertDeviceRequest } from "./devicetrust_service_pb";
import { Device } from "./device_pb";
import { DeviceEnrollToken } from "./device_enroll_token_pb";
import { DevicesUsage } from "./usage_pb";

/**
 * CreateDevice creates a device, effectively registering it on Teleport.
 * Devices need to be registered before they can be enrolled.
 *
 * It is possible to create both a Device and a DeviceEnrollToken in a
 * single invocation, see CreateDeviceRequest.create_enroll_token.
 *
 * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.CreateDevice
 */
export const createDevice = {
  localName: "createDevice",
  name: "CreateDevice",
  kind: MethodKind.Unary,
  I: CreateDeviceRequest,
  O: Device,
  service: {
    typeName: "teleport.devicetrust.v1.DeviceTrustService"
  }
} as const;

/**
 * UpdateDevice is a masked device update.
 *
 * Only certain fields may be updated, see Device for details.
 *
 * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.UpdateDevice
 */
export const updateDevice = {
  localName: "updateDevice",
  name: "UpdateDevice",
  kind: MethodKind.Unary,
  I: UpdateDeviceRequest,
  O: Device,
  service: {
    typeName: "teleport.devicetrust.v1.DeviceTrustService"
  }
} as const;

/**
 * UpsertDevice creates or updates a device.
 *
 * UpsertDevice attempts a write of all mutable fields on updates, therefore
 * reading a fresh copy of the device is recommended. Update semantics still
 * apply.
 *
 * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.UpsertDevice
 */
export const upsertDevice = {
  localName: "upsertDevice",
  name: "UpsertDevice",
  kind: MethodKind.Unary,
  I: UpsertDeviceRequest,
  O: Device,
  service: {
    typeName: "teleport.devicetrust.v1.DeviceTrustService"
  }
} as const;

/**
 * DeleteDevice hard-deletes a device, removing it and all collected data
 * history from the system.
 *
 * Prefer locking the device instead (see the `tctl lock` command). Deleting a
 * device doesn't invalidate existing device certificates, but does prevent
 * new device authentication ceremonies from occurring.
 *
 * Use with caution.
 *
 * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.DeleteDevice
 */
export const deleteDevice = {
  localName: "deleteDevice",
  name: "DeleteDevice",
  kind: MethodKind.Unary,
  I: DeleteDeviceRequest,
  O: Empty,
  service: {
    typeName: "teleport.devicetrust.v1.DeviceTrustService"
  }
} as const;

/**
 * FindDevices retrieves devices by device ID and/or asset tag.
 *
 * It provides an in-between search between fetching a device by ID and
 * listing all devices.
 *
 * ID matches are guaranteed to be present in the response.
 *
 * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.FindDevices
 */
export const findDevices = {
  localName: "findDevices",
  name: "FindDevices",
  kind: MethodKind.Unary,
  I: FindDevicesRequest,
  O: FindDevicesResponse,
  service: {
    typeName: "teleport.devicetrust.v1.DeviceTrustService"
  }
} as const;

/**
 * GetDevice retrieves a device by ID.
 *
 * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.GetDevice
 */
export const getDevice = {
  localName: "getDevice",
  name: "GetDevice",
  kind: MethodKind.Unary,
  I: GetDeviceRequest,
  O: Device,
  service: {
    typeName: "teleport.devicetrust.v1.DeviceTrustService"
  }
} as const;

/**
 * ListDevices lists all registered devices.
 *
 * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.ListDevices
 */
export const listDevices = {
  localName: "listDevices",
  name: "ListDevices",
  kind: MethodKind.Unary,
  I: ListDevicesRequest,
  O: ListDevicesResponse,
  service: {
    typeName: "teleport.devicetrust.v1.DeviceTrustService"
  }
} as const;

/**
 * BulkCreateDevices is a bulk variant of CreateDevice.
 *
 * Unlike CreateDevice, it does not support creation of enrollment tokens, as
 * it is meant for bulk inventory registration.
 *
 * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.BulkCreateDevices
 */
export const bulkCreateDevices = {
  localName: "bulkCreateDevices",
  name: "BulkCreateDevices",
  kind: MethodKind.Unary,
  I: BulkCreateDevicesRequest,
  O: BulkCreateDevicesResponse,
  service: {
    typeName: "teleport.devicetrust.v1.DeviceTrustService"
  }
} as const;

/**
 * CreateDeviceEnrollToken creates a DeviceEnrollToken for a Device.
 * An enrollment token is required for the enrollment ceremony. See
 * EnrollDevice.
 *
 * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.CreateDeviceEnrollToken
 */
export const createDeviceEnrollToken = {
  localName: "createDeviceEnrollToken",
  name: "CreateDeviceEnrollToken",
  kind: MethodKind.Unary,
  I: CreateDeviceEnrollTokenRequest,
  O: DeviceEnrollToken,
  service: {
    typeName: "teleport.devicetrust.v1.DeviceTrustService"
  }
} as const;

/**
 * ConfirmDeviceWebAuthentication finalizes the device web authentication
 * ceremony started by the creation of a DeviceWebToken and subsequent
 * AuthenticateDevice call.
 *
 * The DeviceConfirmationToken issued by AuthenticateDevice is spent in this
 * method, which consequently augments the corresponding Web Session
 * certificates with device extensions.
 *
 * This method must be called by the Teleport Proxy, and the Proxy itself must
 * be called by the same browser that started the on-behalf-of authentication
 * attempt. See the /webapi/device/webconfirm endpoint.
 *
 * See
 * https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
 *
 * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.ConfirmDeviceWebAuthentication
 */
export const confirmDeviceWebAuthentication = {
  localName: "confirmDeviceWebAuthentication",
  name: "ConfirmDeviceWebAuthentication",
  kind: MethodKind.Unary,
  I: ConfirmDeviceWebAuthenticationRequest,
  O: ConfirmDeviceWebAuthenticationResponse,
  service: {
    typeName: "teleport.devicetrust.v1.DeviceTrustService"
  }
} as const;

/**
 * Superseded by ResourceUsageService.GetUsage.
 *
 * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.GetDevicesUsage
 * @deprecated
 */
export const getDevicesUsage = {
  localName: "getDevicesUsage",
  name: "GetDevicesUsage",
  kind: MethodKind.Unary,
  I: GetDevicesUsageRequest,
  O: DevicesUsage,
  service: {
    typeName: "teleport.devicetrust.v1.DeviceTrustService"
  }
} as const;
