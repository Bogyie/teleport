// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/devicetrust/v1/assert.proto (package teleport.devicetrust.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { AuthenticateDeviceChallenge, AuthenticateDeviceChallengeResponse, TPMAuthenticateDeviceChallenge, TPMAuthenticateDeviceChallengeResponse } from "./authenticate_challenge_pb";
import { DeviceCollectedData } from "./device_collected_data_pb";

/**
 * Request to assert an enrolled device. Assertion authenticates the device,
 * regardless of the user driving the assertion.
 *
 * Assertion messages are meant to be included by other requests and responses,
 * either streams or multi-stage RPCs. The ceremony is resolved by a co-located
 * DeviceTrustService.
 *
 * See the lib/devicetrust/assert (client) and lib/devicetrust/assertserver
 * (server) packages.
 *
 * Assertion ceremony flow:
 * -> AssertDeviceInit (client)
 * <- AssertDeviceChallenge (server)
 * -> AssertDeviceChallengeResponse (client)
 * <- DeviceAsserted (server)
 *
 * A successful ceremony signifies that the device is registered, enrolled and
 * passed the authentication challenge.
 *
 * @generated from message teleport.devicetrust.v1.AssertDeviceRequest
 */
export class AssertDeviceRequest extends Message<AssertDeviceRequest> {
  /**
   * @generated from oneof teleport.devicetrust.v1.AssertDeviceRequest.payload
   */
  payload: {
    /**
     * @generated from field: teleport.devicetrust.v1.AssertDeviceInit init = 1;
     */
    value: AssertDeviceInit;
    case: "init";
  } | {
    /**
     * @generated from field: teleport.devicetrust.v1.AuthenticateDeviceChallengeResponse challenge_response = 2;
     */
    value: AuthenticateDeviceChallengeResponse;
    case: "challengeResponse";
  } | {
    /**
     * @generated from field: teleport.devicetrust.v1.TPMAuthenticateDeviceChallengeResponse tpm_challenge_response = 3;
     */
    value: TPMAuthenticateDeviceChallengeResponse;
    case: "tpmChallengeResponse";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AssertDeviceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.devicetrust.v1.AssertDeviceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "init", kind: "message", T: AssertDeviceInit, oneof: "payload" },
    { no: 2, name: "challenge_response", kind: "message", T: AuthenticateDeviceChallengeResponse, oneof: "payload" },
    { no: 3, name: "tpm_challenge_response", kind: "message", T: TPMAuthenticateDeviceChallengeResponse, oneof: "payload" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssertDeviceRequest {
    return new AssertDeviceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssertDeviceRequest {
    return new AssertDeviceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssertDeviceRequest {
    return new AssertDeviceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AssertDeviceRequest | PlainMessage<AssertDeviceRequest> | undefined, b: AssertDeviceRequest | PlainMessage<AssertDeviceRequest> | undefined): boolean {
    return proto3.util.equals(AssertDeviceRequest, a, b);
  }
}

/**
 * Response of the device assertion ceremony.
 * See [AssertDeviceRequest].
 *
 * @generated from message teleport.devicetrust.v1.AssertDeviceResponse
 */
export class AssertDeviceResponse extends Message<AssertDeviceResponse> {
  /**
   * @generated from oneof teleport.devicetrust.v1.AssertDeviceResponse.payload
   */
  payload: {
    /**
     * @generated from field: teleport.devicetrust.v1.AuthenticateDeviceChallenge challenge = 1;
     */
    value: AuthenticateDeviceChallenge;
    case: "challenge";
  } | {
    /**
     * @generated from field: teleport.devicetrust.v1.TPMAuthenticateDeviceChallenge tpm_challenge = 2;
     */
    value: TPMAuthenticateDeviceChallenge;
    case: "tpmChallenge";
  } | {
    /**
     * @generated from field: teleport.devicetrust.v1.DeviceAsserted device_asserted = 3;
     */
    value: DeviceAsserted;
    case: "deviceAsserted";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AssertDeviceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.devicetrust.v1.AssertDeviceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "challenge", kind: "message", T: AuthenticateDeviceChallenge, oneof: "payload" },
    { no: 2, name: "tpm_challenge", kind: "message", T: TPMAuthenticateDeviceChallenge, oneof: "payload" },
    { no: 3, name: "device_asserted", kind: "message", T: DeviceAsserted, oneof: "payload" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssertDeviceResponse {
    return new AssertDeviceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssertDeviceResponse {
    return new AssertDeviceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssertDeviceResponse {
    return new AssertDeviceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AssertDeviceResponse | PlainMessage<AssertDeviceResponse> | undefined, b: AssertDeviceResponse | PlainMessage<AssertDeviceResponse> | undefined): boolean {
    return proto3.util.equals(AssertDeviceResponse, a, b);
  }
}

/**
 * AssertDeviceInit initiates the device assertion ceremony.
 * See [AssertDeviceRequest].
 *
 * @generated from message teleport.devicetrust.v1.AssertDeviceInit
 */
export class AssertDeviceInit extends Message<AssertDeviceInit> {
  /**
   * ID of the enrolled device credential.
   *
   * @generated from field: string credential_id = 1;
   */
  credentialId = "";

  /**
   * Device collected data.
   * Matched against the device registration information and any previously
   * collected data.
   *
   * @generated from field: teleport.devicetrust.v1.DeviceCollectedData device_data = 2;
   */
  deviceData?: DeviceCollectedData;

  constructor(data?: PartialMessage<AssertDeviceInit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.devicetrust.v1.AssertDeviceInit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "credential_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "device_data", kind: "message", T: DeviceCollectedData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssertDeviceInit {
    return new AssertDeviceInit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssertDeviceInit {
    return new AssertDeviceInit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssertDeviceInit {
    return new AssertDeviceInit().fromJsonString(jsonString, options);
  }

  static equals(a: AssertDeviceInit | PlainMessage<AssertDeviceInit> | undefined, b: AssertDeviceInit | PlainMessage<AssertDeviceInit> | undefined): boolean {
    return proto3.util.equals(AssertDeviceInit, a, b);
  }
}

/**
 * DeviceAsserted marks a successful device assertion ceremony.
 * See [AssertDeviceRequest].
 *
 * @generated from message teleport.devicetrust.v1.DeviceAsserted
 */
export class DeviceAsserted extends Message<DeviceAsserted> {
  constructor(data?: PartialMessage<DeviceAsserted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.devicetrust.v1.DeviceAsserted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceAsserted {
    return new DeviceAsserted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceAsserted {
    return new DeviceAsserted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceAsserted {
    return new DeviceAsserted().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceAsserted | PlainMessage<DeviceAsserted> | undefined, b: DeviceAsserted | PlainMessage<DeviceAsserted> | undefined): boolean {
    return proto3.util.equals(DeviceAsserted, a, b);
  }
}

