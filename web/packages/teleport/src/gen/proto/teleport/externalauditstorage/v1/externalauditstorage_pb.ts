// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/externalauditstorage/v1/externalauditstorage.proto (package teleport.externalauditstorage.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ResourceHeader } from "../../header/v1/resourceheader_pb";

/**
 * ExternalAuditStorage contains External Audit Storage configuration.
 * It contains configuration that allows users to store audit events and session
 * recordings on customer-owned infra instead of in Teleport Cloud.
 *
 * @generated from message teleport.externalauditstorage.v1.ExternalAuditStorage
 */
export class ExternalAuditStorage extends Message<ExternalAuditStorage> {
  /**
   * Header is the header for the resource.
   *
   * @generated from field: teleport.header.v1.ResourceHeader header = 1;
   */
  header?: ResourceHeader;

  /**
   * Spec is the specification for external audit storage.
   *
   * @generated from field: teleport.externalauditstorage.v1.ExternalAuditStorageSpec spec = 2;
   */
  spec?: ExternalAuditStorageSpec;

  constructor(data?: PartialMessage<ExternalAuditStorage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.ExternalAuditStorage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: ResourceHeader },
    { no: 2, name: "spec", kind: "message", T: ExternalAuditStorageSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExternalAuditStorage {
    return new ExternalAuditStorage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExternalAuditStorage {
    return new ExternalAuditStorage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExternalAuditStorage {
    return new ExternalAuditStorage().fromJsonString(jsonString, options);
  }

  static equals(a: ExternalAuditStorage | PlainMessage<ExternalAuditStorage> | undefined, b: ExternalAuditStorage | PlainMessage<ExternalAuditStorage> | undefined): boolean {
    return proto3.util.equals(ExternalAuditStorage, a, b);
  }
}

/**
 * ExternalAuditStorageConfigSpec is the specification of external audit storage.
 *
 * @generated from message teleport.externalauditstorage.v1.ExternalAuditStorageSpec
 */
export class ExternalAuditStorageSpec extends Message<ExternalAuditStorageSpec> {
  /**
   * IntegrationName is name of an existing AWS OIDC integration used to
   * authenticate to the external AWS account.
   *
   * @generated from field: string integration_name = 1;
   */
  integrationName = "";

  /**
   * Region is the AWS region where the infrastructure is hosted.
   *
   * @generated from field: string region = 2;
   */
  region = "";

  /**
   * SessionRecordingsURI is the S3 path used to store session recordings.
   *
   * @generated from field: string session_recordings_uri = 3;
   */
  sessionRecordingsUri = "";

  /**
   * AuditEventsLongTermURI is the S3 path used to store batched parquet files
   * with audit events.
   *
   * @generated from field: string audit_events_long_term_uri = 4;
   */
  auditEventsLongTermUri = "";

  /**
   * AthenaResultsURI is the S3 path used to store temporary results of Athena
   * queries.
   *
   * @generated from field: string athena_results_uri = 5;
   */
  athenaResultsUri = "";

  /**
   * AthenaWorkgroup is the workgroup used for Athena audit log queries.
   *
   * @generated from field: string athena_workgroup = 6;
   */
  athenaWorkgroup = "";

  /**
   * GlueDatabase is the database used for Athena audit log queries.
   *
   * @generated from field: string glue_database = 7;
   */
  glueDatabase = "";

  /**
   * GlueTable is the table used for Athena audit log queries.
   *
   * @generated from field: string glue_table = 8;
   */
  glueTable = "";

  /**
   * PolicyName is the name of the IAM policy attached to the OIDC integration
   * role.
   *
   * @generated from field: string policy_name = 9;
   */
  policyName = "";

  constructor(data?: PartialMessage<ExternalAuditStorageSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.externalauditstorage.v1.ExternalAuditStorageSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "session_recordings_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "audit_events_long_term_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "athena_results_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "athena_workgroup", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "glue_database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "glue_table", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "policy_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExternalAuditStorageSpec {
    return new ExternalAuditStorageSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExternalAuditStorageSpec {
    return new ExternalAuditStorageSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExternalAuditStorageSpec {
    return new ExternalAuditStorageSpec().fromJsonString(jsonString, options);
  }

  static equals(a: ExternalAuditStorageSpec | PlainMessage<ExternalAuditStorageSpec> | undefined, b: ExternalAuditStorageSpec | PlainMessage<ExternalAuditStorageSpec> | undefined): boolean {
    return proto3.util.equals(ExternalAuditStorageSpec, a, b);
  }
}

