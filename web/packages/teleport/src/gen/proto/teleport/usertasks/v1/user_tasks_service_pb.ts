// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/usertasks/v1/user_tasks_service.proto (package teleport.usertasks.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { UserTask } from "./user_tasks_pb";

/**
 * CreateUserTaskRequest is a request to create a User Task.
 *
 * @generated from message teleport.usertasks.v1.CreateUserTaskRequest
 */
export class CreateUserTaskRequest extends Message<CreateUserTaskRequest> {
  /**
   * @generated from field: teleport.usertasks.v1.UserTask user_task = 1;
   */
  userTask?: UserTask;

  constructor(data?: PartialMessage<CreateUserTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usertasks.v1.CreateUserTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_task", kind: "message", T: UserTask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserTaskRequest {
    return new CreateUserTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserTaskRequest {
    return new CreateUserTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserTaskRequest {
    return new CreateUserTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserTaskRequest | PlainMessage<CreateUserTaskRequest> | undefined, b: CreateUserTaskRequest | PlainMessage<CreateUserTaskRequest> | undefined): boolean {
    return proto3.util.equals(CreateUserTaskRequest, a, b);
  }
}

/**
 * UpsertUserTaskRequest is a request to create or update a User Task.
 *
 * @generated from message teleport.usertasks.v1.UpsertUserTaskRequest
 */
export class UpsertUserTaskRequest extends Message<UpsertUserTaskRequest> {
  /**
   * @generated from field: teleport.usertasks.v1.UserTask user_task = 1;
   */
  userTask?: UserTask;

  constructor(data?: PartialMessage<UpsertUserTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usertasks.v1.UpsertUserTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_task", kind: "message", T: UserTask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertUserTaskRequest {
    return new UpsertUserTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertUserTaskRequest {
    return new UpsertUserTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertUserTaskRequest {
    return new UpsertUserTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertUserTaskRequest | PlainMessage<UpsertUserTaskRequest> | undefined, b: UpsertUserTaskRequest | PlainMessage<UpsertUserTaskRequest> | undefined): boolean {
    return proto3.util.equals(UpsertUserTaskRequest, a, b);
  }
}

/**
 * GetUserTaskRequest is a request to get a User Task by name.
 *
 * @generated from message teleport.usertasks.v1.GetUserTaskRequest
 */
export class GetUserTaskRequest extends Message<GetUserTaskRequest> {
  /**
   * Name is the name of the UserTask to get.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetUserTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usertasks.v1.GetUserTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserTaskRequest {
    return new GetUserTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserTaskRequest {
    return new GetUserTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserTaskRequest {
    return new GetUserTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserTaskRequest | PlainMessage<GetUserTaskRequest> | undefined, b: GetUserTaskRequest | PlainMessage<GetUserTaskRequest> | undefined): boolean {
    return proto3.util.equals(GetUserTaskRequest, a, b);
  }
}

/**
 * ListUserTasksRequest is a request to get a list of User Tasks.
 *
 * @generated from message teleport.usertasks.v1.ListUserTasksRequest
 */
export class ListUserTasksRequest extends Message<ListUserTasksRequest> {
  /**
   * page_size is the maximum number of items to return.
   * The server may impose a different page size at its discretion.
   *
   * @generated from field: int64 page_size = 1;
   */
  pageSize = protoInt64.zero;

  /**
   * page_token is the next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListUserTasksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usertasks.v1.ListUserTasksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserTasksRequest {
    return new ListUserTasksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserTasksRequest {
    return new ListUserTasksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserTasksRequest {
    return new ListUserTasksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserTasksRequest | PlainMessage<ListUserTasksRequest> | undefined, b: ListUserTasksRequest | PlainMessage<ListUserTasksRequest> | undefined): boolean {
    return proto3.util.equals(ListUserTasksRequest, a, b);
  }
}

/**
 * ListUserTasksResponse is a response to ListUserTasks.
 *
 * @generated from message teleport.usertasks.v1.ListUserTasksResponse
 */
export class ListUserTasksResponse extends Message<ListUserTasksResponse> {
  /**
   * @generated from field: repeated teleport.usertasks.v1.UserTask user_tasks = 1;
   */
  userTasks: UserTask[] = [];

  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListUserTasksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usertasks.v1.ListUserTasksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_tasks", kind: "message", T: UserTask, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserTasksResponse {
    return new ListUserTasksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserTasksResponse {
    return new ListUserTasksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserTasksResponse {
    return new ListUserTasksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserTasksResponse | PlainMessage<ListUserTasksResponse> | undefined, b: ListUserTasksResponse | PlainMessage<ListUserTasksResponse> | undefined): boolean {
    return proto3.util.equals(ListUserTasksResponse, a, b);
  }
}

/**
 * UpdateUserTaskRequest is a request to update an existing User Task.
 *
 * @generated from message teleport.usertasks.v1.UpdateUserTaskRequest
 */
export class UpdateUserTaskRequest extends Message<UpdateUserTaskRequest> {
  /**
   * @generated from field: teleport.usertasks.v1.UserTask user_task = 1;
   */
  userTask?: UserTask;

  constructor(data?: PartialMessage<UpdateUserTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usertasks.v1.UpdateUserTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_task", kind: "message", T: UserTask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserTaskRequest {
    return new UpdateUserTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserTaskRequest {
    return new UpdateUserTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserTaskRequest {
    return new UpdateUserTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserTaskRequest | PlainMessage<UpdateUserTaskRequest> | undefined, b: UpdateUserTaskRequest | PlainMessage<UpdateUserTaskRequest> | undefined): boolean {
    return proto3.util.equals(UpdateUserTaskRequest, a, b);
  }
}

/**
 * DeleteUserTaskRequest is a request to delete a User Task.
 *
 * @generated from message teleport.usertasks.v1.DeleteUserTaskRequest
 */
export class DeleteUserTaskRequest extends Message<DeleteUserTaskRequest> {
  /**
   * Name is the name of the User Task to delete.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteUserTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usertasks.v1.DeleteUserTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserTaskRequest {
    return new DeleteUserTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserTaskRequest {
    return new DeleteUserTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserTaskRequest {
    return new DeleteUserTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUserTaskRequest | PlainMessage<DeleteUserTaskRequest> | undefined, b: DeleteUserTaskRequest | PlainMessage<DeleteUserTaskRequest> | undefined): boolean {
    return proto3.util.equals(DeleteUserTaskRequest, a, b);
  }
}

