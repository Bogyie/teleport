// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/usertasks/v1/user_tasks.proto (package teleport.usertasks.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Metadata } from "../../header/v1/metadata_pb";

/**
 * UserTask is a resource that represents an action to be completed by the user.
 * UserTasks are a unit of work for users to act upon issues related to other resources.
 * As an example, when auto-enrolling EC2 instances using the Discovery Service
 * a UserTask is created to let the user know that something failed on a set of instances.
 * The user can then mark the task as resolved after following the recommendation/fixing steps.
 *
 * @generated from message teleport.usertasks.v1.UserTask
 */
export class UserTask extends Message<UserTask> {
  /**
   * The kind of resource represented.
   *
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * Mandatory field for all resources. Not populated for this resource type.
   *
   * @generated from field: string sub_kind = 2;
   */
  subKind = "";

  /**
   * The version of the resource being represented.
   *
   * @generated from field: string version = 3;
   */
  version = "";

  /**
   * Common metadata that all resources share.
   *
   * @generated from field: teleport.header.v1.Metadata metadata = 4;
   */
  metadata?: Metadata;

  /**
   * The configured properties of UserTask.
   *
   * @generated from field: teleport.usertasks.v1.UserTaskSpec spec = 5;
   */
  spec?: UserTaskSpec;

  constructor(data?: PartialMessage<UserTask>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usertasks.v1.UserTask";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sub_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata", kind: "message", T: Metadata },
    { no: 5, name: "spec", kind: "message", T: UserTaskSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserTask {
    return new UserTask().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserTask {
    return new UserTask().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserTask {
    return new UserTask().fromJsonString(jsonString, options);
  }

  static equals(a: UserTask | PlainMessage<UserTask> | undefined, b: UserTask | PlainMessage<UserTask> | undefined): boolean {
    return proto3.util.equals(UserTask, a, b);
  }
}

/**
 * UserTaskSpec contains the properties of the UserTask.
 *
 * @generated from message teleport.usertasks.v1.UserTaskSpec
 */
export class UserTaskSpec extends Message<UserTaskSpec> {
  /**
   * Integration is the integration name that originated this task.
   *
   * @generated from field: string integration = 1;
   */
  integration = "";

  /**
   * TaskType indicates the type of task.
   * Examples: discover-ec2, discover-rds, discover-eks
   *
   * @generated from field: string task_type = 2;
   */
  taskType = "";

  /**
   * IssueType is an identifier for the type of issue that happened.
   * Example for discover-ec2: SSM_AGENT_NOT_AVAILABLE
   *
   * @generated from field: string issue_type = 3;
   */
  issueType = "";

  /**
   * State indicates the task state.
   * When the task is created, it starts with OPEN.
   * Users can mark it as RESOLVED.
   * If the issue happens again (eg, new discover iteration faces the same error), it will move to OPEN again.
   *
   * @generated from field: string state = 4;
   */
  state = "";

  /**
   * DiscoverEC2 contains the AWS EC2 instances that failed to auto enroll into the cluster.
   * Present when TaskType is discover-ec2.
   *
   * @generated from field: teleport.usertasks.v1.DiscoverEC2 discover_ec2 = 5;
   */
  discoverEc2?: DiscoverEC2;

  constructor(data?: PartialMessage<UserTaskSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usertasks.v1.UserTaskSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "task_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "issue_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "discover_ec2", kind: "message", T: DiscoverEC2 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserTaskSpec {
    return new UserTaskSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserTaskSpec {
    return new UserTaskSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserTaskSpec {
    return new UserTaskSpec().fromJsonString(jsonString, options);
  }

  static equals(a: UserTaskSpec | PlainMessage<UserTaskSpec> | undefined, b: UserTaskSpec | PlainMessage<UserTaskSpec> | undefined): boolean {
    return proto3.util.equals(UserTaskSpec, a, b);
  }
}

/**
 * DiscoverEC2 contains the instances that failed to auto-enroll into the cluster.
 *
 * @generated from message teleport.usertasks.v1.DiscoverEC2
 */
export class DiscoverEC2 extends Message<DiscoverEC2> {
  /**
   * Instances maps an instance id to the result of enrolling that instance into teleport.
   *
   * @generated from field: map<string, teleport.usertasks.v1.DiscoverEC2Instance> instances = 1;
   */
  instances: { [key: string]: DiscoverEC2Instance } = {};

  constructor(data?: PartialMessage<DiscoverEC2>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usertasks.v1.DiscoverEC2";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instances", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: DiscoverEC2Instance} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoverEC2 {
    return new DiscoverEC2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoverEC2 {
    return new DiscoverEC2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoverEC2 {
    return new DiscoverEC2().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoverEC2 | PlainMessage<DiscoverEC2> | undefined, b: DiscoverEC2 | PlainMessage<DiscoverEC2> | undefined): boolean {
    return proto3.util.equals(DiscoverEC2, a, b);
  }
}

/**
 * DiscoverEC2Instance contains the result of enrolling an AWS EC2 Instance.
 *
 * @generated from message teleport.usertasks.v1.DiscoverEC2Instance
 */
export class DiscoverEC2Instance extends Message<DiscoverEC2Instance> {
  /**
   * InstanceID is the EC2 Instance ID that uniquely identifies the instance.
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Name is the instance Name.
   * Might be empty, if the instance doesn't have the Name tag.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * AccountID is the AWS Account ID for this instance.
   *
   * @generated from field: string account_id = 3;
   */
  accountId = "";

  /**
   * Region is the AWS Region where this issue is happening.
   *
   * @generated from field: string region = 4;
   */
  region = "";

  /**
   * InvocationURL is the URL that points to the invocation.
   * Empty if there was an error before installing the
   *
   * @generated from field: string invocation_url = 5;
   */
  invocationUrl = "";

  /**
   * DiscoveryConfig is the discovery config name that originated this instance enrollment.
   *
   * @generated from field: string discovery_config = 6;
   */
  discoveryConfig = "";

  /**
   * DiscoveryGroup is the DiscoveryGroup name that originated this task.
   *
   * @generated from field: string discovery_group = 7;
   */
  discoveryGroup = "";

  /**
   * SyncTime is the timestamp when the error was produced.
   *
   * @generated from field: google.protobuf.Timestamp sync_time = 8;
   */
  syncTime?: Timestamp;

  constructor(data?: PartialMessage<DiscoverEC2Instance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.usertasks.v1.DiscoverEC2Instance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "invocation_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "discovery_config", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "discovery_group", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "sync_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoverEC2Instance {
    return new DiscoverEC2Instance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoverEC2Instance {
    return new DiscoverEC2Instance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoverEC2Instance {
    return new DiscoverEC2Instance().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoverEC2Instance | PlainMessage<DiscoverEC2Instance> | undefined, b: DiscoverEC2Instance | PlainMessage<DiscoverEC2Instance> | undefined): boolean {
    return proto3.util.equals(DiscoverEC2Instance, a, b);
  }
}

