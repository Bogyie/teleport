// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/accessmonitoringrules/v1/access_monitoring_rules_service.proto (package teleport.accessmonitoringrules.v1, syntax proto3)
/* eslint-disable */

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { AccessMonitoringRule, CreateAccessMonitoringRuleRequest, DeleteAccessMonitoringRuleRequest, GetAccessMonitoringRuleRequest, ListAccessMonitoringRulesRequest, ListAccessMonitoringRulesResponse, ListAccessMonitoringRulesWithFilterRequest, ListAccessMonitoringRulesWithFilterResponse, UpdateAccessMonitoringRuleRequest, UpsertAccessMonitoringRuleRequest } from "./access_monitoring_rules_pb";

/**
 * CreateAccessMonitoringRule creates the specified access monitoring rule.
 *
 * @generated from rpc teleport.accessmonitoringrules.v1.AccessMonitoringRulesService.CreateAccessMonitoringRule
 */
export const createAccessMonitoringRule = {
  localName: "createAccessMonitoringRule",
  name: "CreateAccessMonitoringRule",
  kind: MethodKind.Unary,
  I: CreateAccessMonitoringRuleRequest,
  O: AccessMonitoringRule,
  service: {
    typeName: "teleport.accessmonitoringrules.v1.AccessMonitoringRulesService"
  }
} as const;

/**
 * UpdateAccessMonitoringRule updates the specified access monitoring rule.
 *
 * @generated from rpc teleport.accessmonitoringrules.v1.AccessMonitoringRulesService.UpdateAccessMonitoringRule
 */
export const updateAccessMonitoringRule = {
  localName: "updateAccessMonitoringRule",
  name: "UpdateAccessMonitoringRule",
  kind: MethodKind.Unary,
  I: UpdateAccessMonitoringRuleRequest,
  O: AccessMonitoringRule,
  service: {
    typeName: "teleport.accessmonitoringrules.v1.AccessMonitoringRulesService"
  }
} as const;

/**
 * UpsertAccessMonitoringRule upserts the specified access monitoring rule.
 *
 * @generated from rpc teleport.accessmonitoringrules.v1.AccessMonitoringRulesService.UpsertAccessMonitoringRule
 */
export const upsertAccessMonitoringRule = {
  localName: "upsertAccessMonitoringRule",
  name: "UpsertAccessMonitoringRule",
  kind: MethodKind.Unary,
  I: UpsertAccessMonitoringRuleRequest,
  O: AccessMonitoringRule,
  service: {
    typeName: "teleport.accessmonitoringrules.v1.AccessMonitoringRulesService"
  }
} as const;

/**
 * GetAccessMonitoringRule gets the specified access monitoring rule.
 *
 * @generated from rpc teleport.accessmonitoringrules.v1.AccessMonitoringRulesService.GetAccessMonitoringRule
 */
export const getAccessMonitoringRule = {
  localName: "getAccessMonitoringRule",
  name: "GetAccessMonitoringRule",
  kind: MethodKind.Unary,
  I: GetAccessMonitoringRuleRequest,
  O: AccessMonitoringRule,
  service: {
    typeName: "teleport.accessmonitoringrules.v1.AccessMonitoringRulesService"
  }
} as const;

/**
 * DeleteAccessMonitoringRule deletes the specified access monitoring rule.
 *
 * @generated from rpc teleport.accessmonitoringrules.v1.AccessMonitoringRulesService.DeleteAccessMonitoringRule
 */
export const deleteAccessMonitoringRule = {
  localName: "deleteAccessMonitoringRule",
  name: "DeleteAccessMonitoringRule",
  kind: MethodKind.Unary,
  I: DeleteAccessMonitoringRuleRequest,
  O: Empty,
  service: {
    typeName: "teleport.accessmonitoringrules.v1.AccessMonitoringRulesService"
  }
} as const;

/**
 * ListAccessMonitoringRules lists current access monitoring rules.
 *
 * @generated from rpc teleport.accessmonitoringrules.v1.AccessMonitoringRulesService.ListAccessMonitoringRules
 */
export const listAccessMonitoringRules = {
  localName: "listAccessMonitoringRules",
  name: "ListAccessMonitoringRules",
  kind: MethodKind.Unary,
  I: ListAccessMonitoringRulesRequest,
  O: ListAccessMonitoringRulesResponse,
  service: {
    typeName: "teleport.accessmonitoringrules.v1.AccessMonitoringRulesService"
  }
} as const;

/**
 * ListAccessMonitoringRulesWithFilter lists current access monitoring rules that match the provided filter.
 *
 * @generated from rpc teleport.accessmonitoringrules.v1.AccessMonitoringRulesService.ListAccessMonitoringRulesWithFilter
 */
export const listAccessMonitoringRulesWithFilter = {
  localName: "listAccessMonitoringRulesWithFilter",
  name: "ListAccessMonitoringRulesWithFilter",
  kind: MethodKind.Unary,
  I: ListAccessMonitoringRulesWithFilterRequest,
  O: ListAccessMonitoringRulesWithFilterResponse,
  service: {
    typeName: "teleport.accessmonitoringrules.v1.AccessMonitoringRulesService"
  }
} as const;
