// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/presence/v1/service.proto (package teleport.presence.v1, syntax proto3)
/* eslint-disable */

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { DeleteRemoteClusterRequest, GetRemoteClusterRequest, ListRemoteClustersRequest, ListRemoteClustersResponse, UpdateRemoteClusterRequest } from "./service_pb";
import { RemoteClusterV3 } from "../../legacy/types/types_pb";

/**
 * GetRemoteCluster retrieves a RemoteCluster by name.
 *
 * @generated from rpc teleport.presence.v1.PresenceService.GetRemoteCluster
 */
export const getRemoteCluster = {
  localName: "getRemoteCluster",
  name: "GetRemoteCluster",
  kind: MethodKind.Unary,
  I: GetRemoteClusterRequest,
  O: RemoteClusterV3,
  service: {
    typeName: "teleport.presence.v1.PresenceService"
  }
} as const;

/**
 * ListRemoteClusters retrieves a page of RemoteClusters.
 *
 * @generated from rpc teleport.presence.v1.PresenceService.ListRemoteClusters
 */
export const listRemoteClusters = {
  localName: "listRemoteClusters",
  name: "ListRemoteClusters",
  kind: MethodKind.Unary,
  I: ListRemoteClustersRequest,
  O: ListRemoteClustersResponse,
  service: {
    typeName: "teleport.presence.v1.PresenceService"
  }
} as const;

/**
 * UpdateRemoteCluster updates an existing RemoteCluster.
 *
 * @generated from rpc teleport.presence.v1.PresenceService.UpdateRemoteCluster
 */
export const updateRemoteCluster = {
  localName: "updateRemoteCluster",
  name: "UpdateRemoteCluster",
  kind: MethodKind.Unary,
  I: UpdateRemoteClusterRequest,
  O: RemoteClusterV3,
  service: {
    typeName: "teleport.presence.v1.PresenceService"
  }
} as const;

/**
 * DeleteRemoteCluster removes an existing RemoteCluster by name.
 *
 * @generated from rpc teleport.presence.v1.PresenceService.DeleteRemoteCluster
 */
export const deleteRemoteCluster = {
  localName: "deleteRemoteCluster",
  name: "DeleteRemoteCluster",
  kind: MethodKind.Unary,
  I: DeleteRemoteClusterRequest,
  O: Empty,
  service: {
    typeName: "teleport.presence.v1.PresenceService"
  }
} as const;
