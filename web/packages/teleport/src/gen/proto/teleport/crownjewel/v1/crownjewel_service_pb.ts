// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/crownjewel/v1/crownjewel_service.proto (package teleport.crownjewel.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { CrownJewel } from "./crownjewel_pb";

/**
 * CrownJewelRequest is a request to create a new CrownJewel.
 *
 * @generated from message teleport.crownjewel.v1.CreateCrownJewelRequest
 */
export class CreateCrownJewelRequest extends Message<CreateCrownJewelRequest> {
  /**
   * @generated from field: teleport.crownjewel.v1.CrownJewel crown_jewel = 2;
   */
  crownJewel?: CrownJewel;

  constructor(data?: PartialMessage<CreateCrownJewelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.crownjewel.v1.CreateCrownJewelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "crown_jewel", kind: "message", T: CrownJewel },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCrownJewelRequest {
    return new CreateCrownJewelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCrownJewelRequest {
    return new CreateCrownJewelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCrownJewelRequest {
    return new CreateCrownJewelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCrownJewelRequest | PlainMessage<CreateCrownJewelRequest> | undefined, b: CreateCrownJewelRequest | PlainMessage<CreateCrownJewelRequest> | undefined): boolean {
    return proto3.util.equals(CreateCrownJewelRequest, a, b);
  }
}

/**
 * GetCrownJewelRequest is a request to get a CrownJewel by name.
 *
 * @generated from message teleport.crownjewel.v1.GetCrownJewelRequest
 */
export class GetCrownJewelRequest extends Message<GetCrownJewelRequest> {
  /**
   * Name is the name of the CrownJewel to get.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetCrownJewelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.crownjewel.v1.GetCrownJewelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCrownJewelRequest {
    return new GetCrownJewelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCrownJewelRequest {
    return new GetCrownJewelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCrownJewelRequest {
    return new GetCrownJewelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCrownJewelRequest | PlainMessage<GetCrownJewelRequest> | undefined, b: GetCrownJewelRequest | PlainMessage<GetCrownJewelRequest> | undefined): boolean {
    return proto3.util.equals(GetCrownJewelRequest, a, b);
  }
}

/**
 * ListCrownJewelsRequest is a request to get a list of CrownJewels.
 *
 * @generated from message teleport.crownjewel.v1.ListCrownJewelsRequest
 */
export class ListCrownJewelsRequest extends Message<ListCrownJewelsRequest> {
  /**
   * page_size is the maximum number of items to return.
   * The server may impose a different page size at its discretion.
   *
   * @generated from field: int64 page_size = 1;
   */
  pageSize = protoInt64.zero;

  /**
   * page_token is the next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListCrownJewelsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.crownjewel.v1.ListCrownJewelsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCrownJewelsRequest {
    return new ListCrownJewelsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCrownJewelsRequest {
    return new ListCrownJewelsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCrownJewelsRequest {
    return new ListCrownJewelsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListCrownJewelsRequest | PlainMessage<ListCrownJewelsRequest> | undefined, b: ListCrownJewelsRequest | PlainMessage<ListCrownJewelsRequest> | undefined): boolean {
    return proto3.util.equals(ListCrownJewelsRequest, a, b);
  }
}

/**
 * ListCrownJewelsResponse is a response to GetCrownJewelsRequest.
 *
 * @generated from message teleport.crownjewel.v1.ListCrownJewelsResponse
 */
export class ListCrownJewelsResponse extends Message<ListCrownJewelsResponse> {
  /**
   * @generated from field: repeated teleport.crownjewel.v1.CrownJewel crown_jewels = 1;
   */
  crownJewels: CrownJewel[] = [];

  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListCrownJewelsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.crownjewel.v1.ListCrownJewelsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "crown_jewels", kind: "message", T: CrownJewel, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCrownJewelsResponse {
    return new ListCrownJewelsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCrownJewelsResponse {
    return new ListCrownJewelsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCrownJewelsResponse {
    return new ListCrownJewelsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListCrownJewelsResponse | PlainMessage<ListCrownJewelsResponse> | undefined, b: ListCrownJewelsResponse | PlainMessage<ListCrownJewelsResponse> | undefined): boolean {
    return proto3.util.equals(ListCrownJewelsResponse, a, b);
  }
}

/**
 * UpdateCrownJewelRequest is a request to update an existing CrownJewel.
 *
 * @generated from message teleport.crownjewel.v1.UpdateCrownJewelRequest
 */
export class UpdateCrownJewelRequest extends Message<UpdateCrownJewelRequest> {
  /**
   * @generated from field: teleport.crownjewel.v1.CrownJewel crown_jewel = 2;
   */
  crownJewel?: CrownJewel;

  constructor(data?: PartialMessage<UpdateCrownJewelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.crownjewel.v1.UpdateCrownJewelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "crown_jewel", kind: "message", T: CrownJewel },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCrownJewelRequest {
    return new UpdateCrownJewelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCrownJewelRequest {
    return new UpdateCrownJewelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCrownJewelRequest {
    return new UpdateCrownJewelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCrownJewelRequest | PlainMessage<UpdateCrownJewelRequest> | undefined, b: UpdateCrownJewelRequest | PlainMessage<UpdateCrownJewelRequest> | undefined): boolean {
    return proto3.util.equals(UpdateCrownJewelRequest, a, b);
  }
}

/**
 * UpsertCrownJewelRequest is a request to upsert a CrownJewel.
 *
 * @generated from message teleport.crownjewel.v1.UpsertCrownJewelRequest
 */
export class UpsertCrownJewelRequest extends Message<UpsertCrownJewelRequest> {
  /**
   * @generated from field: teleport.crownjewel.v1.CrownJewel crown_jewel = 2;
   */
  crownJewel?: CrownJewel;

  constructor(data?: PartialMessage<UpsertCrownJewelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.crownjewel.v1.UpsertCrownJewelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "crown_jewel", kind: "message", T: CrownJewel },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertCrownJewelRequest {
    return new UpsertCrownJewelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertCrownJewelRequest {
    return new UpsertCrownJewelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertCrownJewelRequest {
    return new UpsertCrownJewelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertCrownJewelRequest | PlainMessage<UpsertCrownJewelRequest> | undefined, b: UpsertCrownJewelRequest | PlainMessage<UpsertCrownJewelRequest> | undefined): boolean {
    return proto3.util.equals(UpsertCrownJewelRequest, a, b);
  }
}

/**
 * DeleteCrownJewelRequest is a request to delete a CrownJewel.
 *
 * @generated from message teleport.crownjewel.v1.DeleteCrownJewelRequest
 */
export class DeleteCrownJewelRequest extends Message<DeleteCrownJewelRequest> {
  /**
   * Name is the name of the CrownJewel to delete.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteCrownJewelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.crownjewel.v1.DeleteCrownJewelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCrownJewelRequest {
    return new DeleteCrownJewelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCrownJewelRequest {
    return new DeleteCrownJewelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCrownJewelRequest {
    return new DeleteCrownJewelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCrownJewelRequest | PlainMessage<DeleteCrownJewelRequest> | undefined, b: DeleteCrownJewelRequest | PlainMessage<DeleteCrownJewelRequest> | undefined): boolean {
    return proto3.util.equals(DeleteCrownJewelRequest, a, b);
  }
}

