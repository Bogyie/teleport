// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/crownjewel/v1/crownjewel_service.proto (package teleport.crownjewel.v1, syntax proto3)
/* eslint-disable */

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { CreateCrownJewelRequest, DeleteCrownJewelRequest, GetCrownJewelRequest, ListCrownJewelsRequest, ListCrownJewelsResponse, UpdateCrownJewelRequest, UpsertCrownJewelRequest } from "./crownjewel_service_pb";
import { CrownJewel } from "./crownjewel_pb";

/**
 * CreateCrownJewel creates a new CrownJewel.
 *
 * @generated from rpc teleport.crownjewel.v1.CrownJewelService.CreateCrownJewel
 */
export const createCrownJewel = {
  localName: "createCrownJewel",
  name: "CreateCrownJewel",
  kind: MethodKind.Unary,
  I: CreateCrownJewelRequest,
  O: CrownJewel,
  service: {
    typeName: "teleport.crownjewel.v1.CrownJewelService"
  }
} as const;

/**
 * GetCrownJewel gets a CrownJewel by name.
 *
 * @generated from rpc teleport.crownjewel.v1.CrownJewelService.GetCrownJewel
 */
export const getCrownJewel = {
  localName: "getCrownJewel",
  name: "GetCrownJewel",
  kind: MethodKind.Unary,
  I: GetCrownJewelRequest,
  O: CrownJewel,
  service: {
    typeName: "teleport.crownjewel.v1.CrownJewelService"
  }
} as const;

/**
 * ListCrownJewels returns a list of CrownJewels. It supports pagination.
 *
 * @generated from rpc teleport.crownjewel.v1.CrownJewelService.ListCrownJewels
 */
export const listCrownJewels = {
  localName: "listCrownJewels",
  name: "ListCrownJewels",
  kind: MethodKind.Unary,
  I: ListCrownJewelsRequest,
  O: ListCrownJewelsResponse,
  service: {
    typeName: "teleport.crownjewel.v1.CrownJewelService"
  }
} as const;

/**
 * UpdateCrownJewel updates an existing CrownJewel.
 *
 * @generated from rpc teleport.crownjewel.v1.CrownJewelService.UpdateCrownJewel
 */
export const updateCrownJewel = {
  localName: "updateCrownJewel",
  name: "UpdateCrownJewel",
  kind: MethodKind.Unary,
  I: UpdateCrownJewelRequest,
  O: CrownJewel,
  service: {
    typeName: "teleport.crownjewel.v1.CrownJewelService"
  }
} as const;

/**
 * UpsertCrownJewel upserts a CrownJewel.
 *
 * @generated from rpc teleport.crownjewel.v1.CrownJewelService.UpsertCrownJewel
 */
export const upsertCrownJewel = {
  localName: "upsertCrownJewel",
  name: "UpsertCrownJewel",
  kind: MethodKind.Unary,
  I: UpsertCrownJewelRequest,
  O: CrownJewel,
  service: {
    typeName: "teleport.crownjewel.v1.CrownJewelService"
  }
} as const;

/**
 * DeleteCrownJewel deletes a CrownJewel.
 *
 * @generated from rpc teleport.crownjewel.v1.CrownJewelService.DeleteCrownJewel
 */
export const deleteCrownJewel = {
  localName: "deleteCrownJewel",
  name: "DeleteCrownJewel",
  kind: MethodKind.Unary,
  I: DeleteCrownJewelRequest,
  O: Empty,
  service: {
    typeName: "teleport.crownjewel.v1.CrownJewelService"
  }
} as const;
