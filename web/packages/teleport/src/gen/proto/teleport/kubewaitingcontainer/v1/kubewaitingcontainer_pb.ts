// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/kubewaitingcontainer/v1/kubewaitingcontainer.proto (package teleport.kubewaitingcontainer.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Metadata } from "../../header/v1/metadata_pb";

/**
 * KubernetesWaitingContainer is a Kubernetes pod that has ephemeral containers
 * waiting to be created until moderated session requirements are met.
 *
 * @generated from message teleport.kubewaitingcontainer.v1.KubernetesWaitingContainer
 */
export class KubernetesWaitingContainer extends Message<KubernetesWaitingContainer> {
  /**
   * kind is a resource kind
   *
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * sub_kind is an optional resource sub kind, used in some resources
   *
   * @generated from field: string sub_kind = 2;
   */
  subKind = "";

  /**
   * version is the resource version. It must be specified.
   * Supported values are: `v1`.
   *
   * @generated from field: string version = 3;
   */
  version = "";

  /**
   * metadata is resource metadata
   *
   * @generated from field: teleport.header.v1.Metadata metadata = 4;
   */
  metadata?: Metadata;

  /**
   * spec is the Kubernetes waiting container spec.
   *
   * @generated from field: teleport.kubewaitingcontainer.v1.KubernetesWaitingContainerSpec spec = 5;
   */
  spec?: KubernetesWaitingContainerSpec;

  constructor(data?: PartialMessage<KubernetesWaitingContainer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.kubewaitingcontainer.v1.KubernetesWaitingContainer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sub_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata", kind: "message", T: Metadata },
    { no: 5, name: "spec", kind: "message", T: KubernetesWaitingContainerSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KubernetesWaitingContainer {
    return new KubernetesWaitingContainer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KubernetesWaitingContainer {
    return new KubernetesWaitingContainer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KubernetesWaitingContainer {
    return new KubernetesWaitingContainer().fromJsonString(jsonString, options);
  }

  static equals(a: KubernetesWaitingContainer | PlainMessage<KubernetesWaitingContainer> | undefined, b: KubernetesWaitingContainer | PlainMessage<KubernetesWaitingContainer> | undefined): boolean {
    return proto3.util.equals(KubernetesWaitingContainer, a, b);
  }
}

/**
 * KubernetesWaitingContainerSpec is the Kubernetes waiting ephemeral container spec.
 *
 * @generated from message teleport.kubewaitingcontainer.v1.KubernetesWaitingContainerSpec
 */
export class KubernetesWaitingContainerSpec extends Message<KubernetesWaitingContainerSpec> {
  /**
   * username is the Teleport user that attempted to create the container
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * cluster is the Kubernetes cluster of this container
   *
   * @generated from field: string cluster = 2;
   */
  cluster = "";

  /**
   * namespace is the Kubernetes namespace of this container
   *
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  /**
   * pod_name is the name of the parent pod
   *
   * @generated from field: string pod_name = 4;
   */
  podName = "";

  /**
   * container_name is the name of the ephemeral container
   *
   * @generated from field: string container_name = 5;
   */
  containerName = "";

  /**
   * patch is the patch that should be applied to the parent pod
   * to create this ephemeral container
   *
   * @generated from field: bytes patch = 6;
   */
  patch = new Uint8Array(0);

  /**
   * patch_type identifies the patch model to be applied.
   *
   * @generated from field: string patch_type = 7;
   */
  patchType = "";

  constructor(data?: PartialMessage<KubernetesWaitingContainerSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.kubewaitingcontainer.v1.KubernetesWaitingContainerSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cluster", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pod_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "container_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "patch", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "patch_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KubernetesWaitingContainerSpec {
    return new KubernetesWaitingContainerSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KubernetesWaitingContainerSpec {
    return new KubernetesWaitingContainerSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KubernetesWaitingContainerSpec {
    return new KubernetesWaitingContainerSpec().fromJsonString(jsonString, options);
  }

  static equals(a: KubernetesWaitingContainerSpec | PlainMessage<KubernetesWaitingContainerSpec> | undefined, b: KubernetesWaitingContainerSpec | PlainMessage<KubernetesWaitingContainerSpec> | undefined): boolean {
    return proto3.util.equals(KubernetesWaitingContainerSpec, a, b);
  }
}

