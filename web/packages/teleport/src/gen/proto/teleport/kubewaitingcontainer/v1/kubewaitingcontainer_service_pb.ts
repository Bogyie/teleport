// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/kubewaitingcontainer/v1/kubewaitingcontainer_service.proto (package teleport.kubewaitingcontainer.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { KubernetesWaitingContainer } from "./kubewaitingcontainer_pb";

/**
 * ListKubernetesWaitingContainersRequest is the request for ListKubernetesWaitingContainers.
 *
 * @generated from message teleport.kubewaitingcontainer.v1.ListKubernetesWaitingContainersRequest
 */
export class ListKubernetesWaitingContainersRequest extends Message<ListKubernetesWaitingContainersRequest> {
  /**
   * The maximum number of items to return.
   * The server may impose a different page size at its discretion.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * The next_page_token value returned from a previous ListFoo request, if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListKubernetesWaitingContainersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.kubewaitingcontainer.v1.ListKubernetesWaitingContainersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListKubernetesWaitingContainersRequest {
    return new ListKubernetesWaitingContainersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListKubernetesWaitingContainersRequest {
    return new ListKubernetesWaitingContainersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListKubernetesWaitingContainersRequest {
    return new ListKubernetesWaitingContainersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListKubernetesWaitingContainersRequest | PlainMessage<ListKubernetesWaitingContainersRequest> | undefined, b: ListKubernetesWaitingContainersRequest | PlainMessage<ListKubernetesWaitingContainersRequest> | undefined): boolean {
    return proto3.util.equals(ListKubernetesWaitingContainersRequest, a, b);
  }
}

/**
 * ListKubernetesWaitingContainersResponse is the response for ListKubernetesWaitingContainers.
 *
 * @generated from message teleport.kubewaitingcontainer.v1.ListKubernetesWaitingContainersResponse
 */
export class ListKubernetesWaitingContainersResponse extends Message<ListKubernetesWaitingContainersResponse> {
  /**
   * @generated from field: repeated teleport.kubewaitingcontainer.v1.KubernetesWaitingContainer waiting_containers = 1;
   */
  waitingContainers: KubernetesWaitingContainer[] = [];

  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results exist.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListKubernetesWaitingContainersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.kubewaitingcontainer.v1.ListKubernetesWaitingContainersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "waiting_containers", kind: "message", T: KubernetesWaitingContainer, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListKubernetesWaitingContainersResponse {
    return new ListKubernetesWaitingContainersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListKubernetesWaitingContainersResponse {
    return new ListKubernetesWaitingContainersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListKubernetesWaitingContainersResponse {
    return new ListKubernetesWaitingContainersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListKubernetesWaitingContainersResponse | PlainMessage<ListKubernetesWaitingContainersResponse> | undefined, b: ListKubernetesWaitingContainersResponse | PlainMessage<ListKubernetesWaitingContainersResponse> | undefined): boolean {
    return proto3.util.equals(ListKubernetesWaitingContainersResponse, a, b);
  }
}

/**
 * GetKubernetesWaitingContainerRequest is the request for GetKubernetesWaitingContainer.
 *
 * @generated from message teleport.kubewaitingcontainer.v1.GetKubernetesWaitingContainerRequest
 */
export class GetKubernetesWaitingContainerRequest extends Message<GetKubernetesWaitingContainerRequest> {
  /**
   * username is the Teleport user that attempted to create the container
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * cluster is the Kubernetes cluster of this container
   *
   * @generated from field: string cluster = 2;
   */
  cluster = "";

  /**
   * namespace is the Kubernetes namespace of this container
   *
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  /**
   * pod_name is the name of the parent pod
   *
   * @generated from field: string pod_name = 4;
   */
  podName = "";

  /**
   * container_name is the name of the ephemeral container
   *
   * @generated from field: string container_name = 5;
   */
  containerName = "";

  constructor(data?: PartialMessage<GetKubernetesWaitingContainerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.kubewaitingcontainer.v1.GetKubernetesWaitingContainerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cluster", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pod_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "container_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKubernetesWaitingContainerRequest {
    return new GetKubernetesWaitingContainerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKubernetesWaitingContainerRequest {
    return new GetKubernetesWaitingContainerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKubernetesWaitingContainerRequest {
    return new GetKubernetesWaitingContainerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetKubernetesWaitingContainerRequest | PlainMessage<GetKubernetesWaitingContainerRequest> | undefined, b: GetKubernetesWaitingContainerRequest | PlainMessage<GetKubernetesWaitingContainerRequest> | undefined): boolean {
    return proto3.util.equals(GetKubernetesWaitingContainerRequest, a, b);
  }
}

/**
 * CreateKubernetesWaitingContainerRequest is the request for CreateKubernetesWaitingContainer.
 *
 * @generated from message teleport.kubewaitingcontainer.v1.CreateKubernetesWaitingContainerRequest
 */
export class CreateKubernetesWaitingContainerRequest extends Message<CreateKubernetesWaitingContainerRequest> {
  /**
   * waiting_container is the waiting container resource.
   *
   * @generated from field: teleport.kubewaitingcontainer.v1.KubernetesWaitingContainer waiting_container = 1;
   */
  waitingContainer?: KubernetesWaitingContainer;

  constructor(data?: PartialMessage<CreateKubernetesWaitingContainerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.kubewaitingcontainer.v1.CreateKubernetesWaitingContainerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "waiting_container", kind: "message", T: KubernetesWaitingContainer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateKubernetesWaitingContainerRequest {
    return new CreateKubernetesWaitingContainerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateKubernetesWaitingContainerRequest {
    return new CreateKubernetesWaitingContainerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateKubernetesWaitingContainerRequest {
    return new CreateKubernetesWaitingContainerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateKubernetesWaitingContainerRequest | PlainMessage<CreateKubernetesWaitingContainerRequest> | undefined, b: CreateKubernetesWaitingContainerRequest | PlainMessage<CreateKubernetesWaitingContainerRequest> | undefined): boolean {
    return proto3.util.equals(CreateKubernetesWaitingContainerRequest, a, b);
  }
}

/**
 * DeleteKubernetesWaitingContainerRequest is the request for DeleteKubernetesWaitingContainer.
 *
 * @generated from message teleport.kubewaitingcontainer.v1.DeleteKubernetesWaitingContainerRequest
 */
export class DeleteKubernetesWaitingContainerRequest extends Message<DeleteKubernetesWaitingContainerRequest> {
  /**
   * username is the Teleport user that attempted to create the container
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * cluster is the Kubernetes cluster of this container
   *
   * @generated from field: string cluster = 2;
   */
  cluster = "";

  /**
   * namespace is the Kubernetes namespace of this container
   *
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  /**
   * pod_name is the name of the parent pod
   *
   * @generated from field: string pod_name = 4;
   */
  podName = "";

  /**
   * container_name is the name of the ephemeral container
   *
   * @generated from field: string container_name = 5;
   */
  containerName = "";

  constructor(data?: PartialMessage<DeleteKubernetesWaitingContainerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.kubewaitingcontainer.v1.DeleteKubernetesWaitingContainerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cluster", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pod_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "container_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteKubernetesWaitingContainerRequest {
    return new DeleteKubernetesWaitingContainerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteKubernetesWaitingContainerRequest {
    return new DeleteKubernetesWaitingContainerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteKubernetesWaitingContainerRequest {
    return new DeleteKubernetesWaitingContainerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteKubernetesWaitingContainerRequest | PlainMessage<DeleteKubernetesWaitingContainerRequest> | undefined, b: DeleteKubernetesWaitingContainerRequest | PlainMessage<DeleteKubernetesWaitingContainerRequest> | undefined): boolean {
    return proto3.util.equals(DeleteKubernetesWaitingContainerRequest, a, b);
  }
}

