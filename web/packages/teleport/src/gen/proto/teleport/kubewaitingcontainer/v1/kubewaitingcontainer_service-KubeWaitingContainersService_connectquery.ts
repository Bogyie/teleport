// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/kubewaitingcontainer/v1/kubewaitingcontainer_service.proto (package teleport.kubewaitingcontainer.v1, syntax proto3)
/* eslint-disable */

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { CreateKubernetesWaitingContainerRequest, DeleteKubernetesWaitingContainerRequest, GetKubernetesWaitingContainerRequest, ListKubernetesWaitingContainersRequest, ListKubernetesWaitingContainersResponse } from "./kubewaitingcontainer_service_pb";
import { KubernetesWaitingContainer } from "./kubewaitingcontainer_pb";

/**
 * ListKubernetesWaitingContainers returns a Kubernetes ephemeral
 * container that is waiting to be created.
 *
 * @generated from rpc teleport.kubewaitingcontainer.v1.KubeWaitingContainersService.ListKubernetesWaitingContainers
 */
export const listKubernetesWaitingContainers = {
  localName: "listKubernetesWaitingContainers",
  name: "ListKubernetesWaitingContainers",
  kind: MethodKind.Unary,
  I: ListKubernetesWaitingContainersRequest,
  O: ListKubernetesWaitingContainersResponse,
  service: {
    typeName: "teleport.kubewaitingcontainer.v1.KubeWaitingContainersService"
  }
} as const;

/**
 * GetKubernetesWaitingContainer returns a Kubernetes ephemeral
 * container that is waiting to be created.
 *
 * @generated from rpc teleport.kubewaitingcontainer.v1.KubeWaitingContainersService.GetKubernetesWaitingContainer
 */
export const getKubernetesWaitingContainer = {
  localName: "getKubernetesWaitingContainer",
  name: "GetKubernetesWaitingContainer",
  kind: MethodKind.Unary,
  I: GetKubernetesWaitingContainerRequest,
  O: KubernetesWaitingContainer,
  service: {
    typeName: "teleport.kubewaitingcontainer.v1.KubeWaitingContainersService"
  }
} as const;

/**
 * CreateKubernetesWaitingContainer creates a Kubernetes ephemeral
 * container that is waiting to be created.
 *
 * @generated from rpc teleport.kubewaitingcontainer.v1.KubeWaitingContainersService.CreateKubernetesWaitingContainer
 */
export const createKubernetesWaitingContainer = {
  localName: "createKubernetesWaitingContainer",
  name: "CreateKubernetesWaitingContainer",
  kind: MethodKind.Unary,
  I: CreateKubernetesWaitingContainerRequest,
  O: KubernetesWaitingContainer,
  service: {
    typeName: "teleport.kubewaitingcontainer.v1.KubeWaitingContainersService"
  }
} as const;

/**
 * DeleteKubernetesWaitingContainer deletes a Kubernetes ephemeral
 * container that is waiting to be created.
 *
 * @generated from rpc teleport.kubewaitingcontainer.v1.KubeWaitingContainersService.DeleteKubernetesWaitingContainer
 */
export const deleteKubernetesWaitingContainer = {
  localName: "deleteKubernetesWaitingContainer",
  name: "DeleteKubernetesWaitingContainer",
  kind: MethodKind.Unary,
  I: DeleteKubernetesWaitingContainerRequest,
  O: Empty,
  service: {
    typeName: "teleport.kubewaitingcontainer.v1.KubeWaitingContainersService"
  }
} as const;
