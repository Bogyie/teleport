// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/trust/v1/trust_service.proto (package teleport.trust.v1, syntax proto3)
/* eslint-disable */

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { DeleteCertAuthorityRequest, GenerateHostCertRequest, GenerateHostCertResponse, GetCertAuthoritiesRequest, GetCertAuthoritiesResponse, GetCertAuthorityRequest, RotateCertAuthorityRequest, RotateCertAuthorityResponse, RotateExternalCertAuthorityRequest, RotateExternalCertAuthorityResponse, UpsertCertAuthorityRequest } from "./trust_service_pb";
import { CertAuthorityV2 } from "../../legacy/types/types_pb";

/**
 * GetCertAuthority returns a cert authority by type and domain.
 *
 * @generated from rpc teleport.trust.v1.TrustService.GetCertAuthority
 */
export const getCertAuthority = {
  localName: "getCertAuthority",
  name: "GetCertAuthority",
  kind: MethodKind.Unary,
  I: GetCertAuthorityRequest,
  O: CertAuthorityV2,
  service: {
    typeName: "teleport.trust.v1.TrustService"
  }
} as const;

/**
 * GetCertAuthorities returns all cert authorities with the specified type.
 *
 * @generated from rpc teleport.trust.v1.TrustService.GetCertAuthorities
 */
export const getCertAuthorities = {
  localName: "getCertAuthorities",
  name: "GetCertAuthorities",
  kind: MethodKind.Unary,
  I: GetCertAuthoritiesRequest,
  O: GetCertAuthoritiesResponse,
  service: {
    typeName: "teleport.trust.v1.TrustService"
  }
} as const;

/**
 * DeleteCertAuthority deletes the matching cert authority.
 *
 * @generated from rpc teleport.trust.v1.TrustService.DeleteCertAuthority
 */
export const deleteCertAuthority = {
  localName: "deleteCertAuthority",
  name: "DeleteCertAuthority",
  kind: MethodKind.Unary,
  I: DeleteCertAuthorityRequest,
  O: Empty,
  service: {
    typeName: "teleport.trust.v1.TrustService"
  }
} as const;

/**
 * UpsertCertAuthority creates or updates the provided cert authority.
 *
 * @generated from rpc teleport.trust.v1.TrustService.UpsertCertAuthority
 */
export const upsertCertAuthority = {
  localName: "upsertCertAuthority",
  name: "UpsertCertAuthority",
  kind: MethodKind.Unary,
  I: UpsertCertAuthorityRequest,
  O: CertAuthorityV2,
  service: {
    typeName: "teleport.trust.v1.TrustService"
  }
} as const;

/**
 * RotateCertAuthority is a request to start rotation of the certificate authority.
 *
 * @generated from rpc teleport.trust.v1.TrustService.RotateCertAuthority
 */
export const rotateCertAuthority = {
  localName: "rotateCertAuthority",
  name: "RotateCertAuthority",
  kind: MethodKind.Unary,
  I: RotateCertAuthorityRequest,
  O: RotateCertAuthorityResponse,
  service: {
    typeName: "teleport.trust.v1.TrustService"
  }
} as const;

/**
 * RotateExternalCertAuthority rotates an external cert authority.
 *
 * @generated from rpc teleport.trust.v1.TrustService.RotateExternalCertAuthority
 */
export const rotateExternalCertAuthority = {
  localName: "rotateExternalCertAuthority",
  name: "RotateExternalCertAuthority",
  kind: MethodKind.Unary,
  I: RotateExternalCertAuthorityRequest,
  O: RotateExternalCertAuthorityResponse,
  service: {
    typeName: "teleport.trust.v1.TrustService"
  }
} as const;

/**
 * GenerateHostCert takes a public key in the OpenSSH `authorized_keys` format and returns
 * a SSH certificate signed by the Host CA.
 *
 * @generated from rpc teleport.trust.v1.TrustService.GenerateHostCert
 */
export const generateHostCert = {
  localName: "generateHostCert",
  name: "GenerateHostCert",
  kind: MethodKind.Unary,
  I: GenerateHostCertRequest,
  O: GenerateHostCertResponse,
  service: {
    typeName: "teleport.trust.v1.TrustService"
  }
} as const;
