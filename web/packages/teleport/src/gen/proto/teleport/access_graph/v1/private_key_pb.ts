// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/access_graph/v1/private_key.proto (package teleport.access_graph.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Metadata } from "../../header/v1/metadata_pb";

/**
 * PublicKeyMode is the mode of the public key.
 * The public key can be derived from the private key, stored in a separate file, or the private key was password protected
 * and we could not extract the public key from it or from the file.
 *
 * @generated from enum teleport.access_graph.v1.PublicKeyMode
 */
export enum PublicKeyMode {
  /**
   * PUBLIC_KEY_MODE_UNSPECIFIED is an invalid state.
   *
   * @generated from enum value: PUBLIC_KEY_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * PUBLIC_KEY_MODE_DERIVED is the state where the public key is derived from the private key.
   *
   * @generated from enum value: PUBLIC_KEY_MODE_DERIVED = 1;
   */
  DERIVED = 1,

  /**
   * PUBLIC_KEY_MODE_PUB_FILE is a state where the public key is stored in a separate file from the private key.
   * The private key is password protected and we could not extract the public key from it.
   * This mode is used when the private key is password protected and there is a <key>.pub file next to the private key
   * that contains the public key.
   *
   * @generated from enum value: PUBLIC_KEY_MODE_PUB_FILE = 2;
   */
  PUB_FILE = 2,

  /**
   * PUBLIC_KEY_MODE_PROTECTED is a state where the private key is password protected and we could not extract the public key from it
   * or from the .pub file.
   *
   * @generated from enum value: PUBLIC_KEY_MODE_PROTECTED = 3;
   */
  PROTECTED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(PublicKeyMode)
proto3.util.setEnumType(PublicKeyMode, "teleport.access_graph.v1.PublicKeyMode", [
  { no: 0, name: "PUBLIC_KEY_MODE_UNSPECIFIED" },
  { no: 1, name: "PUBLIC_KEY_MODE_DERIVED" },
  { no: 2, name: "PUBLIC_KEY_MODE_PUB_FILE" },
  { no: 3, name: "PUBLIC_KEY_MODE_PROTECTED" },
]);

/**
 * The `PrivateKey` message represents a private key entry for a specific local user.
 * It serves as a reference to a private key located on a user's laptop. Note that it *NEVER* contains the private key itself.
 * Instead, it stores metadata related to the key, including the fingerprint of the public key, the device trust identifier, and the public key mode.
 * The Teleport Access Graph uses this metadata to assess whether a particular private key is authorized to access a user on the node without using Teleport.
 *
 * @generated from message teleport.access_graph.v1.PrivateKey
 */
export class PrivateKey extends Message<PrivateKey> {
  /**
   * metadata is the PrivateKey's metadata.
   *
   * @generated from field: teleport.header.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * kind is a resource kind.
   *
   * @generated from field: string kind = 2;
   */
  kind = "";

  /**
   * sub_kind is an optional resource sub kind, used in some resources.
   *
   * @generated from field: string sub_kind = 3;
   */
  subKind = "";

  /**
   * version is version.
   *
   * @generated from field: string version = 4;
   */
  version = "";

  /**
   * Spec is a PrivateKey specification.
   *
   * @generated from field: teleport.access_graph.v1.PrivateKeySpec spec = 5;
   */
  spec?: PrivateKeySpec;

  constructor(data?: PartialMessage<PrivateKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.access_graph.v1.PrivateKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sub_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "spec", kind: "message", T: PrivateKeySpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrivateKey {
    return new PrivateKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrivateKey {
    return new PrivateKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrivateKey {
    return new PrivateKey().fromJsonString(jsonString, options);
  }

  static equals(a: PrivateKey | PlainMessage<PrivateKey> | undefined, b: PrivateKey | PlainMessage<PrivateKey> | undefined): boolean {
    return proto3.util.equals(PrivateKey, a, b);
  }
}

/**
 * PrivateKeySpec is the private key spec.
 *
 * @generated from message teleport.access_graph.v1.PrivateKeySpec
 */
export class PrivateKeySpec extends Message<PrivateKeySpec> {
  /**
   * device_id is the device trust identifier of the device that owns the key.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId = "";

  /**
   * public_key_fingerprint is the SHA256 of the SSH public key corresponding to
   * the private key.
   *
   * @generated from field: string public_key_fingerprint = 2;
   */
  publicKeyFingerprint = "";

  /**
   * public_key_mode is the public key mode.
   *
   * @generated from field: teleport.access_graph.v1.PublicKeyMode public_key_mode = 3;
   */
  publicKeyMode = PublicKeyMode.UNSPECIFIED;

  constructor(data?: PartialMessage<PrivateKeySpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.access_graph.v1.PrivateKeySpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "device_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "public_key_fingerprint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "public_key_mode", kind: "enum", T: proto3.getEnumType(PublicKeyMode) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrivateKeySpec {
    return new PrivateKeySpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrivateKeySpec {
    return new PrivateKeySpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrivateKeySpec {
    return new PrivateKeySpec().fromJsonString(jsonString, options);
  }

  static equals(a: PrivateKeySpec | PlainMessage<PrivateKeySpec> | undefined, b: PrivateKeySpec | PlainMessage<PrivateKeySpec> | undefined): boolean {
    return proto3.util.equals(PrivateKeySpec, a, b);
  }
}

