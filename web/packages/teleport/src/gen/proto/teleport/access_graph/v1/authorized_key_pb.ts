// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/access_graph/v1/authorized_key.proto (package teleport.access_graph.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Metadata } from "../../header/v1/metadata_pb";

/**
 * The `AuthorizedKey` message represents an authorized key entry for a specific local user.
 * These authorized keys are generated by the server when a particular SSH AuthorizedKey is granted access to a user on the node.
 *
 * @generated from message teleport.access_graph.v1.AuthorizedKey
 */
export class AuthorizedKey extends Message<AuthorizedKey> {
  /**
   * metadata is the AuthorizedKey's metadata.
   *
   * @generated from field: teleport.header.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * kind is a resource kind.
   *
   * @generated from field: string kind = 2;
   */
  kind = "";

  /**
   * sub_kind is an optional resource sub kind, used in some resources.
   *
   * @generated from field: string sub_kind = 3;
   */
  subKind = "";

  /**
   * version is version.
   *
   * @generated from field: string version = 4;
   */
  version = "";

  /**
   * Spec is an AuthorizedKey specification.
   *
   * @generated from field: teleport.access_graph.v1.AuthorizedKeySpec spec = 5;
   */
  spec?: AuthorizedKeySpec;

  constructor(data?: PartialMessage<AuthorizedKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.access_graph.v1.AuthorizedKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sub_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "spec", kind: "message", T: AuthorizedKeySpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthorizedKey {
    return new AuthorizedKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthorizedKey {
    return new AuthorizedKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthorizedKey {
    return new AuthorizedKey().fromJsonString(jsonString, options);
  }

  static equals(a: AuthorizedKey | PlainMessage<AuthorizedKey> | undefined, b: AuthorizedKey | PlainMessage<AuthorizedKey> | undefined): boolean {
    return proto3.util.equals(AuthorizedKey, a, b);
  }
}

/**
 * AuthorizedKeySpec is the authorized key spec.
 *
 * @generated from message teleport.access_graph.v1.AuthorizedKeySpec
 */
export class AuthorizedKeySpec extends Message<AuthorizedKeySpec> {
  /**
   * host_id is the node identifier and must match the credentials used.
   *
   * @generated from field: string host_id = 1;
   */
  hostId = "";

  /**
   * key_fingerprint is the SHA256 SSH public key fingerprint.
   *
   * @generated from field: string key_fingerprint = 2;
   */
  keyFingerprint = "";

  /**
   * host_user is the user who can be accessed using the fingerprint above.
   *
   * @generated from field: string host_user = 3;
   */
  hostUser = "";

  /**
   * key_comment is the authorized key's comment.
   * Authorized keys consist of the following space-separated fields:
   * options, keytype, base64-encoded key, comment.  The options field is optional.
   *
   * @generated from field: string key_comment = 4;
   */
  keyComment = "";

  /**
   * key_type is the ssh's key type.
   *
   * @generated from field: string key_type = 5;
   */
  keyType = "";

  constructor(data?: PartialMessage<AuthorizedKeySpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.access_graph.v1.AuthorizedKeySpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key_fingerprint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "host_user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "key_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "key_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthorizedKeySpec {
    return new AuthorizedKeySpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthorizedKeySpec {
    return new AuthorizedKeySpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthorizedKeySpec {
    return new AuthorizedKeySpec().fromJsonString(jsonString, options);
  }

  static equals(a: AuthorizedKeySpec | PlainMessage<AuthorizedKeySpec> | undefined, b: AuthorizedKeySpec | PlainMessage<AuthorizedKeySpec> | undefined): boolean {
    return proto3.util.equals(AuthorizedKeySpec, a, b);
  }
}

