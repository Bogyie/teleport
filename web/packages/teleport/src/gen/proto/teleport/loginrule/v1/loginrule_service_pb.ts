// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/loginrule/v1/loginrule_service.proto (package teleport.loginrule.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { LoginRule } from "./loginrule_pb";
import { StringValues } from "../../legacy/types/wrappers/wrappers_pb";

/**
 * CreateLoginRuleRequest is a request to create a login rule.
 *
 * @generated from message teleport.loginrule.v1.CreateLoginRuleRequest
 */
export class CreateLoginRuleRequest extends Message<CreateLoginRuleRequest> {
  /**
   * LoginRule is the login rule to be created.
   *
   * @generated from field: teleport.loginrule.v1.LoginRule login_rule = 1;
   */
  loginRule?: LoginRule;

  constructor(data?: PartialMessage<CreateLoginRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.loginrule.v1.CreateLoginRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login_rule", kind: "message", T: LoginRule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateLoginRuleRequest {
    return new CreateLoginRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateLoginRuleRequest {
    return new CreateLoginRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateLoginRuleRequest {
    return new CreateLoginRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateLoginRuleRequest | PlainMessage<CreateLoginRuleRequest> | undefined, b: CreateLoginRuleRequest | PlainMessage<CreateLoginRuleRequest> | undefined): boolean {
    return proto3.util.equals(CreateLoginRuleRequest, a, b);
  }
}

/**
 * UpsertLoginRuleRequest is a request to upsert a login rule.
 *
 * @generated from message teleport.loginrule.v1.UpsertLoginRuleRequest
 */
export class UpsertLoginRuleRequest extends Message<UpsertLoginRuleRequest> {
  /**
   * LoginRule is the login rule to be created.
   *
   * @generated from field: teleport.loginrule.v1.LoginRule login_rule = 1;
   */
  loginRule?: LoginRule;

  constructor(data?: PartialMessage<UpsertLoginRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.loginrule.v1.UpsertLoginRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login_rule", kind: "message", T: LoginRule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertLoginRuleRequest {
    return new UpsertLoginRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertLoginRuleRequest {
    return new UpsertLoginRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertLoginRuleRequest {
    return new UpsertLoginRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertLoginRuleRequest | PlainMessage<UpsertLoginRuleRequest> | undefined, b: UpsertLoginRuleRequest | PlainMessage<UpsertLoginRuleRequest> | undefined): boolean {
    return proto3.util.equals(UpsertLoginRuleRequest, a, b);
  }
}

/**
 * GetLoginRuleRequest is a request to get a single login rule.
 *
 * @generated from message teleport.loginrule.v1.GetLoginRuleRequest
 */
export class GetLoginRuleRequest extends Message<GetLoginRuleRequest> {
  /**
   * Name is the name of the login rule to get.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetLoginRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.loginrule.v1.GetLoginRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLoginRuleRequest {
    return new GetLoginRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLoginRuleRequest {
    return new GetLoginRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLoginRuleRequest {
    return new GetLoginRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLoginRuleRequest | PlainMessage<GetLoginRuleRequest> | undefined, b: GetLoginRuleRequest | PlainMessage<GetLoginRuleRequest> | undefined): boolean {
    return proto3.util.equals(GetLoginRuleRequest, a, b);
  }
}

/**
 * ListLoginRulesRequest is a paginated request to list all login rules.
 *
 * @generated from message teleport.loginrule.v1.ListLoginRulesRequest
 */
export class ListLoginRulesRequest extends Message<ListLoginRulesRequest> {
  /**
   * PageSize is The maximum number of login rules to return in a single
   * reponse.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * PageToken is the NextPageToken value returned from a previous
   * ListLoginRules request, if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListLoginRulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.loginrule.v1.ListLoginRulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListLoginRulesRequest {
    return new ListLoginRulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListLoginRulesRequest {
    return new ListLoginRulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListLoginRulesRequest {
    return new ListLoginRulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListLoginRulesRequest | PlainMessage<ListLoginRulesRequest> | undefined, b: ListLoginRulesRequest | PlainMessage<ListLoginRulesRequest> | undefined): boolean {
    return proto3.util.equals(ListLoginRulesRequest, a, b);
  }
}

/**
 * ListLoginRulesResponse is a paginated response to a ListLoginRulesRequest.
 *
 * @generated from message teleport.loginrule.v1.ListLoginRulesResponse
 */
export class ListLoginRulesResponse extends Message<ListLoginRulesResponse> {
  /**
   * LoginRules is the list of login rules.
   *
   * @generated from field: repeated teleport.loginrule.v1.LoginRule login_rules = 1;
   */
  loginRules: LoginRule[] = [];

  /**
   * NextPageToken is a token to retrieve the next page of results, or empty
   * if there are no more results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListLoginRulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.loginrule.v1.ListLoginRulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login_rules", kind: "message", T: LoginRule, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListLoginRulesResponse {
    return new ListLoginRulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListLoginRulesResponse {
    return new ListLoginRulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListLoginRulesResponse {
    return new ListLoginRulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListLoginRulesResponse | PlainMessage<ListLoginRulesResponse> | undefined, b: ListLoginRulesResponse | PlainMessage<ListLoginRulesResponse> | undefined): boolean {
    return proto3.util.equals(ListLoginRulesResponse, a, b);
  }
}

/**
 * DeleteLoginRuleRequest is a request to delete a login rule.
 *
 * @generated from message teleport.loginrule.v1.DeleteLoginRuleRequest
 */
export class DeleteLoginRuleRequest extends Message<DeleteLoginRuleRequest> {
  /**
   * Name is the name of the login rule to delete.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteLoginRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.loginrule.v1.DeleteLoginRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteLoginRuleRequest {
    return new DeleteLoginRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteLoginRuleRequest {
    return new DeleteLoginRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteLoginRuleRequest {
    return new DeleteLoginRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteLoginRuleRequest | PlainMessage<DeleteLoginRuleRequest> | undefined, b: DeleteLoginRuleRequest | PlainMessage<DeleteLoginRuleRequest> | undefined): boolean {
    return proto3.util.equals(DeleteLoginRuleRequest, a, b);
  }
}

/**
 * TestLoginRuleRequest is a request to test a login rule against traits.
 *
 * @generated from message teleport.loginrule.v1.TestLoginRuleRequest
 */
export class TestLoginRuleRequest extends Message<TestLoginRuleRequest> {
  /**
   * LoginRules is the list of the rules to evaluate.
   *
   * @generated from field: repeated teleport.loginrule.v1.LoginRule login_rules = 1;
   */
  loginRules: LoginRule[] = [];

  /**
   * Traits are the user traits to test the login rule against.
   *
   * @generated from field: map<string, wrappers.StringValues> traits = 4;
   */
  traits: { [key: string]: StringValues } = {};

  /**
   * LoadFromCluster indicates if existing login rules should be included
   * when evaluating rules.
   *
   * @generated from field: bool load_from_cluster = 3;
   */
  loadFromCluster = false;

  constructor(data?: PartialMessage<TestLoginRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.loginrule.v1.TestLoginRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login_rules", kind: "message", T: LoginRule, repeated: true },
    { no: 4, name: "traits", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: StringValues} },
    { no: 3, name: "load_from_cluster", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestLoginRuleRequest {
    return new TestLoginRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestLoginRuleRequest {
    return new TestLoginRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestLoginRuleRequest {
    return new TestLoginRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TestLoginRuleRequest | PlainMessage<TestLoginRuleRequest> | undefined, b: TestLoginRuleRequest | PlainMessage<TestLoginRuleRequest> | undefined): boolean {
    return proto3.util.equals(TestLoginRuleRequest, a, b);
  }
}

/**
 * TestLoginRuleResponse is a response to a login rule test.
 *
 * @generated from message teleport.loginrule.v1.TestLoginRuleResponse
 */
export class TestLoginRuleResponse extends Message<TestLoginRuleResponse> {
  /**
   * Traits contain the output from evaluating the login rules.
   *
   * @generated from field: map<string, wrappers.StringValues> traits = 4;
   */
  traits: { [key: string]: StringValues } = {};

  constructor(data?: PartialMessage<TestLoginRuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.loginrule.v1.TestLoginRuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "traits", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: StringValues} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestLoginRuleResponse {
    return new TestLoginRuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestLoginRuleResponse {
    return new TestLoginRuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestLoginRuleResponse {
    return new TestLoginRuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TestLoginRuleResponse | PlainMessage<TestLoginRuleResponse> | undefined, b: TestLoginRuleResponse | PlainMessage<TestLoginRuleResponse> | undefined): boolean {
    return proto3.util.equals(TestLoginRuleResponse, a, b);
  }
}

