// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v1.4.2 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/integration/v1/integration_service.proto (package teleport.integration.v1, syntax proto3)
/* eslint-disable */

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { CreateIntegrationRequest, DeleteAllIntegrationsRequest, DeleteIntegrationRequest, GenerateAWSOIDCTokenRequest, GenerateAWSOIDCTokenResponse, GetIntegrationRequest, ListIntegrationsRequest, ListIntegrationsResponse, UpdateIntegrationRequest } from "./integration_service_pb";
import { IntegrationV1 } from "../../legacy/types/types_pb";

/**
 * ListIntegrations returns a paginated list of Integration resources.
 *
 * @generated from rpc teleport.integration.v1.IntegrationService.ListIntegrations
 */
export const listIntegrations = {
  localName: "listIntegrations",
  name: "ListIntegrations",
  kind: MethodKind.Unary,
  I: ListIntegrationsRequest,
  O: ListIntegrationsResponse,
  service: {
    typeName: "teleport.integration.v1.IntegrationService"
  }
} as const;

/**
 * GetIntegration returns the specified Integration resource.
 *
 * @generated from rpc teleport.integration.v1.IntegrationService.GetIntegration
 */
export const getIntegration = {
  localName: "getIntegration",
  name: "GetIntegration",
  kind: MethodKind.Unary,
  I: GetIntegrationRequest,
  O: IntegrationV1,
  service: {
    typeName: "teleport.integration.v1.IntegrationService"
  }
} as const;

/**
 * CreateIntegration creates a new Integration resource.
 *
 * @generated from rpc teleport.integration.v1.IntegrationService.CreateIntegration
 */
export const createIntegration = {
  localName: "createIntegration",
  name: "CreateIntegration",
  kind: MethodKind.Unary,
  I: CreateIntegrationRequest,
  O: IntegrationV1,
  service: {
    typeName: "teleport.integration.v1.IntegrationService"
  }
} as const;

/**
 * UpdateIntegration updates an existing Integration resource.
 *
 * @generated from rpc teleport.integration.v1.IntegrationService.UpdateIntegration
 */
export const updateIntegration = {
  localName: "updateIntegration",
  name: "UpdateIntegration",
  kind: MethodKind.Unary,
  I: UpdateIntegrationRequest,
  O: IntegrationV1,
  service: {
    typeName: "teleport.integration.v1.IntegrationService"
  }
} as const;

/**
 * DeleteIntegration removes the specified Integration resource.
 *
 * @generated from rpc teleport.integration.v1.IntegrationService.DeleteIntegration
 */
export const deleteIntegration = {
  localName: "deleteIntegration",
  name: "DeleteIntegration",
  kind: MethodKind.Unary,
  I: DeleteIntegrationRequest,
  O: Empty,
  service: {
    typeName: "teleport.integration.v1.IntegrationService"
  }
} as const;

/**
 * DeleteAllIntegrations removes all Integrations.
 * DEPRECATED: Can't delete all integrations over gRPC.
 *
 * @generated from rpc teleport.integration.v1.IntegrationService.DeleteAllIntegrations
 */
export const deleteAllIntegrations = {
  localName: "deleteAllIntegrations",
  name: "DeleteAllIntegrations",
  kind: MethodKind.Unary,
  I: DeleteAllIntegrationsRequest,
  O: Empty,
  service: {
    typeName: "teleport.integration.v1.IntegrationService"
  }
} as const;

/**
 * GenerateAWSOIDCToken generates a token to be used when executing an AWS OIDC Integration action.
 *
 * @generated from rpc teleport.integration.v1.IntegrationService.GenerateAWSOIDCToken
 */
export const generateAWSOIDCToken = {
  localName: "generateAWSOIDCToken",
  name: "GenerateAWSOIDCToken",
  kind: MethodKind.Unary,
  I: GenerateAWSOIDCTokenRequest,
  O: GenerateAWSOIDCTokenResponse,
  service: {
    typeName: "teleport.integration.v1.IntegrationService"
  }
} as const;
