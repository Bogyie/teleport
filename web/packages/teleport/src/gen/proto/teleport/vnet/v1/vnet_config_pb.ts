// Copyright 2024 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/vnet/v1/vnet_config.proto (package teleport.vnet.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Metadata } from "../../header/v1/metadata_pb";

/**
 * VnetConfig is a resource that holds configuration parameters for Teleport VNet.
 *
 * @generated from message teleport.vnet.v1.VnetConfig
 */
export class VnetConfig extends Message<VnetConfig> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string sub_kind = 2;
   */
  subKind = "";

  /**
   * @generated from field: string version = 3;
   */
  version = "";

  /**
   * @generated from field: teleport.header.v1.Metadata metadata = 4;
   */
  metadata?: Metadata;

  /**
   * @generated from field: teleport.vnet.v1.VnetConfigSpec spec = 5;
   */
  spec?: VnetConfigSpec;

  constructor(data?: PartialMessage<VnetConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.vnet.v1.VnetConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sub_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata", kind: "message", T: Metadata },
    { no: 5, name: "spec", kind: "message", T: VnetConfigSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VnetConfig {
    return new VnetConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VnetConfig {
    return new VnetConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VnetConfig {
    return new VnetConfig().fromJsonString(jsonString, options);
  }

  static equals(a: VnetConfig | PlainMessage<VnetConfig> | undefined, b: VnetConfig | PlainMessage<VnetConfig> | undefined): boolean {
    return proto3.util.equals(VnetConfig, a, b);
  }
}

/**
 * VnetConfigSpec defines configuration parameters for VNet.
 *
 * @generated from message teleport.vnet.v1.VnetConfigSpec
 */
export class VnetConfigSpec extends Message<VnetConfigSpec> {
  /**
   * Ipv4CidrRange defines the IPv4 CIDR range that all IPv4 addresses for VNet
   * apps in this cluster will be assigned from. The default is "100.64.0.0/10".
   *
   * @generated from field: string ipv4_cidr_range = 1;
   */
  ipv4CidrRange = "";

  /**
   * CustomDnsZones defines a list of DNS zones that VNet should resolve requests for in addition to the
   * cluster's public proxy address.
   *
   * @generated from field: repeated teleport.vnet.v1.CustomDNSZone custom_dns_zones = 2;
   */
  customDnsZones: CustomDNSZone[] = [];

  constructor(data?: PartialMessage<VnetConfigSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.vnet.v1.VnetConfigSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ipv4_cidr_range", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "custom_dns_zones", kind: "message", T: CustomDNSZone, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VnetConfigSpec {
    return new VnetConfigSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VnetConfigSpec {
    return new VnetConfigSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VnetConfigSpec {
    return new VnetConfigSpec().fromJsonString(jsonString, options);
  }

  static equals(a: VnetConfigSpec | PlainMessage<VnetConfigSpec> | undefined, b: VnetConfigSpec | PlainMessage<VnetConfigSpec> | undefined): boolean {
    return proto3.util.equals(VnetConfigSpec, a, b);
  }
}

/**
 * CustomDNSZone defines parameters for custom DNS zones.
 *
 * @generated from message teleport.vnet.v1.CustomDNSZone
 */
export class CustomDNSZone extends Message<CustomDNSZone> {
  /**
   * Suffix is the hostname suffix that defines this zone.
   *
   * @generated from field: string suffix = 1;
   */
  suffix = "";

  constructor(data?: PartialMessage<CustomDNSZone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.vnet.v1.CustomDNSZone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suffix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomDNSZone {
    return new CustomDNSZone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomDNSZone {
    return new CustomDNSZone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomDNSZone {
    return new CustomDNSZone().fromJsonString(jsonString, options);
  }

  static equals(a: CustomDNSZone | PlainMessage<CustomDNSZone> | undefined, b: CustomDNSZone | PlainMessage<CustomDNSZone> | undefined): boolean {
    return proto3.util.equals(CustomDNSZone, a, b);
  }
}

