// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/secreports/v1/secreports.proto (package teleport.secreports.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ResourceHeader } from "../../header/v1/resourceheader_pb";

/**
 * AuditQuery is audit query resource.
 *
 * @generated from message teleport.secreports.v1.AuditQuery
 */
export class AuditQuery extends Message<AuditQuery> {
  /**
   * header is the header for //the resource.
   *
   * @generated from field: teleport.header.v1.ResourceHeader header = 1;
   */
  header?: ResourceHeader;

  /**
   * spec is audit query spec.
   *
   * @generated from field: teleport.secreports.v1.AuditQuerySpec spec = 2;
   */
  spec?: AuditQuerySpec;

  constructor(data?: PartialMessage<AuditQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.AuditQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: ResourceHeader },
    { no: 2, name: "spec", kind: "message", T: AuditQuerySpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditQuery {
    return new AuditQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditQuery {
    return new AuditQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditQuery {
    return new AuditQuery().fromJsonString(jsonString, options);
  }

  static equals(a: AuditQuery | PlainMessage<AuditQuery> | undefined, b: AuditQuery | PlainMessage<AuditQuery> | undefined): boolean {
    return proto3.util.equals(AuditQuery, a, b);
  }
}

/**
 * AuditQuerySpec is audit query spec.
 *
 * @generated from message teleport.secreports.v1.AuditQuerySpec
 */
export class AuditQuerySpec extends Message<AuditQuerySpec> {
  /**
   * name is the name of the audit query.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * title is the title of the audit query.
   *
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * query is the SQL Query for the audit query.
   *
   * @generated from field: string query = 3;
   */
  query = "";

  /**
   * description is the description of the audit query.
   *
   * @generated from field: string description = 4;
   */
  description = "";

  constructor(data?: PartialMessage<AuditQuerySpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.AuditQuerySpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditQuerySpec {
    return new AuditQuerySpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditQuerySpec {
    return new AuditQuerySpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditQuerySpec {
    return new AuditQuerySpec().fromJsonString(jsonString, options);
  }

  static equals(a: AuditQuerySpec | PlainMessage<AuditQuerySpec> | undefined, b: AuditQuerySpec | PlainMessage<AuditQuerySpec> | undefined): boolean {
    return proto3.util.equals(AuditQuerySpec, a, b);
  }
}

/**
 * Report is security report resource.
 *
 * @generated from message teleport.secreports.v1.Report
 */
export class Report extends Message<Report> {
  /**
   * header is the header for the resource.
   *
   * @generated from field: teleport.header.v1.ResourceHeader header = 1;
   */
  header?: ResourceHeader;

  /**
   * spec is the security report spec.
   *
   * @generated from field: teleport.secreports.v1.ReportSpec spec = 2;
   */
  spec?: ReportSpec;

  constructor(data?: PartialMessage<Report>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.Report";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: ResourceHeader },
    { no: 2, name: "spec", kind: "message", T: ReportSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Report {
    return new Report().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Report {
    return new Report().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Report {
    return new Report().fromJsonString(jsonString, options);
  }

  static equals(a: Report | PlainMessage<Report> | undefined, b: Report | PlainMessage<Report> | undefined): boolean {
    return proto3.util.equals(Report, a, b);
  }
}

/**
 * ReportSpec is security report spec.
 *
 * @generated from message teleport.secreports.v1.ReportSpec
 */
export class ReportSpec extends Message<ReportSpec> {
  /**
   * name is the name of the security report.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * title is the title of the security report.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * description is the description of the security report
   *
   * @generated from field: repeated teleport.secreports.v1.AuditQuerySpec audit_queries = 3;
   */
  auditQueries: AuditQuerySpec[] = [];

  /**
   * title is the title of the security report.
   *
   * @generated from field: string title = 4;
   */
  title = "";

  /**
   * version is the version of the security report.
   *
   * @generated from field: string version = 5;
   */
  version = "";

  constructor(data?: PartialMessage<ReportSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.ReportSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "audit_queries", kind: "message", T: AuditQuerySpec, repeated: true },
    { no: 4, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportSpec {
    return new ReportSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportSpec {
    return new ReportSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportSpec {
    return new ReportSpec().fromJsonString(jsonString, options);
  }

  static equals(a: ReportSpec | PlainMessage<ReportSpec> | undefined, b: ReportSpec | PlainMessage<ReportSpec> | undefined): boolean {
    return proto3.util.equals(ReportSpec, a, b);
  }
}

/**
 * ReportState is security report state resource.
 *
 * @generated from message teleport.secreports.v1.ReportState
 */
export class ReportState extends Message<ReportState> {
  /**
   * header is the header for the resource.
   *
   * @generated from field: teleport.header.v1.ResourceHeader header = 1;
   */
  header?: ResourceHeader;

  /**
   * spec is the security report state spec.
   *
   * @generated from field: teleport.secreports.v1.ReportStateSpec spec = 2;
   */
  spec?: ReportStateSpec;

  constructor(data?: PartialMessage<ReportState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.ReportState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: ResourceHeader },
    { no: 2, name: "spec", kind: "message", T: ReportStateSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportState {
    return new ReportState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportState {
    return new ReportState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportState {
    return new ReportState().fromJsonString(jsonString, options);
  }

  static equals(a: ReportState | PlainMessage<ReportState> | undefined, b: ReportState | PlainMessage<ReportState> | undefined): boolean {
    return proto3.util.equals(ReportState, a, b);
  }
}

/**
 * ReportStateSpec is security report state spec.
 *
 * @generated from message teleport.secreports.v1.ReportStateSpec
 */
export class ReportStateSpec extends Message<ReportStateSpec> {
  /**
   * state is the state of the security report.
   *
   * @generated from field: string state = 1;
   */
  state = "";

  /**
   * updated_at is the time when the security report state was updated.
   *
   * @generated from field: string updated_at = 2;
   */
  updatedAt = "";

  constructor(data?: PartialMessage<ReportStateSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.secreports.v1.ReportStateSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportStateSpec {
    return new ReportStateSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportStateSpec {
    return new ReportStateSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportStateSpec {
    return new ReportStateSpec().fromJsonString(jsonString, options);
  }

  static equals(a: ReportStateSpec | PlainMessage<ReportStateSpec> | undefined, b: ReportStateSpec | PlainMessage<ReportStateSpec> | undefined): boolean {
    return proto3.util.equals(ReportStateSpec, a, b);
  }
}

