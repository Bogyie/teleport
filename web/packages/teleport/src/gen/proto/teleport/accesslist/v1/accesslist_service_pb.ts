// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file teleport/accesslist/v1/accesslist_service.proto (package teleport.accesslist.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { AccessList, Member, Review } from "./accesslist_pb";
import { AccessRequestV3 } from "../../legacy/types/types_pb";

/**
 * GetAccessListsRequest is the request for getting all access lists.
 *
 * @generated from message teleport.accesslist.v1.GetAccessListsRequest
 */
export class GetAccessListsRequest extends Message<GetAccessListsRequest> {
  constructor(data?: PartialMessage<GetAccessListsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.GetAccessListsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccessListsRequest {
    return new GetAccessListsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccessListsRequest {
    return new GetAccessListsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccessListsRequest {
    return new GetAccessListsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccessListsRequest | PlainMessage<GetAccessListsRequest> | undefined, b: GetAccessListsRequest | PlainMessage<GetAccessListsRequest> | undefined): boolean {
    return proto3.util.equals(GetAccessListsRequest, a, b);
  }
}

/**
 * GetAccessListsResponse is the response for getting all access lists.
 *
 * @generated from message teleport.accesslist.v1.GetAccessListsResponse
 */
export class GetAccessListsResponse extends Message<GetAccessListsResponse> {
  /**
   * access_lists is the list of access lists.
   *
   * @generated from field: repeated teleport.accesslist.v1.AccessList access_lists = 1;
   */
  accessLists: AccessList[] = [];

  constructor(data?: PartialMessage<GetAccessListsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.GetAccessListsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_lists", kind: "message", T: AccessList, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccessListsResponse {
    return new GetAccessListsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccessListsResponse {
    return new GetAccessListsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccessListsResponse {
    return new GetAccessListsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccessListsResponse | PlainMessage<GetAccessListsResponse> | undefined, b: GetAccessListsResponse | PlainMessage<GetAccessListsResponse> | undefined): boolean {
    return proto3.util.equals(GetAccessListsResponse, a, b);
  }
}

/**
 * ListAccessListsRequest is the request for getting paginated access lists.
 *
 * @generated from message teleport.accesslist.v1.ListAccessListsRequest
 */
export class ListAccessListsRequest extends Message<ListAccessListsRequest> {
  /**
   * page_size is the size of the page to request.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * next_token is the page token.
   *
   * @generated from field: string next_token = 2;
   */
  nextToken = "";

  constructor(data?: PartialMessage<ListAccessListsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.ListAccessListsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "next_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAccessListsRequest {
    return new ListAccessListsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAccessListsRequest {
    return new ListAccessListsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAccessListsRequest {
    return new ListAccessListsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAccessListsRequest | PlainMessage<ListAccessListsRequest> | undefined, b: ListAccessListsRequest | PlainMessage<ListAccessListsRequest> | undefined): boolean {
    return proto3.util.equals(ListAccessListsRequest, a, b);
  }
}

/**
 * ListAccessListsResponse is the response for getting paginated access lists.
 *
 * @generated from message teleport.accesslist.v1.ListAccessListsResponse
 */
export class ListAccessListsResponse extends Message<ListAccessListsResponse> {
  /**
   * access_lists is the list of access lists.
   *
   * @generated from field: repeated teleport.accesslist.v1.AccessList access_lists = 1;
   */
  accessLists: AccessList[] = [];

  /**
   * next_token is the next page token.
   *
   * @generated from field: string next_token = 2;
   */
  nextToken = "";

  constructor(data?: PartialMessage<ListAccessListsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.ListAccessListsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_lists", kind: "message", T: AccessList, repeated: true },
    { no: 2, name: "next_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAccessListsResponse {
    return new ListAccessListsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAccessListsResponse {
    return new ListAccessListsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAccessListsResponse {
    return new ListAccessListsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAccessListsResponse | PlainMessage<ListAccessListsResponse> | undefined, b: ListAccessListsResponse | PlainMessage<ListAccessListsResponse> | undefined): boolean {
    return proto3.util.equals(ListAccessListsResponse, a, b);
  }
}

/**
 * GetAccessListRequest is the request for retrieving an access list.
 *
 * @generated from message teleport.accesslist.v1.GetAccessListRequest
 */
export class GetAccessListRequest extends Message<GetAccessListRequest> {
  /**
   * name is the name of the access list to retrieve.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetAccessListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.GetAccessListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccessListRequest {
    return new GetAccessListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccessListRequest {
    return new GetAccessListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccessListRequest {
    return new GetAccessListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccessListRequest | PlainMessage<GetAccessListRequest> | undefined, b: GetAccessListRequest | PlainMessage<GetAccessListRequest> | undefined): boolean {
    return proto3.util.equals(GetAccessListRequest, a, b);
  }
}

/**
 * UpsertAccessListRequest is the request for upserting an access list.
 *
 * @generated from message teleport.accesslist.v1.UpsertAccessListRequest
 */
export class UpsertAccessListRequest extends Message<UpsertAccessListRequest> {
  /**
   * access_list is the access list to upsert.
   *
   * @generated from field: teleport.accesslist.v1.AccessList access_list = 1;
   */
  accessList?: AccessList;

  constructor(data?: PartialMessage<UpsertAccessListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.UpsertAccessListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_list", kind: "message", T: AccessList },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertAccessListRequest {
    return new UpsertAccessListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertAccessListRequest {
    return new UpsertAccessListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertAccessListRequest {
    return new UpsertAccessListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertAccessListRequest | PlainMessage<UpsertAccessListRequest> | undefined, b: UpsertAccessListRequest | PlainMessage<UpsertAccessListRequest> | undefined): boolean {
    return proto3.util.equals(UpsertAccessListRequest, a, b);
  }
}

/**
 * UpdateAccessListRequest is the request for updating an access list.
 *
 * @generated from message teleport.accesslist.v1.UpdateAccessListRequest
 */
export class UpdateAccessListRequest extends Message<UpdateAccessListRequest> {
  /**
   * access_list is the access list to upsert.
   *
   * @generated from field: teleport.accesslist.v1.AccessList access_list = 1;
   */
  accessList?: AccessList;

  constructor(data?: PartialMessage<UpdateAccessListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.UpdateAccessListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_list", kind: "message", T: AccessList },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccessListRequest {
    return new UpdateAccessListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccessListRequest {
    return new UpdateAccessListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccessListRequest {
    return new UpdateAccessListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAccessListRequest | PlainMessage<UpdateAccessListRequest> | undefined, b: UpdateAccessListRequest | PlainMessage<UpdateAccessListRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAccessListRequest, a, b);
  }
}

/**
 * DeleteAccessListRequest is the request for deleting an access list.
 *
 * @generated from message teleport.accesslist.v1.DeleteAccessListRequest
 */
export class DeleteAccessListRequest extends Message<DeleteAccessListRequest> {
  /**
   * name is the name of the access list to delete.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteAccessListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.DeleteAccessListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAccessListRequest {
    return new DeleteAccessListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAccessListRequest {
    return new DeleteAccessListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAccessListRequest {
    return new DeleteAccessListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAccessListRequest | PlainMessage<DeleteAccessListRequest> | undefined, b: DeleteAccessListRequest | PlainMessage<DeleteAccessListRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAccessListRequest, a, b);
  }
}

/**
 * DeleteAllAccessListsRequest is the request for deleting all access lists.
 *
 * @generated from message teleport.accesslist.v1.DeleteAllAccessListsRequest
 */
export class DeleteAllAccessListsRequest extends Message<DeleteAllAccessListsRequest> {
  constructor(data?: PartialMessage<DeleteAllAccessListsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.DeleteAllAccessListsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAllAccessListsRequest {
    return new DeleteAllAccessListsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAllAccessListsRequest {
    return new DeleteAllAccessListsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAllAccessListsRequest {
    return new DeleteAllAccessListsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAllAccessListsRequest | PlainMessage<DeleteAllAccessListsRequest> | undefined, b: DeleteAllAccessListsRequest | PlainMessage<DeleteAllAccessListsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAllAccessListsRequest, a, b);
  }
}

/**
 * GetAccessListsToReviewRequest is the request for getting access lists that
 * the current user needs to review.
 *
 * @generated from message teleport.accesslist.v1.GetAccessListsToReviewRequest
 */
export class GetAccessListsToReviewRequest extends Message<GetAccessListsToReviewRequest> {
  constructor(data?: PartialMessage<GetAccessListsToReviewRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.GetAccessListsToReviewRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccessListsToReviewRequest {
    return new GetAccessListsToReviewRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccessListsToReviewRequest {
    return new GetAccessListsToReviewRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccessListsToReviewRequest {
    return new GetAccessListsToReviewRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccessListsToReviewRequest | PlainMessage<GetAccessListsToReviewRequest> | undefined, b: GetAccessListsToReviewRequest | PlainMessage<GetAccessListsToReviewRequest> | undefined): boolean {
    return proto3.util.equals(GetAccessListsToReviewRequest, a, b);
  }
}

/**
 * GetAccessListsToReviewResponse is the response for getting access lists that
 * the current user needs to review.
 *
 * @generated from message teleport.accesslist.v1.GetAccessListsToReviewResponse
 */
export class GetAccessListsToReviewResponse extends Message<GetAccessListsToReviewResponse> {
  /**
   * @generated from field: repeated teleport.accesslist.v1.AccessList access_lists = 1;
   */
  accessLists: AccessList[] = [];

  constructor(data?: PartialMessage<GetAccessListsToReviewResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.GetAccessListsToReviewResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_lists", kind: "message", T: AccessList, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccessListsToReviewResponse {
    return new GetAccessListsToReviewResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccessListsToReviewResponse {
    return new GetAccessListsToReviewResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccessListsToReviewResponse {
    return new GetAccessListsToReviewResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccessListsToReviewResponse | PlainMessage<GetAccessListsToReviewResponse> | undefined, b: GetAccessListsToReviewResponse | PlainMessage<GetAccessListsToReviewResponse> | undefined): boolean {
    return proto3.util.equals(GetAccessListsToReviewResponse, a, b);
  }
}

/**
 * CountAccessListMembersRequest is the request for counting access list
 * members.
 *
 * @generated from message teleport.accesslist.v1.CountAccessListMembersRequest
 */
export class CountAccessListMembersRequest extends Message<CountAccessListMembersRequest> {
  /**
   * access_list_name is the name of the access list to retrieve.
   *
   * @generated from field: string access_list_name = 1;
   */
  accessListName = "";

  constructor(data?: PartialMessage<CountAccessListMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.CountAccessListMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_list_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountAccessListMembersRequest {
    return new CountAccessListMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountAccessListMembersRequest {
    return new CountAccessListMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountAccessListMembersRequest {
    return new CountAccessListMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CountAccessListMembersRequest | PlainMessage<CountAccessListMembersRequest> | undefined, b: CountAccessListMembersRequest | PlainMessage<CountAccessListMembersRequest> | undefined): boolean {
    return proto3.util.equals(CountAccessListMembersRequest, a, b);
  }
}

/**
 * CountAccessListMembersResponse is the response for counting access list
 * members.
 *
 * @generated from message teleport.accesslist.v1.CountAccessListMembersResponse
 */
export class CountAccessListMembersResponse extends Message<CountAccessListMembersResponse> {
  /**
   * count is the number of access list members in the access list.
   *
   * @generated from field: uint32 count = 1;
   */
  count = 0;

  constructor(data?: PartialMessage<CountAccessListMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.CountAccessListMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountAccessListMembersResponse {
    return new CountAccessListMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountAccessListMembersResponse {
    return new CountAccessListMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountAccessListMembersResponse {
    return new CountAccessListMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CountAccessListMembersResponse | PlainMessage<CountAccessListMembersResponse> | undefined, b: CountAccessListMembersResponse | PlainMessage<CountAccessListMembersResponse> | undefined): boolean {
    return proto3.util.equals(CountAccessListMembersResponse, a, b);
  }
}

/**
 * ListAccessListMembersRequest is the request for getting paginated access list
 * members.
 *
 * @generated from message teleport.accesslist.v1.ListAccessListMembersRequest
 */
export class ListAccessListMembersRequest extends Message<ListAccessListMembersRequest> {
  /**
   * page_size is the size of the page to request.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * page_token is the page token.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * access_list is the name of the access list that the member belongs to.
   *
   * @generated from field: string access_list = 3;
   */
  accessList = "";

  constructor(data?: PartialMessage<ListAccessListMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.ListAccessListMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "access_list", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAccessListMembersRequest {
    return new ListAccessListMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAccessListMembersRequest {
    return new ListAccessListMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAccessListMembersRequest {
    return new ListAccessListMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAccessListMembersRequest | PlainMessage<ListAccessListMembersRequest> | undefined, b: ListAccessListMembersRequest | PlainMessage<ListAccessListMembersRequest> | undefined): boolean {
    return proto3.util.equals(ListAccessListMembersRequest, a, b);
  }
}

/**
 * ListAccessListMembersResponse is the response for getting paginated access
 * list members.
 *
 * @generated from message teleport.accesslist.v1.ListAccessListMembersResponse
 */
export class ListAccessListMembersResponse extends Message<ListAccessListMembersResponse> {
  /**
   * members is the list of access list members.
   *
   * @generated from field: repeated teleport.accesslist.v1.Member members = 1;
   */
  members: Member[] = [];

  /**
   * next_page_token is the next page token.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListAccessListMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.ListAccessListMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "members", kind: "message", T: Member, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAccessListMembersResponse {
    return new ListAccessListMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAccessListMembersResponse {
    return new ListAccessListMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAccessListMembersResponse {
    return new ListAccessListMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAccessListMembersResponse | PlainMessage<ListAccessListMembersResponse> | undefined, b: ListAccessListMembersResponse | PlainMessage<ListAccessListMembersResponse> | undefined): boolean {
    return proto3.util.equals(ListAccessListMembersResponse, a, b);
  }
}

/**
 * ListAllAccessListMembersRequest is the request for getting paginated access
 * list members for all access lists.
 *
 * @generated from message teleport.accesslist.v1.ListAllAccessListMembersRequest
 */
export class ListAllAccessListMembersRequest extends Message<ListAllAccessListMembersRequest> {
  /**
   * page_size is the size of the page to request.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * page_token is the page token.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListAllAccessListMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.ListAllAccessListMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllAccessListMembersRequest {
    return new ListAllAccessListMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllAccessListMembersRequest {
    return new ListAllAccessListMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllAccessListMembersRequest {
    return new ListAllAccessListMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAllAccessListMembersRequest | PlainMessage<ListAllAccessListMembersRequest> | undefined, b: ListAllAccessListMembersRequest | PlainMessage<ListAllAccessListMembersRequest> | undefined): boolean {
    return proto3.util.equals(ListAllAccessListMembersRequest, a, b);
  }
}

/**
 * ListAllAccessListMembersResponse is the response for getting paginated access
 * list members for all access lists.
 *
 * @generated from message teleport.accesslist.v1.ListAllAccessListMembersResponse
 */
export class ListAllAccessListMembersResponse extends Message<ListAllAccessListMembersResponse> {
  /**
   * members is the list of access list members.
   *
   * @generated from field: repeated teleport.accesslist.v1.Member members = 1;
   */
  members: Member[] = [];

  /**
   * next_page_token is the next page token.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListAllAccessListMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.ListAllAccessListMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "members", kind: "message", T: Member, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllAccessListMembersResponse {
    return new ListAllAccessListMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllAccessListMembersResponse {
    return new ListAllAccessListMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllAccessListMembersResponse {
    return new ListAllAccessListMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAllAccessListMembersResponse | PlainMessage<ListAllAccessListMembersResponse> | undefined, b: ListAllAccessListMembersResponse | PlainMessage<ListAllAccessListMembersResponse> | undefined): boolean {
    return proto3.util.equals(ListAllAccessListMembersResponse, a, b);
  }
}

/**
 * UpsertAccessListWithMembers is the request for upserting an access list with
 * members.
 *
 * @generated from message teleport.accesslist.v1.UpsertAccessListWithMembersRequest
 */
export class UpsertAccessListWithMembersRequest extends Message<UpsertAccessListWithMembersRequest> {
  /**
   * access_list is the access list to upsert.
   *
   * @generated from field: teleport.accesslist.v1.AccessList access_list = 1;
   */
  accessList?: AccessList;

  /**
   * members is the list of access list members.
   *
   * @generated from field: repeated teleport.accesslist.v1.Member members = 2;
   */
  members: Member[] = [];

  constructor(data?: PartialMessage<UpsertAccessListWithMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.UpsertAccessListWithMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_list", kind: "message", T: AccessList },
    { no: 2, name: "members", kind: "message", T: Member, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertAccessListWithMembersRequest {
    return new UpsertAccessListWithMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertAccessListWithMembersRequest {
    return new UpsertAccessListWithMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertAccessListWithMembersRequest {
    return new UpsertAccessListWithMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertAccessListWithMembersRequest | PlainMessage<UpsertAccessListWithMembersRequest> | undefined, b: UpsertAccessListWithMembersRequest | PlainMessage<UpsertAccessListWithMembersRequest> | undefined): boolean {
    return proto3.util.equals(UpsertAccessListWithMembersRequest, a, b);
  }
}

/**
 * UpsertAccessListWithMembersResponse is the response for upserting an access
 * list with members.
 *
 * @generated from message teleport.accesslist.v1.UpsertAccessListWithMembersResponse
 */
export class UpsertAccessListWithMembersResponse extends Message<UpsertAccessListWithMembersResponse> {
  /**
   * access_list is the access list that was upserted.
   *
   * @generated from field: teleport.accesslist.v1.AccessList access_list = 1;
   */
  accessList?: AccessList;

  /**
   * members is the list of access list members that were upserted.
   *
   * @generated from field: repeated teleport.accesslist.v1.Member members = 2;
   */
  members: Member[] = [];

  constructor(data?: PartialMessage<UpsertAccessListWithMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.UpsertAccessListWithMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_list", kind: "message", T: AccessList },
    { no: 2, name: "members", kind: "message", T: Member, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertAccessListWithMembersResponse {
    return new UpsertAccessListWithMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertAccessListWithMembersResponse {
    return new UpsertAccessListWithMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertAccessListWithMembersResponse {
    return new UpsertAccessListWithMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertAccessListWithMembersResponse | PlainMessage<UpsertAccessListWithMembersResponse> | undefined, b: UpsertAccessListWithMembersResponse | PlainMessage<UpsertAccessListWithMembersResponse> | undefined): boolean {
    return proto3.util.equals(UpsertAccessListWithMembersResponse, a, b);
  }
}

/**
 * GetAccessListMemberRequest is the request for retrieving an access list
 * member.
 *
 * @generated from message teleport.accesslist.v1.GetAccessListMemberRequest
 */
export class GetAccessListMemberRequest extends Message<GetAccessListMemberRequest> {
  /**
   * access_list is the name of the access list that the member belongs to.
   *
   * @generated from field: string access_list = 1;
   */
  accessList = "";

  /**
   * member_name is the name of the user that belongs to the access list.
   *
   * @generated from field: string member_name = 2;
   */
  memberName = "";

  constructor(data?: PartialMessage<GetAccessListMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.GetAccessListMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_list", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "member_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccessListMemberRequest {
    return new GetAccessListMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccessListMemberRequest {
    return new GetAccessListMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccessListMemberRequest {
    return new GetAccessListMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccessListMemberRequest | PlainMessage<GetAccessListMemberRequest> | undefined, b: GetAccessListMemberRequest | PlainMessage<GetAccessListMemberRequest> | undefined): boolean {
    return proto3.util.equals(GetAccessListMemberRequest, a, b);
  }
}

/**
 * UpsertAccessListMemberRequest is the request for upserting an access list
 * member.
 *
 * @generated from message teleport.accesslist.v1.UpsertAccessListMemberRequest
 */
export class UpsertAccessListMemberRequest extends Message<UpsertAccessListMemberRequest> {
  /**
   * member is the access list member to upsert.
   *
   * @generated from field: teleport.accesslist.v1.Member member = 4;
   */
  member?: Member;

  constructor(data?: PartialMessage<UpsertAccessListMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.UpsertAccessListMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "member", kind: "message", T: Member },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertAccessListMemberRequest {
    return new UpsertAccessListMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertAccessListMemberRequest {
    return new UpsertAccessListMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertAccessListMemberRequest {
    return new UpsertAccessListMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertAccessListMemberRequest | PlainMessage<UpsertAccessListMemberRequest> | undefined, b: UpsertAccessListMemberRequest | PlainMessage<UpsertAccessListMemberRequest> | undefined): boolean {
    return proto3.util.equals(UpsertAccessListMemberRequest, a, b);
  }
}

/**
 * UpdateAccessListMemberRequest is the request for updating an access list
 * member.
 *
 * @generated from message teleport.accesslist.v1.UpdateAccessListMemberRequest
 */
export class UpdateAccessListMemberRequest extends Message<UpdateAccessListMemberRequest> {
  /**
   * member is the access list member to upsert.
   *
   * @generated from field: teleport.accesslist.v1.Member member = 1;
   */
  member?: Member;

  constructor(data?: PartialMessage<UpdateAccessListMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.UpdateAccessListMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "member", kind: "message", T: Member },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccessListMemberRequest {
    return new UpdateAccessListMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccessListMemberRequest {
    return new UpdateAccessListMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccessListMemberRequest {
    return new UpdateAccessListMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAccessListMemberRequest | PlainMessage<UpdateAccessListMemberRequest> | undefined, b: UpdateAccessListMemberRequest | PlainMessage<UpdateAccessListMemberRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAccessListMemberRequest, a, b);
  }
}

/**
 * DeleteAccessListMemberRequest is the request for deleting a member from an
 * access list.
 *
 * @generated from message teleport.accesslist.v1.DeleteAccessListMemberRequest
 */
export class DeleteAccessListMemberRequest extends Message<DeleteAccessListMemberRequest> {
  /**
   * access_list is the name of access list.
   *
   * @generated from field: string access_list = 1;
   */
  accessList = "";

  /**
   * member_name is the name of the user to delete.
   *
   * @generated from field: string member_name = 3;
   */
  memberName = "";

  constructor(data?: PartialMessage<DeleteAccessListMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.DeleteAccessListMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_list", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "member_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAccessListMemberRequest {
    return new DeleteAccessListMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAccessListMemberRequest {
    return new DeleteAccessListMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAccessListMemberRequest {
    return new DeleteAccessListMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAccessListMemberRequest | PlainMessage<DeleteAccessListMemberRequest> | undefined, b: DeleteAccessListMemberRequest | PlainMessage<DeleteAccessListMemberRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAccessListMemberRequest, a, b);
  }
}

/**
 * DeleteAllAccessListMembersForAccessListRequest is the request for deleting
 * all members from an access list.
 *
 * @generated from message teleport.accesslist.v1.DeleteAllAccessListMembersForAccessListRequest
 */
export class DeleteAllAccessListMembersForAccessListRequest extends Message<DeleteAllAccessListMembersForAccessListRequest> {
  /**
   * access_list is the name of access list.
   *
   * @generated from field: string access_list = 1;
   */
  accessList = "";

  constructor(data?: PartialMessage<DeleteAllAccessListMembersForAccessListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.DeleteAllAccessListMembersForAccessListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_list", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAllAccessListMembersForAccessListRequest {
    return new DeleteAllAccessListMembersForAccessListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAllAccessListMembersForAccessListRequest {
    return new DeleteAllAccessListMembersForAccessListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAllAccessListMembersForAccessListRequest {
    return new DeleteAllAccessListMembersForAccessListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAllAccessListMembersForAccessListRequest | PlainMessage<DeleteAllAccessListMembersForAccessListRequest> | undefined, b: DeleteAllAccessListMembersForAccessListRequest | PlainMessage<DeleteAllAccessListMembersForAccessListRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAllAccessListMembersForAccessListRequest, a, b);
  }
}

/**
 * DeleteAllAccessListMembersRequest is the request for all access list members
 * in the backend.
 *
 * @generated from message teleport.accesslist.v1.DeleteAllAccessListMembersRequest
 */
export class DeleteAllAccessListMembersRequest extends Message<DeleteAllAccessListMembersRequest> {
  constructor(data?: PartialMessage<DeleteAllAccessListMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.DeleteAllAccessListMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAllAccessListMembersRequest {
    return new DeleteAllAccessListMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAllAccessListMembersRequest {
    return new DeleteAllAccessListMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAllAccessListMembersRequest {
    return new DeleteAllAccessListMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAllAccessListMembersRequest | PlainMessage<DeleteAllAccessListMembersRequest> | undefined, b: DeleteAllAccessListMembersRequest | PlainMessage<DeleteAllAccessListMembersRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAllAccessListMembersRequest, a, b);
  }
}

/**
 * ListAccessListReviewsRequest is the request for getting paginated access list
 * reviews for a particular access list.
 *
 * @generated from message teleport.accesslist.v1.ListAccessListReviewsRequest
 */
export class ListAccessListReviewsRequest extends Message<ListAccessListReviewsRequest> {
  /**
   * access_list is the name of the access list that we're listing reviews for.
   *
   * @generated from field: string access_list = 1;
   */
  accessList = "";

  /**
   * page_size is the size of the page to request.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * next_token is the page token.
   *
   * @generated from field: string next_token = 3;
   */
  nextToken = "";

  constructor(data?: PartialMessage<ListAccessListReviewsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.ListAccessListReviewsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_list", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "next_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAccessListReviewsRequest {
    return new ListAccessListReviewsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAccessListReviewsRequest {
    return new ListAccessListReviewsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAccessListReviewsRequest {
    return new ListAccessListReviewsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAccessListReviewsRequest | PlainMessage<ListAccessListReviewsRequest> | undefined, b: ListAccessListReviewsRequest | PlainMessage<ListAccessListReviewsRequest> | undefined): boolean {
    return proto3.util.equals(ListAccessListReviewsRequest, a, b);
  }
}

/**
 * ListAccessListReviewsResponse is the response for getting paginated access
 * list reviews for a particular access list.
 *
 * @generated from message teleport.accesslist.v1.ListAccessListReviewsResponse
 */
export class ListAccessListReviewsResponse extends Message<ListAccessListReviewsResponse> {
  /**
   * reviews is the list of access list reviews.
   *
   * @generated from field: repeated teleport.accesslist.v1.Review reviews = 1;
   */
  reviews: Review[] = [];

  /**
   * next_token is the next page token.
   *
   * @generated from field: string next_token = 2;
   */
  nextToken = "";

  constructor(data?: PartialMessage<ListAccessListReviewsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.ListAccessListReviewsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reviews", kind: "message", T: Review, repeated: true },
    { no: 2, name: "next_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAccessListReviewsResponse {
    return new ListAccessListReviewsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAccessListReviewsResponse {
    return new ListAccessListReviewsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAccessListReviewsResponse {
    return new ListAccessListReviewsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAccessListReviewsResponse | PlainMessage<ListAccessListReviewsResponse> | undefined, b: ListAccessListReviewsResponse | PlainMessage<ListAccessListReviewsResponse> | undefined): boolean {
    return proto3.util.equals(ListAccessListReviewsResponse, a, b);
  }
}

/**
 * ListAllAccessListReviewsRequest is the request for getting paginated access
 * list reviews for all access lists.
 *
 * @generated from message teleport.accesslist.v1.ListAllAccessListReviewsRequest
 */
export class ListAllAccessListReviewsRequest extends Message<ListAllAccessListReviewsRequest> {
  /**
   * page_size is the size of the page to request.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * next_token is the page token.
   *
   * @generated from field: string next_token = 2;
   */
  nextToken = "";

  constructor(data?: PartialMessage<ListAllAccessListReviewsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.ListAllAccessListReviewsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "next_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllAccessListReviewsRequest {
    return new ListAllAccessListReviewsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllAccessListReviewsRequest {
    return new ListAllAccessListReviewsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllAccessListReviewsRequest {
    return new ListAllAccessListReviewsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAllAccessListReviewsRequest | PlainMessage<ListAllAccessListReviewsRequest> | undefined, b: ListAllAccessListReviewsRequest | PlainMessage<ListAllAccessListReviewsRequest> | undefined): boolean {
    return proto3.util.equals(ListAllAccessListReviewsRequest, a, b);
  }
}

/**
 * ListAllAccessListReviewsResponse is the response for getting paginated access
 * list reviews for all access lists.
 *
 * @generated from message teleport.accesslist.v1.ListAllAccessListReviewsResponse
 */
export class ListAllAccessListReviewsResponse extends Message<ListAllAccessListReviewsResponse> {
  /**
   * reviews is the list of access list reviews.
   *
   * @generated from field: repeated teleport.accesslist.v1.Review reviews = 1;
   */
  reviews: Review[] = [];

  /**
   * next_token is the next page token.
   *
   * @generated from field: string next_token = 2;
   */
  nextToken = "";

  constructor(data?: PartialMessage<ListAllAccessListReviewsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.ListAllAccessListReviewsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reviews", kind: "message", T: Review, repeated: true },
    { no: 2, name: "next_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllAccessListReviewsResponse {
    return new ListAllAccessListReviewsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllAccessListReviewsResponse {
    return new ListAllAccessListReviewsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllAccessListReviewsResponse {
    return new ListAllAccessListReviewsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAllAccessListReviewsResponse | PlainMessage<ListAllAccessListReviewsResponse> | undefined, b: ListAllAccessListReviewsResponse | PlainMessage<ListAllAccessListReviewsResponse> | undefined): boolean {
    return proto3.util.equals(ListAllAccessListReviewsResponse, a, b);
  }
}

/**
 * CreateAccessListReviewRequest is the request for creating an access list
 * review.
 *
 * @generated from message teleport.accesslist.v1.CreateAccessListReviewRequest
 */
export class CreateAccessListReviewRequest extends Message<CreateAccessListReviewRequest> {
  /**
   * review is the actual review to create.
   *
   * @generated from field: teleport.accesslist.v1.Review review = 1;
   */
  review?: Review;

  constructor(data?: PartialMessage<CreateAccessListReviewRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.CreateAccessListReviewRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "review", kind: "message", T: Review },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAccessListReviewRequest {
    return new CreateAccessListReviewRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAccessListReviewRequest {
    return new CreateAccessListReviewRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAccessListReviewRequest {
    return new CreateAccessListReviewRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAccessListReviewRequest | PlainMessage<CreateAccessListReviewRequest> | undefined, b: CreateAccessListReviewRequest | PlainMessage<CreateAccessListReviewRequest> | undefined): boolean {
    return proto3.util.equals(CreateAccessListReviewRequest, a, b);
  }
}

/**
 * CreateAccessListReviewResponse is the response for creating an access list
 * review.
 *
 * @generated from message teleport.accesslist.v1.CreateAccessListReviewResponse
 */
export class CreateAccessListReviewResponse extends Message<CreateAccessListReviewResponse> {
  /**
   * review_name is the name of the review that was just created.
   *
   * @generated from field: string review_name = 1;
   */
  reviewName = "";

  /**
   * next_audit_date is when the next audit should be done by.
   *
   * @generated from field: google.protobuf.Timestamp next_audit_date = 2;
   */
  nextAuditDate?: Timestamp;

  constructor(data?: PartialMessage<CreateAccessListReviewResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.CreateAccessListReviewResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "review_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "next_audit_date", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAccessListReviewResponse {
    return new CreateAccessListReviewResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAccessListReviewResponse {
    return new CreateAccessListReviewResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAccessListReviewResponse {
    return new CreateAccessListReviewResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAccessListReviewResponse | PlainMessage<CreateAccessListReviewResponse> | undefined, b: CreateAccessListReviewResponse | PlainMessage<CreateAccessListReviewResponse> | undefined): boolean {
    return proto3.util.equals(CreateAccessListReviewResponse, a, b);
  }
}

/**
 * DeleteAccessListReviewRequest is the request for deleting an access list
 * review.
 *
 * @generated from message teleport.accesslist.v1.DeleteAccessListReviewRequest
 */
export class DeleteAccessListReviewRequest extends Message<DeleteAccessListReviewRequest> {
  /**
   * review_name is the name of the review to delete.
   *
   * @generated from field: string review_name = 1;
   */
  reviewName = "";

  /**
   * access_list_name is the name of the access list to delete the review from.
   *
   * @generated from field: string access_list_name = 2;
   */
  accessListName = "";

  constructor(data?: PartialMessage<DeleteAccessListReviewRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.DeleteAccessListReviewRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "review_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "access_list_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAccessListReviewRequest {
    return new DeleteAccessListReviewRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAccessListReviewRequest {
    return new DeleteAccessListReviewRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAccessListReviewRequest {
    return new DeleteAccessListReviewRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAccessListReviewRequest | PlainMessage<DeleteAccessListReviewRequest> | undefined, b: DeleteAccessListReviewRequest | PlainMessage<DeleteAccessListReviewRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAccessListReviewRequest, a, b);
  }
}

/**
 * AccessRequestPromoteRequest is the request for promoting an access request to
 * an access list.
 *
 * @generated from message teleport.accesslist.v1.AccessRequestPromoteRequest
 */
export class AccessRequestPromoteRequest extends Message<AccessRequestPromoteRequest> {
  /**
   * RequestID is the unique ID of the request to be promoted.
   *
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * AccessListName is the name of the access list to promote the request to.
   *
   * @generated from field: string access_list_name = 2;
   */
  accessListName = "";

  /**
   * Reason is the access request review reason.
   *
   * @generated from field: string reason = 3;
   */
  reason = "";

  constructor(data?: PartialMessage<AccessRequestPromoteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.AccessRequestPromoteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "access_list_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessRequestPromoteRequest {
    return new AccessRequestPromoteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessRequestPromoteRequest {
    return new AccessRequestPromoteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessRequestPromoteRequest {
    return new AccessRequestPromoteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccessRequestPromoteRequest | PlainMessage<AccessRequestPromoteRequest> | undefined, b: AccessRequestPromoteRequest | PlainMessage<AccessRequestPromoteRequest> | undefined): boolean {
    return proto3.util.equals(AccessRequestPromoteRequest, a, b);
  }
}

/**
 * AccessRequestPromoteResponse is the response for promoting an access request
 * to an access list.
 *
 * @generated from message teleport.accesslist.v1.AccessRequestPromoteResponse
 */
export class AccessRequestPromoteResponse extends Message<AccessRequestPromoteResponse> {
  /**
   * AccessRequest is the updated access request.
   *
   * @generated from field: types.AccessRequestV3 access_request = 1;
   */
  accessRequest?: AccessRequestV3;

  constructor(data?: PartialMessage<AccessRequestPromoteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.AccessRequestPromoteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_request", kind: "message", T: AccessRequestV3 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessRequestPromoteResponse {
    return new AccessRequestPromoteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessRequestPromoteResponse {
    return new AccessRequestPromoteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessRequestPromoteResponse {
    return new AccessRequestPromoteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccessRequestPromoteResponse | PlainMessage<AccessRequestPromoteResponse> | undefined, b: AccessRequestPromoteResponse | PlainMessage<AccessRequestPromoteResponse> | undefined): boolean {
    return proto3.util.equals(AccessRequestPromoteResponse, a, b);
  }
}

/**
 * GetSuggestedAccessListsRequest is the request for suggested access lists for
 * an access request.
 *
 * @generated from message teleport.accesslist.v1.GetSuggestedAccessListsRequest
 */
export class GetSuggestedAccessListsRequest extends Message<GetSuggestedAccessListsRequest> {
  /**
   * access_request_id is the unique ID of the request.
   *
   * @generated from field: string access_request_id = 1;
   */
  accessRequestId = "";

  constructor(data?: PartialMessage<GetSuggestedAccessListsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.GetSuggestedAccessListsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestedAccessListsRequest {
    return new GetSuggestedAccessListsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestedAccessListsRequest {
    return new GetSuggestedAccessListsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestedAccessListsRequest {
    return new GetSuggestedAccessListsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestedAccessListsRequest | PlainMessage<GetSuggestedAccessListsRequest> | undefined, b: GetSuggestedAccessListsRequest | PlainMessage<GetSuggestedAccessListsRequest> | undefined): boolean {
    return proto3.util.equals(GetSuggestedAccessListsRequest, a, b);
  }
}

/**
 * GetSuggestedAccessListsResponse is the response for suggested access lists
 * for an access request.
 *
 * @generated from message teleport.accesslist.v1.GetSuggestedAccessListsResponse
 */
export class GetSuggestedAccessListsResponse extends Message<GetSuggestedAccessListsResponse> {
  /**
   * access_lists is the list of suggested lists.
   *
   * @generated from field: repeated teleport.accesslist.v1.AccessList access_lists = 1;
   */
  accessLists: AccessList[] = [];

  constructor(data?: PartialMessage<GetSuggestedAccessListsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "teleport.accesslist.v1.GetSuggestedAccessListsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_lists", kind: "message", T: AccessList, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestedAccessListsResponse {
    return new GetSuggestedAccessListsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestedAccessListsResponse {
    return new GetSuggestedAccessListsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestedAccessListsResponse {
    return new GetSuggestedAccessListsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestedAccessListsResponse | PlainMessage<GetSuggestedAccessListsResponse> | undefined, b: GetSuggestedAccessListsResponse | PlainMessage<GetSuggestedAccessListsResponse> | undefined): boolean {
    return proto3.util.equals(GetSuggestedAccessListsResponse, a, b);
  }
}

