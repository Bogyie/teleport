//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file prehog/v1alpha/teleport.proto (package prehog.v1alpha, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * the kind of a "resource" as intended by ResourceHeartbeatEvent
 * Keep in sync with prehog/v1/teleport.proto
 *
 * @generated from enum prehog.v1alpha.ResourceKind
 */
export enum ResourceKind {
  /**
   * @generated from enum value: RESOURCE_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * PostHog property value: "node"
   *
   * @generated from enum value: RESOURCE_KIND_NODE = 1;
   */
  NODE = 1,

  /**
   * PostHog property value: "app_server"
   *
   * @generated from enum value: RESOURCE_KIND_APP_SERVER = 2;
   */
  APP_SERVER = 2,

  /**
   * PostHog property value: "kube_server"
   *
   * @generated from enum value: RESOURCE_KIND_KUBE_SERVER = 3;
   */
  KUBE_SERVER = 3,

  /**
   * PostHog property value: "db_server"
   *
   * @generated from enum value: RESOURCE_KIND_DB_SERVER = 4;
   */
  DB_SERVER = 4,

  /**
   * PostHog property value: "windows_desktop"
   *
   * @generated from enum value: RESOURCE_KIND_WINDOWS_DESKTOP = 5;
   */
  WINDOWS_DESKTOP = 5,

  /**
   * ServerV3 ("node") heartbeat with a subkind of "openssh" (as opposed to
   * empty or "teleport"); not used in keepalives
   *
   * PostHog property value: "node.openssh"
   *
   * @generated from enum value: RESOURCE_KIND_NODE_OPENSSH = 6;
   */
  NODE_OPENSSH = 6,

  /**
   * ServerV3 ("node") heartbeat with a subkind of "openssh-ec2-ice".
   * Nodes that map EC2 instances and are accessed using EC2 Instance Connect Endpoint.
   * Not used in keepalives.
   * This is the SubKind SubKindOpenSSHEICENode in teleport repo.
   *
   * PostHog property value: "node.openssh_ec2_ice"
   *
   * @generated from enum value: RESOURCE_KIND_NODE_OPENSSH_EICE = 7;
   */
  NODE_OPENSSH_EICE = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(ResourceKind)
proto3.util.setEnumType(ResourceKind, "prehog.v1alpha.ResourceKind", [
  { no: 0, name: "RESOURCE_KIND_UNSPECIFIED" },
  { no: 1, name: "RESOURCE_KIND_NODE" },
  { no: 2, name: "RESOURCE_KIND_APP_SERVER" },
  { no: 3, name: "RESOURCE_KIND_KUBE_SERVER" },
  { no: 4, name: "RESOURCE_KIND_DB_SERVER" },
  { no: 5, name: "RESOURCE_KIND_WINDOWS_DESKTOP" },
  { no: 6, name: "RESOURCE_KIND_NODE_OPENSSH" },
  { no: 7, name: "RESOURCE_KIND_NODE_OPENSSH_EICE" },
]);

/**
 * The kind of user a given username refers to. Usernames should always refer to
 * a valid cluster user (even if temporary, e.g. SSO), but may be Machine ID
 * bot users.
 *
 * @generated from enum prehog.v1alpha.UserKind
 */
export enum UserKind {
  /**
   * Indicates a legacy cluster emitting events without a defined user kind.
   * Note that users (from PostHog's perspective) can be identified via future
   * events if the cluster is upgraded to specify this field.
   *
   * PostHog property value: ""
   *
   * @generated from enum value: USER_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Indicates the user associated with this event is human, either created
   * locally or via SSO.
   *
   * PostHog property value: "human"
   *
   * @generated from enum value: USER_KIND_HUMAN = 1;
   */
  HUMAN = 1,

  /**
   * Indicates the user associated with this event is a Machine ID bot user.
   *
   * PostHog property value: "bot"
   *
   * @generated from enum value: USER_KIND_BOT = 2;
   */
  BOT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(UserKind)
proto3.util.setEnumType(UserKind, "prehog.v1alpha.UserKind", [
  { no: 0, name: "USER_KIND_UNSPECIFIED" },
  { no: 1, name: "USER_KIND_HUMAN" },
  { no: 2, name: "USER_KIND_BOT" },
]);

/**
 * DiscoverResource represents a resource type.
 *
 * @generated from enum prehog.v1alpha.DiscoverResource
 */
export enum DiscoverResource {
  /**
   * @generated from enum value: DISCOVER_RESOURCE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_SERVER = 1;
   */
  SERVER = 1,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_KUBERNETES = 2;
   */
  KUBERNETES = 2,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_SELF_HOSTED = 3;
   */
  DATABASE_POSTGRES_SELF_HOSTED = 3,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_SELF_HOSTED = 4;
   */
  DATABASE_MYSQL_SELF_HOSTED = 4,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MONGODB_SELF_HOSTED = 5;
   */
  DATABASE_MONGODB_SELF_HOSTED = 5,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_RDS = 6;
   */
  DATABASE_POSTGRES_RDS = 6,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_RDS = 7;
   */
  DATABASE_MYSQL_RDS = 7,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_APPLICATION_HTTP = 8;
   */
  APPLICATION_HTTP = 8,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_APPLICATION_TCP = 9;
   */
  APPLICATION_TCP = 9,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_WINDOWS_DESKTOP = 10;
   */
  WINDOWS_DESKTOP = 10,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_RDS = 11;
   */
  DATABASE_SQLSERVER_RDS = 11,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT = 12;
   */
  DATABASE_POSTGRES_REDSHIFT = 12,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_SELF_HOSTED = 13;
   */
  DATABASE_SQLSERVER_SELF_HOSTED = 13,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_SELF_HOSTED = 14;
   */
  DATABASE_REDIS_SELF_HOSTED = 14,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_GCP = 15;
   */
  DATABASE_POSTGRES_GCP = 15,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_GCP = 16;
   */
  DATABASE_MYSQL_GCP = 16,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_GCP = 17;
   */
  DATABASE_SQLSERVER_GCP = 17,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT_SERVERLESS = 18;
   */
  DATABASE_POSTGRES_REDSHIFT_SERVERLESS = 18,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_AZURE = 19;
   */
  DATABASE_POSTGRES_AZURE = 19,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_DYNAMODB = 20;
   */
  DATABASE_DYNAMODB = 20,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_CASSANDRA_KEYSPACES = 21;
   */
  DATABASE_CASSANDRA_KEYSPACES = 21,

  /**
   * Cassandra & ScyllaDb
   *
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_CASSANDRA_SELF_HOSTED = 22;
   */
  DATABASE_CASSANDRA_SELF_HOSTED = 22,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_ELASTICSEARCH_SELF_HOSTED = 23;
   */
  DATABASE_ELASTICSEARCH_SELF_HOSTED = 23,

  /**
   * Elasticache & MemoryDb
   *
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_ELASTICACHE = 24;
   */
  DATABASE_REDIS_ELASTICACHE = 24,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_MEMORYDB = 25;
   */
  DATABASE_REDIS_MEMORYDB = 25,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_AZURE_CACHE = 26;
   */
  DATABASE_REDIS_AZURE_CACHE = 26,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_CLUSTER_SELF_HOSTED = 27;
   */
  DATABASE_REDIS_CLUSTER_SELF_HOSTED = 27,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_AZURE = 28;
   */
  DATABASE_MYSQL_AZURE = 28,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_AZURE = 29;
   */
  DATABASE_SQLSERVER_AZURE = 29,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_MICROSOFT = 30;
   */
  DATABASE_SQLSERVER_MICROSOFT = 30,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_COCKROACHDB_SELF_HOSTED = 31;
   */
  DATABASE_COCKROACHDB_SELF_HOSTED = 31,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MONGODB_ATLAS = 32;
   */
  DATABASE_MONGODB_ATLAS = 32,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SNOWFLAKE = 33;
   */
  DATABASE_SNOWFLAKE = 33,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DOC_DATABASE_RDS_PROXY = 34;
   */
  DOC_DATABASE_RDS_PROXY = 34,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DOC_DATABASE_HIGH_AVAILABILITY = 35;
   */
  DOC_DATABASE_HIGH_AVAILABILITY = 35,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DOC_DATABASE_DYNAMIC_REGISTRATION = 36;
   */
  DOC_DATABASE_DYNAMIC_REGISTRATION = 36,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_SAML_APPLICATION = 37;
   */
  SAML_APPLICATION = 37,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_EC2_INSTANCE = 38;
   */
  EC2_INSTANCE = 38,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DOC_WINDOWS_DESKTOP_NON_AD = 39;
   */
  DOC_WINDOWS_DESKTOP_NON_AD = 39,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_KUBERNETES_EKS = 40;
   */
  KUBERNETES_EKS = 40,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_APPLICATION_AWS_CONSOLE = 41;
   */
  APPLICATION_AWS_CONSOLE = 41,
}
// Retrieve enum metadata with: proto3.getEnumType(DiscoverResource)
proto3.util.setEnumType(DiscoverResource, "prehog.v1alpha.DiscoverResource", [
  { no: 0, name: "DISCOVER_RESOURCE_UNSPECIFIED" },
  { no: 1, name: "DISCOVER_RESOURCE_SERVER" },
  { no: 2, name: "DISCOVER_RESOURCE_KUBERNETES" },
  { no: 3, name: "DISCOVER_RESOURCE_DATABASE_POSTGRES_SELF_HOSTED" },
  { no: 4, name: "DISCOVER_RESOURCE_DATABASE_MYSQL_SELF_HOSTED" },
  { no: 5, name: "DISCOVER_RESOURCE_DATABASE_MONGODB_SELF_HOSTED" },
  { no: 6, name: "DISCOVER_RESOURCE_DATABASE_POSTGRES_RDS" },
  { no: 7, name: "DISCOVER_RESOURCE_DATABASE_MYSQL_RDS" },
  { no: 8, name: "DISCOVER_RESOURCE_APPLICATION_HTTP" },
  { no: 9, name: "DISCOVER_RESOURCE_APPLICATION_TCP" },
  { no: 10, name: "DISCOVER_RESOURCE_WINDOWS_DESKTOP" },
  { no: 11, name: "DISCOVER_RESOURCE_DATABASE_SQLSERVER_RDS" },
  { no: 12, name: "DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT" },
  { no: 13, name: "DISCOVER_RESOURCE_DATABASE_SQLSERVER_SELF_HOSTED" },
  { no: 14, name: "DISCOVER_RESOURCE_DATABASE_REDIS_SELF_HOSTED" },
  { no: 15, name: "DISCOVER_RESOURCE_DATABASE_POSTGRES_GCP" },
  { no: 16, name: "DISCOVER_RESOURCE_DATABASE_MYSQL_GCP" },
  { no: 17, name: "DISCOVER_RESOURCE_DATABASE_SQLSERVER_GCP" },
  { no: 18, name: "DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT_SERVERLESS" },
  { no: 19, name: "DISCOVER_RESOURCE_DATABASE_POSTGRES_AZURE" },
  { no: 20, name: "DISCOVER_RESOURCE_DATABASE_DYNAMODB" },
  { no: 21, name: "DISCOVER_RESOURCE_DATABASE_CASSANDRA_KEYSPACES" },
  { no: 22, name: "DISCOVER_RESOURCE_DATABASE_CASSANDRA_SELF_HOSTED" },
  { no: 23, name: "DISCOVER_RESOURCE_DATABASE_ELASTICSEARCH_SELF_HOSTED" },
  { no: 24, name: "DISCOVER_RESOURCE_DATABASE_REDIS_ELASTICACHE" },
  { no: 25, name: "DISCOVER_RESOURCE_DATABASE_REDIS_MEMORYDB" },
  { no: 26, name: "DISCOVER_RESOURCE_DATABASE_REDIS_AZURE_CACHE" },
  { no: 27, name: "DISCOVER_RESOURCE_DATABASE_REDIS_CLUSTER_SELF_HOSTED" },
  { no: 28, name: "DISCOVER_RESOURCE_DATABASE_MYSQL_AZURE" },
  { no: 29, name: "DISCOVER_RESOURCE_DATABASE_SQLSERVER_AZURE" },
  { no: 30, name: "DISCOVER_RESOURCE_DATABASE_SQLSERVER_MICROSOFT" },
  { no: 31, name: "DISCOVER_RESOURCE_DATABASE_COCKROACHDB_SELF_HOSTED" },
  { no: 32, name: "DISCOVER_RESOURCE_DATABASE_MONGODB_ATLAS" },
  { no: 33, name: "DISCOVER_RESOURCE_DATABASE_SNOWFLAKE" },
  { no: 34, name: "DISCOVER_RESOURCE_DOC_DATABASE_RDS_PROXY" },
  { no: 35, name: "DISCOVER_RESOURCE_DOC_DATABASE_HIGH_AVAILABILITY" },
  { no: 36, name: "DISCOVER_RESOURCE_DOC_DATABASE_DYNAMIC_REGISTRATION" },
  { no: 37, name: "DISCOVER_RESOURCE_SAML_APPLICATION" },
  { no: 38, name: "DISCOVER_RESOURCE_EC2_INSTANCE" },
  { no: 39, name: "DISCOVER_RESOURCE_DOC_WINDOWS_DESKTOP_NON_AD" },
  { no: 40, name: "DISCOVER_RESOURCE_KUBERNETES_EKS" },
  { no: 41, name: "DISCOVER_RESOURCE_APPLICATION_AWS_CONSOLE" },
]);

/**
 * DiscoverStatus represents a Discover Step outcome.
 *
 * @generated from enum prehog.v1alpha.DiscoverStatus
 */
export enum DiscoverStatus {
  /**
   * @generated from enum value: DISCOVER_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The user tried to complete the action and it succeeded.
   *
   * @generated from enum value: DISCOVER_STATUS_SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * The system skipped the step.
   * For example:
   * When setting up a Database and there's already a Database Service proxying the DB.
   * In this case the Database Agent installation is skipped.
   *
   * @generated from enum value: DISCOVER_STATUS_SKIPPED = 2;
   */
  SKIPPED = 2,

  /**
   * The user tried to complete the action and it failed.
   *
   * @generated from enum value: DISCOVER_STATUS_ERROR = 3;
   */
  ERROR = 3,

  /**
   * The user did not complete the action and left the wizard.
   *
   * @generated from enum value: DISCOVER_STATUS_ABORTED = 4;
   */
  ABORTED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(DiscoverStatus)
proto3.util.setEnumType(DiscoverStatus, "prehog.v1alpha.DiscoverStatus", [
  { no: 0, name: "DISCOVER_STATUS_UNSPECIFIED" },
  { no: 1, name: "DISCOVER_STATUS_SUCCESS" },
  { no: 2, name: "DISCOVER_STATUS_SKIPPED" },
  { no: 3, name: "DISCOVER_STATUS_ERROR" },
  { no: 4, name: "DISCOVER_STATUS_ABORTED" },
]);

/**
 * CTA represents teleport web UI's call to action buttons
 *
 * @generated from enum prehog.v1alpha.CTA
 */
export enum CTA {
  /**
   * @generated from enum value: CTA_UNSPECIFIED = 0;
   */
  CTA_UNSPECIFIED = 0,

  /**
   * @generated from enum value: CTA_AUTH_CONNECTOR = 1;
   */
  CTA_AUTH_CONNECTOR = 1,

  /**
   * @generated from enum value: CTA_ACTIVE_SESSIONS = 2;
   */
  CTA_ACTIVE_SESSIONS = 2,

  /**
   * @generated from enum value: CTA_ACCESS_REQUESTS = 3;
   */
  CTA_ACCESS_REQUESTS = 3,

  /**
   * @generated from enum value: CTA_PREMIUM_SUPPORT = 4;
   */
  CTA_PREMIUM_SUPPORT = 4,

  /**
   * @generated from enum value: CTA_TRUSTED_DEVICES = 5;
   */
  CTA_TRUSTED_DEVICES = 5,

  /**
   * @generated from enum value: CTA_UPGRADE_BANNER = 6;
   */
  CTA_UPGRADE_BANNER = 6,

  /**
   * @generated from enum value: CTA_BILLING_SUMMARY = 7;
   */
  CTA_BILLING_SUMMARY = 7,

  /**
   * @generated from enum value: CTA_ACCESS_LIST = 8;
   */
  CTA_ACCESS_LIST = 8,

  /**
   * @generated from enum value: CTA_ACCESS_MONITORING = 9;
   */
  CTA_ACCESS_MONITORING = 9,

  /**
   * @generated from enum value: CTA_EXTERNAL_AUDIT_STORAGE = 10;
   */
  CTA_EXTERNAL_AUDIT_STORAGE = 10,

  /**
   * @generated from enum value: CTA_OKTA_USER_SYNC = 11;
   */
  CTA_OKTA_USER_SYNC = 11,

  /**
   * @generated from enum value: CTA_ENTRA_ID = 12;
   */
  CTA_ENTRA_ID = 12,
}
// Retrieve enum metadata with: proto3.getEnumType(CTA)
proto3.util.setEnumType(CTA, "prehog.v1alpha.CTA", [
  { no: 0, name: "CTA_UNSPECIFIED" },
  { no: 1, name: "CTA_AUTH_CONNECTOR" },
  { no: 2, name: "CTA_ACTIVE_SESSIONS" },
  { no: 3, name: "CTA_ACCESS_REQUESTS" },
  { no: 4, name: "CTA_PREMIUM_SUPPORT" },
  { no: 5, name: "CTA_TRUSTED_DEVICES" },
  { no: 6, name: "CTA_UPGRADE_BANNER" },
  { no: 7, name: "CTA_BILLING_SUMMARY" },
  { no: 8, name: "CTA_ACCESS_LIST" },
  { no: 9, name: "CTA_ACCESS_MONITORING" },
  { no: 10, name: "CTA_EXTERNAL_AUDIT_STORAGE" },
  { no: 11, name: "CTA_OKTA_USER_SYNC" },
  { no: 12, name: "CTA_ENTRA_ID" },
]);

/**
 * IntegrationEnrollKind represents the types of integration that
 * can be enrolled.
 *
 * @generated from enum prehog.v1alpha.IntegrationEnrollKind
 */
export enum IntegrationEnrollKind {
  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_SLACK = 1;
   */
  SLACK = 1,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_AWS_OIDC = 2;
   */
  AWS_OIDC = 2,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_PAGERDUTY = 3;
   */
  PAGERDUTY = 3,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_EMAIL = 4;
   */
  EMAIL = 4,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_JIRA = 5;
   */
  JIRA = 5,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_DISCORD = 6;
   */
  DISCORD = 6,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MATTERMOST = 7;
   */
  MATTERMOST = 7,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MS_TEAMS = 8;
   */
  MS_TEAMS = 8,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_OPSGENIE = 9;
   */
  OPSGENIE = 9,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_OKTA = 10;
   */
  OKTA = 10,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_JAMF = 11;
   */
  JAMF = 11,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID = 12;
   */
  MACHINE_ID = 12,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_GITHUB_ACTIONS = 13;
   */
  MACHINE_ID_GITHUB_ACTIONS = 13,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_CIRCLECI = 14;
   */
  MACHINE_ID_CIRCLECI = 14,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_GITLAB = 15;
   */
  MACHINE_ID_GITLAB = 15,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_JENKINS = 16;
   */
  MACHINE_ID_JENKINS = 16,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_ANSIBLE = 17;
   */
  MACHINE_ID_ANSIBLE = 17,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_AWS = 18;
   */
  MACHINE_ID_AWS = 18,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_GCP = 19;
   */
  MACHINE_ID_GCP = 19,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_AZURE = 20;
   */
  MACHINE_ID_AZURE = 20,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_SPACELIFT = 21;
   */
  MACHINE_ID_SPACELIFT = 21,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_KUBERNETES = 22;
   */
  MACHINE_ID_KUBERNETES = 22,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_ENTRA_ID = 23;
   */
  ENTRA_ID = 23,
}
// Retrieve enum metadata with: proto3.getEnumType(IntegrationEnrollKind)
proto3.util.setEnumType(IntegrationEnrollKind, "prehog.v1alpha.IntegrationEnrollKind", [
  { no: 0, name: "INTEGRATION_ENROLL_KIND_UNSPECIFIED" },
  { no: 1, name: "INTEGRATION_ENROLL_KIND_SLACK" },
  { no: 2, name: "INTEGRATION_ENROLL_KIND_AWS_OIDC" },
  { no: 3, name: "INTEGRATION_ENROLL_KIND_PAGERDUTY" },
  { no: 4, name: "INTEGRATION_ENROLL_KIND_EMAIL" },
  { no: 5, name: "INTEGRATION_ENROLL_KIND_JIRA" },
  { no: 6, name: "INTEGRATION_ENROLL_KIND_DISCORD" },
  { no: 7, name: "INTEGRATION_ENROLL_KIND_MATTERMOST" },
  { no: 8, name: "INTEGRATION_ENROLL_KIND_MS_TEAMS" },
  { no: 9, name: "INTEGRATION_ENROLL_KIND_OPSGENIE" },
  { no: 10, name: "INTEGRATION_ENROLL_KIND_OKTA" },
  { no: 11, name: "INTEGRATION_ENROLL_KIND_JAMF" },
  { no: 12, name: "INTEGRATION_ENROLL_KIND_MACHINE_ID" },
  { no: 13, name: "INTEGRATION_ENROLL_KIND_MACHINE_ID_GITHUB_ACTIONS" },
  { no: 14, name: "INTEGRATION_ENROLL_KIND_MACHINE_ID_CIRCLECI" },
  { no: 15, name: "INTEGRATION_ENROLL_KIND_MACHINE_ID_GITLAB" },
  { no: 16, name: "INTEGRATION_ENROLL_KIND_MACHINE_ID_JENKINS" },
  { no: 17, name: "INTEGRATION_ENROLL_KIND_MACHINE_ID_ANSIBLE" },
  { no: 18, name: "INTEGRATION_ENROLL_KIND_MACHINE_ID_AWS" },
  { no: 19, name: "INTEGRATION_ENROLL_KIND_MACHINE_ID_GCP" },
  { no: 20, name: "INTEGRATION_ENROLL_KIND_MACHINE_ID_AZURE" },
  { no: 21, name: "INTEGRATION_ENROLL_KIND_MACHINE_ID_SPACELIFT" },
  { no: 22, name: "INTEGRATION_ENROLL_KIND_MACHINE_ID_KUBERNETES" },
  { no: 23, name: "INTEGRATION_ENROLL_KIND_ENTRA_ID" },
]);

/**
 * EditorChangeStatus is the possible value of an EditorChangeEvent event status
 *
 * @generated from enum prehog.v1alpha.EditorChangeStatus
 */
export enum EditorChangeStatus {
  /**
   * @generated from enum value: EDITOR_CHANGE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Status when the editor role is granted
   *
   * @generated from enum value: EDITOR_CHANGE_STATUS_ROLE_GRANTED = 1;
   */
  ROLE_GRANTED = 1,

  /**
   * Status when the editor role is removed
   *
   * @generated from enum value: EDITOR_CHANGE_STATUS_ROLE_REMOVED = 2;
   */
  ROLE_REMOVED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(EditorChangeStatus)
proto3.util.setEnumType(EditorChangeStatus, "prehog.v1alpha.EditorChangeStatus", [
  { no: 0, name: "EDITOR_CHANGE_STATUS_UNSPECIFIED" },
  { no: 1, name: "EDITOR_CHANGE_STATUS_ROLE_GRANTED" },
  { no: 2, name: "EDITOR_CHANGE_STATUS_ROLE_REMOVED" },
]);

/**
 * Feature is name of Teleport feature
 *
 * @generated from enum prehog.v1alpha.Feature
 */
export enum Feature {
  /**
   * @generated from enum value: FEATURE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FEATURE_TRUSTED_DEVICES = 1;
   */
  TRUSTED_DEVICES = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Feature)
proto3.util.setEnumType(Feature, "prehog.v1alpha.Feature", [
  { no: 0, name: "FEATURE_UNSPECIFIED" },
  { no: 1, name: "FEATURE_TRUSTED_DEVICES" },
]);

/**
 * FeatureRecommendationStatus is feature recommendation status.
 *
 * @generated from enum prehog.v1alpha.FeatureRecommendationStatus
 */
export enum FeatureRecommendationStatus {
  /**
   * @generated from enum value: FEATURE_RECOMMENDATION_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * FEATURE_RECOMMENDATION_STATUS_NOTIFIED is emitted when a feature is recommended (notified in UI) to user.
   *
   * @generated from enum value: FEATURE_RECOMMENDATION_STATUS_NOTIFIED = 1;
   */
  NOTIFIED = 1,

  /**
   * FEATURE_RECOMMENDATION_STATUS_DONE is emitted when user completes the desired CTA.
   *
   * @generated from enum value: FEATURE_RECOMMENDATION_STATUS_DONE = 2;
   */
  DONE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(FeatureRecommendationStatus)
proto3.util.setEnumType(FeatureRecommendationStatus, "prehog.v1alpha.FeatureRecommendationStatus", [
  { no: 0, name: "FEATURE_RECOMMENDATION_STATUS_UNSPECIFIED" },
  { no: 1, name: "FEATURE_RECOMMENDATION_STATUS_NOTIFIED" },
  { no: 2, name: "FEATURE_RECOMMENDATION_STATUS_DONE" },
]);

/**
 * LicenseLimit indicates event type that triggered LicenseLimitEvent.
 *
 * @generated from enum prehog.v1alpha.LicenseLimit
 */
export enum LicenseLimit {
  /**
   * @generated from enum value: LICENSE_LIMIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * LICENSE_LIMIT_DEVICE_TRUST_TEAM_JAMF is emitted if license does not
   * allow Jamf integration (e.g. Team Plan)
   *
   * @generated from enum value: LICENSE_LIMIT_DEVICE_TRUST_TEAM_JAMF = 1;
   */
  DEVICE_TRUST_TEAM_JAMF = 1,

  /**
   * LICENSE_LIMIT_DEVICE_TRUST_TEAM_USAGE is emitted when allowed enrolled device
   * limit is reached
   *
   * @generated from enum value: LICENSE_LIMIT_DEVICE_TRUST_TEAM_USAGE = 2;
   */
  DEVICE_TRUST_TEAM_USAGE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(LicenseLimit)
proto3.util.setEnumType(LicenseLimit, "prehog.v1alpha.LicenseLimit", [
  { no: 0, name: "LICENSE_LIMIT_UNSPECIFIED" },
  { no: 1, name: "LICENSE_LIMIT_DEVICE_TRUST_TEAM_JAMF" },
  { no: 2, name: "LICENSE_LIMIT_DEVICE_TRUST_TEAM_USAGE" },
]);

/**
 * a successful user login
 *
 * PostHog event: tp.user.login
 *
 * @generated from message prehog.v1alpha.UserLoginEvent
 */
export class UserLoginEvent extends Message<UserLoginEvent> {
  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
   * should always be a real user as bots and service accounts with long-term
   * credentials don't ever login
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * type of the auth connector used in the login, should be
   * "local"/"github"/"saml"/"oidc"
   *
   * PostHog property: tp.connector_type
   *
   * @generated from field: string connector_type = 2;
   */
  connectorType = "";

  /**
   * anonymized device ID, empty or 32 bytes (HMAC-SHA-256) encoded in base64;
   * for logins where device trust is enabled
   *
   * PostHog property: tp.device_id
   *
   * @generated from field: string device_id = 3;
   */
  deviceId = "";

  /**
   * the required private key policy for this login.
   *
   * @generated from field: string required_private_key_policy = 4;
   */
  requiredPrivateKeyPolicy = "";

  constructor(data?: PartialMessage<UserLoginEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UserLoginEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connector_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "device_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "required_private_key_policy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserLoginEvent {
    return new UserLoginEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserLoginEvent {
    return new UserLoginEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserLoginEvent {
    return new UserLoginEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UserLoginEvent | PlainMessage<UserLoginEvent> | undefined, b: UserLoginEvent | PlainMessage<UserLoginEvent> | undefined): boolean {
    return proto3.util.equals(UserLoginEvent, a, b);
  }
}

/**
 * MFAAuthenticationEvent is emitted when a user performs MFA authentication.
 *
 * @generated from message prehog.v1alpha.MFAAuthenticationEvent
 */
export class MFAAuthenticationEvent extends Message<MFAAuthenticationEvent> {
  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
   * should always be a real user as bots and service accounts with long-term
   * credentials don't ever login
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * anonymized device ID, empty or 32 bytes (HMAC-SHA-256) encoded in base64;
   * for logins where device trust is enabled
   *
   * PostHog property: tp.device_id
   *
   * @generated from field: string device_id = 2;
   */
  deviceId = "";

  /**
   * device type is the type of MFA device used
   *
   * @generated from field: string device_type = 3;
   */
  deviceType = "";

  /**
   * the authorization scope the MFA authentication
   *
   * @generated from field: string mfa_challenge_scope = 4;
   */
  mfaChallengeScope = "";

  constructor(data?: PartialMessage<MFAAuthenticationEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.MFAAuthenticationEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "device_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "device_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "mfa_challenge_scope", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MFAAuthenticationEvent {
    return new MFAAuthenticationEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MFAAuthenticationEvent {
    return new MFAAuthenticationEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MFAAuthenticationEvent {
    return new MFAAuthenticationEvent().fromJsonString(jsonString, options);
  }

  static equals(a: MFAAuthenticationEvent | PlainMessage<MFAAuthenticationEvent> | undefined, b: MFAAuthenticationEvent | PlainMessage<MFAAuthenticationEvent> | undefined): boolean {
    return proto3.util.equals(MFAAuthenticationEvent, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.SSOCreateEvent
 */
export class SSOCreateEvent extends Message<SSOCreateEvent> {
  /**
   * github/saml/oidc
   *
   * @generated from field: string connector_type = 1;
   */
  connectorType = "";

  constructor(data?: PartialMessage<SSOCreateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.SSOCreateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connector_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SSOCreateEvent {
    return new SSOCreateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SSOCreateEvent {
    return new SSOCreateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SSOCreateEvent {
    return new SSOCreateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: SSOCreateEvent | PlainMessage<SSOCreateEvent> | undefined, b: SSOCreateEvent | PlainMessage<SSOCreateEvent> | undefined): boolean {
    return proto3.util.equals(SSOCreateEvent, a, b);
  }
}

/**
 * ResourceCreateEvent is emitted when a resource is created.
 *
 * @generated from message prehog.v1alpha.ResourceCreateEvent
 */
export class ResourceCreateEvent extends Message<ResourceCreateEvent> {
  /**
   * resource_type is the type of resource ("node", "node.openssh", "db", "k8s", "app").
   *
   * @generated from field: string resource_type = 1;
   */
  resourceType = "";

  /**
   * resource_origin is the origin of the resource ("cloud", "kubernetes").
   *
   * @generated from field: string resource_origin = 2;
   */
  resourceOrigin = "";

  /**
   * cloud_provider is the cloud provider the resource came from ("AWS", "Azure", "GCP")
   * if resource_origin == "cloud".
   *
   * @generated from field: string cloud_provider = 3;
   */
  cloudProvider = "";

  /**
   * database contains additional database information if resource_type == "db".
   *
   * @generated from field: prehog.v1alpha.DiscoveredDatabaseMetadata database = 4;
   */
  database?: DiscoveredDatabaseMetadata;

  constructor(data?: PartialMessage<ResourceCreateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.ResourceCreateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource_origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cloud_provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "database", kind: "message", T: DiscoveredDatabaseMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceCreateEvent {
    return new ResourceCreateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceCreateEvent {
    return new ResourceCreateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceCreateEvent {
    return new ResourceCreateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceCreateEvent | PlainMessage<ResourceCreateEvent> | undefined, b: ResourceCreateEvent | PlainMessage<ResourceCreateEvent> | undefined): boolean {
    return proto3.util.equals(ResourceCreateEvent, a, b);
  }
}

/**
 * DiscoveredDatabaseMetadata contains additional database information.
 *
 * @generated from message prehog.v1alpha.DiscoveredDatabaseMetadata
 */
export class DiscoveredDatabaseMetadata extends Message<DiscoveredDatabaseMetadata> {
  /**
   * database type.
   *
   * @generated from field: string db_type = 1;
   */
  dbType = "";

  /**
   * database protocol.
   *
   * @generated from field: string db_protocol = 2;
   */
  dbProtocol = "";

  constructor(data?: PartialMessage<DiscoveredDatabaseMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.DiscoveredDatabaseMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "db_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "db_protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoveredDatabaseMetadata {
    return new DiscoveredDatabaseMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoveredDatabaseMetadata {
    return new DiscoveredDatabaseMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoveredDatabaseMetadata {
    return new DiscoveredDatabaseMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoveredDatabaseMetadata | PlainMessage<DiscoveredDatabaseMetadata> | undefined, b: DiscoveredDatabaseMetadata | PlainMessage<DiscoveredDatabaseMetadata> | undefined): boolean {
    return proto3.util.equals(DiscoveredDatabaseMetadata, a, b);
  }
}

/**
 * a heartbeat for a resource served by a Teleport instance outside of the
 * control plane (i.e. not auth, not proxy)
 *
 * PostHog event: tp.resource.hb
 *
 * @generated from message prehog.v1alpha.ResourceHeartbeatEvent
 */
export class ResourceHeartbeatEvent extends Message<ResourceHeartbeatEvent> {
  /**
   * anonymized name of the resource, 32 bytes (HMAC-SHA-256); the name is the
   * host ID for nodes but the actual user-facing name for other resources, so
   * an app or a database served by multiple agents won't be counted multiple
   * times
   *
   * PreHog property: tp.resource_name (in base64)
   *
   * @generated from field: bytes resource_name = 1;
   */
  resourceName = new Uint8Array(0);

  /**
   * kind of the resource (node, app, db)
   *
   * PostHog property: tp.resource_type (as a string, see ResourceKind)
   *
   * @generated from field: prehog.v1alpha.ResourceKind resource_kind = 2;
   */
  resourceKind = ResourceKind.UNSPECIFIED;

  /**
   * true if the heartbeat has no expiration
   *
   * PostHog property: tp.is_static
   *
   * @generated from field: bool static = 3;
   */
  static = false;

  constructor(data?: PartialMessage<ResourceHeartbeatEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.ResourceHeartbeatEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_name", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "resource_kind", kind: "enum", T: proto3.getEnumType(ResourceKind) },
    { no: 3, name: "static", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceHeartbeatEvent {
    return new ResourceHeartbeatEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceHeartbeatEvent {
    return new ResourceHeartbeatEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceHeartbeatEvent {
    return new ResourceHeartbeatEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceHeartbeatEvent | PlainMessage<ResourceHeartbeatEvent> | undefined, b: ResourceHeartbeatEvent | PlainMessage<ResourceHeartbeatEvent> | undefined): boolean {
    return proto3.util.equals(ResourceHeartbeatEvent, a, b);
  }
}

/**
 * an event representing one of several audit events: session.start, port,
 * app.session.start, db.session.start, windows.desktop.session.start; i.e. a
 * SSH shell or port-forward, kubectl exec or kubectl port-forward, DB, App or
 * Desktop connection
 *
 * an earlier encoding (as "tp.session.start") mixed SSH sessions and kubectl
 * execs under a session type of "ssh"
 *
 * PostHog event: tp.session.start
 *
 * @generated from message prehog.v1alpha.SessionStartEvent
 */
export class SessionStartEvent extends Message<SessionStartEvent> {
  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * type of the session, should be "ssh"/"k8s"/"db"/"app"/"desktop" (matching
   * the values for api/types.SessionKind) or "app_tcp", "ssh_port_v2" or
   * "k8s_port" for TCP Application Access connections, SSH port forwards and
   * kubectl port-forward respectively; a type of "ssh_port" represents either a
   * SSH port forwarding connection or a kubectl port-forward (not used in new
   * events)
   *
   * PostHog property: tp.session_type
   *
   * @generated from field: string session_type = 2;
   */
  sessionType = "";

  /**
   * if session_type == "db" the database struct contains additional information
   * about database session.
   *
   * PostHog property: tp.database
   *
   * @generated from field: prehog.v1alpha.SessionStartDatabaseMetadata database = 3;
   */
  database?: SessionStartDatabaseMetadata;

  /**
   * if session_type == "desktop" the desktop struct contains additional
   * information about the desktop session
   *
   * @generated from field: prehog.v1alpha.SessionStartDesktopMetadata desktop = 4;
   */
  desktop?: SessionStartDesktopMetadata;

  /**
   * Indicates this event was generated by a Machine ID bot user.
   *
   * @generated from field: prehog.v1alpha.UserKind user_kind = 5;
   */
  userKind = UserKind.UNSPECIFIED;

  constructor(data?: PartialMessage<SessionStartEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.SessionStartEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "session_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "database", kind: "message", T: SessionStartDatabaseMetadata },
    { no: 4, name: "desktop", kind: "message", T: SessionStartDesktopMetadata },
    { no: 5, name: "user_kind", kind: "enum", T: proto3.getEnumType(UserKind) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SessionStartEvent {
    return new SessionStartEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SessionStartEvent {
    return new SessionStartEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SessionStartEvent {
    return new SessionStartEvent().fromJsonString(jsonString, options);
  }

  static equals(a: SessionStartEvent | PlainMessage<SessionStartEvent> | undefined, b: SessionStartEvent | PlainMessage<SessionStartEvent> | undefined): boolean {
    return proto3.util.equals(SessionStartEvent, a, b);
  }
}

/**
 * SessionStartDatabaseMetadata contains additional information about database session.
 *
 * @generated from message prehog.v1alpha.SessionStartDatabaseMetadata
 */
export class SessionStartDatabaseMetadata extends Message<SessionStartDatabaseMetadata> {
  /**
   * database type.
   *
   * @generated from field: string db_type = 1;
   */
  dbType = "";

  /**
   * database protocol.
   *
   * @generated from field: string db_protocol = 2;
   */
  dbProtocol = "";

  /**
   * database origin source.
   *
   * @generated from field: string db_origin = 3;
   */
  dbOrigin = "";

  constructor(data?: PartialMessage<SessionStartDatabaseMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.SessionStartDatabaseMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "db_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "db_protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "db_origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SessionStartDatabaseMetadata {
    return new SessionStartDatabaseMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SessionStartDatabaseMetadata {
    return new SessionStartDatabaseMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SessionStartDatabaseMetadata {
    return new SessionStartDatabaseMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: SessionStartDatabaseMetadata | PlainMessage<SessionStartDatabaseMetadata> | undefined, b: SessionStartDatabaseMetadata | PlainMessage<SessionStartDatabaseMetadata> | undefined): boolean {
    return proto3.util.equals(SessionStartDatabaseMetadata, a, b);
  }
}

/**
 * SessionStartDesktop Metadata contains additional information about
 * a desktop session.
 *
 * @generated from message prehog.v1alpha.SessionStartDesktopMetadata
 */
export class SessionStartDesktopMetadata extends Message<SessionStartDesktopMetadata> {
  /**
   * desktop type ("ad" or "non-ad")
   *
   * @generated from field: string desktop_type = 1;
   */
  desktopType = "";

  /**
   * Indicates how the desktop was enrolled in Teleport
   * ("config-file" for statically defined hosts, or "dynamic" for
   * hosts discovered via LDAP).
   *
   * @generated from field: string origin = 2;
   */
  origin = "";

  /**
   * If desktop type is "ad" this field contains the anonymized Active
   * Directory domain that the desktop belongs to.
   *
   * @generated from field: string windows_domain = 3;
   */
  windowsDomain = "";

  /**
   * If true, and desktop type is "non-ad" automatic user creation is
   * enabled for the session. (This does not mean that the user will
   * be created, as Teleport does not know whether the user already exists.)
   *
   * @generated from field: bool allow_user_creation = 4;
   */
  allowUserCreation = false;

  /**
   * Indicates whether network level authentication (NLA) was used to
   * establish this RDP session.
   *
   * @generated from field: bool nla = 5;
   */
  nla = false;

  constructor(data?: PartialMessage<SessionStartDesktopMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.SessionStartDesktopMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "desktop_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "windows_domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "allow_user_creation", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "nla", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SessionStartDesktopMetadata {
    return new SessionStartDesktopMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SessionStartDesktopMetadata {
    return new SessionStartDesktopMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SessionStartDesktopMetadata {
    return new SessionStartDesktopMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: SessionStartDesktopMetadata | PlainMessage<SessionStartDesktopMetadata> | undefined, b: SessionStartDesktopMetadata | PlainMessage<SessionStartDesktopMetadata> | undefined): boolean {
    return proto3.util.equals(SessionStartDesktopMetadata, a, b);
  }
}

/**
 * the issuance of a user certificate from the user CA
 *
 * PostHog event: tp.certificate.issued
 *
 * @generated from message prehog.v1alpha.UserCertificateIssuedEvent
 */
export class UserCertificateIssuedEvent extends Message<UserCertificateIssuedEvent> {
  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64; it
   * can be the username of a bot user rather than of a regular user
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * the TTL of the issued certificate, typically 8 or 12 hours
   *
   * PostHog property: tp.ttl_minutes (in minutes, rounded up)
   *
   * @generated from field: google.protobuf.Duration ttl = 2;
   */
  ttl?: Duration;

  /**
   * If true, the certificate was requested by a bot (i.e. Machine ID) user.
   * PostHog property: tp.is_bot
   *
   * @generated from field: bool is_bot = 3;
   */
  isBot = false;

  /**
   * If true, the certificate usage is restricted to database access.
   * PostHog property: tp.usage_database
   *
   * @generated from field: bool usage_database = 4;
   */
  usageDatabase = false;

  /**
   * If true, the certificate usage is restricted to app access.
   * PostHog property: tp.usage_app
   *
   * @generated from field: bool usage_app = 5;
   */
  usageApp = false;

  /**
   * If true, the certificate usage is restricted to Kubernetes access.
   * PostHog property: tp.usage_kubernetes
   *
   * @generated from field: bool usage_kubernetes = 6;
   */
  usageKubernetes = false;

  /**
   * If true, the certificate usage is restricted to desktop access.
   * PostHog property: tp.usage_desktop
   *
   * @generated from field: bool usage_desktop = 7;
   */
  usageDesktop = false;

  /**
   * the private key policy associated with these user certificates.
   *
   * @generated from field: string private_key_policy = 8;
   */
  privateKeyPolicy = "";

  constructor(data?: PartialMessage<UserCertificateIssuedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UserCertificateIssuedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ttl", kind: "message", T: Duration },
    { no: 3, name: "is_bot", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "usage_database", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "usage_app", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "usage_kubernetes", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "usage_desktop", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "private_key_policy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserCertificateIssuedEvent {
    return new UserCertificateIssuedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserCertificateIssuedEvent {
    return new UserCertificateIssuedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserCertificateIssuedEvent {
    return new UserCertificateIssuedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UserCertificateIssuedEvent | PlainMessage<UserCertificateIssuedEvent> | undefined, b: UserCertificateIssuedEvent | PlainMessage<UserCertificateIssuedEvent> | undefined): boolean {
    return proto3.util.equals(UserCertificateIssuedEvent, a, b);
  }
}

/**
 * the issuance of a SPIFFE SVID
 *
 * PostHog event: tp.spiffe.svid.issued
 *
 * @generated from message prehog.v1alpha.SPIFFESVIDIssuedEvent
 */
export class SPIFFESVIDIssuedEvent extends Message<SPIFFESVIDIssuedEvent> {
  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64; it
   * can be the username of a bot user rather than of a regular user
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * Indicates this event was generated by a Machine ID bot user.
   * PostHog property: tp.user_kind
   *
   * @generated from field: prehog.v1alpha.UserKind user_kind = 2;
   */
  userKind = UserKind.UNSPECIFIED;

  /**
   * anonymized SPIFFE ID, 32 bytes (HMAC-SHA-256) encoded in base64;
   *
   * PostHog property: tp.spiffe.id
   *
   * @generated from field: string spiffe_id = 3;
   */
  spiffeId = "";

  /**
   * Number of IP SANs included in the SVID
   * PostHog property: tp.spiffe.ip_sans_count
   *
   * @generated from field: int32 ip_sans_count = 4;
   */
  ipSansCount = 0;

  /**
   * Number of DNS SANs included in the SVID
   * PostHog property: tp.spiffe.dns_sans_count
   *
   * @generated from field: int32 dns_sans_count = 5;
   */
  dnsSansCount = 0;

  /**
   * Type of SVID issued. `x509` or `jwt`
   * PostHog property: tp.spiffe.svid_type
   *
   * @generated from field: string svid_type = 6;
   */
  svidType = "";

  constructor(data?: PartialMessage<SPIFFESVIDIssuedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.SPIFFESVIDIssuedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_kind", kind: "enum", T: proto3.getEnumType(UserKind) },
    { no: 3, name: "spiffe_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ip_sans_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "dns_sans_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "svid_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SPIFFESVIDIssuedEvent {
    return new SPIFFESVIDIssuedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SPIFFESVIDIssuedEvent {
    return new SPIFFESVIDIssuedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SPIFFESVIDIssuedEvent {
    return new SPIFFESVIDIssuedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: SPIFFESVIDIssuedEvent | PlainMessage<SPIFFESVIDIssuedEvent> | undefined, b: SPIFFESVIDIssuedEvent | PlainMessage<SPIFFESVIDIssuedEvent> | undefined): boolean {
    return proto3.util.equals(SPIFFESVIDIssuedEvent, a, b);
  }
}

/**
 * UIBannerClickEvent is a usage event sent by the UI when the upgrade
 * banner is clicked.
 *
 * @generated from message prehog.v1alpha.UIBannerClickEvent
 */
export class UIBannerClickEvent extends Message<UIBannerClickEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * cluster alert name
   *
   * @generated from field: string alert = 2;
   */
  alert = "";

  constructor(data?: PartialMessage<UIBannerClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIBannerClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "alert", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIBannerClickEvent {
    return new UIBannerClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIBannerClickEvent {
    return new UIBannerClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIBannerClickEvent {
    return new UIBannerClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIBannerClickEvent | PlainMessage<UIBannerClickEvent> | undefined, b: UIBannerClickEvent | PlainMessage<UIBannerClickEvent> | undefined): boolean {
    return proto3.util.equals(UIBannerClickEvent, a, b);
  }
}

/**
 * UIOnboardCompleteGoToDashboardClickEvent is a UI event sent when initial
 * registration is complete.
 *
 * @generated from message prehog.v1alpha.UIOnboardCompleteGoToDashboardClickEvent
 */
export class UIOnboardCompleteGoToDashboardClickEvent extends Message<UIOnboardCompleteGoToDashboardClickEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  constructor(data?: PartialMessage<UIOnboardCompleteGoToDashboardClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIOnboardCompleteGoToDashboardClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIOnboardCompleteGoToDashboardClickEvent {
    return new UIOnboardCompleteGoToDashboardClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIOnboardCompleteGoToDashboardClickEvent {
    return new UIOnboardCompleteGoToDashboardClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIOnboardCompleteGoToDashboardClickEvent {
    return new UIOnboardCompleteGoToDashboardClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIOnboardCompleteGoToDashboardClickEvent | PlainMessage<UIOnboardCompleteGoToDashboardClickEvent> | undefined, b: UIOnboardCompleteGoToDashboardClickEvent | PlainMessage<UIOnboardCompleteGoToDashboardClickEvent> | undefined): boolean {
    return proto3.util.equals(UIOnboardCompleteGoToDashboardClickEvent, a, b);
  }
}

/**
 * UIOnboardAddFirstResourceClickEvent is a UI event sent when a user clicks the
 * "add first resource" button.
 *
 * @generated from message prehog.v1alpha.UIOnboardAddFirstResourceClickEvent
 */
export class UIOnboardAddFirstResourceClickEvent extends Message<UIOnboardAddFirstResourceClickEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  constructor(data?: PartialMessage<UIOnboardAddFirstResourceClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIOnboardAddFirstResourceClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIOnboardAddFirstResourceClickEvent {
    return new UIOnboardAddFirstResourceClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIOnboardAddFirstResourceClickEvent {
    return new UIOnboardAddFirstResourceClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIOnboardAddFirstResourceClickEvent {
    return new UIOnboardAddFirstResourceClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIOnboardAddFirstResourceClickEvent | PlainMessage<UIOnboardAddFirstResourceClickEvent> | undefined, b: UIOnboardAddFirstResourceClickEvent | PlainMessage<UIOnboardAddFirstResourceClickEvent> | undefined): boolean {
    return proto3.util.equals(UIOnboardAddFirstResourceClickEvent, a, b);
  }
}

/**
 * UIOnboardAddFirstResourceLaterClickEvent is a UI event sent when a user
 * clicks the "add first resource later" button.
 *
 * @generated from message prehog.v1alpha.UIOnboardAddFirstResourceLaterClickEvent
 */
export class UIOnboardAddFirstResourceLaterClickEvent extends Message<UIOnboardAddFirstResourceLaterClickEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  constructor(data?: PartialMessage<UIOnboardAddFirstResourceLaterClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIOnboardAddFirstResourceLaterClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIOnboardAddFirstResourceLaterClickEvent {
    return new UIOnboardAddFirstResourceLaterClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIOnboardAddFirstResourceLaterClickEvent {
    return new UIOnboardAddFirstResourceLaterClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIOnboardAddFirstResourceLaterClickEvent {
    return new UIOnboardAddFirstResourceLaterClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIOnboardAddFirstResourceLaterClickEvent | PlainMessage<UIOnboardAddFirstResourceLaterClickEvent> | undefined, b: UIOnboardAddFirstResourceLaterClickEvent | PlainMessage<UIOnboardAddFirstResourceLaterClickEvent> | undefined): boolean {
    return proto3.util.equals(UIOnboardAddFirstResourceLaterClickEvent, a, b);
  }
}

/**
 * UIOnboardSetCredentialSubmitEvent is a UI event sent during registration when
 * users configure their credentials.
 *
 * @generated from message prehog.v1alpha.UIOnboardSetCredentialSubmitEvent
 */
export class UIOnboardSetCredentialSubmitEvent extends Message<UIOnboardSetCredentialSubmitEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  constructor(data?: PartialMessage<UIOnboardSetCredentialSubmitEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIOnboardSetCredentialSubmitEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIOnboardSetCredentialSubmitEvent {
    return new UIOnboardSetCredentialSubmitEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIOnboardSetCredentialSubmitEvent {
    return new UIOnboardSetCredentialSubmitEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIOnboardSetCredentialSubmitEvent {
    return new UIOnboardSetCredentialSubmitEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIOnboardSetCredentialSubmitEvent | PlainMessage<UIOnboardSetCredentialSubmitEvent> | undefined, b: UIOnboardSetCredentialSubmitEvent | PlainMessage<UIOnboardSetCredentialSubmitEvent> | undefined): boolean {
    return proto3.util.equals(UIOnboardSetCredentialSubmitEvent, a, b);
  }
}

/**
 * UIOnboardRegisterChallengeSubmitEvent is a UI event sent during registration
 * when the MFA challenge is completed.
 *
 * @generated from message prehog.v1alpha.UIOnboardRegisterChallengeSubmitEvent
 */
export class UIOnboardRegisterChallengeSubmitEvent extends Message<UIOnboardRegisterChallengeSubmitEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * @generated from field: string mfa_type = 2;
   */
  mfaType = "";

  /**
   * @generated from field: string login_flow = 3;
   */
  loginFlow = "";

  constructor(data?: PartialMessage<UIOnboardRegisterChallengeSubmitEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIOnboardRegisterChallengeSubmitEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mfa_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "login_flow", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIOnboardRegisterChallengeSubmitEvent {
    return new UIOnboardRegisterChallengeSubmitEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIOnboardRegisterChallengeSubmitEvent {
    return new UIOnboardRegisterChallengeSubmitEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIOnboardRegisterChallengeSubmitEvent {
    return new UIOnboardRegisterChallengeSubmitEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIOnboardRegisterChallengeSubmitEvent | PlainMessage<UIOnboardRegisterChallengeSubmitEvent> | undefined, b: UIOnboardRegisterChallengeSubmitEvent | PlainMessage<UIOnboardRegisterChallengeSubmitEvent> | undefined): boolean {
    return proto3.util.equals(UIOnboardRegisterChallengeSubmitEvent, a, b);
  }
}

/**
 * UIOnboardQuestionnaireSubmitEvent is a UI event sent during registration when
 * user submits their onboarding questionnaire.
 *
 * @generated from message prehog.v1alpha.UIOnboardQuestionnaireSubmitEvent
 */
export class UIOnboardQuestionnaireSubmitEvent extends Message<UIOnboardQuestionnaireSubmitEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  constructor(data?: PartialMessage<UIOnboardQuestionnaireSubmitEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIOnboardQuestionnaireSubmitEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIOnboardQuestionnaireSubmitEvent {
    return new UIOnboardQuestionnaireSubmitEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIOnboardQuestionnaireSubmitEvent {
    return new UIOnboardQuestionnaireSubmitEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIOnboardQuestionnaireSubmitEvent {
    return new UIOnboardQuestionnaireSubmitEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIOnboardQuestionnaireSubmitEvent | PlainMessage<UIOnboardQuestionnaireSubmitEvent> | undefined, b: UIOnboardQuestionnaireSubmitEvent | PlainMessage<UIOnboardQuestionnaireSubmitEvent> | undefined): boolean {
    return proto3.util.equals(UIOnboardQuestionnaireSubmitEvent, a, b);
  }
}

/**
 * UIRecoveryCodesContinueClickEvent is a UI event sent during
 * registration when the user configures cluster recovery codes.
 *
 * @generated from message prehog.v1alpha.UIRecoveryCodesContinueClickEvent
 */
export class UIRecoveryCodesContinueClickEvent extends Message<UIRecoveryCodesContinueClickEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  constructor(data?: PartialMessage<UIRecoveryCodesContinueClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIRecoveryCodesContinueClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIRecoveryCodesContinueClickEvent {
    return new UIRecoveryCodesContinueClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIRecoveryCodesContinueClickEvent {
    return new UIRecoveryCodesContinueClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIRecoveryCodesContinueClickEvent {
    return new UIRecoveryCodesContinueClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIRecoveryCodesContinueClickEvent | PlainMessage<UIRecoveryCodesContinueClickEvent> | undefined, b: UIRecoveryCodesContinueClickEvent | PlainMessage<UIRecoveryCodesContinueClickEvent> | undefined): boolean {
    return proto3.util.equals(UIRecoveryCodesContinueClickEvent, a, b);
  }
}

/**
 * UIRecoveryCodesCopyClickEvent is a UI event sent during
 * registration when the user copies recovery codes.
 *
 * @generated from message prehog.v1alpha.UIRecoveryCodesCopyClickEvent
 */
export class UIRecoveryCodesCopyClickEvent extends Message<UIRecoveryCodesCopyClickEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  constructor(data?: PartialMessage<UIRecoveryCodesCopyClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIRecoveryCodesCopyClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIRecoveryCodesCopyClickEvent {
    return new UIRecoveryCodesCopyClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIRecoveryCodesCopyClickEvent {
    return new UIRecoveryCodesCopyClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIRecoveryCodesCopyClickEvent {
    return new UIRecoveryCodesCopyClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIRecoveryCodesCopyClickEvent | PlainMessage<UIRecoveryCodesCopyClickEvent> | undefined, b: UIRecoveryCodesCopyClickEvent | PlainMessage<UIRecoveryCodesCopyClickEvent> | undefined): boolean {
    return proto3.util.equals(UIRecoveryCodesCopyClickEvent, a, b);
  }
}

/**
 * UIRecoveryCodesPrintClickEvent is a UI event sent during
 * registration when the user prints recovery codes.
 *
 * @generated from message prehog.v1alpha.UIRecoveryCodesPrintClickEvent
 */
export class UIRecoveryCodesPrintClickEvent extends Message<UIRecoveryCodesPrintClickEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  constructor(data?: PartialMessage<UIRecoveryCodesPrintClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIRecoveryCodesPrintClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIRecoveryCodesPrintClickEvent {
    return new UIRecoveryCodesPrintClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIRecoveryCodesPrintClickEvent {
    return new UIRecoveryCodesPrintClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIRecoveryCodesPrintClickEvent {
    return new UIRecoveryCodesPrintClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIRecoveryCodesPrintClickEvent | PlainMessage<UIRecoveryCodesPrintClickEvent> | undefined, b: UIRecoveryCodesPrintClickEvent | PlainMessage<UIRecoveryCodesPrintClickEvent> | undefined): boolean {
    return proto3.util.equals(UIRecoveryCodesPrintClickEvent, a, b);
  }
}

/**
 * DiscoverMetadata contains common metadata for Discover related events.
 *
 * @generated from message prehog.v1alpha.DiscoverMetadata
 */
export class DiscoverMetadata extends Message<DiscoverMetadata> {
  /**
   * Uniquely identifies Discover wizard "session". Will allow to correlate
   * events within the same Discover wizard run.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * anonymized
   *
   * @generated from field: string user_name = 2;
   */
  userName = "";

  /**
   * SSO indicates whether the user is from an SSO provider.
   *
   * @generated from field: bool sso = 3;
   */
  sso = false;

  constructor(data?: PartialMessage<DiscoverMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.DiscoverMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sso", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoverMetadata {
    return new DiscoverMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoverMetadata {
    return new DiscoverMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoverMetadata {
    return new DiscoverMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoverMetadata | PlainMessage<DiscoverMetadata> | undefined, b: DiscoverMetadata | PlainMessage<DiscoverMetadata> | undefined): boolean {
    return proto3.util.equals(DiscoverMetadata, a, b);
  }
}

/**
 * DiscoverResourceMetadata contains common metadata identifying resource type being added.
 *
 * @generated from message prehog.v1alpha.DiscoverResourceMetadata
 */
export class DiscoverResourceMetadata extends Message<DiscoverResourceMetadata> {
  /**
   * Resource type that is being added.
   *
   * @generated from field: prehog.v1alpha.DiscoverResource resource = 1;
   */
  resource = DiscoverResource.UNSPECIFIED;

  constructor(data?: PartialMessage<DiscoverResourceMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.DiscoverResourceMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "enum", T: proto3.getEnumType(DiscoverResource) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoverResourceMetadata {
    return new DiscoverResourceMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoverResourceMetadata {
    return new DiscoverResourceMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoverResourceMetadata {
    return new DiscoverResourceMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoverResourceMetadata | PlainMessage<DiscoverResourceMetadata> | undefined, b: DiscoverResourceMetadata | PlainMessage<DiscoverResourceMetadata> | undefined): boolean {
    return proto3.util.equals(DiscoverResourceMetadata, a, b);
  }
}

/**
 * DiscoverStepStatus contains fields that track a particular step outcome,
 * for example connection test failed or succeeded, or user aborted the step.
 *
 * @generated from message prehog.v1alpha.DiscoverStepStatus
 */
export class DiscoverStepStatus extends Message<DiscoverStepStatus> {
  /**
   * Indicates the step outcome.
   *
   * @generated from field: prehog.v1alpha.DiscoverStatus status = 1;
   */
  status = DiscoverStatus.UNSPECIFIED;

  /**
   * Contains error details in case of Error Status.
   * We have to be careful to not include any identifyable infomation like server addresses here.
   *
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<DiscoverStepStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.DiscoverStepStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(DiscoverStatus) },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoverStepStatus {
    return new DiscoverStepStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoverStepStatus {
    return new DiscoverStepStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoverStepStatus {
    return new DiscoverStepStatus().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoverStepStatus | PlainMessage<DiscoverStepStatus> | undefined, b: DiscoverStepStatus | PlainMessage<DiscoverStepStatus> | undefined): boolean {
    return proto3.util.equals(DiscoverStepStatus, a, b);
  }
}

/**
 * UIDiscoverStartedEvent is emitted when the wizard opens.
 *
 * @generated from message prehog.v1alpha.UIDiscoverStartedEvent
 */
export class UIDiscoverStartedEvent extends Message<UIDiscoverStartedEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 2;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverStartedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverStartedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverStartedEvent {
    return new UIDiscoverStartedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverStartedEvent {
    return new UIDiscoverStartedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverStartedEvent {
    return new UIDiscoverStartedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverStartedEvent | PlainMessage<UIDiscoverStartedEvent> | undefined, b: UIDiscoverStartedEvent | PlainMessage<UIDiscoverStartedEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverStartedEvent, a, b);
  }
}

/**
 * UIDiscoverResourceSelectionEvent is emitted when user selected resource type to add
 * and proceeded to the next step.
 *
 * @generated from message prehog.v1alpha.UIDiscoverResourceSelectionEvent
 */
export class UIDiscoverResourceSelectionEvent extends Message<UIDiscoverResourceSelectionEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverResourceSelectionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverResourceSelectionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverResourceSelectionEvent {
    return new UIDiscoverResourceSelectionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverResourceSelectionEvent {
    return new UIDiscoverResourceSelectionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverResourceSelectionEvent {
    return new UIDiscoverResourceSelectionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverResourceSelectionEvent | PlainMessage<UIDiscoverResourceSelectionEvent> | undefined, b: UIDiscoverResourceSelectionEvent | PlainMessage<UIDiscoverResourceSelectionEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverResourceSelectionEvent, a, b);
  }
}

/**
 * UIDiscoverIntegrationAWSOIDCConnectEvent is emitted when a user is finished with the step
 * that asks user to setup aws integration or select from a list of existing
 * aws integrations.
 *
 * @generated from message prehog.v1alpha.UIDiscoverIntegrationAWSOIDCConnectEvent
 */
export class UIDiscoverIntegrationAWSOIDCConnectEvent extends Message<UIDiscoverIntegrationAWSOIDCConnectEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverIntegrationAWSOIDCConnectEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverIntegrationAWSOIDCConnectEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverIntegrationAWSOIDCConnectEvent {
    return new UIDiscoverIntegrationAWSOIDCConnectEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverIntegrationAWSOIDCConnectEvent {
    return new UIDiscoverIntegrationAWSOIDCConnectEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverIntegrationAWSOIDCConnectEvent {
    return new UIDiscoverIntegrationAWSOIDCConnectEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverIntegrationAWSOIDCConnectEvent | PlainMessage<UIDiscoverIntegrationAWSOIDCConnectEvent> | undefined, b: UIDiscoverIntegrationAWSOIDCConnectEvent | PlainMessage<UIDiscoverIntegrationAWSOIDCConnectEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverIntegrationAWSOIDCConnectEvent, a, b);
  }
}

/**
 * UIDiscoverDatabaseRDSEnrollEvent is emitted when a user is finished with
 * the step that asks user to select from a list of RDS databases.
 *
 * @generated from message prehog.v1alpha.UIDiscoverDatabaseRDSEnrollEvent
 */
export class UIDiscoverDatabaseRDSEnrollEvent extends Message<UIDiscoverDatabaseRDSEnrollEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  /**
   * @generated from field: int64 selected_resources_count = 4;
   */
  selectedResourcesCount = protoInt64.zero;

  constructor(data?: PartialMessage<UIDiscoverDatabaseRDSEnrollEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverDatabaseRDSEnrollEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
    { no: 4, name: "selected_resources_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverDatabaseRDSEnrollEvent {
    return new UIDiscoverDatabaseRDSEnrollEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverDatabaseRDSEnrollEvent {
    return new UIDiscoverDatabaseRDSEnrollEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverDatabaseRDSEnrollEvent {
    return new UIDiscoverDatabaseRDSEnrollEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverDatabaseRDSEnrollEvent | PlainMessage<UIDiscoverDatabaseRDSEnrollEvent> | undefined, b: UIDiscoverDatabaseRDSEnrollEvent | PlainMessage<UIDiscoverDatabaseRDSEnrollEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverDatabaseRDSEnrollEvent, a, b);
  }
}

/**
 * UIDiscoverKubeEKSEnrollEvent is emitted when a user is finished with
 * the step that asks user to select from a list of EKS clusters.
 *
 * @generated from message prehog.v1alpha.UIDiscoverKubeEKSEnrollEvent
 */
export class UIDiscoverKubeEKSEnrollEvent extends Message<UIDiscoverKubeEKSEnrollEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverKubeEKSEnrollEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverKubeEKSEnrollEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverKubeEKSEnrollEvent {
    return new UIDiscoverKubeEKSEnrollEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverKubeEKSEnrollEvent {
    return new UIDiscoverKubeEKSEnrollEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverKubeEKSEnrollEvent {
    return new UIDiscoverKubeEKSEnrollEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverKubeEKSEnrollEvent | PlainMessage<UIDiscoverKubeEKSEnrollEvent> | undefined, b: UIDiscoverKubeEKSEnrollEvent | PlainMessage<UIDiscoverKubeEKSEnrollEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverKubeEKSEnrollEvent, a, b);
  }
}

/**
 * UIDiscoverDeployServiceEvent is emitted after the user installs a Teleport Agent.
 * For SSH this is the Teleport 'install-node' script.
 *
 * For Kubernetes this is the teleport-agent helm chart installation.
 *
 * For Database Access this step is the installation of the teleport 'install-db' script.
 * It can be skipped if the cluster already has a Database Service capable of proxying the database.
 *
 * @generated from message prehog.v1alpha.UIDiscoverDeployServiceEvent
 */
export class UIDiscoverDeployServiceEvent extends Message<UIDiscoverDeployServiceEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  /**
   * @generated from field: prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployMethod deploy_method = 4;
   */
  deployMethod = UIDiscoverDeployServiceEvent_DeployMethod.UNSPECIFIED;

  /**
   * @generated from field: prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployType deploy_type = 5;
   */
  deployType = UIDiscoverDeployServiceEvent_DeployType.UNSPECIFIED;

  constructor(data?: PartialMessage<UIDiscoverDeployServiceEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverDeployServiceEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
    { no: 4, name: "deploy_method", kind: "enum", T: proto3.getEnumType(UIDiscoverDeployServiceEvent_DeployMethod) },
    { no: 5, name: "deploy_type", kind: "enum", T: proto3.getEnumType(UIDiscoverDeployServiceEvent_DeployType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverDeployServiceEvent {
    return new UIDiscoverDeployServiceEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverDeployServiceEvent {
    return new UIDiscoverDeployServiceEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverDeployServiceEvent {
    return new UIDiscoverDeployServiceEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverDeployServiceEvent | PlainMessage<UIDiscoverDeployServiceEvent> | undefined, b: UIDiscoverDeployServiceEvent | PlainMessage<UIDiscoverDeployServiceEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverDeployServiceEvent, a, b);
  }
}

/**
 * DeployMethod describes the method used to deploy a service.
 *
 * @generated from enum prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployMethod
 */
export enum UIDiscoverDeployServiceEvent_DeployMethod {
  /**
   * DEPLOY_METHOD_UNSPECIFIED means there was an existing service
   * so deploying step got skipped.
   *
   * @generated from enum value: DEPLOY_METHOD_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * DEPLOY_METHOD_AUTO means Teleport deployed a service for the user.
   *
   * @generated from enum value: DEPLOY_METHOD_AUTO = 1;
   */
  AUTO = 1,

  /**
   * DEPLOY_METHOD_MANUAL means a user deployed a service by themselves.
   *
   * @generated from enum value: DEPLOY_METHOD_MANUAL = 2;
   */
  MANUAL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(UIDiscoverDeployServiceEvent_DeployMethod)
proto3.util.setEnumType(UIDiscoverDeployServiceEvent_DeployMethod, "prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployMethod", [
  { no: 0, name: "DEPLOY_METHOD_UNSPECIFIED" },
  { no: 1, name: "DEPLOY_METHOD_AUTO" },
  { no: 2, name: "DEPLOY_METHOD_MANUAL" },
]);

/**
 * DeployType describes the type of deployment.
 *
 * @generated from enum prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployType
 */
export enum UIDiscoverDeployServiceEvent_DeployType {
  /**
   * DEPLOY_METHOD_UNSPECIFIED means there was an existing service
   * so deploying step got skipped.
   *
   * @generated from enum value: DEPLOY_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * DEPLOY_TYPE_INSTALL_SCRIPT means service was deployed using an
   * install script.
   *
   * @generated from enum value: DEPLOY_TYPE_INSTALL_SCRIPT = 1;
   */
  INSTALL_SCRIPT = 1,

  /**
   * DEPLOY_TYPE_AMAZON_ECS means service was deployed using amazon's
   * elastic container service.
   *
   * @generated from enum value: DEPLOY_TYPE_AMAZON_ECS = 2;
   */
  AMAZON_ECS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(UIDiscoverDeployServiceEvent_DeployType)
proto3.util.setEnumType(UIDiscoverDeployServiceEvent_DeployType, "prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployType", [
  { no: 0, name: "DEPLOY_TYPE_UNSPECIFIED" },
  { no: 1, name: "DEPLOY_TYPE_INSTALL_SCRIPT" },
  { no: 2, name: "DEPLOY_TYPE_AMAZON_ECS" },
]);

/**
 * UIDiscoverCreateDiscoveryConfigEvent is emitted when a discovery config is successfully created.
 *
 * @generated from message prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent
 */
export class UIDiscoverCreateDiscoveryConfigEvent extends Message<UIDiscoverCreateDiscoveryConfigEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  /**
   * @generated from field: prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod config_method = 4;
   */
  configMethod = UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod.UNSPECIFIED;

  constructor(data?: PartialMessage<UIDiscoverCreateDiscoveryConfigEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
    { no: 4, name: "config_method", kind: "enum", T: proto3.getEnumType(UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverCreateDiscoveryConfigEvent {
    return new UIDiscoverCreateDiscoveryConfigEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverCreateDiscoveryConfigEvent {
    return new UIDiscoverCreateDiscoveryConfigEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverCreateDiscoveryConfigEvent {
    return new UIDiscoverCreateDiscoveryConfigEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverCreateDiscoveryConfigEvent | PlainMessage<UIDiscoverCreateDiscoveryConfigEvent> | undefined, b: UIDiscoverCreateDiscoveryConfigEvent | PlainMessage<UIDiscoverCreateDiscoveryConfigEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverCreateDiscoveryConfigEvent, a, b);
  }
}

/**
 * ConfigMethod describes how the discovery config is configured.
 *
 * @generated from enum prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod
 */
export enum UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod {
  /**
   * CONFIG_METHOD_UNSPECIFIED means config method unspecified/unset.
   *
   * @generated from enum value: CONFIG_METHOD_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * CONFIG_METHOD_SSM means EC2 auto discovery configured with ssm.
   *
   * @generated from enum value: CONFIG_METHOD_AWS_EC2_SSM = 1;
   */
  AWS_EC2_SSM = 1,

  /**
   * CONFIG_METHOD_SSM means auto discovery configured for EC2 using EICE.
   *
   * @generated from enum value: CONFIG_METHOD_AWS_EC2_EICE = 2;
   */
  AWS_EC2_EICE = 2,

  /**
   * CONFIG_METHOD_SSM means auto discovery configured for RDS using ECS.
   *
   * @generated from enum value: CONFIG_METHOD_AWS_RDS_ECS = 3;
   */
  AWS_RDS_ECS = 3,

  /**
   * CONFIG_METHOD_SSM means auto discovery configured for EKS.
   *
   * @generated from enum value: CONFIG_METHOD_AWS_EKS = 4;
   */
  AWS_EKS = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod)
proto3.util.setEnumType(UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod, "prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod", [
  { no: 0, name: "CONFIG_METHOD_UNSPECIFIED" },
  { no: 1, name: "CONFIG_METHOD_AWS_EC2_SSM" },
  { no: 2, name: "CONFIG_METHOD_AWS_EC2_EICE" },
  { no: 3, name: "CONFIG_METHOD_AWS_RDS_ECS" },
  { no: 4, name: "CONFIG_METHOD_AWS_EKS" },
]);

/**
 * UIDiscoverDatabaseRegisterEvent is emitted when a user is finished with the step that registers a database resource.
 *
 * @generated from message prehog.v1alpha.UIDiscoverDatabaseRegisterEvent
 */
export class UIDiscoverDatabaseRegisterEvent extends Message<UIDiscoverDatabaseRegisterEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverDatabaseRegisterEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverDatabaseRegisterEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverDatabaseRegisterEvent {
    return new UIDiscoverDatabaseRegisterEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverDatabaseRegisterEvent {
    return new UIDiscoverDatabaseRegisterEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverDatabaseRegisterEvent {
    return new UIDiscoverDatabaseRegisterEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverDatabaseRegisterEvent | PlainMessage<UIDiscoverDatabaseRegisterEvent> | undefined, b: UIDiscoverDatabaseRegisterEvent | PlainMessage<UIDiscoverDatabaseRegisterEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverDatabaseRegisterEvent, a, b);
  }
}

/**
 * UIDiscoverDatabaseConfigureMTLSEvent is emitted when a user is finished with the step that configures mutual TLS for a self-hosted database.
 *
 * @generated from message prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent
 */
export class UIDiscoverDatabaseConfigureMTLSEvent extends Message<UIDiscoverDatabaseConfigureMTLSEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverDatabaseConfigureMTLSEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverDatabaseConfigureMTLSEvent {
    return new UIDiscoverDatabaseConfigureMTLSEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverDatabaseConfigureMTLSEvent {
    return new UIDiscoverDatabaseConfigureMTLSEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverDatabaseConfigureMTLSEvent {
    return new UIDiscoverDatabaseConfigureMTLSEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverDatabaseConfigureMTLSEvent | PlainMessage<UIDiscoverDatabaseConfigureMTLSEvent> | undefined, b: UIDiscoverDatabaseConfigureMTLSEvent | PlainMessage<UIDiscoverDatabaseConfigureMTLSEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverDatabaseConfigureMTLSEvent, a, b);
  }
}

/**
 * UIDiscoverDesktopActiveDirectoryToolsInstallEvent is emitted when the user is finished with the step that asks user to run the install Active Directory tools script for the Desktop flow.
 *
 * @generated from message prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent
 */
export class UIDiscoverDesktopActiveDirectoryToolsInstallEvent extends Message<UIDiscoverDesktopActiveDirectoryToolsInstallEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverDesktopActiveDirectoryToolsInstallEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverDesktopActiveDirectoryToolsInstallEvent {
    return new UIDiscoverDesktopActiveDirectoryToolsInstallEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverDesktopActiveDirectoryToolsInstallEvent {
    return new UIDiscoverDesktopActiveDirectoryToolsInstallEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverDesktopActiveDirectoryToolsInstallEvent {
    return new UIDiscoverDesktopActiveDirectoryToolsInstallEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverDesktopActiveDirectoryToolsInstallEvent | PlainMessage<UIDiscoverDesktopActiveDirectoryToolsInstallEvent> | undefined, b: UIDiscoverDesktopActiveDirectoryToolsInstallEvent | PlainMessage<UIDiscoverDesktopActiveDirectoryToolsInstallEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverDesktopActiveDirectoryToolsInstallEvent, a, b);
  }
}

/**
 * UIDiscoverDesktopActiveDirectoryConfigureEvent is emitted when the user is finished with the step that asks user to run the Configure Active Directory script for the Desktop flow.
 *
 * @generated from message prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent
 */
export class UIDiscoverDesktopActiveDirectoryConfigureEvent extends Message<UIDiscoverDesktopActiveDirectoryConfigureEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverDesktopActiveDirectoryConfigureEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverDesktopActiveDirectoryConfigureEvent {
    return new UIDiscoverDesktopActiveDirectoryConfigureEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverDesktopActiveDirectoryConfigureEvent {
    return new UIDiscoverDesktopActiveDirectoryConfigureEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverDesktopActiveDirectoryConfigureEvent {
    return new UIDiscoverDesktopActiveDirectoryConfigureEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverDesktopActiveDirectoryConfigureEvent | PlainMessage<UIDiscoverDesktopActiveDirectoryConfigureEvent> | undefined, b: UIDiscoverDesktopActiveDirectoryConfigureEvent | PlainMessage<UIDiscoverDesktopActiveDirectoryConfigureEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverDesktopActiveDirectoryConfigureEvent, a, b);
  }
}

/**
 * UIDiscoverAutoDiscoveredResourcesEvent is emitted when the user is finished with the step that auto discovers resources (waiting until resources show up).
 * resources_count field must reflect the latest amount of discovered resources (get the number after user is finished with this step).
 *
 * @generated from message prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent
 */
export class UIDiscoverAutoDiscoveredResourcesEvent extends Message<UIDiscoverAutoDiscoveredResourcesEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  /**
   * @generated from field: int64 resources_count = 4;
   */
  resourcesCount = protoInt64.zero;

  constructor(data?: PartialMessage<UIDiscoverAutoDiscoveredResourcesEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
    { no: 4, name: "resources_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverAutoDiscoveredResourcesEvent {
    return new UIDiscoverAutoDiscoveredResourcesEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverAutoDiscoveredResourcesEvent {
    return new UIDiscoverAutoDiscoveredResourcesEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverAutoDiscoveredResourcesEvent {
    return new UIDiscoverAutoDiscoveredResourcesEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverAutoDiscoveredResourcesEvent | PlainMessage<UIDiscoverAutoDiscoveredResourcesEvent> | undefined, b: UIDiscoverAutoDiscoveredResourcesEvent | PlainMessage<UIDiscoverAutoDiscoveredResourcesEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverAutoDiscoveredResourcesEvent, a, b);
  }
}

/**
 * UIDiscoverEC2InstanceSelectionEvent is emitted when the user is finished with the step that asks the user to select an EC2 Instance to enroll.
 *
 * @generated from message prehog.v1alpha.UIDiscoverEC2InstanceSelectionEvent
 */
export class UIDiscoverEC2InstanceSelectionEvent extends Message<UIDiscoverEC2InstanceSelectionEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverEC2InstanceSelectionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverEC2InstanceSelectionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverEC2InstanceSelectionEvent {
    return new UIDiscoverEC2InstanceSelectionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverEC2InstanceSelectionEvent {
    return new UIDiscoverEC2InstanceSelectionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverEC2InstanceSelectionEvent {
    return new UIDiscoverEC2InstanceSelectionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverEC2InstanceSelectionEvent | PlainMessage<UIDiscoverEC2InstanceSelectionEvent> | undefined, b: UIDiscoverEC2InstanceSelectionEvent | PlainMessage<UIDiscoverEC2InstanceSelectionEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverEC2InstanceSelectionEvent, a, b);
  }
}

/**
 * UIDiscoverDeployEICEEvent is emitted when the user deploys an EC2 Instance Connect Endpoint.
 *
 * @generated from message prehog.v1alpha.UIDiscoverDeployEICEEvent
 */
export class UIDiscoverDeployEICEEvent extends Message<UIDiscoverDeployEICEEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverDeployEICEEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverDeployEICEEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverDeployEICEEvent {
    return new UIDiscoverDeployEICEEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverDeployEICEEvent {
    return new UIDiscoverDeployEICEEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverDeployEICEEvent {
    return new UIDiscoverDeployEICEEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverDeployEICEEvent | PlainMessage<UIDiscoverDeployEICEEvent> | undefined, b: UIDiscoverDeployEICEEvent | PlainMessage<UIDiscoverDeployEICEEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverDeployEICEEvent, a, b);
  }
}

/**
 * UIDiscoverCreateNodeEvent is emitted when the node is created in Teleport.
 *
 * @generated from message prehog.v1alpha.UIDiscoverCreateNodeEvent
 */
export class UIDiscoverCreateNodeEvent extends Message<UIDiscoverCreateNodeEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverCreateNodeEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverCreateNodeEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverCreateNodeEvent {
    return new UIDiscoverCreateNodeEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverCreateNodeEvent {
    return new UIDiscoverCreateNodeEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverCreateNodeEvent {
    return new UIDiscoverCreateNodeEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverCreateNodeEvent | PlainMessage<UIDiscoverCreateNodeEvent> | undefined, b: UIDiscoverCreateNodeEvent | PlainMessage<UIDiscoverCreateNodeEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverCreateNodeEvent, a, b);
  }
}

/**
 * UIDiscoverCreateAppServerEvent is emitted when an app server is created.
 *
 * @generated from message prehog.v1alpha.UIDiscoverCreateAppServerEvent
 */
export class UIDiscoverCreateAppServerEvent extends Message<UIDiscoverCreateAppServerEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverCreateAppServerEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverCreateAppServerEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverCreateAppServerEvent {
    return new UIDiscoverCreateAppServerEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverCreateAppServerEvent {
    return new UIDiscoverCreateAppServerEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverCreateAppServerEvent {
    return new UIDiscoverCreateAppServerEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverCreateAppServerEvent | PlainMessage<UIDiscoverCreateAppServerEvent> | undefined, b: UIDiscoverCreateAppServerEvent | PlainMessage<UIDiscoverCreateAppServerEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverCreateAppServerEvent, a, b);
  }
}

/**
 * UIDiscoverDatabaseConfigureIAMPolicyEvent is emitted when a user is finished with the step that configures IAM policy for an RDS database.
 *
 * @generated from message prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent
 */
export class UIDiscoverDatabaseConfigureIAMPolicyEvent extends Message<UIDiscoverDatabaseConfigureIAMPolicyEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverDatabaseConfigureIAMPolicyEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverDatabaseConfigureIAMPolicyEvent {
    return new UIDiscoverDatabaseConfigureIAMPolicyEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverDatabaseConfigureIAMPolicyEvent {
    return new UIDiscoverDatabaseConfigureIAMPolicyEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverDatabaseConfigureIAMPolicyEvent {
    return new UIDiscoverDatabaseConfigureIAMPolicyEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverDatabaseConfigureIAMPolicyEvent | PlainMessage<UIDiscoverDatabaseConfigureIAMPolicyEvent> | undefined, b: UIDiscoverDatabaseConfigureIAMPolicyEvent | PlainMessage<UIDiscoverDatabaseConfigureIAMPolicyEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverDatabaseConfigureIAMPolicyEvent, a, b);
  }
}

/**
 * UIDiscoverPrincipalsConfigureEvent is emitted when a user is finished with the step that allows user to update their principals (setting up access).
 *
 * @generated from message prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent
 */
export class UIDiscoverPrincipalsConfigureEvent extends Message<UIDiscoverPrincipalsConfigureEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverPrincipalsConfigureEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverPrincipalsConfigureEvent {
    return new UIDiscoverPrincipalsConfigureEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverPrincipalsConfigureEvent {
    return new UIDiscoverPrincipalsConfigureEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverPrincipalsConfigureEvent {
    return new UIDiscoverPrincipalsConfigureEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverPrincipalsConfigureEvent | PlainMessage<UIDiscoverPrincipalsConfigureEvent> | undefined, b: UIDiscoverPrincipalsConfigureEvent | PlainMessage<UIDiscoverPrincipalsConfigureEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverPrincipalsConfigureEvent, a, b);
  }
}

/**
 * UIDiscoverTestConnectionEvent emitted on the "Test Connection" screen
 * when the user clicked tested connection to their resource.
 *
 * @generated from message prehog.v1alpha.UIDiscoverTestConnectionEvent
 */
export class UIDiscoverTestConnectionEvent extends Message<UIDiscoverTestConnectionEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverTestConnectionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverTestConnectionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverTestConnectionEvent {
    return new UIDiscoverTestConnectionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverTestConnectionEvent {
    return new UIDiscoverTestConnectionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverTestConnectionEvent {
    return new UIDiscoverTestConnectionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverTestConnectionEvent | PlainMessage<UIDiscoverTestConnectionEvent> | undefined, b: UIDiscoverTestConnectionEvent | PlainMessage<UIDiscoverTestConnectionEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverTestConnectionEvent, a, b);
  }
}

/**
 * UIDiscoverCompletedEvent is emitted when user completes the Discover wizard.
 *
 * @generated from message prehog.v1alpha.UIDiscoverCompletedEvent
 */
export class UIDiscoverCompletedEvent extends Message<UIDiscoverCompletedEvent> {
  /**
   * @generated from field: prehog.v1alpha.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: prehog.v1alpha.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  constructor(data?: PartialMessage<UIDiscoverCompletedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIDiscoverCompletedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DiscoverMetadata },
    { no: 2, name: "resource", kind: "message", T: DiscoverResourceMetadata },
    { no: 3, name: "status", kind: "message", T: DiscoverStepStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIDiscoverCompletedEvent {
    return new UIDiscoverCompletedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIDiscoverCompletedEvent {
    return new UIDiscoverCompletedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIDiscoverCompletedEvent {
    return new UIDiscoverCompletedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIDiscoverCompletedEvent | PlainMessage<UIDiscoverCompletedEvent> | undefined, b: UIDiscoverCompletedEvent | PlainMessage<UIDiscoverCompletedEvent> | undefined): boolean {
    return proto3.util.equals(UIDiscoverCompletedEvent, a, b);
  }
}

/**
 * RoleCreateEvent is emitted when user creates a custom role.
 *
 * @generated from message prehog.v1alpha.RoleCreateEvent
 */
export class RoleCreateEvent extends Message<RoleCreateEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * anonymized
   *
   * @generated from field: string role_name = 2;
   */
  roleName = "";

  constructor(data?: PartialMessage<RoleCreateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.RoleCreateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleCreateEvent {
    return new RoleCreateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleCreateEvent {
    return new RoleCreateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleCreateEvent {
    return new RoleCreateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: RoleCreateEvent | PlainMessage<RoleCreateEvent> | undefined, b: RoleCreateEvent | PlainMessage<RoleCreateEvent> | undefined): boolean {
    return proto3.util.equals(RoleCreateEvent, a, b);
  }
}

/**
 * BotCreateEvent is emitted when user creates a bot.
 *
 * @generated from message prehog.v1alpha.BotCreateEvent
 */
export class BotCreateEvent extends Message<BotCreateEvent> {
  /**
   * user_name is the anonymized name of the user who created the bot
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * anonymized
   *
   * @generated from field: string bot_user_name = 2;
   */
  botUserName = "";

  /**
   * role_name is the anonymized name of the bot role that was created.
   *
   * @generated from field: string role_name = 3;
   */
  roleName = "";

  /**
   * role_count is the number of roles that the bot role can impersonate on
   * creation.
   *
   * @generated from field: int64 role_count = 4;
   */
  roleCount = protoInt64.zero;

  /**
   * join_method is the join method of the token associated with the bot on
   * creation.
   *
   * @generated from field: string join_method = 5;
   */
  joinMethod = "";

  /**
   * bot_name is the anonymised name of the bot.
   *
   * @generated from field: string bot_name = 6;
   */
  botName = "";

  constructor(data?: PartialMessage<BotCreateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.BotCreateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bot_user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "join_method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "bot_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BotCreateEvent {
    return new BotCreateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BotCreateEvent {
    return new BotCreateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BotCreateEvent {
    return new BotCreateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: BotCreateEvent | PlainMessage<BotCreateEvent> | undefined, b: BotCreateEvent | PlainMessage<BotCreateEvent> | undefined): boolean {
    return proto3.util.equals(BotCreateEvent, a, b);
  }
}

/**
 * BotJoinEvent is emitted when a bot joins a Teleport cluster.
 *
 * @generated from message prehog.v1alpha.BotJoinEvent
 */
export class BotJoinEvent extends Message<BotJoinEvent> {
  /**
   * bot_name is the anonymised name of the bot.
   *
   * @generated from field: string bot_name = 1;
   */
  botName = "";

  /**
   * join_method is the join method of the token associated with the bot on
   * creation. This will be the string value of `api/types.JoinMethod`.
   *
   * @generated from field: string join_method = 2;
   */
  joinMethod = "";

  /**
   * join_token_name is the anonymised name of the token used to join
   * the cluster.
   *
   * @generated from field: string join_token_name = 3;
   */
  joinTokenName = "";

  /**
   * user_name is the anonymised name of the Bot user.
   *
   * @generated from field: string user_name = 4;
   */
  userName = "";

  constructor(data?: PartialMessage<BotJoinEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.BotJoinEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bot_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "join_method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "join_token_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BotJoinEvent {
    return new BotJoinEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BotJoinEvent {
    return new BotJoinEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BotJoinEvent {
    return new BotJoinEvent().fromJsonString(jsonString, options);
  }

  static equals(a: BotJoinEvent | PlainMessage<BotJoinEvent> | undefined, b: BotJoinEvent | PlainMessage<BotJoinEvent> | undefined): boolean {
    return proto3.util.equals(BotJoinEvent, a, b);
  }
}

/**
 * UICreateNewRoleClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from message prehog.v1alpha.UICreateNewRoleClickEvent
 */
export class UICreateNewRoleClickEvent extends Message<UICreateNewRoleClickEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  constructor(data?: PartialMessage<UICreateNewRoleClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UICreateNewRoleClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UICreateNewRoleClickEvent {
    return new UICreateNewRoleClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UICreateNewRoleClickEvent {
    return new UICreateNewRoleClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UICreateNewRoleClickEvent {
    return new UICreateNewRoleClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UICreateNewRoleClickEvent | PlainMessage<UICreateNewRoleClickEvent> | undefined, b: UICreateNewRoleClickEvent | PlainMessage<UICreateNewRoleClickEvent> | undefined): boolean {
    return proto3.util.equals(UICreateNewRoleClickEvent, a, b);
  }
}

/**
 * UICreateNewRoleSaveClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from message prehog.v1alpha.UICreateNewRoleSaveClickEvent
 */
export class UICreateNewRoleSaveClickEvent extends Message<UICreateNewRoleSaveClickEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  constructor(data?: PartialMessage<UICreateNewRoleSaveClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UICreateNewRoleSaveClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UICreateNewRoleSaveClickEvent {
    return new UICreateNewRoleSaveClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UICreateNewRoleSaveClickEvent {
    return new UICreateNewRoleSaveClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UICreateNewRoleSaveClickEvent {
    return new UICreateNewRoleSaveClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UICreateNewRoleSaveClickEvent | PlainMessage<UICreateNewRoleSaveClickEvent> | undefined, b: UICreateNewRoleSaveClickEvent | PlainMessage<UICreateNewRoleSaveClickEvent> | undefined): boolean {
    return proto3.util.equals(UICreateNewRoleSaveClickEvent, a, b);
  }
}

/**
 * UICreateNewRoleCancelClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from message prehog.v1alpha.UICreateNewRoleCancelClickEvent
 */
export class UICreateNewRoleCancelClickEvent extends Message<UICreateNewRoleCancelClickEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  constructor(data?: PartialMessage<UICreateNewRoleCancelClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UICreateNewRoleCancelClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UICreateNewRoleCancelClickEvent {
    return new UICreateNewRoleCancelClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UICreateNewRoleCancelClickEvent {
    return new UICreateNewRoleCancelClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UICreateNewRoleCancelClickEvent {
    return new UICreateNewRoleCancelClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UICreateNewRoleCancelClickEvent | PlainMessage<UICreateNewRoleCancelClickEvent> | undefined, b: UICreateNewRoleCancelClickEvent | PlainMessage<UICreateNewRoleCancelClickEvent> | undefined): boolean {
    return proto3.util.equals(UICreateNewRoleCancelClickEvent, a, b);
  }
}

/**
 * UICreateNewRoleViewDocumentationClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from message prehog.v1alpha.UICreateNewRoleViewDocumentationClickEvent
 */
export class UICreateNewRoleViewDocumentationClickEvent extends Message<UICreateNewRoleViewDocumentationClickEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  constructor(data?: PartialMessage<UICreateNewRoleViewDocumentationClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UICreateNewRoleViewDocumentationClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UICreateNewRoleViewDocumentationClickEvent {
    return new UICreateNewRoleViewDocumentationClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UICreateNewRoleViewDocumentationClickEvent {
    return new UICreateNewRoleViewDocumentationClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UICreateNewRoleViewDocumentationClickEvent {
    return new UICreateNewRoleViewDocumentationClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UICreateNewRoleViewDocumentationClickEvent | PlainMessage<UICreateNewRoleViewDocumentationClickEvent> | undefined, b: UICreateNewRoleViewDocumentationClickEvent | PlainMessage<UICreateNewRoleViewDocumentationClickEvent> | undefined): boolean {
    return proto3.util.equals(UICreateNewRoleViewDocumentationClickEvent, a, b);
  }
}

/**
 * UICallToActionClickEvent is a click in a Teleport Web UI's CTA
 *
 * @generated from message prehog.v1alpha.UICallToActionClickEvent
 */
export class UICallToActionClickEvent extends Message<UICallToActionClickEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * @generated from field: prehog.v1alpha.CTA cta = 2;
   */
  cta = CTA.CTA_UNSPECIFIED;

  constructor(data?: PartialMessage<UICallToActionClickEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UICallToActionClickEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cta", kind: "enum", T: proto3.getEnumType(CTA) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UICallToActionClickEvent {
    return new UICallToActionClickEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UICallToActionClickEvent {
    return new UICallToActionClickEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UICallToActionClickEvent {
    return new UICallToActionClickEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UICallToActionClickEvent | PlainMessage<UICallToActionClickEvent> | undefined, b: UICallToActionClickEvent | PlainMessage<UICallToActionClickEvent> | undefined): boolean {
    return proto3.util.equals(UICallToActionClickEvent, a, b);
  }
}

/**
 * a request forwarded to a kube cluster's API server (other than exec and
 * port-forward)
 *
 * PostHog event: tp.kube.request
 *
 * @generated from message prehog.v1alpha.KubeRequestEvent
 */
export class KubeRequestEvent extends Message<KubeRequestEvent> {
  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * Indicates the kind of user (e.g. bot or human), if known.
   *
   * @generated from field: prehog.v1alpha.UserKind user_kind = 2;
   */
  userKind = UserKind.UNSPECIFIED;

  constructor(data?: PartialMessage<KubeRequestEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.KubeRequestEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_kind", kind: "enum", T: proto3.getEnumType(UserKind) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KubeRequestEvent {
    return new KubeRequestEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KubeRequestEvent {
    return new KubeRequestEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KubeRequestEvent {
    return new KubeRequestEvent().fromJsonString(jsonString, options);
  }

  static equals(a: KubeRequestEvent | PlainMessage<KubeRequestEvent> | undefined, b: KubeRequestEvent | PlainMessage<KubeRequestEvent> | undefined): boolean {
    return proto3.util.equals(KubeRequestEvent, a, b);
  }
}

/**
 * an sftp event, represents a single operation on a file
 *
 * PostHog event: tp.sftp
 *
 * @generated from message prehog.v1alpha.SFTPEvent
 */
export class SFTPEvent extends Message<SFTPEvent> {
  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * matching SFTPAction in teleport/api/types/events/events.proto
   *
   * @generated from field: int32 action = 2;
   */
  action = 0;

  /**
   * Indicates the kind of user (bot or human), if known.
   *
   * @generated from field: prehog.v1alpha.UserKind user_kind = 3;
   */
  userKind = UserKind.UNSPECIFIED;

  constructor(data?: PartialMessage<SFTPEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.SFTPEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "action", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "user_kind", kind: "enum", T: proto3.getEnumType(UserKind) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SFTPEvent {
    return new SFTPEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SFTPEvent {
    return new SFTPEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SFTPEvent {
    return new SFTPEvent().fromJsonString(jsonString, options);
  }

  static equals(a: SFTPEvent | PlainMessage<SFTPEvent> | undefined, b: SFTPEvent | PlainMessage<SFTPEvent> | undefined): boolean {
    return proto3.util.equals(SFTPEvent, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.AgentMetadataEvent
 */
export class AgentMetadataEvent extends Message<AgentMetadataEvent> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: string host_id = 2;
   */
  hostId = "";

  /**
   * @generated from field: repeated string services = 3;
   */
  services: string[] = [];

  /**
   * @generated from field: string os = 4;
   */
  os = "";

  /**
   * @generated from field: string os_version = 5;
   */
  osVersion = "";

  /**
   * @generated from field: string host_architecture = 6;
   */
  hostArchitecture = "";

  /**
   * @generated from field: string glibc_version = 7;
   */
  glibcVersion = "";

  /**
   * @generated from field: repeated string install_methods = 8;
   */
  installMethods: string[] = [];

  /**
   * @generated from field: string container_runtime = 9;
   */
  containerRuntime = "";

  /**
   * @generated from field: string container_orchestrator = 10;
   */
  containerOrchestrator = "";

  /**
   * @generated from field: string cloud_environment = 11;
   */
  cloudEnvironment = "";

  /**
   * external_upgrader is the name of the registered external upgrader. if non-empty, this field indicates
   * that the associated agent is enrolled in automatic upgrades.
   *
   * @generated from field: string external_upgrader = 12;
   */
  externalUpgrader = "";

  constructor(data?: PartialMessage<AgentMetadataEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AgentMetadataEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "services", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "os", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "os_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "host_architecture", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "glibc_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "install_methods", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "container_runtime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "container_orchestrator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "cloud_environment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "external_upgrader", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AgentMetadataEvent {
    return new AgentMetadataEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AgentMetadataEvent {
    return new AgentMetadataEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AgentMetadataEvent {
    return new AgentMetadataEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AgentMetadataEvent | PlainMessage<AgentMetadataEvent> | undefined, b: AgentMetadataEvent | PlainMessage<AgentMetadataEvent> | undefined): boolean {
    return proto3.util.equals(AgentMetadataEvent, a, b);
  }
}

/**
 * AssistCompletionEvent is an event that is emitted
 * when a single completion occurs in the Teleport Assist,
 * i.e. a user submits a prompt, and receives an answer from the Assist
 *
 * @generated from message prehog.v1alpha.AssistCompletionEvent
 */
export class AssistCompletionEvent extends Message<AssistCompletionEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * ConversationId is the UUID that identifies a single Assist conversation
   *
   * @generated from field: string conversation_id = 2;
   */
  conversationId = "";

  /**
   * TotalTokens is the total amount of token used to satisfy this request
   *
   * @generated from field: int64 total_tokens = 3;
   */
  totalTokens = protoInt64.zero;

  /**
   * PromptTokens is the amount of estimated tokens used by the prompt
   *
   * @generated from field: int64 prompt_tokens = 4;
   */
  promptTokens = protoInt64.zero;

  /**
   * CompletionTokens is the amount of tokens that the completion response consists of
   *
   * @generated from field: int64 completion_tokens = 5;
   */
  completionTokens = protoInt64.zero;

  constructor(data?: PartialMessage<AssistCompletionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AssistCompletionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "conversation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "total_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "prompt_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "completion_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssistCompletionEvent {
    return new AssistCompletionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssistCompletionEvent {
    return new AssistCompletionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssistCompletionEvent {
    return new AssistCompletionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AssistCompletionEvent | PlainMessage<AssistCompletionEvent> | undefined, b: AssistCompletionEvent | PlainMessage<AssistCompletionEvent> | undefined): boolean {
    return proto3.util.equals(AssistCompletionEvent, a, b);
  }
}

/**
 * AssistExecutionEvent is an event that is emitted when an Assist command
 * execution is triggered by the user.
 *
 * @generated from message prehog.v1alpha.AssistExecutionEvent
 */
export class AssistExecutionEvent extends Message<AssistExecutionEvent> {
  /**
   * UserName is anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * ConversationId is the UUID that identifies a single Assist conversation
   *
   * @generated from field: string conversation_id = 2;
   */
  conversationId = "";

  /**
   * NodeCount is the number of nodes the command was executed on
   *
   * @generated from field: int64 node_count = 3;
   */
  nodeCount = protoInt64.zero;

  /**
   * TotalTokens is the total amount of token used to generate the command summary
   *
   * @generated from field: int64 total_tokens = 4;
   */
  totalTokens = protoInt64.zero;

  /**
   * PromptTokens is the amount of estimated tokens used by the prompt to generate the command summary
   *
   * @generated from field: int64 prompt_tokens = 5;
   */
  promptTokens = protoInt64.zero;

  /**
   * CompletionTokens is the amount of tokens that the summary completion response consists of
   *
   * @generated from field: int64 completion_tokens = 6;
   */
  completionTokens = protoInt64.zero;

  constructor(data?: PartialMessage<AssistExecutionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AssistExecutionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "conversation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "node_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "total_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "prompt_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "completion_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssistExecutionEvent {
    return new AssistExecutionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssistExecutionEvent {
    return new AssistExecutionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssistExecutionEvent {
    return new AssistExecutionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AssistExecutionEvent | PlainMessage<AssistExecutionEvent> | undefined, b: AssistExecutionEvent | PlainMessage<AssistExecutionEvent> | undefined): boolean {
    return proto3.util.equals(AssistExecutionEvent, a, b);
  }
}

/**
 * AssistNewConversationEvent is an event that is emitted for each new Assist
 * conversation and contains the conversation category.
 *
 * @generated from message prehog.v1alpha.AssistNewConversationEvent
 */
export class AssistNewConversationEvent extends Message<AssistNewConversationEvent> {
  /**
   * UserName is anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * Category is the conversation category. This represents what kind of request
   * the user is asking Assist.
   *
   * @generated from field: string category = 2;
   */
  category = "";

  constructor(data?: PartialMessage<AssistNewConversationEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AssistNewConversationEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "category", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssistNewConversationEvent {
    return new AssistNewConversationEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssistNewConversationEvent {
    return new AssistNewConversationEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssistNewConversationEvent {
    return new AssistNewConversationEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AssistNewConversationEvent | PlainMessage<AssistNewConversationEvent> | undefined, b: AssistNewConversationEvent | PlainMessage<AssistNewConversationEvent> | undefined): boolean {
    return proto3.util.equals(AssistNewConversationEvent, a, b);
  }
}

/**
 * AssistAccessRequest is an event that is emitted when a user requests access
 * to a resource via Assist.
 *
 * @generated from message prehog.v1alpha.AssistAccessRequestEvent
 */
export class AssistAccessRequestEvent extends Message<AssistAccessRequestEvent> {
  /**
   * UserName is anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * ResourceType describes the type of resource the user is requesting access to, e.g. "node", "db", "k8s" or "role".
   *
   * @generated from field: string resource_type = 2;
   */
  resourceType = "";

  /**
   * TotalTokens is the total amount of token used to generate the command summary
   *
   * @generated from field: int64 total_tokens = 4;
   */
  totalTokens = protoInt64.zero;

  /**
   * PromptTokens is the amount of estimated tokens used by the prompt to generate the command summary
   *
   * @generated from field: int64 prompt_tokens = 5;
   */
  promptTokens = protoInt64.zero;

  /**
   * CompletionTokens is the amount of tokens that the summary completion response consists of
   *
   * @generated from field: int64 completion_tokens = 6;
   */
  completionTokens = protoInt64.zero;

  constructor(data?: PartialMessage<AssistAccessRequestEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AssistAccessRequestEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "total_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "prompt_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "completion_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssistAccessRequestEvent {
    return new AssistAccessRequestEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssistAccessRequestEvent {
    return new AssistAccessRequestEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssistAccessRequestEvent {
    return new AssistAccessRequestEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AssistAccessRequestEvent | PlainMessage<AssistAccessRequestEvent> | undefined, b: AssistAccessRequestEvent | PlainMessage<AssistAccessRequestEvent> | undefined): boolean {
    return proto3.util.equals(AssistAccessRequestEvent, a, b);
  }
}

/**
 * AssistAction is an event that is emitted when a user triggers an action (SSH command generation, output explain, etc.)
 * via Assist.
 *
 * @generated from message prehog.v1alpha.AssistActionEvent
 */
export class AssistActionEvent extends Message<AssistActionEvent> {
  /**
   * UserName is anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * Action is the action that was triggered, e.g. "ssh-explain", "ssh-command-generate", etc.
   *
   * @generated from field: string action = 2;
   */
  action = "";

  /**
   * TotalTokens is the total amount of token used to generate the command summary
   *
   * @generated from field: int64 total_tokens = 4;
   */
  totalTokens = protoInt64.zero;

  /**
   * PromptTokens is the amount of estimated tokens used by the prompt to generate the command summary
   *
   * @generated from field: int64 prompt_tokens = 5;
   */
  promptTokens = protoInt64.zero;

  /**
   * CompletionTokens is the amount of tokens that the summary completion response consists of
   *
   * @generated from field: int64 completion_tokens = 6;
   */
  completionTokens = protoInt64.zero;

  constructor(data?: PartialMessage<AssistActionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AssistActionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "total_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "prompt_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "completion_tokens", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssistActionEvent {
    return new AssistActionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssistActionEvent {
    return new AssistActionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssistActionEvent {
    return new AssistActionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AssistActionEvent | PlainMessage<AssistActionEvent> | undefined, b: AssistActionEvent | PlainMessage<AssistActionEvent> | undefined): boolean {
    return proto3.util.equals(AssistActionEvent, a, b);
  }
}

/**
 * AccessListMetadata contains common metadata for Access List related events.
 *
 * @generated from message prehog.v1alpha.AccessListMetadata
 */
export class AccessListMetadata extends Message<AccessListMetadata> {
  /**
   * id uniquely identifies an Access List. Will allow correlation of events within an access list.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<AccessListMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AccessListMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListMetadata {
    return new AccessListMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListMetadata {
    return new AccessListMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListMetadata {
    return new AccessListMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListMetadata | PlainMessage<AccessListMetadata> | undefined, b: AccessListMetadata | PlainMessage<AccessListMetadata> | undefined): boolean {
    return proto3.util.equals(AccessListMetadata, a, b);
  }
}

/**
 * AccessListCreate is an event that is emitted when an access list is created.
 *
 * @generated from message prehog.v1alpha.AccessListCreateEvent
 */
export class AccessListCreateEvent extends Message<AccessListCreateEvent> {
  /**
   * user_name is the anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * @generated from field: prehog.v1alpha.AccessListMetadata metadata = 2;
   */
  metadata?: AccessListMetadata;

  constructor(data?: PartialMessage<AccessListCreateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AccessListCreateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: AccessListMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListCreateEvent {
    return new AccessListCreateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListCreateEvent {
    return new AccessListCreateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListCreateEvent {
    return new AccessListCreateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListCreateEvent | PlainMessage<AccessListCreateEvent> | undefined, b: AccessListCreateEvent | PlainMessage<AccessListCreateEvent> | undefined): boolean {
    return proto3.util.equals(AccessListCreateEvent, a, b);
  }
}

/**
 * AccessListUpdate is an event that is emitted when an access list is updated.
 *
 * @generated from message prehog.v1alpha.AccessListUpdateEvent
 */
export class AccessListUpdateEvent extends Message<AccessListUpdateEvent> {
  /**
   * user_name is the anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * @generated from field: prehog.v1alpha.AccessListMetadata metadata = 2;
   */
  metadata?: AccessListMetadata;

  constructor(data?: PartialMessage<AccessListUpdateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AccessListUpdateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: AccessListMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListUpdateEvent {
    return new AccessListUpdateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListUpdateEvent {
    return new AccessListUpdateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListUpdateEvent {
    return new AccessListUpdateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListUpdateEvent | PlainMessage<AccessListUpdateEvent> | undefined, b: AccessListUpdateEvent | PlainMessage<AccessListUpdateEvent> | undefined): boolean {
    return proto3.util.equals(AccessListUpdateEvent, a, b);
  }
}

/**
 * AccessListDelete is an event that is emitted when an access list is deleted.
 *
 * @generated from message prehog.v1alpha.AccessListDeleteEvent
 */
export class AccessListDeleteEvent extends Message<AccessListDeleteEvent> {
  /**
   * user_name is the anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * @generated from field: prehog.v1alpha.AccessListMetadata metadata = 2;
   */
  metadata?: AccessListMetadata;

  constructor(data?: PartialMessage<AccessListDeleteEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AccessListDeleteEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: AccessListMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListDeleteEvent {
    return new AccessListDeleteEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListDeleteEvent {
    return new AccessListDeleteEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListDeleteEvent {
    return new AccessListDeleteEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListDeleteEvent | PlainMessage<AccessListDeleteEvent> | undefined, b: AccessListDeleteEvent | PlainMessage<AccessListDeleteEvent> | undefined): boolean {
    return proto3.util.equals(AccessListDeleteEvent, a, b);
  }
}

/**
 * AccessListMemberCreate is an event that is emitted when a member is added to an access list.
 *
 * @generated from message prehog.v1alpha.AccessListMemberCreateEvent
 */
export class AccessListMemberCreateEvent extends Message<AccessListMemberCreateEvent> {
  /**
   * user_name is the anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * @generated from field: prehog.v1alpha.AccessListMetadata metadata = 2;
   */
  metadata?: AccessListMetadata;

  constructor(data?: PartialMessage<AccessListMemberCreateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AccessListMemberCreateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: AccessListMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListMemberCreateEvent {
    return new AccessListMemberCreateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListMemberCreateEvent {
    return new AccessListMemberCreateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListMemberCreateEvent {
    return new AccessListMemberCreateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListMemberCreateEvent | PlainMessage<AccessListMemberCreateEvent> | undefined, b: AccessListMemberCreateEvent | PlainMessage<AccessListMemberCreateEvent> | undefined): boolean {
    return proto3.util.equals(AccessListMemberCreateEvent, a, b);
  }
}

/**
 * AccessListMemberUpdate is an event that is emitted when a member is updated in an access list.
 *
 * @generated from message prehog.v1alpha.AccessListMemberUpdateEvent
 */
export class AccessListMemberUpdateEvent extends Message<AccessListMemberUpdateEvent> {
  /**
   * user_name is the anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * @generated from field: prehog.v1alpha.AccessListMetadata metadata = 2;
   */
  metadata?: AccessListMetadata;

  constructor(data?: PartialMessage<AccessListMemberUpdateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AccessListMemberUpdateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: AccessListMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListMemberUpdateEvent {
    return new AccessListMemberUpdateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListMemberUpdateEvent {
    return new AccessListMemberUpdateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListMemberUpdateEvent {
    return new AccessListMemberUpdateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListMemberUpdateEvent | PlainMessage<AccessListMemberUpdateEvent> | undefined, b: AccessListMemberUpdateEvent | PlainMessage<AccessListMemberUpdateEvent> | undefined): boolean {
    return proto3.util.equals(AccessListMemberUpdateEvent, a, b);
  }
}

/**
 * AccessListMemberDelete is an event that is emitted when a member is removed from an access list.
 *
 * @generated from message prehog.v1alpha.AccessListMemberDeleteEvent
 */
export class AccessListMemberDeleteEvent extends Message<AccessListMemberDeleteEvent> {
  /**
   * user_name is anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * @generated from field: prehog.v1alpha.AccessListMetadata metadata = 2;
   */
  metadata?: AccessListMetadata;

  constructor(data?: PartialMessage<AccessListMemberDeleteEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AccessListMemberDeleteEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: AccessListMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListMemberDeleteEvent {
    return new AccessListMemberDeleteEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListMemberDeleteEvent {
    return new AccessListMemberDeleteEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListMemberDeleteEvent {
    return new AccessListMemberDeleteEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListMemberDeleteEvent | PlainMessage<AccessListMemberDeleteEvent> | undefined, b: AccessListMemberDeleteEvent | PlainMessage<AccessListMemberDeleteEvent> | undefined): boolean {
    return proto3.util.equals(AccessListMemberDeleteEvent, a, b);
  }
}

/**
 * AccessListGrantsToUser is an event that is emitted when access list permissions are granted to a user
 * on login.
 *
 * @generated from message prehog.v1alpha.AccessListGrantsToUserEvent
 */
export class AccessListGrantsToUserEvent extends Message<AccessListGrantsToUserEvent> {
  /**
   * user_name is the anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * count_roles_granted is the number of roles granted to a user.
   *
   * @generated from field: int32 count_roles_granted = 2;
   */
  countRolesGranted = 0;

  /**
   * count_traits_granted is the number of traits granted to a user.
   *
   * @generated from field: int32 count_traits_granted = 3;
   */
  countTraitsGranted = 0;

  constructor(data?: PartialMessage<AccessListGrantsToUserEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AccessListGrantsToUserEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "count_roles_granted", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "count_traits_granted", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListGrantsToUserEvent {
    return new AccessListGrantsToUserEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListGrantsToUserEvent {
    return new AccessListGrantsToUserEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListGrantsToUserEvent {
    return new AccessListGrantsToUserEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListGrantsToUserEvent | PlainMessage<AccessListGrantsToUserEvent> | undefined, b: AccessListGrantsToUserEvent | PlainMessage<AccessListGrantsToUserEvent> | undefined): boolean {
    return proto3.util.equals(AccessListGrantsToUserEvent, a, b);
  }
}

/**
 * AccessListReviewCreateEvent is an event that is emitted when an access list review is created.
 *
 * @generated from message prehog.v1alpha.AccessListReviewCreateEvent
 */
export class AccessListReviewCreateEvent extends Message<AccessListReviewCreateEvent> {
  /**
   * user_name is anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * @generated from field: prehog.v1alpha.AccessListMetadata metadata = 2;
   */
  metadata?: AccessListMetadata;

  /**
   * days_past_next_audit_date is how many days past the next audit date the review came in. Can be negative.
   *
   * @generated from field: int32 days_past_next_audit_date = 3;
   */
  daysPastNextAuditDate = 0;

  /**
   * membership_requirements_changed indicates that the membership requirements were changed.
   *
   * @generated from field: bool membership_requirements_changed = 4;
   */
  membershipRequirementsChanged = false;

  /**
   * review_frequency_changed indicates that the review frequency was changed.
   *
   * @generated from field: bool review_frequency_changed = 5;
   */
  reviewFrequencyChanged = false;

  /**
   * review_day_of_month_changed indicates that the review day of month was changed.
   *
   * @generated from field: bool review_day_of_month_changed = 6;
   */
  reviewDayOfMonthChanged = false;

  /**
   * number_of_removed_members is how many members were removed as part of this review.
   *
   * @generated from field: int32 number_of_removed_members = 7;
   */
  numberOfRemovedMembers = 0;

  constructor(data?: PartialMessage<AccessListReviewCreateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AccessListReviewCreateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: AccessListMetadata },
    { no: 3, name: "days_past_next_audit_date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "membership_requirements_changed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "review_frequency_changed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "review_day_of_month_changed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "number_of_removed_members", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListReviewCreateEvent {
    return new AccessListReviewCreateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListReviewCreateEvent {
    return new AccessListReviewCreateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListReviewCreateEvent {
    return new AccessListReviewCreateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListReviewCreateEvent | PlainMessage<AccessListReviewCreateEvent> | undefined, b: AccessListReviewCreateEvent | PlainMessage<AccessListReviewCreateEvent> | undefined): boolean {
    return proto3.util.equals(AccessListReviewCreateEvent, a, b);
  }
}

/**
 * AccessListReviewDeleteEvent is an event that is emitted when an access list review is deleted.
 *
 * @generated from message prehog.v1alpha.AccessListReviewDeleteEvent
 */
export class AccessListReviewDeleteEvent extends Message<AccessListReviewDeleteEvent> {
  /**
   * user_name is anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * @generated from field: prehog.v1alpha.AccessListMetadata metadata = 2;
   */
  metadata?: AccessListMetadata;

  /**
   * access_list_review_id is the unique identifier for the access list review.
   *
   * @generated from field: string access_list_review_id = 3;
   */
  accessListReviewId = "";

  constructor(data?: PartialMessage<AccessListReviewDeleteEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AccessListReviewDeleteEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: AccessListMetadata },
    { no: 3, name: "access_list_review_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListReviewDeleteEvent {
    return new AccessListReviewDeleteEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListReviewDeleteEvent {
    return new AccessListReviewDeleteEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListReviewDeleteEvent {
    return new AccessListReviewDeleteEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListReviewDeleteEvent | PlainMessage<AccessListReviewDeleteEvent> | undefined, b: AccessListReviewDeleteEvent | PlainMessage<AccessListReviewDeleteEvent> | undefined): boolean {
    return proto3.util.equals(AccessListReviewDeleteEvent, a, b);
  }
}

/**
 * AccessListReviewComplianceEvent is an event that is emitted periodically to indicate how many access
 * lists are past due for a review.
 *
 * @generated from message prehog.v1alpha.AccessListReviewComplianceEvent
 */
export class AccessListReviewComplianceEvent extends Message<AccessListReviewComplianceEvent> {
  /**
   * total_access_lists is the total number of access lists known to Teleport.
   *
   * @generated from field: int32 total_access_lists = 1;
   */
  totalAccessLists = 0;

  /**
   * access_lists_need_review is the number of access lists that need a review.
   *
   * @generated from field: int32 access_lists_need_review = 2;
   */
  accessListsNeedReview = 0;

  constructor(data?: PartialMessage<AccessListReviewComplianceEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AccessListReviewComplianceEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_access_lists", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "access_lists_need_review", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListReviewComplianceEvent {
    return new AccessListReviewComplianceEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListReviewComplianceEvent {
    return new AccessListReviewComplianceEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListReviewComplianceEvent {
    return new AccessListReviewComplianceEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AccessListReviewComplianceEvent | PlainMessage<AccessListReviewComplianceEvent> | undefined, b: AccessListReviewComplianceEvent | PlainMessage<AccessListReviewComplianceEvent> | undefined): boolean {
    return proto3.util.equals(AccessListReviewComplianceEvent, a, b);
  }
}

/**
 * IntegrationEnrollMetadata contains common metadata
 * for Integration Enroll related events.
 *
 * @generated from message prehog.v1alpha.IntegrationEnrollMetadata
 */
export class IntegrationEnrollMetadata extends Message<IntegrationEnrollMetadata> {
  /**
   * id is used as a unique identifier to correlate events within the
   * same enroll wizard run.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * kind identifies what type of integration the user clicked on to enroll.
   *
   * @generated from field: prehog.v1alpha.IntegrationEnrollKind kind = 2;
   */
  kind = IntegrationEnrollKind.UNSPECIFIED;

  /**
   * user_name is anonymized.
   *
   * @generated from field: string user_name = 3;
   */
  userName = "";

  constructor(data?: PartialMessage<IntegrationEnrollMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.IntegrationEnrollMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "enum", T: proto3.getEnumType(IntegrationEnrollKind) },
    { no: 3, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntegrationEnrollMetadata {
    return new IntegrationEnrollMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntegrationEnrollMetadata {
    return new IntegrationEnrollMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntegrationEnrollMetadata {
    return new IntegrationEnrollMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: IntegrationEnrollMetadata | PlainMessage<IntegrationEnrollMetadata> | undefined, b: IntegrationEnrollMetadata | PlainMessage<IntegrationEnrollMetadata> | undefined): boolean {
    return proto3.util.equals(IntegrationEnrollMetadata, a, b);
  }
}

/**
 * UIIntegrationEnrollEvent is an event that is emitted when a user
 * clicks on a integration to enroll.
 *
 * @generated from message prehog.v1alpha.UIIntegrationEnrollStartEvent
 */
export class UIIntegrationEnrollStartEvent extends Message<UIIntegrationEnrollStartEvent> {
  /**
   * @generated from field: prehog.v1alpha.IntegrationEnrollMetadata metadata = 1;
   */
  metadata?: IntegrationEnrollMetadata;

  constructor(data?: PartialMessage<UIIntegrationEnrollStartEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIIntegrationEnrollStartEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: IntegrationEnrollMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIIntegrationEnrollStartEvent {
    return new UIIntegrationEnrollStartEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIIntegrationEnrollStartEvent {
    return new UIIntegrationEnrollStartEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIIntegrationEnrollStartEvent {
    return new UIIntegrationEnrollStartEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIIntegrationEnrollStartEvent | PlainMessage<UIIntegrationEnrollStartEvent> | undefined, b: UIIntegrationEnrollStartEvent | PlainMessage<UIIntegrationEnrollStartEvent> | undefined): boolean {
    return proto3.util.equals(UIIntegrationEnrollStartEvent, a, b);
  }
}

/**
 * UIIntegrationEnrollEvent is an event that is emitted when a user
 * completed enrolling an integration.
 *
 * @generated from message prehog.v1alpha.UIIntegrationEnrollCompleteEvent
 */
export class UIIntegrationEnrollCompleteEvent extends Message<UIIntegrationEnrollCompleteEvent> {
  /**
   * @generated from field: prehog.v1alpha.IntegrationEnrollMetadata metadata = 1;
   */
  metadata?: IntegrationEnrollMetadata;

  constructor(data?: PartialMessage<UIIntegrationEnrollCompleteEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIIntegrationEnrollCompleteEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: IntegrationEnrollMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIIntegrationEnrollCompleteEvent {
    return new UIIntegrationEnrollCompleteEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIIntegrationEnrollCompleteEvent {
    return new UIIntegrationEnrollCompleteEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIIntegrationEnrollCompleteEvent {
    return new UIIntegrationEnrollCompleteEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIIntegrationEnrollCompleteEvent | PlainMessage<UIIntegrationEnrollCompleteEvent> | undefined, b: UIIntegrationEnrollCompleteEvent | PlainMessage<UIIntegrationEnrollCompleteEvent> | undefined): boolean {
    return proto3.util.equals(UIIntegrationEnrollCompleteEvent, a, b);
  }
}

/**
 * EditorChangeEvent is an event that is emitted when a user role set changes resulting in
 * a editor role being added on removed
 *
 * @generated from message prehog.v1alpha.EditorChangeEvent
 */
export class EditorChangeEvent extends Message<EditorChangeEvent> {
  /**
   * anonymized user name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * @generated from field: prehog.v1alpha.EditorChangeStatus status = 2;
   */
  status = EditorChangeStatus.UNSPECIFIED;

  constructor(data?: PartialMessage<EditorChangeEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.EditorChangeEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(EditorChangeStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditorChangeEvent {
    return new EditorChangeEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditorChangeEvent {
    return new EditorChangeEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditorChangeEvent {
    return new EditorChangeEvent().fromJsonString(jsonString, options);
  }

  static equals(a: EditorChangeEvent | PlainMessage<EditorChangeEvent> | undefined, b: EditorChangeEvent | PlainMessage<EditorChangeEvent> | undefined): boolean {
    return proto3.util.equals(EditorChangeEvent, a, b);
  }
}

/**
 * Device authentication event
 *
 * @generated from message prehog.v1alpha.DeviceAuthenticateEvent
 */
export class DeviceAuthenticateEvent extends Message<DeviceAuthenticateEvent> {
  /**
   * anonymized device ID, 32 bytes (HMAC-SHA-256) encoded in base64
   *
   * PostHog property: tp.device_id
   *
   * @generated from field: string device_id = 1;
   */
  deviceId = "";

  /**
   * anonymized username, 32 bytes (HMAC-SHA-256) encoded in base64
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 2;
   */
  userName = "";

  /**
   * device OS type
   *
   * PostHog property: tp.device_os_type
   *
   * @generated from field: string device_os_type = 3;
   */
  deviceOsType = "";

  constructor(data?: PartialMessage<DeviceAuthenticateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.DeviceAuthenticateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "device_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "device_os_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceAuthenticateEvent {
    return new DeviceAuthenticateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceAuthenticateEvent {
    return new DeviceAuthenticateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceAuthenticateEvent {
    return new DeviceAuthenticateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceAuthenticateEvent | PlainMessage<DeviceAuthenticateEvent> | undefined, b: DeviceAuthenticateEvent | PlainMessage<DeviceAuthenticateEvent> | undefined): boolean {
    return proto3.util.equals(DeviceAuthenticateEvent, a, b);
  }
}

/**
 * Device Enrollment event
 *
 * PostHost event: tp.device.enroll
 *
 * @generated from message prehog.v1alpha.DeviceEnrollEvent
 */
export class DeviceEnrollEvent extends Message<DeviceEnrollEvent> {
  /**
   * anonymized device ID, 32 bytes (HMAC-SHA-256) encoded in base64
   *
   * PostHog property: tp.device_id
   *
   * @generated from field: string device_id = 1;
   */
  deviceId = "";

  /**
   * anonymized username, 32 bytes (HMAC-SHA-256) encoded in base64
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 2;
   */
  userName = "";

  /**
   * device OS type
   *
   * PostHog property: tp.device_os_type
   *
   * @generated from field: string device_os_type = 3;
   */
  deviceOsType = "";

  /**
   * device origin
   *
   * PostHog property: tp.device_origin
   *
   * @generated from field: string device_origin = 4;
   */
  deviceOrigin = "";

  constructor(data?: PartialMessage<DeviceEnrollEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.DeviceEnrollEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "device_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "device_os_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "device_origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceEnrollEvent {
    return new DeviceEnrollEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceEnrollEvent {
    return new DeviceEnrollEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceEnrollEvent {
    return new DeviceEnrollEvent().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceEnrollEvent | PlainMessage<DeviceEnrollEvent> | undefined, b: DeviceEnrollEvent | PlainMessage<DeviceEnrollEvent> | undefined): boolean {
    return proto3.util.equals(DeviceEnrollEvent, a, b);
  }
}

/**
 * FeatureRecommendationEvent captures event emitted when a feature is recommended to user or
 * when user completes the desired CTA for the feature.
 *
 * PostHost event: tp.ui.feature.recommendation
 *
 * @generated from message prehog.v1alpha.FeatureRecommendationEvent
 */
export class FeatureRecommendationEvent extends Message<FeatureRecommendationEvent> {
  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * feature is name of the Teleport feature.
   *
   * PostHog property: tp.feature
   *
   * @generated from field: prehog.v1alpha.Feature feature = 2;
   */
  feature = Feature.UNSPECIFIED;

  /**
   * feature_recommendation_status records recommendation state, which can be 'NOTIFIED' (feature is recommended)
   * OR 'DONE' (user completes desired CTA)
   *
   * PostHost property: tp.feature_recommendation_status
   *
   * @generated from field: prehog.v1alpha.FeatureRecommendationStatus feature_recommendation_status = 3;
   */
  featureRecommendationStatus = FeatureRecommendationStatus.UNSPECIFIED;

  constructor(data?: PartialMessage<FeatureRecommendationEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.FeatureRecommendationEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "feature", kind: "enum", T: proto3.getEnumType(Feature) },
    { no: 3, name: "feature_recommendation_status", kind: "enum", T: proto3.getEnumType(FeatureRecommendationStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureRecommendationEvent {
    return new FeatureRecommendationEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureRecommendationEvent {
    return new FeatureRecommendationEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureRecommendationEvent {
    return new FeatureRecommendationEvent().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureRecommendationEvent | PlainMessage<FeatureRecommendationEvent> | undefined, b: FeatureRecommendationEvent | PlainMessage<FeatureRecommendationEvent> | undefined): boolean {
    return proto3.util.equals(FeatureRecommendationEvent, a, b);
  }
}

/**
 * LicenseLimitEvent is emitted when access to Teleport feature
 * is denied based on license limits
 *
 * PostHost event: tp.license.limit
 *
 * @generated from message prehog.v1alpha.LicenseLimitEvent
 */
export class LicenseLimitEvent extends Message<LicenseLimitEvent> {
  /**
   * PostHost property: tp.license_limit
   *
   * @generated from field: prehog.v1alpha.LicenseLimit license_limit = 1;
   */
  licenseLimit = LicenseLimit.UNSPECIFIED;

  constructor(data?: PartialMessage<LicenseLimitEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.LicenseLimitEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "license_limit", kind: "enum", T: proto3.getEnumType(LicenseLimit) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LicenseLimitEvent {
    return new LicenseLimitEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LicenseLimitEvent {
    return new LicenseLimitEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LicenseLimitEvent {
    return new LicenseLimitEvent().fromJsonString(jsonString, options);
  }

  static equals(a: LicenseLimitEvent | PlainMessage<LicenseLimitEvent> | undefined, b: LicenseLimitEvent | PlainMessage<LicenseLimitEvent> | undefined): boolean {
    return proto3.util.equals(LicenseLimitEvent, a, b);
  }
}

/**
 * DesktopDirectoryShareEvent is emitted when directory sharing is used
 * in a Teleport desktop session.
 *
 * @generated from message prehog.v1alpha.DesktopDirectoryShareEvent
 */
export class DesktopDirectoryShareEvent extends Message<DesktopDirectoryShareEvent> {
  /**
   * anonymized desktop addr, used to uniquely idenfity the desktop
   *
   * PostHog property: tp.desktop
   *
   * @generated from field: string desktop = 1;
   */
  desktop = "";

  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 2;
   */
  userName = "";

  /**
   * anonymized directory name
   *
   * PostHog property: tp.directory_name
   *
   * @generated from field: string directory_name = 3;
   */
  directoryName = "";

  constructor(data?: PartialMessage<DesktopDirectoryShareEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.DesktopDirectoryShareEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "desktop", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "directory_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DesktopDirectoryShareEvent {
    return new DesktopDirectoryShareEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DesktopDirectoryShareEvent {
    return new DesktopDirectoryShareEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DesktopDirectoryShareEvent {
    return new DesktopDirectoryShareEvent().fromJsonString(jsonString, options);
  }

  static equals(a: DesktopDirectoryShareEvent | PlainMessage<DesktopDirectoryShareEvent> | undefined, b: DesktopDirectoryShareEvent | PlainMessage<DesktopDirectoryShareEvent> | undefined): boolean {
    return proto3.util.equals(DesktopDirectoryShareEvent, a, b);
  }
}

/**
 * DesktopClipboardEvent is emitted when data is transferred between a user's
 * local clipboard and a remote Windows clipboard.
 *
 * @generated from message prehog.v1alpha.DesktopClipboardEvent
 */
export class DesktopClipboardEvent extends Message<DesktopClipboardEvent> {
  /**
   * anonymized desktop addr, used to uniquely idenfity the desktop
   *
   * PostHog property: tp.desktop
   *
   * @generated from field: string desktop = 1;
   */
  desktop = "";

  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 2;
   */
  userName = "";

  constructor(data?: PartialMessage<DesktopClipboardEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.DesktopClipboardEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "desktop", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DesktopClipboardEvent {
    return new DesktopClipboardEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DesktopClipboardEvent {
    return new DesktopClipboardEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DesktopClipboardEvent {
    return new DesktopClipboardEvent().fromJsonString(jsonString, options);
  }

  static equals(a: DesktopClipboardEvent | PlainMessage<DesktopClipboardEvent> | undefined, b: DesktopClipboardEvent | PlainMessage<DesktopClipboardEvent> | undefined): boolean {
    return proto3.util.equals(DesktopClipboardEvent, a, b);
  }
}

/**
 * TAGExecuteQueryEvent is an event that is emitted
 * when a single query is executed in the Teleport Access Graph.
 * This event is emitted for both successful and failed queries. For
 * successful queries, the total number of nodes and edges is reported.
 *
 * @generated from message prehog.v1alpha.TAGExecuteQueryEvent
 */
export class TAGExecuteQueryEvent extends Message<TAGExecuteQueryEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * total_nodes is the total amount of nodes returned by the query.
   *
   * @generated from field: int64 total_nodes = 2;
   */
  totalNodes = protoInt64.zero;

  /**
   * total_edges is the total amount of edges returned by the query.
   *
   * @generated from field: int64 total_edges = 3;
   */
  totalEdges = protoInt64.zero;

  /**
   * is_success is true if the query was successful and false it if failed.
   *
   * @generated from field: bool is_success = 4;
   */
  isSuccess = false;

  constructor(data?: PartialMessage<TAGExecuteQueryEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.TAGExecuteQueryEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_nodes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "total_edges", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "is_success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TAGExecuteQueryEvent {
    return new TAGExecuteQueryEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TAGExecuteQueryEvent {
    return new TAGExecuteQueryEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TAGExecuteQueryEvent {
    return new TAGExecuteQueryEvent().fromJsonString(jsonString, options);
  }

  static equals(a: TAGExecuteQueryEvent | PlainMessage<TAGExecuteQueryEvent> | undefined, b: TAGExecuteQueryEvent | PlainMessage<TAGExecuteQueryEvent> | undefined): boolean {
    return proto3.util.equals(TAGExecuteQueryEvent, a, b);
  }
}

/**
 * AccessGraphSecretsScanAuthorizedKeysEvent is emitted when the Access Graph
 * SSH authorized keys scan is performed.
 *
 * @generated from message prehog.v1alpha.AccessGraphSecretsScanAuthorizedKeysEvent
 */
export class AccessGraphSecretsScanAuthorizedKeysEvent extends Message<AccessGraphSecretsScanAuthorizedKeysEvent> {
  /**
   * anonymized
   *
   * @generated from field: string host_id = 1;
   */
  hostId = "";

  /**
   * total_keys is the total amount of keys found in the authorized keys file.
   *
   * @generated from field: uint64 total_keys = 2;
   */
  totalKeys = protoInt64.zero;

  constructor(data?: PartialMessage<AccessGraphSecretsScanAuthorizedKeysEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AccessGraphSecretsScanAuthorizedKeysEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_keys", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessGraphSecretsScanAuthorizedKeysEvent {
    return new AccessGraphSecretsScanAuthorizedKeysEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessGraphSecretsScanAuthorizedKeysEvent {
    return new AccessGraphSecretsScanAuthorizedKeysEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessGraphSecretsScanAuthorizedKeysEvent {
    return new AccessGraphSecretsScanAuthorizedKeysEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AccessGraphSecretsScanAuthorizedKeysEvent | PlainMessage<AccessGraphSecretsScanAuthorizedKeysEvent> | undefined, b: AccessGraphSecretsScanAuthorizedKeysEvent | PlainMessage<AccessGraphSecretsScanAuthorizedKeysEvent> | undefined): boolean {
    return proto3.util.equals(AccessGraphSecretsScanAuthorizedKeysEvent, a, b);
  }
}

/**
 * AccessGraphSecretsScanSSHPrivateKeysEvent is emitted when the Access Graph
 * SSH private keys scan is performed.
 *
 * @generated from message prehog.v1alpha.AccessGraphSecretsScanSSHPrivateKeysEvent
 */
export class AccessGraphSecretsScanSSHPrivateKeysEvent extends Message<AccessGraphSecretsScanSSHPrivateKeysEvent> {
  /**
   * anonymized
   *
   * @generated from field: string device_id = 1;
   */
  deviceId = "";

  /**
   * total_keys is the total amount of keys found in the private keys file.
   *
   * @generated from field: uint64 total_keys = 2;
   */
  totalKeys = protoInt64.zero;

  /**
   * device OS type
   *
   * @generated from field: string device_os_type = 3;
   */
  deviceOsType = "";

  constructor(data?: PartialMessage<AccessGraphSecretsScanSSHPrivateKeysEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AccessGraphSecretsScanSSHPrivateKeysEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "device_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_keys", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "device_os_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessGraphSecretsScanSSHPrivateKeysEvent {
    return new AccessGraphSecretsScanSSHPrivateKeysEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessGraphSecretsScanSSHPrivateKeysEvent {
    return new AccessGraphSecretsScanSSHPrivateKeysEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessGraphSecretsScanSSHPrivateKeysEvent {
    return new AccessGraphSecretsScanSSHPrivateKeysEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AccessGraphSecretsScanSSHPrivateKeysEvent | PlainMessage<AccessGraphSecretsScanSSHPrivateKeysEvent> | undefined, b: AccessGraphSecretsScanSSHPrivateKeysEvent | PlainMessage<AccessGraphSecretsScanSSHPrivateKeysEvent> | undefined): boolean {
    return proto3.util.equals(AccessGraphSecretsScanSSHPrivateKeysEvent, a, b);
  }
}

/**
 * AccessGraphGitlabScanEvent is emitted when the Access Graph
 * Gitlab scan is enabled.
 *
 * @generated from message prehog.v1alpha.AccessGraphGitlabScanEvent
 */
export class AccessGraphGitlabScanEvent extends Message<AccessGraphGitlabScanEvent> {
  /**
   * total_projects is the total amount of projects found in the Gitlab scan.
   *
   * @generated from field: uint64 total_projects = 1;
   */
  totalProjects = protoInt64.zero;

  /**
   * total_users is the total amount of users found in the Gitlab scan.
   *
   * @generated from field: uint64 total_users = 2;
   */
  totalUsers = protoInt64.zero;

  /**
   * total_groups is the total amount of groups found in the Gitlab scan.
   *
   * @generated from field: uint64 total_groups = 3;
   */
  totalGroups = protoInt64.zero;

  constructor(data?: PartialMessage<AccessGraphGitlabScanEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AccessGraphGitlabScanEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_projects", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "total_users", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total_groups", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessGraphGitlabScanEvent {
    return new AccessGraphGitlabScanEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessGraphGitlabScanEvent {
    return new AccessGraphGitlabScanEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessGraphGitlabScanEvent {
    return new AccessGraphGitlabScanEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AccessGraphGitlabScanEvent | PlainMessage<AccessGraphGitlabScanEvent> | undefined, b: AccessGraphGitlabScanEvent | PlainMessage<AccessGraphGitlabScanEvent> | undefined): boolean {
    return proto3.util.equals(AccessGraphGitlabScanEvent, a, b);
  }
}

/**
 * AccessGraphAWSScanEvent is emitted when the Access Graph
 * AWS scan is enabled.
 *
 * @generated from message prehog.v1alpha.AccessGraphAWSScanEvent
 */
export class AccessGraphAWSScanEvent extends Message<AccessGraphAWSScanEvent> {
  /**
   * total_ec2_instances is the total amount of EC2 instances found in the AWS scan.
   *
   * @generated from field: uint64 total_ec2_instances = 1;
   */
  totalEc2Instances = protoInt64.zero;

  /**
   * total_users is the total amount of users found in the AWS scan.
   *
   * @generated from field: uint64 total_users = 2;
   */
  totalUsers = protoInt64.zero;

  /**
   * total_groups is the total amount of groups found in the AWS scan.
   *
   * @generated from field: uint64 total_groups = 3;
   */
  totalGroups = protoInt64.zero;

  /**
   * total_roles is the total amount of roles found in the AWS scan.
   *
   * @generated from field: uint64 total_roles = 4;
   */
  totalRoles = protoInt64.zero;

  /**
   * total_policies is the total amount of policies found in the AWS scan.
   *
   * @generated from field: uint64 total_policies = 5;
   */
  totalPolicies = protoInt64.zero;

  /**
   * total_eks_clusters is the total amount of EKS clusters found in the AWS scan.
   *
   * @generated from field: uint64 total_eks_clusters = 6;
   */
  totalEksClusters = protoInt64.zero;

  /**
   * total_rds_instances is the total amount of RDS instances found in the AWS scan.
   *
   * @generated from field: uint64 total_rds_instances = 7;
   */
  totalRdsInstances = protoInt64.zero;

  /**
   * total_s3_buckets is the total amount of S3 buckets found in the AWS scan.
   *
   * @generated from field: uint64 total_s3_buckets = 8;
   */
  totalS3Buckets = protoInt64.zero;

  /**
   * total_saml_providers is the total amount of SAML providers found in the AWS scan.
   *
   * @generated from field: uint64 total_saml_providers = 9;
   */
  totalSamlProviders = protoInt64.zero;

  /**
   * total_oidc_providers is the total amount of OIDC providers found in the AWS scan.
   *
   * @generated from field: uint64 total_oidc_providers = 10;
   */
  totalOidcProviders = protoInt64.zero;

  /**
   * total_accounts is the total amount of accounts synchronized in the AWS scan.
   *
   * @generated from field: uint64 total_accounts = 11;
   */
  totalAccounts = protoInt64.zero;

  constructor(data?: PartialMessage<AccessGraphAWSScanEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AccessGraphAWSScanEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_ec2_instances", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "total_users", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total_groups", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "total_roles", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "total_policies", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "total_eks_clusters", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "total_rds_instances", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "total_s3_buckets", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "total_saml_providers", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "total_oidc_providers", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "total_accounts", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessGraphAWSScanEvent {
    return new AccessGraphAWSScanEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessGraphAWSScanEvent {
    return new AccessGraphAWSScanEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessGraphAWSScanEvent {
    return new AccessGraphAWSScanEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AccessGraphAWSScanEvent | PlainMessage<AccessGraphAWSScanEvent> | undefined, b: AccessGraphAWSScanEvent | PlainMessage<AccessGraphAWSScanEvent> | undefined): boolean {
    return proto3.util.equals(AccessGraphAWSScanEvent, a, b);
  }
}

/**
 * AccessGraphAccessPathChangedEvent is emitted when the Crown Jewel functionality
 * is enabled and the Access Graph access path is changed.
 *
 * @generated from message prehog.v1alpha.AccessGraphAccessPathChangedEvent
 */
export class AccessGraphAccessPathChangedEvent extends Message<AccessGraphAccessPathChangedEvent> {
  /**
   * affected_resource_source is the source of the affected resource.
   *
   * @generated from field: string affected_resource_source = 1;
   */
  affectedResourceSource = "";

  /**
   * affected_resource_type is the type of the affected resource.
   *
   * @generated from field: string affected_resource_type = 2;
   */
  affectedResourceType = "";

  constructor(data?: PartialMessage<AccessGraphAccessPathChangedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AccessGraphAccessPathChangedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "affected_resource_source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "affected_resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessGraphAccessPathChangedEvent {
    return new AccessGraphAccessPathChangedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessGraphAccessPathChangedEvent {
    return new AccessGraphAccessPathChangedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessGraphAccessPathChangedEvent {
    return new AccessGraphAccessPathChangedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AccessGraphAccessPathChangedEvent | PlainMessage<AccessGraphAccessPathChangedEvent> | undefined, b: AccessGraphAccessPathChangedEvent | PlainMessage<AccessGraphAccessPathChangedEvent> | undefined): boolean {
    return proto3.util.equals(AccessGraphAccessPathChangedEvent, a, b);
  }
}

/**
 * UIAccessGraphCrownJewelDiffViewEvent is emitted when a user reviews the output of a Crown Jewel access path dff.
 *
 * @generated from message prehog.v1alpha.UIAccessGraphCrownJewelDiffViewEvent
 */
export class UIAccessGraphCrownJewelDiffViewEvent extends Message<UIAccessGraphCrownJewelDiffViewEvent> {
  /**
   * affected_resource_source is the source of the affected resource.
   *
   * @generated from field: string affected_resource_source = 1;
   */
  affectedResourceSource = "";

  /**
   * affected_resource_type is the type of the affected resource.
   *
   * @generated from field: string affected_resource_type = 2;
   */
  affectedResourceType = "";

  constructor(data?: PartialMessage<UIAccessGraphCrownJewelDiffViewEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.UIAccessGraphCrownJewelDiffViewEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "affected_resource_source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "affected_resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UIAccessGraphCrownJewelDiffViewEvent {
    return new UIAccessGraphCrownJewelDiffViewEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UIAccessGraphCrownJewelDiffViewEvent {
    return new UIAccessGraphCrownJewelDiffViewEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UIAccessGraphCrownJewelDiffViewEvent {
    return new UIAccessGraphCrownJewelDiffViewEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UIAccessGraphCrownJewelDiffViewEvent | PlainMessage<UIAccessGraphCrownJewelDiffViewEvent> | undefined, b: UIAccessGraphCrownJewelDiffViewEvent | PlainMessage<UIAccessGraphCrownJewelDiffViewEvent> | undefined): boolean {
    return proto3.util.equals(UIAccessGraphCrownJewelDiffViewEvent, a, b);
  }
}

/**
 * AccessGraphCrownJewelCreateEvent is emitted when a user creates an Access Graph's
 * Crown Jewel Resource.
 *
 * @generated from message prehog.v1alpha.AccessGraphCrownJewelCreateEvent
 */
export class AccessGraphCrownJewelCreateEvent extends Message<AccessGraphCrownJewelCreateEvent> {
  constructor(data?: PartialMessage<AccessGraphCrownJewelCreateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AccessGraphCrownJewelCreateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessGraphCrownJewelCreateEvent {
    return new AccessGraphCrownJewelCreateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessGraphCrownJewelCreateEvent {
    return new AccessGraphCrownJewelCreateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessGraphCrownJewelCreateEvent {
    return new AccessGraphCrownJewelCreateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AccessGraphCrownJewelCreateEvent | PlainMessage<AccessGraphCrownJewelCreateEvent> | undefined, b: AccessGraphCrownJewelCreateEvent | PlainMessage<AccessGraphCrownJewelCreateEvent> | undefined): boolean {
    return proto3.util.equals(AccessGraphCrownJewelCreateEvent, a, b);
  }
}

/**
 * ExternalAuditStorageAuthenticateEvent is emitted when the External Audit
 * Storage feature authenticates to the customer AWS account via OIDC connector.
 * The purpose is to have a regularly emitted event indicating that the External
 * Audit Storage feature is still in use.
 *
 * @generated from message prehog.v1alpha.ExternalAuditStorageAuthenticateEvent
 */
export class ExternalAuditStorageAuthenticateEvent extends Message<ExternalAuditStorageAuthenticateEvent> {
  constructor(data?: PartialMessage<ExternalAuditStorageAuthenticateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.ExternalAuditStorageAuthenticateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExternalAuditStorageAuthenticateEvent {
    return new ExternalAuditStorageAuthenticateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExternalAuditStorageAuthenticateEvent {
    return new ExternalAuditStorageAuthenticateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExternalAuditStorageAuthenticateEvent {
    return new ExternalAuditStorageAuthenticateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ExternalAuditStorageAuthenticateEvent | PlainMessage<ExternalAuditStorageAuthenticateEvent> | undefined, b: ExternalAuditStorageAuthenticateEvent | PlainMessage<ExternalAuditStorageAuthenticateEvent> | undefined): boolean {
    return proto3.util.equals(ExternalAuditStorageAuthenticateEvent, a, b);
  }
}

/**
 * SecurityReportGetResultEvent is emitted when the user requests a security report.
 *
 * @generated from message prehog.v1alpha.SecurityReportGetResultEvent
 */
export class SecurityReportGetResultEvent extends Message<SecurityReportGetResultEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * name is the name of the security report.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * days is the time range of the security reports in days.
   *
   * @generated from field: int32 days = 3;
   */
  days = 0;

  constructor(data?: PartialMessage<SecurityReportGetResultEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.SecurityReportGetResultEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "days", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecurityReportGetResultEvent {
    return new SecurityReportGetResultEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecurityReportGetResultEvent {
    return new SecurityReportGetResultEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecurityReportGetResultEvent {
    return new SecurityReportGetResultEvent().fromJsonString(jsonString, options);
  }

  static equals(a: SecurityReportGetResultEvent | PlainMessage<SecurityReportGetResultEvent> | undefined, b: SecurityReportGetResultEvent | PlainMessage<SecurityReportGetResultEvent> | undefined): boolean {
    return proto3.util.equals(SecurityReportGetResultEvent, a, b);
  }
}

/**
 * AuditQueryRunEvent is emitted when the user runs an audit query.
 *
 * @generated from message prehog.v1alpha.AuditQueryRunEvent
 */
export class AuditQueryRunEvent extends Message<AuditQueryRunEvent> {
  /**
   * anonymized
   *
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * days is the time range of the query in days.
   *
   * @generated from field: int32 days = 2;
   */
  days = 0;

  /**
   * is_success is true if the query was successful false if execution failed.
   *
   * @generated from field: bool is_success = 3;
   */
  isSuccess = false;

  constructor(data?: PartialMessage<AuditQueryRunEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.AuditQueryRunEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "days", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "is_success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditQueryRunEvent {
    return new AuditQueryRunEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditQueryRunEvent {
    return new AuditQueryRunEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditQueryRunEvent {
    return new AuditQueryRunEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AuditQueryRunEvent | PlainMessage<AuditQueryRunEvent> | undefined, b: AuditQueryRunEvent | PlainMessage<AuditQueryRunEvent> | undefined): boolean {
    return proto3.util.equals(AuditQueryRunEvent, a, b);
  }
}

/**
 * DiscoveryFetchEvent is emitted when a DiscoveryService polls for new resources of a given type
 *
 * @generated from message prehog.v1alpha.DiscoveryFetchEvent
 */
export class DiscoveryFetchEvent extends Message<DiscoveryFetchEvent> {
  /**
   * cloud_provider is the cloud provider used to fetch resources
   * Eg, AWS, Azure, GCP, Kubernetes
   *
   * PostHog property: tp.cloud
   *
   * @generated from field: string cloud_provider = 1;
   */
  cloudProvider = "";

  /**
   * resource_type is the type of resource that this fetch is polling.
   * It depends on the Cloud Provider (defined above).
   * Eg, rds, ec2, vm, aks, gce, app
   *
   * PostHog property: tp.resource_type
   *
   * @generated from field: string resource_type = 2;
   */
  resourceType = "";

  constructor(data?: PartialMessage<DiscoveryFetchEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.DiscoveryFetchEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cloud_provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoveryFetchEvent {
    return new DiscoveryFetchEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoveryFetchEvent {
    return new DiscoveryFetchEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoveryFetchEvent {
    return new DiscoveryFetchEvent().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoveryFetchEvent | PlainMessage<DiscoveryFetchEvent> | undefined, b: DiscoveryFetchEvent | PlainMessage<DiscoveryFetchEvent> | undefined): boolean {
    return proto3.util.equals(DiscoveryFetchEvent, a, b);
  }
}

/**
 * OktaAccessListSyncEvent is an event that is emitted after the Okta service synchronizes
 * access lists from Okta.
 *
 * @generated from message prehog.v1alpha.OktaAccessListSyncEvent
 */
export class OktaAccessListSyncEvent extends Message<OktaAccessListSyncEvent> {
  /**
   * NumAppFilters is the number of application filters used for this sync.
   *
   * @generated from field: int32 num_app_filters = 1;
   */
  numAppFilters = 0;

  /**
   * NumGroupFilters is the number of group filters used for this sync.
   *
   * @generated from field: int32 num_group_filters = 2;
   */
  numGroupFilters = 0;

  /**
   * NumApps is the number of apps that were synchronized from this sync event.
   *
   * @generated from field: int32 num_apps = 3;
   */
  numApps = 0;

  /**
   * NumGroups is the number of groups that were synchronized from this sync event.
   *
   * @generated from field: int32 num_groups = 4;
   */
  numGroups = 0;

  /**
   * NumRoles are the number of roles that were created/updated.
   *
   * @generated from field: int32 num_roles = 5;
   */
  numRoles = 0;

  /**
   * NumAccessLists are the number of access lists that were created/updated.
   *
   * @generated from field: int32 num_access_lists = 6;
   */
  numAccessLists = 0;

  /**
   * NumAccessListMembers are the number of access list members that were created/updated.
   *
   * @generated from field: int32 num_access_list_members = 7;
   */
  numAccessListMembers = 0;

  constructor(data?: PartialMessage<OktaAccessListSyncEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.OktaAccessListSyncEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "num_app_filters", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "num_group_filters", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "num_apps", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "num_groups", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "num_roles", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "num_access_lists", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "num_access_list_members", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OktaAccessListSyncEvent {
    return new OktaAccessListSyncEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OktaAccessListSyncEvent {
    return new OktaAccessListSyncEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OktaAccessListSyncEvent {
    return new OktaAccessListSyncEvent().fromJsonString(jsonString, options);
  }

  static equals(a: OktaAccessListSyncEvent | PlainMessage<OktaAccessListSyncEvent> | undefined, b: OktaAccessListSyncEvent | PlainMessage<OktaAccessListSyncEvent> | undefined): boolean {
    return proto3.util.equals(OktaAccessListSyncEvent, a, b);
  }
}

/**
 * DatabaseUserCreatedEvent is an event that is emitted after database service performs automatic user provisioning.
 *
 * @generated from message prehog.v1alpha.DatabaseUserCreatedEvent
 */
export class DatabaseUserCreatedEvent extends Message<DatabaseUserCreatedEvent> {
  /**
   * Database metadata.
   *
   * @generated from field: prehog.v1alpha.SessionStartDatabaseMetadata database = 1;
   */
  database?: SessionStartDatabaseMetadata;

  /**
   * Teleport user name. Anonymized.
   *
   * @generated from field: string user_name = 2;
   */
  userName = "";

  /**
   * Number of database roles.
   *
   * @generated from field: int32 num_roles = 3;
   */
  numRoles = 0;

  constructor(data?: PartialMessage<DatabaseUserCreatedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.DatabaseUserCreatedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "database", kind: "message", T: SessionStartDatabaseMetadata },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "num_roles", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatabaseUserCreatedEvent {
    return new DatabaseUserCreatedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatabaseUserCreatedEvent {
    return new DatabaseUserCreatedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatabaseUserCreatedEvent {
    return new DatabaseUserCreatedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: DatabaseUserCreatedEvent | PlainMessage<DatabaseUserCreatedEvent> | undefined, b: DatabaseUserCreatedEvent | PlainMessage<DatabaseUserCreatedEvent> | undefined): boolean {
    return proto3.util.equals(DatabaseUserCreatedEvent, a, b);
  }
}

/**
 * DatabaseUserPermissionsUpdateEvent is an event that is emitted after database service updates the permissions for the database user.
 *
 * @generated from message prehog.v1alpha.DatabaseUserPermissionsUpdateEvent
 */
export class DatabaseUserPermissionsUpdateEvent extends Message<DatabaseUserPermissionsUpdateEvent> {
  /**
   * Database metadata.
   *
   * @generated from field: prehog.v1alpha.SessionStartDatabaseMetadata database = 1;
   */
  database?: SessionStartDatabaseMetadata;

  /**
   * Teleport user name. Anonymized.
   *
   * @generated from field: string user_name = 2;
   */
  userName = "";

  /**
   * How many tables were affected.
   *
   * @generated from field: int32 num_tables = 3;
   */
  numTables = 0;

  /**
   * How many total table permissions were given to the user.
   * For example {SELECT,UPDATE} on ten tables gives a total of twenty.
   *
   * @generated from field: int32 num_tables_permissions = 4;
   */
  numTablesPermissions = 0;

  constructor(data?: PartialMessage<DatabaseUserPermissionsUpdateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.DatabaseUserPermissionsUpdateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "database", kind: "message", T: SessionStartDatabaseMetadata },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "num_tables", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "num_tables_permissions", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatabaseUserPermissionsUpdateEvent {
    return new DatabaseUserPermissionsUpdateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatabaseUserPermissionsUpdateEvent {
    return new DatabaseUserPermissionsUpdateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatabaseUserPermissionsUpdateEvent {
    return new DatabaseUserPermissionsUpdateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: DatabaseUserPermissionsUpdateEvent | PlainMessage<DatabaseUserPermissionsUpdateEvent> | undefined, b: DatabaseUserPermissionsUpdateEvent | PlainMessage<DatabaseUserPermissionsUpdateEvent> | undefined): boolean {
    return proto3.util.equals(DatabaseUserPermissionsUpdateEvent, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.SubmitEventRequest
 */
export class SubmitEventRequest extends Message<SubmitEventRequest> {
  /**
   * anonymized, 32 bytes (HMAC-SHA-256) encoded in base64
   *
   * PostHog property: tp.cluster_name (still in base64)
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * optional, will default to the ingest time if unset
   *
   * PostHog timestamp
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  /**
   * the event being submitted
   *
   * @generated from oneof prehog.v1alpha.SubmitEventRequest.event
   */
  event: {
    /**
     * @generated from field: prehog.v1alpha.UserLoginEvent user_login = 3;
     */
    value: UserLoginEvent;
    case: "userLogin";
  } | {
    /**
     * @generated from field: prehog.v1alpha.SSOCreateEvent sso_create = 4;
     */
    value: SSOCreateEvent;
    case: "ssoCreate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.ResourceCreateEvent resource_create = 5;
     */
    value: ResourceCreateEvent;
    case: "resourceCreate";
  } | {
    /**
     * REMOVE IN V14: Use session_start_v2 instead
     *
     * @generated from field: prehog.v1alpha.SessionStartEvent session_start = 6;
     */
    value: SessionStartEvent;
    case: "sessionStart";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIBannerClickEvent ui_banner_click = 7;
     */
    value: UIBannerClickEvent;
    case: "uiBannerClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIOnboardCompleteGoToDashboardClickEvent ui_onboard_complete_go_to_dashboard_click = 9;
     */
    value: UIOnboardCompleteGoToDashboardClickEvent;
    case: "uiOnboardCompleteGoToDashboardClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIOnboardAddFirstResourceClickEvent ui_onboard_add_first_resource_click = 10;
     */
    value: UIOnboardAddFirstResourceClickEvent;
    case: "uiOnboardAddFirstResourceClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIOnboardAddFirstResourceLaterClickEvent ui_onboard_add_first_resource_later_click = 11;
     */
    value: UIOnboardAddFirstResourceLaterClickEvent;
    case: "uiOnboardAddFirstResourceLaterClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIOnboardSetCredentialSubmitEvent ui_onboard_set_credential_submit = 12;
     */
    value: UIOnboardSetCredentialSubmitEvent;
    case: "uiOnboardSetCredentialSubmit";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIOnboardRegisterChallengeSubmitEvent ui_onboard_register_challenge_submit = 13;
     */
    value: UIOnboardRegisterChallengeSubmitEvent;
    case: "uiOnboardRegisterChallengeSubmit";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIRecoveryCodesContinueClickEvent ui_recovery_codes_continue_click = 14;
     */
    value: UIRecoveryCodesContinueClickEvent;
    case: "uiRecoveryCodesContinueClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIRecoveryCodesCopyClickEvent ui_recovery_codes_copy_click = 15;
     */
    value: UIRecoveryCodesCopyClickEvent;
    case: "uiRecoveryCodesCopyClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIRecoveryCodesPrintClickEvent ui_recovery_codes_print_click = 16;
     */
    value: UIRecoveryCodesPrintClickEvent;
    case: "uiRecoveryCodesPrintClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverStartedEvent ui_discover_started_event = 17;
     */
    value: UIDiscoverStartedEvent;
    case: "uiDiscoverStartedEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverResourceSelectionEvent ui_discover_resource_selection_event = 18;
     */
    value: UIDiscoverResourceSelectionEvent;
    case: "uiDiscoverResourceSelectionEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UserCertificateIssuedEvent user_certificate_issued_event = 19;
     */
    value: UserCertificateIssuedEvent;
    case: "userCertificateIssuedEvent";
  } | {
    /**
     * Note: semantics of SessionStartEvent type values have changed to
     * differentiate SSH from Kubernetes exec sessions (as well as adding
     * db/app/desktop events). The structures are the same, however, so we don't
     * need a new message type.
     *
     * @generated from field: prehog.v1alpha.SessionStartEvent session_start_v2 = 20;
     */
    value: SessionStartEvent;
    case: "sessionStartV2";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverDeployServiceEvent ui_discover_deploy_service_event = 21;
     */
    value: UIDiscoverDeployServiceEvent;
    case: "uiDiscoverDeployServiceEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverDatabaseRegisterEvent ui_discover_database_register_event = 22;
     */
    value: UIDiscoverDatabaseRegisterEvent;
    case: "uiDiscoverDatabaseRegisterEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent ui_discover_database_configure_mtls_event = 23;
     */
    value: UIDiscoverDatabaseConfigureMTLSEvent;
    case: "uiDiscoverDatabaseConfigureMtlsEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent ui_discover_desktop_active_directory_tools_install_event = 24;
     */
    value: UIDiscoverDesktopActiveDirectoryToolsInstallEvent;
    case: "uiDiscoverDesktopActiveDirectoryToolsInstallEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent ui_discover_desktop_active_directory_configure_event = 25;
     */
    value: UIDiscoverDesktopActiveDirectoryConfigureEvent;
    case: "uiDiscoverDesktopActiveDirectoryConfigureEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent ui_discover_auto_discovered_resources_event = 26;
     */
    value: UIDiscoverAutoDiscoveredResourcesEvent;
    case: "uiDiscoverAutoDiscoveredResourcesEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent ui_discover_database_configure_iam_policy_event = 27;
     */
    value: UIDiscoverDatabaseConfigureIAMPolicyEvent;
    case: "uiDiscoverDatabaseConfigureIamPolicyEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent ui_discover_principals_configure_event = 28;
     */
    value: UIDiscoverPrincipalsConfigureEvent;
    case: "uiDiscoverPrincipalsConfigureEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverTestConnectionEvent ui_discover_test_connection_event = 29;
     */
    value: UIDiscoverTestConnectionEvent;
    case: "uiDiscoverTestConnectionEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverCompletedEvent ui_discover_completed_event = 30;
     */
    value: UIDiscoverCompletedEvent;
    case: "uiDiscoverCompletedEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.RoleCreateEvent role_create = 31;
     */
    value: RoleCreateEvent;
    case: "roleCreate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UICreateNewRoleClickEvent ui_create_new_role_click = 32;
     */
    value: UICreateNewRoleClickEvent;
    case: "uiCreateNewRoleClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UICreateNewRoleSaveClickEvent ui_create_new_role_save_click = 33;
     */
    value: UICreateNewRoleSaveClickEvent;
    case: "uiCreateNewRoleSaveClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UICreateNewRoleCancelClickEvent ui_create_new_role_cancel_click = 34;
     */
    value: UICreateNewRoleCancelClickEvent;
    case: "uiCreateNewRoleCancelClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UICreateNewRoleViewDocumentationClickEvent ui_create_new_role_view_documentation_click = 35;
     */
    value: UICreateNewRoleViewDocumentationClickEvent;
    case: "uiCreateNewRoleViewDocumentationClick";
  } | {
    /**
     * @generated from field: prehog.v1alpha.KubeRequestEvent kube_request = 36;
     */
    value: KubeRequestEvent;
    case: "kubeRequest";
  } | {
    /**
     * @generated from field: prehog.v1alpha.SFTPEvent sftp = 37;
     */
    value: SFTPEvent;
    case: "sftp";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AgentMetadataEvent agent_metadata_event = 38;
     */
    value: AgentMetadataEvent;
    case: "agentMetadataEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.ResourceHeartbeatEvent resource_heartbeat = 39;
     */
    value: ResourceHeartbeatEvent;
    case: "resourceHeartbeat";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverIntegrationAWSOIDCConnectEvent ui_discover_integration_aws_oidc_connect_event = 40;
     */
    value: UIDiscoverIntegrationAWSOIDCConnectEvent;
    case: "uiDiscoverIntegrationAwsOidcConnectEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverDatabaseRDSEnrollEvent ui_discover_database_rds_enroll_event = 41;
     */
    value: UIDiscoverDatabaseRDSEnrollEvent;
    case: "uiDiscoverDatabaseRdsEnrollEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UICallToActionClickEvent ui_call_to_action_click_event = 42;
     */
    value: UICallToActionClickEvent;
    case: "uiCallToActionClickEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AssistCompletionEvent assist_completion = 43;
     */
    value: AssistCompletionEvent;
    case: "assistCompletion";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIIntegrationEnrollStartEvent ui_integration_enroll_start_event = 44;
     */
    value: UIIntegrationEnrollStartEvent;
    case: "uiIntegrationEnrollStartEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIIntegrationEnrollCompleteEvent ui_integration_enroll_complete_event = 45;
     */
    value: UIIntegrationEnrollCompleteEvent;
    case: "uiIntegrationEnrollCompleteEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.EditorChangeEvent editor_change_event = 46;
     */
    value: EditorChangeEvent;
    case: "editorChangeEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.BotCreateEvent bot_create = 47;
     */
    value: BotCreateEvent;
    case: "botCreate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIOnboardQuestionnaireSubmitEvent ui_onboard_questionnaire_submit = 48;
     */
    value: UIOnboardQuestionnaireSubmitEvent;
    case: "uiOnboardQuestionnaireSubmit";
  } | {
    /**
     * @generated from field: prehog.v1alpha.BotJoinEvent bot_join = 49;
     */
    value: BotJoinEvent;
    case: "botJoin";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AssistExecutionEvent assist_execution = 50;
     */
    value: AssistExecutionEvent;
    case: "assistExecution";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AssistNewConversationEvent assist_new_conversation = 51;
     */
    value: AssistNewConversationEvent;
    case: "assistNewConversation";
  } | {
    /**
     * @generated from field: prehog.v1alpha.DeviceAuthenticateEvent device_authenticate_event = 52;
     */
    value: DeviceAuthenticateEvent;
    case: "deviceAuthenticateEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.FeatureRecommendationEvent feature_recommendation_event = 53;
     */
    value: FeatureRecommendationEvent;
    case: "featureRecommendationEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AssistAccessRequestEvent assist_access_request = 54;
     */
    value: AssistAccessRequestEvent;
    case: "assistAccessRequest";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AssistActionEvent assist_action = 55;
     */
    value: AssistActionEvent;
    case: "assistAction";
  } | {
    /**
     * @generated from field: prehog.v1alpha.DeviceEnrollEvent device_enroll_event = 56;
     */
    value: DeviceEnrollEvent;
    case: "deviceEnrollEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.LicenseLimitEvent license_limit_event = 57;
     */
    value: LicenseLimitEvent;
    case: "licenseLimitEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListCreateEvent access_list_create = 58;
     */
    value: AccessListCreateEvent;
    case: "accessListCreate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListUpdateEvent access_list_update = 59;
     */
    value: AccessListUpdateEvent;
    case: "accessListUpdate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListDeleteEvent access_list_delete = 60;
     */
    value: AccessListDeleteEvent;
    case: "accessListDelete";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListMemberCreateEvent access_list_member_create = 61;
     */
    value: AccessListMemberCreateEvent;
    case: "accessListMemberCreate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListMemberUpdateEvent access_list_member_update = 62;
     */
    value: AccessListMemberUpdateEvent;
    case: "accessListMemberUpdate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListMemberDeleteEvent access_list_member_delete = 63;
     */
    value: AccessListMemberDeleteEvent;
    case: "accessListMemberDelete";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListGrantsToUserEvent access_list_grants_to_user = 64;
     */
    value: AccessListGrantsToUserEvent;
    case: "accessListGrantsToUser";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverEC2InstanceSelectionEvent ui_discover_ec2_instance_selection = 65;
     */
    value: UIDiscoverEC2InstanceSelectionEvent;
    case: "uiDiscoverEc2InstanceSelection";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverDeployEICEEvent ui_discover_deploy_eice = 66;
     */
    value: UIDiscoverDeployEICEEvent;
    case: "uiDiscoverDeployEice";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverCreateNodeEvent ui_discover_create_node = 67;
     */
    value: UIDiscoverCreateNodeEvent;
    case: "uiDiscoverCreateNode";
  } | {
    /**
     * @generated from field: prehog.v1alpha.DesktopDirectoryShareEvent desktop_directory_share = 68;
     */
    value: DesktopDirectoryShareEvent;
    case: "desktopDirectoryShare";
  } | {
    /**
     * @generated from field: prehog.v1alpha.DesktopClipboardEvent desktop_clipboard_transfer = 69;
     */
    value: DesktopClipboardEvent;
    case: "desktopClipboardTransfer";
  } | {
    /**
     * @generated from field: prehog.v1alpha.TAGExecuteQueryEvent tag_execute_query = 70;
     */
    value: TAGExecuteQueryEvent;
    case: "tagExecuteQuery";
  } | {
    /**
     * @generated from field: prehog.v1alpha.ExternalAuditStorageAuthenticateEvent external_audit_storage_authenticate = 71;
     */
    value: ExternalAuditStorageAuthenticateEvent;
    case: "externalAuditStorageAuthenticate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.SecurityReportGetResultEvent security_report_get_result = 72;
     */
    value: SecurityReportGetResultEvent;
    case: "securityReportGetResult";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AuditQueryRunEvent audit_query_run = 73;
     */
    value: AuditQueryRunEvent;
    case: "auditQueryRun";
  } | {
    /**
     * @generated from field: prehog.v1alpha.DiscoveryFetchEvent discovery_fetch_event = 74;
     */
    value: DiscoveryFetchEvent;
    case: "discoveryFetchEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListReviewCreateEvent access_list_review_create = 75;
     */
    value: AccessListReviewCreateEvent;
    case: "accessListReviewCreate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListReviewDeleteEvent access_list_review_delete = 76;
     */
    value: AccessListReviewDeleteEvent;
    case: "accessListReviewDelete";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessListReviewComplianceEvent access_list_review_compliance = 77;
     */
    value: AccessListReviewComplianceEvent;
    case: "accessListReviewCompliance";
  } | {
    /**
     * @generated from field: prehog.v1alpha.MFAAuthenticationEvent mfa_authentication_event = 78;
     */
    value: MFAAuthenticationEvent;
    case: "mfaAuthenticationEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.SPIFFESVIDIssuedEvent spiffe_svid_issued = 79;
     */
    value: SPIFFESVIDIssuedEvent;
    case: "spiffeSvidIssued";
  } | {
    /**
     * @generated from field: prehog.v1alpha.OktaAccessListSyncEvent okta_access_list_sync = 80;
     */
    value: OktaAccessListSyncEvent;
    case: "oktaAccessListSync";
  } | {
    /**
     * @generated from field: prehog.v1alpha.DatabaseUserCreatedEvent database_user_created = 81;
     */
    value: DatabaseUserCreatedEvent;
    case: "databaseUserCreated";
  } | {
    /**
     * @generated from field: prehog.v1alpha.DatabaseUserPermissionsUpdateEvent database_user_permissions_updated = 82;
     */
    value: DatabaseUserPermissionsUpdateEvent;
    case: "databaseUserPermissionsUpdated";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent ui_discover_create_discovery_config = 83;
     */
    value: UIDiscoverCreateDiscoveryConfigEvent;
    case: "uiDiscoverCreateDiscoveryConfig";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverKubeEKSEnrollEvent ui_discover_kube_eks_enroll_event = 84;
     */
    value: UIDiscoverKubeEKSEnrollEvent;
    case: "uiDiscoverKubeEksEnrollEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIDiscoverCreateAppServerEvent ui_discover_create_app_server_event = 85;
     */
    value: UIDiscoverCreateAppServerEvent;
    case: "uiDiscoverCreateAppServerEvent";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessGraphGitlabScanEvent access_graph_gitlab_scan = 86;
     */
    value: AccessGraphGitlabScanEvent;
    case: "accessGraphGitlabScan";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessGraphSecretsScanAuthorizedKeysEvent access_graph_secrets_scan_authorized_keys = 87;
     */
    value: AccessGraphSecretsScanAuthorizedKeysEvent;
    case: "accessGraphSecretsScanAuthorizedKeys";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessGraphSecretsScanSSHPrivateKeysEvent access_graph_secrets_scan_ssh_private_keys = 88;
     */
    value: AccessGraphSecretsScanSSHPrivateKeysEvent;
    case: "accessGraphSecretsScanSshPrivateKeys";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessGraphAWSScanEvent access_graph_aws_scan = 89;
     */
    value: AccessGraphAWSScanEvent;
    case: "accessGraphAwsScan";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessGraphAccessPathChangedEvent access_graph_access_path_changed = 90;
     */
    value: AccessGraphAccessPathChangedEvent;
    case: "accessGraphAccessPathChanged";
  } | {
    /**
     * @generated from field: prehog.v1alpha.AccessGraphCrownJewelCreateEvent access_graph_crown_jewel_create = 91;
     */
    value: AccessGraphCrownJewelCreateEvent;
    case: "accessGraphCrownJewelCreate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.UIAccessGraphCrownJewelDiffViewEvent ui_access_graph_crown_jewel_diff_view = 92;
     */
    value: UIAccessGraphCrownJewelDiffViewEvent;
    case: "uiAccessGraphCrownJewelDiffView";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SubmitEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.SubmitEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
    { no: 3, name: "user_login", kind: "message", T: UserLoginEvent, oneof: "event" },
    { no: 4, name: "sso_create", kind: "message", T: SSOCreateEvent, oneof: "event" },
    { no: 5, name: "resource_create", kind: "message", T: ResourceCreateEvent, oneof: "event" },
    { no: 6, name: "session_start", kind: "message", T: SessionStartEvent, oneof: "event" },
    { no: 7, name: "ui_banner_click", kind: "message", T: UIBannerClickEvent, oneof: "event" },
    { no: 9, name: "ui_onboard_complete_go_to_dashboard_click", kind: "message", T: UIOnboardCompleteGoToDashboardClickEvent, oneof: "event" },
    { no: 10, name: "ui_onboard_add_first_resource_click", kind: "message", T: UIOnboardAddFirstResourceClickEvent, oneof: "event" },
    { no: 11, name: "ui_onboard_add_first_resource_later_click", kind: "message", T: UIOnboardAddFirstResourceLaterClickEvent, oneof: "event" },
    { no: 12, name: "ui_onboard_set_credential_submit", kind: "message", T: UIOnboardSetCredentialSubmitEvent, oneof: "event" },
    { no: 13, name: "ui_onboard_register_challenge_submit", kind: "message", T: UIOnboardRegisterChallengeSubmitEvent, oneof: "event" },
    { no: 14, name: "ui_recovery_codes_continue_click", kind: "message", T: UIRecoveryCodesContinueClickEvent, oneof: "event" },
    { no: 15, name: "ui_recovery_codes_copy_click", kind: "message", T: UIRecoveryCodesCopyClickEvent, oneof: "event" },
    { no: 16, name: "ui_recovery_codes_print_click", kind: "message", T: UIRecoveryCodesPrintClickEvent, oneof: "event" },
    { no: 17, name: "ui_discover_started_event", kind: "message", T: UIDiscoverStartedEvent, oneof: "event" },
    { no: 18, name: "ui_discover_resource_selection_event", kind: "message", T: UIDiscoverResourceSelectionEvent, oneof: "event" },
    { no: 19, name: "user_certificate_issued_event", kind: "message", T: UserCertificateIssuedEvent, oneof: "event" },
    { no: 20, name: "session_start_v2", kind: "message", T: SessionStartEvent, oneof: "event" },
    { no: 21, name: "ui_discover_deploy_service_event", kind: "message", T: UIDiscoverDeployServiceEvent, oneof: "event" },
    { no: 22, name: "ui_discover_database_register_event", kind: "message", T: UIDiscoverDatabaseRegisterEvent, oneof: "event" },
    { no: 23, name: "ui_discover_database_configure_mtls_event", kind: "message", T: UIDiscoverDatabaseConfigureMTLSEvent, oneof: "event" },
    { no: 24, name: "ui_discover_desktop_active_directory_tools_install_event", kind: "message", T: UIDiscoverDesktopActiveDirectoryToolsInstallEvent, oneof: "event" },
    { no: 25, name: "ui_discover_desktop_active_directory_configure_event", kind: "message", T: UIDiscoverDesktopActiveDirectoryConfigureEvent, oneof: "event" },
    { no: 26, name: "ui_discover_auto_discovered_resources_event", kind: "message", T: UIDiscoverAutoDiscoveredResourcesEvent, oneof: "event" },
    { no: 27, name: "ui_discover_database_configure_iam_policy_event", kind: "message", T: UIDiscoverDatabaseConfigureIAMPolicyEvent, oneof: "event" },
    { no: 28, name: "ui_discover_principals_configure_event", kind: "message", T: UIDiscoverPrincipalsConfigureEvent, oneof: "event" },
    { no: 29, name: "ui_discover_test_connection_event", kind: "message", T: UIDiscoverTestConnectionEvent, oneof: "event" },
    { no: 30, name: "ui_discover_completed_event", kind: "message", T: UIDiscoverCompletedEvent, oneof: "event" },
    { no: 31, name: "role_create", kind: "message", T: RoleCreateEvent, oneof: "event" },
    { no: 32, name: "ui_create_new_role_click", kind: "message", T: UICreateNewRoleClickEvent, oneof: "event" },
    { no: 33, name: "ui_create_new_role_save_click", kind: "message", T: UICreateNewRoleSaveClickEvent, oneof: "event" },
    { no: 34, name: "ui_create_new_role_cancel_click", kind: "message", T: UICreateNewRoleCancelClickEvent, oneof: "event" },
    { no: 35, name: "ui_create_new_role_view_documentation_click", kind: "message", T: UICreateNewRoleViewDocumentationClickEvent, oneof: "event" },
    { no: 36, name: "kube_request", kind: "message", T: KubeRequestEvent, oneof: "event" },
    { no: 37, name: "sftp", kind: "message", T: SFTPEvent, oneof: "event" },
    { no: 38, name: "agent_metadata_event", kind: "message", T: AgentMetadataEvent, oneof: "event" },
    { no: 39, name: "resource_heartbeat", kind: "message", T: ResourceHeartbeatEvent, oneof: "event" },
    { no: 40, name: "ui_discover_integration_aws_oidc_connect_event", kind: "message", T: UIDiscoverIntegrationAWSOIDCConnectEvent, oneof: "event" },
    { no: 41, name: "ui_discover_database_rds_enroll_event", kind: "message", T: UIDiscoverDatabaseRDSEnrollEvent, oneof: "event" },
    { no: 42, name: "ui_call_to_action_click_event", kind: "message", T: UICallToActionClickEvent, oneof: "event" },
    { no: 43, name: "assist_completion", kind: "message", T: AssistCompletionEvent, oneof: "event" },
    { no: 44, name: "ui_integration_enroll_start_event", kind: "message", T: UIIntegrationEnrollStartEvent, oneof: "event" },
    { no: 45, name: "ui_integration_enroll_complete_event", kind: "message", T: UIIntegrationEnrollCompleteEvent, oneof: "event" },
    { no: 46, name: "editor_change_event", kind: "message", T: EditorChangeEvent, oneof: "event" },
    { no: 47, name: "bot_create", kind: "message", T: BotCreateEvent, oneof: "event" },
    { no: 48, name: "ui_onboard_questionnaire_submit", kind: "message", T: UIOnboardQuestionnaireSubmitEvent, oneof: "event" },
    { no: 49, name: "bot_join", kind: "message", T: BotJoinEvent, oneof: "event" },
    { no: 50, name: "assist_execution", kind: "message", T: AssistExecutionEvent, oneof: "event" },
    { no: 51, name: "assist_new_conversation", kind: "message", T: AssistNewConversationEvent, oneof: "event" },
    { no: 52, name: "device_authenticate_event", kind: "message", T: DeviceAuthenticateEvent, oneof: "event" },
    { no: 53, name: "feature_recommendation_event", kind: "message", T: FeatureRecommendationEvent, oneof: "event" },
    { no: 54, name: "assist_access_request", kind: "message", T: AssistAccessRequestEvent, oneof: "event" },
    { no: 55, name: "assist_action", kind: "message", T: AssistActionEvent, oneof: "event" },
    { no: 56, name: "device_enroll_event", kind: "message", T: DeviceEnrollEvent, oneof: "event" },
    { no: 57, name: "license_limit_event", kind: "message", T: LicenseLimitEvent, oneof: "event" },
    { no: 58, name: "access_list_create", kind: "message", T: AccessListCreateEvent, oneof: "event" },
    { no: 59, name: "access_list_update", kind: "message", T: AccessListUpdateEvent, oneof: "event" },
    { no: 60, name: "access_list_delete", kind: "message", T: AccessListDeleteEvent, oneof: "event" },
    { no: 61, name: "access_list_member_create", kind: "message", T: AccessListMemberCreateEvent, oneof: "event" },
    { no: 62, name: "access_list_member_update", kind: "message", T: AccessListMemberUpdateEvent, oneof: "event" },
    { no: 63, name: "access_list_member_delete", kind: "message", T: AccessListMemberDeleteEvent, oneof: "event" },
    { no: 64, name: "access_list_grants_to_user", kind: "message", T: AccessListGrantsToUserEvent, oneof: "event" },
    { no: 65, name: "ui_discover_ec2_instance_selection", kind: "message", T: UIDiscoverEC2InstanceSelectionEvent, oneof: "event" },
    { no: 66, name: "ui_discover_deploy_eice", kind: "message", T: UIDiscoverDeployEICEEvent, oneof: "event" },
    { no: 67, name: "ui_discover_create_node", kind: "message", T: UIDiscoverCreateNodeEvent, oneof: "event" },
    { no: 68, name: "desktop_directory_share", kind: "message", T: DesktopDirectoryShareEvent, oneof: "event" },
    { no: 69, name: "desktop_clipboard_transfer", kind: "message", T: DesktopClipboardEvent, oneof: "event" },
    { no: 70, name: "tag_execute_query", kind: "message", T: TAGExecuteQueryEvent, oneof: "event" },
    { no: 71, name: "external_audit_storage_authenticate", kind: "message", T: ExternalAuditStorageAuthenticateEvent, oneof: "event" },
    { no: 72, name: "security_report_get_result", kind: "message", T: SecurityReportGetResultEvent, oneof: "event" },
    { no: 73, name: "audit_query_run", kind: "message", T: AuditQueryRunEvent, oneof: "event" },
    { no: 74, name: "discovery_fetch_event", kind: "message", T: DiscoveryFetchEvent, oneof: "event" },
    { no: 75, name: "access_list_review_create", kind: "message", T: AccessListReviewCreateEvent, oneof: "event" },
    { no: 76, name: "access_list_review_delete", kind: "message", T: AccessListReviewDeleteEvent, oneof: "event" },
    { no: 77, name: "access_list_review_compliance", kind: "message", T: AccessListReviewComplianceEvent, oneof: "event" },
    { no: 78, name: "mfa_authentication_event", kind: "message", T: MFAAuthenticationEvent, oneof: "event" },
    { no: 79, name: "spiffe_svid_issued", kind: "message", T: SPIFFESVIDIssuedEvent, oneof: "event" },
    { no: 80, name: "okta_access_list_sync", kind: "message", T: OktaAccessListSyncEvent, oneof: "event" },
    { no: 81, name: "database_user_created", kind: "message", T: DatabaseUserCreatedEvent, oneof: "event" },
    { no: 82, name: "database_user_permissions_updated", kind: "message", T: DatabaseUserPermissionsUpdateEvent, oneof: "event" },
    { no: 83, name: "ui_discover_create_discovery_config", kind: "message", T: UIDiscoverCreateDiscoveryConfigEvent, oneof: "event" },
    { no: 84, name: "ui_discover_kube_eks_enroll_event", kind: "message", T: UIDiscoverKubeEKSEnrollEvent, oneof: "event" },
    { no: 85, name: "ui_discover_create_app_server_event", kind: "message", T: UIDiscoverCreateAppServerEvent, oneof: "event" },
    { no: 86, name: "access_graph_gitlab_scan", kind: "message", T: AccessGraphGitlabScanEvent, oneof: "event" },
    { no: 87, name: "access_graph_secrets_scan_authorized_keys", kind: "message", T: AccessGraphSecretsScanAuthorizedKeysEvent, oneof: "event" },
    { no: 88, name: "access_graph_secrets_scan_ssh_private_keys", kind: "message", T: AccessGraphSecretsScanSSHPrivateKeysEvent, oneof: "event" },
    { no: 89, name: "access_graph_aws_scan", kind: "message", T: AccessGraphAWSScanEvent, oneof: "event" },
    { no: 90, name: "access_graph_access_path_changed", kind: "message", T: AccessGraphAccessPathChangedEvent, oneof: "event" },
    { no: 91, name: "access_graph_crown_jewel_create", kind: "message", T: AccessGraphCrownJewelCreateEvent, oneof: "event" },
    { no: 92, name: "ui_access_graph_crown_jewel_diff_view", kind: "message", T: UIAccessGraphCrownJewelDiffViewEvent, oneof: "event" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitEventRequest {
    return new SubmitEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitEventRequest {
    return new SubmitEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitEventRequest {
    return new SubmitEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitEventRequest | PlainMessage<SubmitEventRequest> | undefined, b: SubmitEventRequest | PlainMessage<SubmitEventRequest> | undefined): boolean {
    return proto3.util.equals(SubmitEventRequest, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.SubmitEventResponse
 */
export class SubmitEventResponse extends Message<SubmitEventResponse> {
  constructor(data?: PartialMessage<SubmitEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.SubmitEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitEventResponse {
    return new SubmitEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitEventResponse {
    return new SubmitEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitEventResponse {
    return new SubmitEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitEventResponse | PlainMessage<SubmitEventResponse> | undefined, b: SubmitEventResponse | PlainMessage<SubmitEventResponse> | undefined): boolean {
    return proto3.util.equals(SubmitEventResponse, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.SubmitEventsRequest
 */
export class SubmitEventsRequest extends Message<SubmitEventsRequest> {
  /**
   * individual events to be submitted in a batch, up to 500 at once
   *
   * @generated from field: repeated prehog.v1alpha.SubmitEventRequest events = 1;
   */
  events: SubmitEventRequest[] = [];

  constructor(data?: PartialMessage<SubmitEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.SubmitEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: SubmitEventRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitEventsRequest {
    return new SubmitEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitEventsRequest {
    return new SubmitEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitEventsRequest {
    return new SubmitEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitEventsRequest | PlainMessage<SubmitEventsRequest> | undefined, b: SubmitEventsRequest | PlainMessage<SubmitEventsRequest> | undefined): boolean {
    return proto3.util.equals(SubmitEventsRequest, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.SubmitEventsResponse
 */
export class SubmitEventsResponse extends Message<SubmitEventsResponse> {
  constructor(data?: PartialMessage<SubmitEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.SubmitEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitEventsResponse {
    return new SubmitEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitEventsResponse {
    return new SubmitEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitEventsResponse {
    return new SubmitEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitEventsResponse | PlainMessage<SubmitEventsResponse> | undefined, b: SubmitEventsResponse | PlainMessage<SubmitEventsResponse> | undefined): boolean {
    return proto3.util.equals(SubmitEventsResponse, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.HelloTeleportRequest
 */
export class HelloTeleportRequest extends Message<HelloTeleportRequest> {
  constructor(data?: PartialMessage<HelloTeleportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.HelloTeleportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloTeleportRequest {
    return new HelloTeleportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloTeleportRequest {
    return new HelloTeleportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloTeleportRequest {
    return new HelloTeleportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HelloTeleportRequest | PlainMessage<HelloTeleportRequest> | undefined, b: HelloTeleportRequest | PlainMessage<HelloTeleportRequest> | undefined): boolean {
    return proto3.util.equals(HelloTeleportRequest, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.HelloTeleportResponse
 */
export class HelloTeleportResponse extends Message<HelloTeleportResponse> {
  constructor(data?: PartialMessage<HelloTeleportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.HelloTeleportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloTeleportResponse {
    return new HelloTeleportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloTeleportResponse {
    return new HelloTeleportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloTeleportResponse {
    return new HelloTeleportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HelloTeleportResponse | PlainMessage<HelloTeleportResponse> | undefined, b: HelloTeleportResponse | PlainMessage<HelloTeleportResponse> | undefined): boolean {
    return proto3.util.equals(HelloTeleportResponse, a, b);
  }
}

