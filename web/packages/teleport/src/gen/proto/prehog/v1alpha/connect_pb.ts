//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file prehog/v1alpha/connect.proto (package prehog.v1alpha, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message prehog.v1alpha.ConnectClusterLoginEvent
 */
export class ConnectClusterLoginEvent extends Message<ConnectClusterLoginEvent> {
  /**
   * anonymized
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * anonymized
   *
   * @generated from field: string user_name = 2;
   */
  userName = "";

  /**
   * local/github/saml/oidc/passwordless
   *
   * @generated from field: string connector_type = 3;
   */
  connectorType = "";

  /**
   * @generated from field: string arch = 4;
   */
  arch = "";

  /**
   * @generated from field: string os = 5;
   */
  os = "";

  /**
   * @generated from field: string os_version = 6;
   */
  osVersion = "";

  /**
   * @generated from field: string app_version = 7;
   */
  appVersion = "";

  constructor(data?: PartialMessage<ConnectClusterLoginEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.ConnectClusterLoginEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "connector_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "arch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "os", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "os_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "app_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectClusterLoginEvent {
    return new ConnectClusterLoginEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectClusterLoginEvent {
    return new ConnectClusterLoginEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectClusterLoginEvent {
    return new ConnectClusterLoginEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectClusterLoginEvent | PlainMessage<ConnectClusterLoginEvent> | undefined, b: ConnectClusterLoginEvent | PlainMessage<ConnectClusterLoginEvent> | undefined): boolean {
    return proto3.util.equals(ConnectClusterLoginEvent, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.ConnectProtocolUseEvent
 */
export class ConnectProtocolUseEvent extends Message<ConnectProtocolUseEvent> {
  /**
   * anonymized
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * anonymized
   *
   * @generated from field: string user_name = 2;
   */
  userName = "";

  /**
   * one of ssh/db/kube
   *
   * @generated from field: string protocol = 3;
   */
  protocol = "";

  /**
   * origin denotes which part of Connect UI was used to access a resource.
   * One of resource_table/search_bar/connection_list/reopened_session/vnet (optional for backwards
   * compatibility).
   *
   * @generated from field: string origin = 4;
   */
  origin = "";

  /**
   * access_through describes whether a resource was accessed by speaking to the proxy service
   * directly, through a local proxy or through VNet.
   * One of proxy_service/local_proxy/vnet (optional for backwards compatibility).
   *
   * @generated from field: string access_through = 5;
   */
  accessThrough = "";

  constructor(data?: PartialMessage<ConnectProtocolUseEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.ConnectProtocolUseEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "access_through", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectProtocolUseEvent {
    return new ConnectProtocolUseEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectProtocolUseEvent {
    return new ConnectProtocolUseEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectProtocolUseEvent {
    return new ConnectProtocolUseEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectProtocolUseEvent | PlainMessage<ConnectProtocolUseEvent> | undefined, b: ConnectProtocolUseEvent | PlainMessage<ConnectProtocolUseEvent> | undefined): boolean {
    return proto3.util.equals(ConnectProtocolUseEvent, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.ConnectAccessRequestCreateEvent
 */
export class ConnectAccessRequestCreateEvent extends Message<ConnectAccessRequestCreateEvent> {
  /**
   * anonymized
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * anonymized
   *
   * @generated from field: string user_name = 2;
   */
  userName = "";

  /**
   * one of role/resource
   *
   * @generated from field: string kind = 3;
   */
  kind = "";

  constructor(data?: PartialMessage<ConnectAccessRequestCreateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.ConnectAccessRequestCreateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectAccessRequestCreateEvent {
    return new ConnectAccessRequestCreateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectAccessRequestCreateEvent {
    return new ConnectAccessRequestCreateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectAccessRequestCreateEvent {
    return new ConnectAccessRequestCreateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectAccessRequestCreateEvent | PlainMessage<ConnectAccessRequestCreateEvent> | undefined, b: ConnectAccessRequestCreateEvent | PlainMessage<ConnectAccessRequestCreateEvent> | undefined): boolean {
    return proto3.util.equals(ConnectAccessRequestCreateEvent, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.ConnectAccessRequestReviewEvent
 */
export class ConnectAccessRequestReviewEvent extends Message<ConnectAccessRequestReviewEvent> {
  /**
   * anonymized
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * anonymized
   *
   * @generated from field: string user_name = 2;
   */
  userName = "";

  constructor(data?: PartialMessage<ConnectAccessRequestReviewEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.ConnectAccessRequestReviewEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectAccessRequestReviewEvent {
    return new ConnectAccessRequestReviewEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectAccessRequestReviewEvent {
    return new ConnectAccessRequestReviewEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectAccessRequestReviewEvent {
    return new ConnectAccessRequestReviewEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectAccessRequestReviewEvent | PlainMessage<ConnectAccessRequestReviewEvent> | undefined, b: ConnectAccessRequestReviewEvent | PlainMessage<ConnectAccessRequestReviewEvent> | undefined): boolean {
    return proto3.util.equals(ConnectAccessRequestReviewEvent, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.ConnectAccessRequestAssumeRoleEvent
 */
export class ConnectAccessRequestAssumeRoleEvent extends Message<ConnectAccessRequestAssumeRoleEvent> {
  /**
   * anonymized
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * anonymized
   *
   * @generated from field: string user_name = 2;
   */
  userName = "";

  constructor(data?: PartialMessage<ConnectAccessRequestAssumeRoleEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.ConnectAccessRequestAssumeRoleEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectAccessRequestAssumeRoleEvent {
    return new ConnectAccessRequestAssumeRoleEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectAccessRequestAssumeRoleEvent {
    return new ConnectAccessRequestAssumeRoleEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectAccessRequestAssumeRoleEvent {
    return new ConnectAccessRequestAssumeRoleEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectAccessRequestAssumeRoleEvent | PlainMessage<ConnectAccessRequestAssumeRoleEvent> | undefined, b: ConnectAccessRequestAssumeRoleEvent | PlainMessage<ConnectAccessRequestAssumeRoleEvent> | undefined): boolean {
    return proto3.util.equals(ConnectAccessRequestAssumeRoleEvent, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.ConnectFileTransferRunEvent
 */
export class ConnectFileTransferRunEvent extends Message<ConnectFileTransferRunEvent> {
  /**
   * anonymized
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * anonymized
   *
   * @generated from field: string user_name = 2;
   */
  userName = "";

  /**
   * @generated from field: bool is_upload = 3;
   */
  isUpload = false;

  constructor(data?: PartialMessage<ConnectFileTransferRunEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.ConnectFileTransferRunEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "is_upload", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectFileTransferRunEvent {
    return new ConnectFileTransferRunEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectFileTransferRunEvent {
    return new ConnectFileTransferRunEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectFileTransferRunEvent {
    return new ConnectFileTransferRunEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectFileTransferRunEvent | PlainMessage<ConnectFileTransferRunEvent> | undefined, b: ConnectFileTransferRunEvent | PlainMessage<ConnectFileTransferRunEvent> | undefined): boolean {
    return proto3.util.equals(ConnectFileTransferRunEvent, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.ConnectUserJobRoleUpdateEvent
 */
export class ConnectUserJobRoleUpdateEvent extends Message<ConnectUserJobRoleUpdateEvent> {
  /**
   * Software Engineer, DevOps Engineer etc.
   *
   * @generated from field: string job_role = 1;
   */
  jobRole = "";

  constructor(data?: PartialMessage<ConnectUserJobRoleUpdateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.ConnectUserJobRoleUpdateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job_role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectUserJobRoleUpdateEvent {
    return new ConnectUserJobRoleUpdateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectUserJobRoleUpdateEvent {
    return new ConnectUserJobRoleUpdateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectUserJobRoleUpdateEvent {
    return new ConnectUserJobRoleUpdateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectUserJobRoleUpdateEvent | PlainMessage<ConnectUserJobRoleUpdateEvent> | undefined, b: ConnectUserJobRoleUpdateEvent | PlainMessage<ConnectUserJobRoleUpdateEvent> | undefined): boolean {
    return proto3.util.equals(ConnectUserJobRoleUpdateEvent, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.ConnectConnectMyComputerSetup
 */
export class ConnectConnectMyComputerSetup extends Message<ConnectConnectMyComputerSetup> {
  /**
   * anonymized
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * anonymized
   *
   * @generated from field: string user_name = 2;
   */
  userName = "";

  /**
   * @generated from field: bool success = 3;
   */
  success = false;

  /**
   * empty when success is true
   *
   * @generated from field: string failed_step = 4;
   */
  failedStep = "";

  constructor(data?: PartialMessage<ConnectConnectMyComputerSetup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.ConnectConnectMyComputerSetup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "failed_step", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectConnectMyComputerSetup {
    return new ConnectConnectMyComputerSetup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectConnectMyComputerSetup {
    return new ConnectConnectMyComputerSetup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectConnectMyComputerSetup {
    return new ConnectConnectMyComputerSetup().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectConnectMyComputerSetup | PlainMessage<ConnectConnectMyComputerSetup> | undefined, b: ConnectConnectMyComputerSetup | PlainMessage<ConnectConnectMyComputerSetup> | undefined): boolean {
    return proto3.util.equals(ConnectConnectMyComputerSetup, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.ConnectConnectMyComputerAgentStart
 */
export class ConnectConnectMyComputerAgentStart extends Message<ConnectConnectMyComputerAgentStart> {
  /**
   * anonymized
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * anonymized
   *
   * @generated from field: string user_name = 2;
   */
  userName = "";

  constructor(data?: PartialMessage<ConnectConnectMyComputerAgentStart>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.ConnectConnectMyComputerAgentStart";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectConnectMyComputerAgentStart {
    return new ConnectConnectMyComputerAgentStart().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectConnectMyComputerAgentStart {
    return new ConnectConnectMyComputerAgentStart().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectConnectMyComputerAgentStart {
    return new ConnectConnectMyComputerAgentStart().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectConnectMyComputerAgentStart | PlainMessage<ConnectConnectMyComputerAgentStart> | undefined, b: ConnectConnectMyComputerAgentStart | PlainMessage<ConnectConnectMyComputerAgentStart> | undefined): boolean {
    return proto3.util.equals(ConnectConnectMyComputerAgentStart, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.SubmitConnectEventRequest
 */
export class SubmitConnectEventRequest extends Message<SubmitConnectEventRequest> {
  /**
   * UUID
   *
   * @generated from field: string distinct_id = 1;
   */
  distinctId = "";

  /**
   * optional, will default to the ingest time if unset
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  /**
   * @generated from oneof prehog.v1alpha.SubmitConnectEventRequest.event
   */
  event: {
    /**
     * @generated from field: prehog.v1alpha.ConnectClusterLoginEvent cluster_login = 3;
     */
    value: ConnectClusterLoginEvent;
    case: "clusterLogin";
  } | {
    /**
     * @generated from field: prehog.v1alpha.ConnectProtocolUseEvent protocol_use = 4;
     */
    value: ConnectProtocolUseEvent;
    case: "protocolUse";
  } | {
    /**
     * @generated from field: prehog.v1alpha.ConnectAccessRequestCreateEvent access_request_create = 5;
     */
    value: ConnectAccessRequestCreateEvent;
    case: "accessRequestCreate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.ConnectAccessRequestReviewEvent access_request_review = 6;
     */
    value: ConnectAccessRequestReviewEvent;
    case: "accessRequestReview";
  } | {
    /**
     * @generated from field: prehog.v1alpha.ConnectAccessRequestAssumeRoleEvent access_request_assume_role = 7;
     */
    value: ConnectAccessRequestAssumeRoleEvent;
    case: "accessRequestAssumeRole";
  } | {
    /**
     * @generated from field: prehog.v1alpha.ConnectFileTransferRunEvent file_transfer_run = 8;
     */
    value: ConnectFileTransferRunEvent;
    case: "fileTransferRun";
  } | {
    /**
     * @generated from field: prehog.v1alpha.ConnectUserJobRoleUpdateEvent user_job_role_update = 9;
     */
    value: ConnectUserJobRoleUpdateEvent;
    case: "userJobRoleUpdate";
  } | {
    /**
     * @generated from field: prehog.v1alpha.ConnectConnectMyComputerSetup connect_my_computer_setup = 10;
     */
    value: ConnectConnectMyComputerSetup;
    case: "connectMyComputerSetup";
  } | {
    /**
     * @generated from field: prehog.v1alpha.ConnectConnectMyComputerAgentStart connect_my_computer_agent_start = 11;
     */
    value: ConnectConnectMyComputerAgentStart;
    case: "connectMyComputerAgentStart";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SubmitConnectEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.SubmitConnectEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "distinct_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
    { no: 3, name: "cluster_login", kind: "message", T: ConnectClusterLoginEvent, oneof: "event" },
    { no: 4, name: "protocol_use", kind: "message", T: ConnectProtocolUseEvent, oneof: "event" },
    { no: 5, name: "access_request_create", kind: "message", T: ConnectAccessRequestCreateEvent, oneof: "event" },
    { no: 6, name: "access_request_review", kind: "message", T: ConnectAccessRequestReviewEvent, oneof: "event" },
    { no: 7, name: "access_request_assume_role", kind: "message", T: ConnectAccessRequestAssumeRoleEvent, oneof: "event" },
    { no: 8, name: "file_transfer_run", kind: "message", T: ConnectFileTransferRunEvent, oneof: "event" },
    { no: 9, name: "user_job_role_update", kind: "message", T: ConnectUserJobRoleUpdateEvent, oneof: "event" },
    { no: 10, name: "connect_my_computer_setup", kind: "message", T: ConnectConnectMyComputerSetup, oneof: "event" },
    { no: 11, name: "connect_my_computer_agent_start", kind: "message", T: ConnectConnectMyComputerAgentStart, oneof: "event" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitConnectEventRequest {
    return new SubmitConnectEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitConnectEventRequest {
    return new SubmitConnectEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitConnectEventRequest {
    return new SubmitConnectEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitConnectEventRequest | PlainMessage<SubmitConnectEventRequest> | undefined, b: SubmitConnectEventRequest | PlainMessage<SubmitConnectEventRequest> | undefined): boolean {
    return proto3.util.equals(SubmitConnectEventRequest, a, b);
  }
}

/**
 * @generated from message prehog.v1alpha.SubmitConnectEventResponse
 */
export class SubmitConnectEventResponse extends Message<SubmitConnectEventResponse> {
  constructor(data?: PartialMessage<SubmitConnectEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "prehog.v1alpha.SubmitConnectEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitConnectEventResponse {
    return new SubmitConnectEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitConnectEventResponse {
    return new SubmitConnectEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitConnectEventResponse {
    return new SubmitConnectEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitConnectEventResponse | PlainMessage<SubmitConnectEventResponse> | undefined, b: SubmitConnectEventResponse | PlainMessage<SubmitConnectEventResponse> | undefined): boolean {
    return proto3.util.equals(SubmitConnectEventResponse, a, b);
  }
}

