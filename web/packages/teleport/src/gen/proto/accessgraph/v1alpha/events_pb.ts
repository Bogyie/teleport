//
// Teleport
// Copyright (C) 2024  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file accessgraph/v1alpha/events.proto (package accessgraph.v1alpha, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Metadata } from "../../teleport/header/v1/metadata_pb";

/**
 * AccessPathChanged is an event that is emitted when an access path is changed.
 *
 * @generated from message accessgraph.v1alpha.AccessPathChanged
 */
export class AccessPathChanged extends Message<AccessPathChanged> {
  /**
   * metadata is a common event metadata
   *
   * @generated from field: teleport.header.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * change_id is the id of the change.
   *
   * @generated from field: string change_id = 2;
   */
  changeId = "";

  /**
   * affected_resource_name is the name of the affected resource.
   *
   * @generated from field: string affected_resource_name = 3;
   */
  affectedResourceName = "";

  /**
   * affected_resource_source is the source of the affected resource, ex: Teleport, AWS, GitLab, etc.
   *
   * @generated from field: string affected_resource_source = 4;
   */
  affectedResourceSource = "";

  /**
   * affected_resource_kind is the kind of the affected resource, ex: user, role, etc.
   *
   * @generated from field: string affected_resource_kind = 5;
   */
  affectedResourceKind = "";

  constructor(data?: PartialMessage<AccessPathChanged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accessgraph.v1alpha.AccessPathChanged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "change_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "affected_resource_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "affected_resource_source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "affected_resource_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessPathChanged {
    return new AccessPathChanged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessPathChanged {
    return new AccessPathChanged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessPathChanged {
    return new AccessPathChanged().fromJsonString(jsonString, options);
  }

  static equals(a: AccessPathChanged | PlainMessage<AccessPathChanged> | undefined, b: AccessPathChanged | PlainMessage<AccessPathChanged> | undefined): boolean {
    return proto3.util.equals(AccessPathChanged, a, b);
  }
}

