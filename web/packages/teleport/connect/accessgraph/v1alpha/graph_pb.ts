//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file accessgraph/v1alpha/graph.proto (package accessgraph.v1alpha, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file accessgraph/v1alpha/graph.proto.
 */
export const file_accessgraph_v1alpha_graph: GenFile = /*@__PURE__*/
  fileDesc("Ch9hY2Nlc3NncmFwaC92MWFscGhhL2dyYXBoLnByb3RvEhNhY2Nlc3NncmFwaC52MWFscGhhIqoCCgROb2RlEgoKAmlkGAEgASgJEgwKBGtpbmQYAiABKAkSEAoIc3ViX2tpbmQYAyABKAkSDAoEbmFtZRgEIAEoCRI1CgZsYWJlbHMYBSADKAsyJS5hY2Nlc3NncmFwaC52MWFscGhhLk5vZGUuTGFiZWxzRW50cnkSEAoIaG9zdG5hbWUYBiABKAkSPQoKcHJvcGVydGllcxgHIAMoCzIpLmFjY2Vzc2dyYXBoLnYxYWxwaGEuTm9kZS5Qcm9wZXJ0aWVzRW50cnkaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ARoxCg9Qcm9wZXJ0aWVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASKlAQoERWRnZRIMCgRmcm9tGAEgASgJEgoKAnRvGAIgASgJEhEKCWVkZ2VfdHlwZRgDIAEoCRI9Cgpwcm9wZXJ0aWVzGAQgAygLMikuYWNjZXNzZ3JhcGgudjFhbHBoYS5FZGdlLlByb3BlcnRpZXNFbnRyeRoxCg9Qcm9wZXJ0aWVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AUJXWlVnaXRodWIuY29tL2dyYXZpdGF0aW9uYWwvdGVsZXBvcnQvZ2VuL3Byb3RvL2dvL2FjY2Vzc2dyYXBoL3YxYWxwaGE7YWNjZXNzZ3JhcGh2MWFscGhhYgZwcm90bzM");

/**
 * Node is a node in the access graph.
 *
 * @generated from message accessgraph.v1alpha.Node
 */
export type Node = Message<"accessgraph.v1alpha.Node"> & {
  /**
   * ID is the unique ID of the node.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Kind is the kind of the node, ex: "user", "user_group", "resource", etc.
   *
   * @generated from field: string kind = 2;
   */
  kind: string;

  /**
   * SubKind is the subkind of the node, ex: "ssh", "db", "k8s", etc.
   *
   * @generated from field: string sub_kind = 3;
   */
  subKind: string;

  /**
   * Name is the name of the node.
   *
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * Labels is a set of labels for the resource.
   *
   * @generated from field: map<string, string> labels = 5;
   */
  labels: { [key: string]: string };

  /**
   * Hostname is the hostname of the node.
   *
   * @generated from field: string hostname = 6;
   */
  hostname: string;

  /**
   * Properties is a set of properties for the resource.
   *
   * @generated from field: map<string, string> properties = 7;
   */
  properties: { [key: string]: string };
};

/**
 * Describes the message accessgraph.v1alpha.Node.
 * Use `create(NodeSchema)` to create a new message.
 */
export const NodeSchema: GenMessage<Node> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_graph, 0);

/**
 * Edge is an edge in the access graph.
 *
 * @generated from message accessgraph.v1alpha.Edge
 */
export type Edge = Message<"accessgraph.v1alpha.Edge"> & {
  /**
   * from is the ID of the node the edge is from.
   *
   * @generated from field: string from = 1;
   */
  from: string;

  /**
   * to is the ID of the node the edge is to.
   *
   * @generated from field: string to = 2;
   */
  to: string;

  /**
   * edge_type is the type of the edge, e.g. "member_of", "belongs_to", etc.
   *
   * @generated from field: string edge_type = 3;
   */
  edgeType: string;

  /**
   * Properties is a set of properties for the edges.
   *
   * @generated from field: map<string, string> properties = 4;
   */
  properties: { [key: string]: string };
};

/**
 * Describes the message accessgraph.v1alpha.Edge.
 * Use `create(EdgeSchema)` to create a new message.
 */
export const EdgeSchema: GenMessage<Edge> = /*@__PURE__*/
  messageDesc(file_accessgraph_v1alpha_graph, 1);

