// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/dbobjectimportrule/v1/dbobjectimportrule.proto (package teleport.dbobjectimportrule.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Metadata } from "../../header/v1/metadata_pb";
import { file_teleport_header_v1_metadata } from "../../header/v1/metadata_pb";
import type { Label } from "../../label/v1/label_pb";
import { file_teleport_label_v1_label } from "../../label/v1/label_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/dbobjectimportrule/v1/dbobjectimportrule.proto.
 */
export const file_teleport_dbobjectimportrule_v1_dbobjectimportrule: GenFile = /*@__PURE__*/
  fileDesc("Cjd0ZWxlcG9ydC9kYm9iamVjdGltcG9ydHJ1bGUvdjEvZGJvYmplY3RpbXBvcnRydWxlLnByb3RvEh50ZWxlcG9ydC5kYm9iamVjdGltcG9ydHJ1bGUudjEixwEKGERhdGFiYXNlT2JqZWN0SW1wb3J0UnVsZRIMCgRraW5kGAEgASgJEhAKCHN1Yl9raW5kGAIgASgJEg8KB3ZlcnNpb24YAyABKAkSLgoIbWV0YWRhdGEYBCABKAsyHC50ZWxlcG9ydC5oZWFkZXIudjEuTWV0YWRhdGESSgoEc3BlYxgFIAEoCzI8LnRlbGVwb3J0LmRib2JqZWN0aW1wb3J0cnVsZS52MS5EYXRhYmFzZU9iamVjdEltcG9ydFJ1bGVTcGVjIscBChxEYXRhYmFzZU9iamVjdEltcG9ydFJ1bGVTcGVjEhAKCHByaW9yaXR5GAEgASgFEjEKD2RhdGFiYXNlX2xhYmVscxgDIAMoCzIYLnRlbGVwb3J0LmxhYmVsLnYxLkxhYmVsElEKCG1hcHBpbmdzGAQgAygLMj8udGVsZXBvcnQuZGJvYmplY3RpbXBvcnRydWxlLnYxLkRhdGFiYXNlT2JqZWN0SW1wb3J0UnVsZU1hcHBpbmdKBAgCEANSCWRiX2xhYmVscyLLAgofRGF0YWJhc2VPYmplY3RJbXBvcnRSdWxlTWFwcGluZxJICgVtYXRjaBgBIAEoCzI5LnRlbGVwb3J0LmRib2JqZWN0aW1wb3J0cnVsZS52MS5EYXRhYmFzZU9iamVjdEltcG9ydE1hdGNoEkgKBXNjb3BlGAIgASgLMjkudGVsZXBvcnQuZGJvYmplY3RpbXBvcnRydWxlLnYxLkRhdGFiYXNlT2JqZWN0SW1wb3J0U2NvcGUSYgoKYWRkX2xhYmVscxgDIAMoCzJOLnRlbGVwb3J0LmRib2JqZWN0aW1wb3J0cnVsZS52MS5EYXRhYmFzZU9iamVjdEltcG9ydFJ1bGVNYXBwaW5nLkFkZExhYmVsc0VudHJ5GjAKDkFkZExhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiXQoZRGF0YWJhc2VPYmplY3RJbXBvcnRNYXRjaBITCgt0YWJsZV9uYW1lcxgBIAMoCRISCgp2aWV3X25hbWVzGAIgAygJEhcKD3Byb2NlZHVyZV9uYW1lcxgDIAMoCSJJChlEYXRhYmFzZU9iamVjdEltcG9ydFNjb3BlEhYKDmRhdGFiYXNlX25hbWVzGAEgAygJEhQKDHNjaGVtYV9uYW1lcxgCIAMoCUJoWmZnaXRodWIuY29tL2dyYXZpdGF0aW9uYWwvdGVsZXBvcnQvYXBpL2dlbi9wcm90by9nby90ZWxlcG9ydC9kYm9iamVjdGltcG9ydHJ1bGUvdjE7ZGJvYmplY3RpbXBvcnRydWxldjFiBnByb3RvMw", [file_teleport_header_v1_metadata, file_teleport_label_v1_label]);

/**
 * DatabaseObjectImportRule is the resource representing a global database object import rule.
 * The import rules govern which database objects are imported from databases.
 * See type teleport.dbobject.v1.DatabaseObject for the description of a database object.
 * For rationale behind this type, see the RFD 151.
 *
 * @generated from message teleport.dbobjectimportrule.v1.DatabaseObjectImportRule
 */
export type DatabaseObjectImportRule = Message<"teleport.dbobjectimportrule.v1.DatabaseObjectImportRule"> & {
  /**
   * The kind of resource represented.
   *
   * @generated from field: string kind = 1;
   */
  kind: string;

  /**
   * Mandatory field for all resources. Not populated for this resource type.
   *
   * @generated from field: string sub_kind = 2;
   */
  subKind: string;

  /**
   * The version of the resource being represented.
   *
   * @generated from field: string version = 3;
   */
  version: string;

  /**
   * Common metadata that all resources share.
   *
   * @generated from field: teleport.header.v1.Metadata metadata = 4;
   */
  metadata?: Metadata;

  /**
   * spec represents the specifications for the database object import rule.
   *
   * @generated from field: teleport.dbobjectimportrule.v1.DatabaseObjectImportRuleSpec spec = 5;
   */
  spec?: DatabaseObjectImportRuleSpec;
};

/**
 * Describes the message teleport.dbobjectimportrule.v1.DatabaseObjectImportRule.
 * Use `create(DatabaseObjectImportRuleSchema)` to create a new message.
 */
export const DatabaseObjectImportRuleSchema: GenMessage<DatabaseObjectImportRule> = /*@__PURE__*/
  messageDesc(file_teleport_dbobjectimportrule_v1_dbobjectimportrule, 0);

/**
 * DatabaseObjectImportRuleSpec is the spec for database object import rule.
 *
 * @generated from message teleport.dbobjectimportrule.v1.DatabaseObjectImportRuleSpec
 */
export type DatabaseObjectImportRuleSpec = Message<"teleport.dbobjectimportrule.v1.DatabaseObjectImportRuleSpec"> & {
  /**
   * priority represents the priority of the rule application.
   *
   * Rules are processed from lowest to highest priority.
   * If two rules apply the same label, then the value applied with the rule with the highest priority wins.
   *
   * @generated from field: int32 priority = 1;
   */
  priority: number;

  /**
   * db_labels is a set of labels matched against database labels.
   *
   * @generated from field: repeated teleport.label.v1.Label database_labels = 3;
   */
  databaseLabels: Label[];

  /**
   * mappings is a list of matches that will map match conditions to labels.
   *
   * @generated from field: repeated teleport.dbobjectimportrule.v1.DatabaseObjectImportRuleMapping mappings = 4;
   */
  mappings: DatabaseObjectImportRuleMapping[];
};

/**
 * Describes the message teleport.dbobjectimportrule.v1.DatabaseObjectImportRuleSpec.
 * Use `create(DatabaseObjectImportRuleSpecSchema)` to create a new message.
 */
export const DatabaseObjectImportRuleSpecSchema: GenMessage<DatabaseObjectImportRuleSpec> = /*@__PURE__*/
  messageDesc(file_teleport_dbobjectimportrule_v1_dbobjectimportrule, 1);

/**
 * DatabaseObjectImportRuleMapping is the mapping between object properties and labels that will be added to the object.
 *
 * @generated from message teleport.dbobjectimportrule.v1.DatabaseObjectImportRuleMapping
 */
export type DatabaseObjectImportRuleMapping = Message<"teleport.dbobjectimportrule.v1.DatabaseObjectImportRuleMapping"> & {
  /**
   * match specifies the matching rules, like the object names.
   *
   * @generated from field: teleport.dbobjectimportrule.v1.DatabaseObjectImportMatch match = 1;
   */
  match?: DatabaseObjectImportMatch;

  /**
   * scope specifies the object scope. Optional. If not provided, all scopes will be accepted.
   *
   * @generated from field: teleport.dbobjectimportrule.v1.DatabaseObjectImportScope scope = 2;
   */
  scope?: DatabaseObjectImportScope;

  /**
   * add_labels specifies which labels to add if the match succeeds. At least one should be present.
   *
   * @generated from field: map<string, string> add_labels = 3;
   */
  addLabels: { [key: string]: string };
};

/**
 * Describes the message teleport.dbobjectimportrule.v1.DatabaseObjectImportRuleMapping.
 * Use `create(DatabaseObjectImportRuleMappingSchema)` to create a new message.
 */
export const DatabaseObjectImportRuleMappingSchema: GenMessage<DatabaseObjectImportRuleMapping> = /*@__PURE__*/
  messageDesc(file_teleport_dbobjectimportrule_v1_dbobjectimportrule, 2);

/**
 * DatabaseObjectImportMatch specifies acceptable object names. Must have at least one non-empty member.
 *
 * @generated from message teleport.dbobjectimportrule.v1.DatabaseObjectImportMatch
 */
export type DatabaseObjectImportMatch = Message<"teleport.dbobjectimportrule.v1.DatabaseObjectImportMatch"> & {
  /**
   * table_names specify the names of the tables to match. Optional.
   *
   * @generated from field: repeated string table_names = 1;
   */
  tableNames: string[];

  /**
   * view_names specify the names of the views to match. Optional.
   *
   * @generated from field: repeated string view_names = 2;
   */
  viewNames: string[];

  /**
   * procedure_names specify the names of the procedures to match. Optional.
   *
   * @generated from field: repeated string procedure_names = 3;
   */
  procedureNames: string[];
};

/**
 * Describes the message teleport.dbobjectimportrule.v1.DatabaseObjectImportMatch.
 * Use `create(DatabaseObjectImportMatchSchema)` to create a new message.
 */
export const DatabaseObjectImportMatchSchema: GenMessage<DatabaseObjectImportMatch> = /*@__PURE__*/
  messageDesc(file_teleport_dbobjectimportrule_v1_dbobjectimportrule, 3);

/**
 * DatabaseObjectImportScope specifies the object scope. Members are matched independently of each other.
 *
 * @generated from message teleport.dbobjectimportrule.v1.DatabaseObjectImportScope
 */
export type DatabaseObjectImportScope = Message<"teleport.dbobjectimportrule.v1.DatabaseObjectImportScope"> & {
  /**
   * database_names specify the names of the databases to include in the scope. Optional.
   *
   * @generated from field: repeated string database_names = 1;
   */
  databaseNames: string[];

  /**
   * schema_names specify the names of the schemas to include in the scope. Optional.
   *
   * @generated from field: repeated string schema_names = 2;
   */
  schemaNames: string[];
};

/**
 * Describes the message teleport.dbobjectimportrule.v1.DatabaseObjectImportScope.
 * Use `create(DatabaseObjectImportScopeSchema)` to create a new message.
 */
export const DatabaseObjectImportScopeSchema: GenMessage<DatabaseObjectImportScope> = /*@__PURE__*/
  messageDesc(file_teleport_dbobjectimportrule_v1_dbobjectimportrule, 4);

