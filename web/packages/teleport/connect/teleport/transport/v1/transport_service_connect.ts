// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file teleport/transport/v1/transport_service.proto (package teleport.transport.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { GetClusterDetailsRequest, GetClusterDetailsResponse, ProxyClusterRequest, ProxyClusterResponse, ProxySSHRequest, ProxySSHResponse } from "./transport_service_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * TransportService provides methods to proxy connections to various Teleport instances.
 *
 * All connections are operate on top of a bidirectional stream which transports
 * raw payloads from higher level protocols (i.e. SSH). Clients must send an initial
 * message on the stream to set up the connections accordingly. After the initial
 * request either side may freely send data in any order until the stream is terminated.
 *
 * @generated from service teleport.transport.v1.TransportService
 */
export const TransportService = {
  typeName: "teleport.transport.v1.TransportService",
  methods: {
    /**
     * GetClusterDetails provides cluster information that may affect how transport
     * should occur.
     *
     * @generated from rpc teleport.transport.v1.TransportService.GetClusterDetails
     */
    getClusterDetails: {
      name: "GetClusterDetails",
      I: GetClusterDetailsRequest,
      O: GetClusterDetailsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ProxySSH establishes an SSH connection to the target host over a bidirectional stream.
     *
     * The client must first send a DialTarget before the connection is established. Agent frames
     * will be populated if SSH Agent forwarding is enabled for the connection. SSH frames contain
     * raw SSH payload to be processed by an x/crypto/ssh.Client or x/crypto/ssh.Server.
     *
     * @generated from rpc teleport.transport.v1.TransportService.ProxySSH
     */
    proxySSH: {
      name: "ProxySSH",
      I: ProxySSHRequest,
      O: ProxySSHResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * ProxyCluster establishes a connection to the target cluster.
     *
     * The client must first send a ProxyClusterRequest with the desired cluster name before the
     * connection is established. After which the connection can be used to construct a new
     * auth.Client to the tunneled cluster.
     *
     * @generated from rpc teleport.transport.v1.TransportService.ProxyCluster
     */
    proxyCluster: {
      name: "ProxyCluster",
      I: ProxyClusterRequest,
      O: ProxyClusterResponse,
      kind: MethodKind.BiDiStreaming,
    },
  }
} as const;

