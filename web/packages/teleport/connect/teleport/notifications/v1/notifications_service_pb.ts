//
// Teleport
// Copyright (C) 2024  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/notifications/v1/notifications_service.proto (package teleport.notifications.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { EmptySchema, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { GlobalNotification, GlobalNotificationSchema, Notification, NotificationSchema, UserLastSeenNotification, UserLastSeenNotificationSchema, UserNotificationState, UserNotificationStateSchema } from "./notifications_pb";
import { file_teleport_notifications_v1_notifications } from "./notifications_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/notifications/v1/notifications_service.proto.
 */
export const file_teleport_notifications_v1_notifications_service: GenFile = /*@__PURE__*/
  fileDesc("CjV0ZWxlcG9ydC9ub3RpZmljYXRpb25zL3YxL25vdGlmaWNhdGlvbnNfc2VydmljZS5wcm90bxIZdGVsZXBvcnQubm90aWZpY2F0aW9ucy52MSJwCh1DcmVhdGVVc2VyTm90aWZpY2F0aW9uUmVxdWVzdBIQCgh1c2VybmFtZRgBIAEoCRI9Cgxub3RpZmljYXRpb24YAiABKAsyJy50ZWxlcG9ydC5ub3RpZmljYXRpb25zLnYxLk5vdGlmaWNhdGlvbiJKCh1EZWxldGVVc2VyTm90aWZpY2F0aW9uUmVxdWVzdBIQCgh1c2VybmFtZRgBIAEoCRIXCg9ub3RpZmljYXRpb25faWQYAiABKAkiggEKGExpc3ROb3RpZmljYXRpb25zUmVxdWVzdBIRCglwYWdlX3NpemUYASABKAUSEgoKcGFnZV90b2tlbhgCIAEoCRI/CgdmaWx0ZXJzGAMgASgLMi4udGVsZXBvcnQubm90aWZpY2F0aW9ucy52MS5Ob3RpZmljYXRpb25GaWx0ZXJzIlcKE05vdGlmaWNhdGlvbkZpbHRlcnMSEAoIdXNlcm5hbWUYASABKAkSEwoLZ2xvYmFsX29ubHkYAiABKAgSGQoRdXNlcl9jcmVhdGVkX29ubHkYAyABKAgivwEKGUxpc3ROb3RpZmljYXRpb25zUmVzcG9uc2USPgoNbm90aWZpY2F0aW9ucxgBIAMoCzInLnRlbGVwb3J0Lm5vdGlmaWNhdGlvbnMudjEuTm90aWZpY2F0aW9uEhcKD25leHRfcGFnZV90b2tlbhgDIAEoCRJJCiV1c2VyX2xhc3Rfc2Vlbl9ub3RpZmljYXRpb25fdGltZXN0YW1wGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCJtCh9DcmVhdGVHbG9iYWxOb3RpZmljYXRpb25SZXF1ZXN0EkoKE2dsb2JhbF9ub3RpZmljYXRpb24YASABKAsyLS50ZWxlcG9ydC5ub3RpZmljYXRpb25zLnYxLkdsb2JhbE5vdGlmaWNhdGlvbiI6Ch9EZWxldGVHbG9iYWxOb3RpZmljYXRpb25SZXF1ZXN0EhcKD25vdGlmaWNhdGlvbl9pZBgBIAEoCSKJAQoiVXBzZXJ0VXNlck5vdGlmaWNhdGlvblN0YXRlUmVxdWVzdBIQCgh1c2VybmFtZRgBIAEoCRJRChd1c2VyX25vdGlmaWNhdGlvbl9zdGF0ZRgCIAEoCzIwLnRlbGVwb3J0Lm5vdGlmaWNhdGlvbnMudjEuVXNlck5vdGlmaWNhdGlvblN0YXRlIpMBCiVVcHNlcnRVc2VyTGFzdFNlZW5Ob3RpZmljYXRpb25SZXF1ZXN0EhAKCHVzZXJuYW1lGAEgASgJElgKG3VzZXJfbGFzdF9zZWVuX25vdGlmaWNhdGlvbhgCIAEoCzIzLnRlbGVwb3J0Lm5vdGlmaWNhdGlvbnMudjEuVXNlckxhc3RTZWVuTm90aWZpY2F0aW9uMqEHChNOb3RpZmljYXRpb25TZXJ2aWNlEnsKFkNyZWF0ZVVzZXJOb3RpZmljYXRpb24SOC50ZWxlcG9ydC5ub3RpZmljYXRpb25zLnYxLkNyZWF0ZVVzZXJOb3RpZmljYXRpb25SZXF1ZXN0GicudGVsZXBvcnQubm90aWZpY2F0aW9ucy52MS5Ob3RpZmljYXRpb24SagoWRGVsZXRlVXNlck5vdGlmaWNhdGlvbhI4LnRlbGVwb3J0Lm5vdGlmaWNhdGlvbnMudjEuRGVsZXRlVXNlck5vdGlmaWNhdGlvblJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkShQEKGENyZWF0ZUdsb2JhbE5vdGlmaWNhdGlvbhI6LnRlbGVwb3J0Lm5vdGlmaWNhdGlvbnMudjEuQ3JlYXRlR2xvYmFsTm90aWZpY2F0aW9uUmVxdWVzdBotLnRlbGVwb3J0Lm5vdGlmaWNhdGlvbnMudjEuR2xvYmFsTm90aWZpY2F0aW9uEm4KGERlbGV0ZUdsb2JhbE5vdGlmaWNhdGlvbhI6LnRlbGVwb3J0Lm5vdGlmaWNhdGlvbnMudjEuRGVsZXRlR2xvYmFsTm90aWZpY2F0aW9uUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRJ+ChFMaXN0Tm90aWZpY2F0aW9ucxIzLnRlbGVwb3J0Lm5vdGlmaWNhdGlvbnMudjEuTGlzdE5vdGlmaWNhdGlvbnNSZXF1ZXN0GjQudGVsZXBvcnQubm90aWZpY2F0aW9ucy52MS5MaXN0Tm90aWZpY2F0aW9uc1Jlc3BvbnNlEo4BChtVcHNlcnRVc2VyTm90aWZpY2F0aW9uU3RhdGUSPS50ZWxlcG9ydC5ub3RpZmljYXRpb25zLnYxLlVwc2VydFVzZXJOb3RpZmljYXRpb25TdGF0ZVJlcXVlc3QaMC50ZWxlcG9ydC5ub3RpZmljYXRpb25zLnYxLlVzZXJOb3RpZmljYXRpb25TdGF0ZRKXAQoeVXBzZXJ0VXNlckxhc3RTZWVuTm90aWZpY2F0aW9uEkAudGVsZXBvcnQubm90aWZpY2F0aW9ucy52MS5VcHNlcnRVc2VyTGFzdFNlZW5Ob3RpZmljYXRpb25SZXF1ZXN0GjMudGVsZXBvcnQubm90aWZpY2F0aW9ucy52MS5Vc2VyTGFzdFNlZW5Ob3RpZmljYXRpb25CXlpcZ2l0aHViLmNvbS9ncmF2aXRhdGlvbmFsL3RlbGVwb3J0L2FwaS9nZW4vcHJvdG8vZ28vdGVsZXBvcnQvbm90aWZpY2F0aW9ucy92MTtub3RpZmljYXRpb25zdjFiBnByb3RvMw", [file_google_protobuf_empty, file_google_protobuf_timestamp, file_teleport_notifications_v1_notifications]);

/**
 * CreateUserNotificationRequest is the request for creating a user-specific notification.
 *
 * @generated from message teleport.notifications.v1.CreateUserNotificationRequest
 */
export type CreateUserNotificationRequest = Message<"teleport.notifications.v1.CreateUserNotificationRequest"> & {
  /**
   * username is the username of the user the notification to create is for.
   *
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * notification is the notification to create.
   *
   * @generated from field: teleport.notifications.v1.Notification notification = 2;
   */
  notification?: Notification;
};

/**
 * Describes the message teleport.notifications.v1.CreateUserNotificationRequest.
 * Use `create(CreateUserNotificationRequestSchema)` to create a new message.
 */
export const CreateUserNotificationRequestSchema: GenMessage<CreateUserNotificationRequest> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications_service, 0);

/**
 * DeleteUserNotificationRequest is the request for deleting a user-specific notification.
 *
 * @generated from message teleport.notifications.v1.DeleteUserNotificationRequest
 */
export type DeleteUserNotificationRequest = Message<"teleport.notifications.v1.DeleteUserNotificationRequest"> & {
  /**
   * username is the username of the user the notification to delete is for.
   *
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * notification_id is the ID of the notification to delete.
   *
   * @generated from field: string notification_id = 2;
   */
  notificationId: string;
};

/**
 * Describes the message teleport.notifications.v1.DeleteUserNotificationRequest.
 * Use `create(DeleteUserNotificationRequestSchema)` to create a new message.
 */
export const DeleteUserNotificationRequestSchema: GenMessage<DeleteUserNotificationRequest> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications_service, 1);

/**
 * ListNotificationsRequest is the request for listing a user's notifications.
 *
 * @generated from message teleport.notifications.v1.ListNotificationsRequest
 */
export type ListNotificationsRequest = Message<"teleport.notifications.v1.ListNotificationsRequest"> & {
  /**
   * page_size is the size of the page to return.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * page_token is the next_page_token value returned from a previous ListUserNotifications request, if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * filters specify search criteria to limit which notifications should be returned. If omitted, the default behavior will be to list all notifications.
   *
   * @generated from field: teleport.notifications.v1.NotificationFilters filters = 3;
   */
  filters?: NotificationFilters;
};

/**
 * Describes the message teleport.notifications.v1.ListNotificationsRequest.
 * Use `create(ListNotificationsRequestSchema)` to create a new message.
 */
export const ListNotificationsRequestSchema: GenMessage<ListNotificationsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications_service, 2);

/**
 * NotificationFilters provide a mechanism to refine ListNotification results.
 *
 * @generated from message teleport.notifications.v1.NotificationFilters
 */
export type NotificationFilters = Message<"teleport.notifications.v1.NotificationFilters"> & {
  /**
   * username is the username of the user the notifications being listed are for.
   *
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * global_only is whether to only list global notifications (notifications capable of targetting multiple users).
   *
   * @generated from field: bool global_only = 2;
   */
  globalOnly: boolean;

  /**
   * user_created_only is whether to only list user-created notifications (ie. notifications created by an admin via the tctl interface).
   *
   * @generated from field: bool user_created_only = 3;
   */
  userCreatedOnly: boolean;
};

/**
 * Describes the message teleport.notifications.v1.NotificationFilters.
 * Use `create(NotificationFiltersSchema)` to create a new message.
 */
export const NotificationFiltersSchema: GenMessage<NotificationFilters> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications_service, 3);

/**
 * ListNotificationsResponse is the response from listing a user's notifications.
 *
 * @generated from message teleport.notifications.v1.ListNotificationsResponse
 */
export type ListNotificationsResponse = Message<"teleport.notifications.v1.ListNotificationsResponse"> & {
  /**
   * notifications is the notifications returned.
   *
   * @generated from field: repeated teleport.notifications.v1.Notification notifications = 1;
   */
  notifications: Notification[];

  /**
   * next_page_token contains the next page token to use as the start key for the next page of notifications.
   *
   * @generated from field: string next_page_token = 3;
   */
  nextPageToken: string;

  /**
   * user_last_seen_notification_timestamp is the timestamp of the last notification the user has seen.
   *
   * @generated from field: google.protobuf.Timestamp user_last_seen_notification_timestamp = 4;
   */
  userLastSeenNotificationTimestamp?: Timestamp;
};

/**
 * Describes the message teleport.notifications.v1.ListNotificationsResponse.
 * Use `create(ListNotificationsResponseSchema)` to create a new message.
 */
export const ListNotificationsResponseSchema: GenMessage<ListNotificationsResponse> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications_service, 4);

/**
 * CreateGlobalNotificationRequest is the request for creating a global notification.
 *
 * @generated from message teleport.notifications.v1.CreateGlobalNotificationRequest
 */
export type CreateGlobalNotificationRequest = Message<"teleport.notifications.v1.CreateGlobalNotificationRequest"> & {
  /**
   * global_notification is the global notification to create.
   *
   * @generated from field: teleport.notifications.v1.GlobalNotification global_notification = 1;
   */
  globalNotification?: GlobalNotification;
};

/**
 * Describes the message teleport.notifications.v1.CreateGlobalNotificationRequest.
 * Use `create(CreateGlobalNotificationRequestSchema)` to create a new message.
 */
export const CreateGlobalNotificationRequestSchema: GenMessage<CreateGlobalNotificationRequest> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications_service, 5);

/**
 * DeleteGlobalNotificationRequest is the request for deleting a global notification.
 *
 * @generated from message teleport.notifications.v1.DeleteGlobalNotificationRequest
 */
export type DeleteGlobalNotificationRequest = Message<"teleport.notifications.v1.DeleteGlobalNotificationRequest"> & {
  /**
   * notification_id is the ID of the notification to delete.
   *
   * @generated from field: string notification_id = 1;
   */
  notificationId: string;
};

/**
 * Describes the message teleport.notifications.v1.DeleteGlobalNotificationRequest.
 * Use `create(DeleteGlobalNotificationRequestSchema)` to create a new message.
 */
export const DeleteGlobalNotificationRequestSchema: GenMessage<DeleteGlobalNotificationRequest> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications_service, 6);

/**
 * UpsertUserNotificationStateRequest is the request for creating or updating a user notification state.
 *
 * @generated from message teleport.notifications.v1.UpsertUserNotificationStateRequest
 */
export type UpsertUserNotificationStateRequest = Message<"teleport.notifications.v1.UpsertUserNotificationStateRequest"> & {
  /**
   * username is the username of the user.
   *
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * user_notification_state is the user notification state to create.
   *
   * @generated from field: teleport.notifications.v1.UserNotificationState user_notification_state = 2;
   */
  userNotificationState?: UserNotificationState;
};

/**
 * Describes the message teleport.notifications.v1.UpsertUserNotificationStateRequest.
 * Use `create(UpsertUserNotificationStateRequestSchema)` to create a new message.
 */
export const UpsertUserNotificationStateRequestSchema: GenMessage<UpsertUserNotificationStateRequest> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications_service, 7);

/**
 * UpsertUserLastSeenNotificationRequest is the request for creating or updating a user's last seen notification.
 *
 * @generated from message teleport.notifications.v1.UpsertUserLastSeenNotificationRequest
 */
export type UpsertUserLastSeenNotificationRequest = Message<"teleport.notifications.v1.UpsertUserLastSeenNotificationRequest"> & {
  /**
   * username is the username of the user.
   *
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * user_notification_state is the updated user last seen notification item.
   *
   * @generated from field: teleport.notifications.v1.UserLastSeenNotification user_last_seen_notification = 2;
   */
  userLastSeenNotification?: UserLastSeenNotification;
};

/**
 * Describes the message teleport.notifications.v1.UpsertUserLastSeenNotificationRequest.
 * Use `create(UpsertUserLastSeenNotificationRequestSchema)` to create a new message.
 */
export const UpsertUserLastSeenNotificationRequestSchema: GenMessage<UpsertUserLastSeenNotificationRequest> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications_service, 8);

/**
 * NotificationService provides CRUD operations for notifications resources.
 *
 * @generated from service teleport.notifications.v1.NotificationService
 */
export const NotificationService: GenService<{
  /**
   * CreateUserNotification creates a user-specific notification.
   *
   * @generated from rpc teleport.notifications.v1.NotificationService.CreateUserNotification
   */
  createUserNotification: {
    methodKind: "unary";
    input: typeof CreateUserNotificationRequestSchema;
    output: typeof NotificationSchema;
  },
  /**
   * DeleteUserNotification deletes a user-specific notification.
   *
   * @generated from rpc teleport.notifications.v1.NotificationService.DeleteUserNotification
   */
  deleteUserNotification: {
    methodKind: "unary";
    input: typeof DeleteUserNotificationRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * CreateGlobalNotification creates a global notification.
   *
   * @generated from rpc teleport.notifications.v1.NotificationService.CreateGlobalNotification
   */
  createGlobalNotification: {
    methodKind: "unary";
    input: typeof CreateGlobalNotificationRequestSchema;
    output: typeof GlobalNotificationSchema;
  },
  /**
   * DeleteGlobalNotification deletes a global notification.
   *
   * @generated from rpc teleport.notifications.v1.NotificationService.DeleteGlobalNotification
   */
  deleteGlobalNotification: {
    methodKind: "unary";
    input: typeof DeleteGlobalNotificationRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * ListNotifications returns a paginated list of a user's notifications.
   *
   * @generated from rpc teleport.notifications.v1.NotificationService.ListNotifications
   */
  listNotifications: {
    methodKind: "unary";
    input: typeof ListNotificationsRequestSchema;
    output: typeof ListNotificationsResponseSchema;
  },
  /**
   * UpsertUserNotificationState creates or updates a user notification state which records whether the user has clicked on or dismissed a notification.
   *
   * @generated from rpc teleport.notifications.v1.NotificationService.UpsertUserNotificationState
   */
  upsertUserNotificationState: {
    methodKind: "unary";
    input: typeof UpsertUserNotificationStateRequestSchema;
    output: typeof UserNotificationStateSchema;
  },
  /**
   * UpsertUserLastSeenNotification creates or updates a user's last seen notification item.
   *
   * @generated from rpc teleport.notifications.v1.NotificationService.UpsertUserLastSeenNotification
   */
  upsertUserLastSeenNotification: {
    methodKind: "unary";
    input: typeof UpsertUserLastSeenNotificationRequestSchema;
    output: typeof UserLastSeenNotificationSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_teleport_notifications_v1_notifications_service, 0);

