//
// Teleport
// Copyright (C) 2024  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/notifications/v1/notifications.proto (package teleport.notifications.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Metadata } from "../../header/v1/metadata_pb";
import { file_teleport_header_v1_metadata } from "../../header/v1/metadata_pb";
import type { RoleConditions } from "../../legacy/types/types_pb";
import { file_teleport_legacy_types_types } from "../../legacy/types/types_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/notifications/v1/notifications.proto.
 */
export const file_teleport_notifications_v1_notifications: GenFile = /*@__PURE__*/
  fileDesc("Ci10ZWxlcG9ydC9ub3RpZmljYXRpb25zL3YxL25vdGlmaWNhdGlvbnMucHJvdG8SGXRlbGVwb3J0Lm5vdGlmaWNhdGlvbnMudjEiqgEKDE5vdGlmaWNhdGlvbhIMCgRraW5kGAEgASgJEhAKCHN1Yl9raW5kGAIgASgJEg8KB3ZlcnNpb24YAyABKAkSLgoIbWV0YWRhdGEYBCABKAsyHC50ZWxlcG9ydC5oZWFkZXIudjEuTWV0YWRhdGESOQoEc3BlYxgFIAEoCzIrLnRlbGVwb3J0Lm5vdGlmaWNhdGlvbnMudjEuTm90aWZpY2F0aW9uU3BlYyJtChBOb3RpZmljYXRpb25TcGVjEisKB2NyZWF0ZWQYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhAKCHVuc2NvcGVkGAMgASgIEhAKCHVzZXJuYW1lGAQgASgJSgQIARACUgJpZCK2AQoSR2xvYmFsTm90aWZpY2F0aW9uEgwKBGtpbmQYASABKAkSEAoIc3ViX2tpbmQYAiABKAkSDwoHdmVyc2lvbhgDIAEoCRIuCghtZXRhZGF0YRgEIAEoCzIcLnRlbGVwb3J0LmhlYWRlci52MS5NZXRhZGF0YRI/CgRzcGVjGAUgASgLMjEudGVsZXBvcnQubm90aWZpY2F0aW9ucy52MS5HbG9iYWxOb3RpZmljYXRpb25TcGVjIosCChZHbG9iYWxOb3RpZmljYXRpb25TcGVjEkIKDmJ5X3Blcm1pc3Npb25zGAEgASgLMigudGVsZXBvcnQubm90aWZpY2F0aW9ucy52MS5CeVBlcm1pc3Npb25zSAASNgoIYnlfcm9sZXMYAiABKAsyIi50ZWxlcG9ydC5ub3RpZmljYXRpb25zLnYxLkJ5Um9sZXNIABINCgNhbGwYAyABKAhIABIcChRtYXRjaF9hbGxfY29uZGl0aW9ucxgEIAEoCBI9Cgxub3RpZmljYXRpb24YBSABKAsyJy50ZWxlcG9ydC5ub3RpZmljYXRpb25zLnYxLk5vdGlmaWNhdGlvbkIJCgdtYXRjaGVyIj8KDUJ5UGVybWlzc2lvbnMSLgoPcm9sZV9jb25kaXRpb25zGAEgAygLMhUudHlwZXMuUm9sZUNvbmRpdGlvbnMiGAoHQnlSb2xlcxINCgVyb2xlcxgBIAMoCSKEAgoVVXNlck5vdGlmaWNhdGlvblN0YXRlEgwKBGtpbmQYASABKAkSEAoIc3ViX2tpbmQYAiABKAkSDwoHdmVyc2lvbhgDIAEoCRIuCghtZXRhZGF0YRgEIAEoCzIcLnRlbGVwb3J0LmhlYWRlci52MS5NZXRhZGF0YRJCCgRzcGVjGAUgASgLMjQudGVsZXBvcnQubm90aWZpY2F0aW9ucy52MS5Vc2VyTm90aWZpY2F0aW9uU3RhdGVTcGVjEkYKBnN0YXR1cxgGIAEoCzI2LnRlbGVwb3J0Lm5vdGlmaWNhdGlvbnMudjEuVXNlck5vdGlmaWNhdGlvblN0YXRlU3RhdHVzIkYKGVVzZXJOb3RpZmljYXRpb25TdGF0ZVNwZWMSFwoPbm90aWZpY2F0aW9uX2lkGAEgASgJEhAKCHVzZXJuYW1lGAIgASgJImcKG1VzZXJOb3RpZmljYXRpb25TdGF0ZVN0YXR1cxJIChJub3RpZmljYXRpb25fc3RhdGUYASABKA4yLC50ZWxlcG9ydC5ub3RpZmljYXRpb25zLnYxLk5vdGlmaWNhdGlvblN0YXRlIpkCChhVc2VyTGFzdFNlZW5Ob3RpZmljYXRpb24SDAoEa2luZBgBIAEoCRIQCghzdWJfa2luZBgCIAEoCRIPCgd2ZXJzaW9uGAMgASgJEi4KCG1ldGFkYXRhGAQgASgLMhwudGVsZXBvcnQuaGVhZGVyLnYxLk1ldGFkYXRhEkUKBHNwZWMYBSABKAsyNy50ZWxlcG9ydC5ub3RpZmljYXRpb25zLnYxLlVzZXJMYXN0U2Vlbk5vdGlmaWNhdGlvblNwZWMSSQoGc3RhdHVzGAcgASgLMjkudGVsZXBvcnQubm90aWZpY2F0aW9ucy52MS5Vc2VyTGFzdFNlZW5Ob3RpZmljYXRpb25TdGF0dXNKBAgGEAdSBHRpbWUiHgocVXNlckxhc3RTZWVuTm90aWZpY2F0aW9uU3BlYyJUCh5Vc2VyTGFzdFNlZW5Ob3RpZmljYXRpb25TdGF0dXMSMgoObGFzdF9zZWVuX3RpbWUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wKnkKEU5vdGlmaWNhdGlvblN0YXRlEiIKHk5PVElGSUNBVElPTl9TVEFURV9VTlNQRUNJRklFRBAAEh4KGk5PVElGSUNBVElPTl9TVEFURV9DTElDS0VEEAESIAocTk9USUZJQ0FUSU9OX1NUQVRFX0RJU01JU1NFRBACQl5aXGdpdGh1Yi5jb20vZ3Jhdml0YXRpb25hbC90ZWxlcG9ydC9hcGkvZ2VuL3Byb3RvL2dvL3RlbGVwb3J0L25vdGlmaWNhdGlvbnMvdjE7bm90aWZpY2F0aW9uc3YxYgZwcm90bzM", [file_google_protobuf_timestamp, file_teleport_header_v1_metadata, file_teleport_legacy_types_types]);

/**
 * Notification represents a notification item.
 *
 * @generated from message teleport.notifications.v1.Notification
 */
export type Notification = Message<"teleport.notifications.v1.Notification"> & {
  /**
   * kind is the resource kind ("notification").
   *
   * @generated from field: string kind = 1;
   */
  kind: string;

  /**
   * sub_kind represents the unique kind of notification this is, eg. `access-request-approved`
   *
   * @generated from field: string sub_kind = 2;
   */
  subKind: string;

  /**
   * version is the resource version.
   *
   * @generated from field: string version = 3;
   */
  version: string;

  /**
   * metadata is the notification's metadata. This contains the notification's labels, and expiry. All custom notification metadata should be stored in labels.
   *
   * @generated from field: teleport.header.v1.Metadata metadata = 4;
   */
  metadata?: Metadata;

  /**
   * spec is the notification specification.
   *
   * @generated from field: teleport.notifications.v1.NotificationSpec spec = 5;
   */
  spec?: NotificationSpec;
};

/**
 * Describes the message teleport.notifications.v1.Notification.
 * Use `create(NotificationSchema)` to create a new message.
 */
export const NotificationSchema: GenMessage<Notification> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications, 0);

/**
 * NotificationSpec is the notification specification.
 *
 * @generated from message teleport.notifications.v1.NotificationSpec
 */
export type NotificationSpec = Message<"teleport.notifications.v1.NotificationSpec"> & {
  /**
   * created is when the notification was created, in UNIX time.
   *
   * @generated from field: google.protobuf.Timestamp created = 2;
   */
  created?: Timestamp;

  /**
   * unscoped is whether the notification shouldn't be restricted to a specific audience. This is to prevent the potential future possibility that a user-specific notification contains information that the user should no longer be allowed to see. Default is true.
   *
   * @generated from field: bool unscoped = 3;
   */
  unscoped: boolean;

  /**
   * username is the username of the target user if this is a user-specific notification. Requests for global notifications with a username will be rejected.
   *
   * @generated from field: string username = 4;
   */
  username: string;
};

/**
 * Describes the message teleport.notifications.v1.NotificationSpec.
 * Use `create(NotificationSpecSchema)` to create a new message.
 */
export const NotificationSpecSchema: GenMessage<NotificationSpec> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications, 1);

/**
 * GlobalNotification represents a global notification.
 *
 * @generated from message teleport.notifications.v1.GlobalNotification
 */
export type GlobalNotification = Message<"teleport.notifications.v1.GlobalNotification"> & {
  /**
   * kind is the resource kind ("global_notification").
   *
   * @generated from field: string kind = 1;
   */
  kind: string;

  /**
   * sub_kind is the optional resource subkind. This is unused.
   *
   * @generated from field: string sub_kind = 2;
   */
  subKind: string;

  /**
   * version is the resource version.
   *
   * @generated from field: string version = 3;
   */
  version: string;

  /**
   * metadata is the user last seen notification object's metadata.
   *
   * @generated from field: teleport.header.v1.Metadata metadata = 4;
   */
  metadata?: Metadata;

  /**
   * spec is the global notification's specification.
   *
   * @generated from field: teleport.notifications.v1.GlobalNotificationSpec spec = 5;
   */
  spec?: GlobalNotificationSpec;
};

/**
 * Describes the message teleport.notifications.v1.GlobalNotification.
 * Use `create(GlobalNotificationSchema)` to create a new message.
 */
export const GlobalNotificationSchema: GenMessage<GlobalNotification> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications, 2);

/**
 * GlobalNotificationSpec is the global notification's specification.
 *
 * @generated from message teleport.notifications.v1.GlobalNotificationSpec
 */
export type GlobalNotificationSpec = Message<"teleport.notifications.v1.GlobalNotificationSpec"> & {
  /**
   * Matcher for determining the target of this notification.
   *
   * @generated from oneof teleport.notifications.v1.GlobalNotificationSpec.matcher
   */
  matcher: {
    /**
     * by_permissions represents the RoleConditions needed for a user to receive this notification.
     * If multiple permissions are defined and `MatchAllConditions` is true, the user will need to have
     * all of them to receive this notification.
     *
     * @generated from field: teleport.notifications.v1.ByPermissions by_permissions = 1;
     */
    value: ByPermissions;
    case: "byPermissions";
  } | {
    /**
     * by_roles represents the roles targeted by this notification.
     * If multiple roles are defined and `MatchAllConditions` is true, the user will need to have all
     * of them to receive this notification.
     *
     * @generated from field: teleport.notifications.v1.ByRoles by_roles = 2;
     */
    value: ByRoles;
    case: "byRoles";
  } | {
    /**
     * all represents whether to target all users, regardless of roles or permissions.
     *
     * @generated from field: bool all = 3;
     */
    value: boolean;
    case: "all";
  } | { case: undefined; value?: undefined };

  /**
   * match_all_conditions is whether or not all the conditions specified by the matcher must be met,
   * if false, only one of the conditions needs to be met.
   *
   * @generated from field: bool match_all_conditions = 4;
   */
  matchAllConditions: boolean;

  /**
   * notification is the notification itself.
   *
   * @generated from field: teleport.notifications.v1.Notification notification = 5;
   */
  notification?: Notification;
};

/**
 * Describes the message teleport.notifications.v1.GlobalNotificationSpec.
 * Use `create(GlobalNotificationSpecSchema)` to create a new message.
 */
export const GlobalNotificationSpecSchema: GenMessage<GlobalNotificationSpec> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications, 3);

/**
 * ByPermissions represents the RoleConditions needed for a user to receive this notification.
 *
 * @generated from message teleport.notifications.v1.ByPermissions
 */
export type ByPermissions = Message<"teleport.notifications.v1.ByPermissions"> & {
  /**
   * @generated from field: repeated types.RoleConditions role_conditions = 1;
   */
  roleConditions: RoleConditions[];
};

/**
 * Describes the message teleport.notifications.v1.ByPermissions.
 * Use `create(ByPermissionsSchema)` to create a new message.
 */
export const ByPermissionsSchema: GenMessage<ByPermissions> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications, 4);

/**
 * ByRoles represents the roles targeted by this notification.
 *
 * @generated from message teleport.notifications.v1.ByRoles
 */
export type ByRoles = Message<"teleport.notifications.v1.ByRoles"> & {
  /**
   * @generated from field: repeated string roles = 1;
   */
  roles: string[];
};

/**
 * Describes the message teleport.notifications.v1.ByRoles.
 * Use `create(ByRolesSchema)` to create a new message.
 */
export const ByRolesSchema: GenMessage<ByRoles> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications, 5);

/**
 * UserNotificationState represents a notification's state for a user. This is to keep track
 * of whether the user has clicked on or dismissed the notification.
 *
 * @generated from message teleport.notifications.v1.UserNotificationState
 */
export type UserNotificationState = Message<"teleport.notifications.v1.UserNotificationState"> & {
  /**
   * kind is the resource kind ("user_notification_state").
   *
   * @generated from field: string kind = 1;
   */
  kind: string;

  /**
   * sub_kind is the optional resource subkind. This is unused.
   *
   * @generated from field: string sub_kind = 2;
   */
  subKind: string;

  /**
   * version is the resource version.
   *
   * @generated from field: string version = 3;
   */
  version: string;

  /**
   * metadata is the user notification state's metadata.
   *
   * @generated from field: teleport.header.v1.Metadata metadata = 4;
   */
  metadata?: Metadata;

  /**
   * spec is the user notification state's specification.
   *
   * @generated from field: teleport.notifications.v1.UserNotificationStateSpec spec = 5;
   */
  spec?: UserNotificationStateSpec;

  /**
   * status is the state of this user notification state, it contains the notification state itself which will be dynamically modified.
   *
   * @generated from field: teleport.notifications.v1.UserNotificationStateStatus status = 6;
   */
  status?: UserNotificationStateStatus;
};

/**
 * Describes the message teleport.notifications.v1.UserNotificationState.
 * Use `create(UserNotificationStateSchema)` to create a new message.
 */
export const UserNotificationStateSchema: GenMessage<UserNotificationState> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications, 6);

/**
 * UserNotificationStateSpec is the user notification state's specification.
 *
 * @generated from message teleport.notifications.v1.UserNotificationStateSpec
 */
export type UserNotificationStateSpec = Message<"teleport.notifications.v1.UserNotificationStateSpec"> & {
  /**
   * notification_id is the ID of the notification this state is for.
   *
   * @generated from field: string notification_id = 1;
   */
  notificationId: string;

  /**
   * username is the username of the user this notification state is for.
   *
   * @generated from field: string username = 2;
   */
  username: string;
};

/**
 * Describes the message teleport.notifications.v1.UserNotificationStateSpec.
 * Use `create(UserNotificationStateSpecSchema)` to create a new message.
 */
export const UserNotificationStateSpecSchema: GenMessage<UserNotificationStateSpec> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications, 7);

/**
 * UserNotificationStateStatus is the status of this user notification state, it contains the notification state itself which will be dynamically modified.
 *
 * @generated from message teleport.notifications.v1.UserNotificationStateStatus
 */
export type UserNotificationStateStatus = Message<"teleport.notifications.v1.UserNotificationStateStatus"> & {
  /**
   * notification_state is the state of this notification for the user. This can represent either "clicked" or "dismissed".
   *
   * @generated from field: teleport.notifications.v1.NotificationState notification_state = 1;
   */
  notificationState: NotificationState;
};

/**
 * Describes the message teleport.notifications.v1.UserNotificationStateStatus.
 * Use `create(UserNotificationStateStatusSchema)` to create a new message.
 */
export const UserNotificationStateStatusSchema: GenMessage<UserNotificationStateStatus> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications, 8);

/**
 * UserLastSeenNotification represents the timestamp of the last notification a user has seen.
 *
 * @generated from message teleport.notifications.v1.UserLastSeenNotification
 */
export type UserLastSeenNotification = Message<"teleport.notifications.v1.UserLastSeenNotification"> & {
  /**
   * kind is the resource kind ("user_last_seen_notification").
   *
   * @generated from field: string kind = 1;
   */
  kind: string;

  /**
   * sub_kind is the optional resource subkind. This is unused.
   *
   * @generated from field: string sub_kind = 2;
   */
  subKind: string;

  /**
   * version is the resource version.
   *
   * @generated from field: string version = 3;
   */
  version: string;

  /**
   * metadata is the user last seen notification object's metadata.
   *
   * @generated from field: teleport.header.v1.Metadata metadata = 4;
   */
  metadata?: Metadata;

  /**
   * UserLastSeenNotificationSpec is the user last seen notification item's specification.
   *
   * @generated from field: teleport.notifications.v1.UserLastSeenNotificationSpec spec = 5;
   */
  spec?: UserLastSeenNotificationSpec;

  /**
   * status is the timestamp of this user's last seen notification, it contains the timestamp of the notification which will be dynamically modified.
   *
   * @generated from field: teleport.notifications.v1.UserLastSeenNotificationStatus status = 7;
   */
  status?: UserLastSeenNotificationStatus;
};

/**
 * Describes the message teleport.notifications.v1.UserLastSeenNotification.
 * Use `create(UserLastSeenNotificationSchema)` to create a new message.
 */
export const UserLastSeenNotificationSchema: GenMessage<UserLastSeenNotification> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications, 9);

/**
 * UserLastSeenNotificationSpec is a user last seen notification specification.
 *
 * @generated from message teleport.notifications.v1.UserLastSeenNotificationSpec
 */
export type UserLastSeenNotificationSpec = Message<"teleport.notifications.v1.UserLastSeenNotificationSpec"> & {
};

/**
 * Describes the message teleport.notifications.v1.UserLastSeenNotificationSpec.
 * Use `create(UserLastSeenNotificationSpecSchema)` to create a new message.
 */
export const UserLastSeenNotificationSpecSchema: GenMessage<UserLastSeenNotificationSpec> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications, 10);

/**
 * UserLastSeenNotificationStatus is the timestamp of this user's last seen notification, it contains the timestamp of the notification which will be dynamically modified.
 *
 * @generated from message teleport.notifications.v1.UserLastSeenNotificationStatus
 */
export type UserLastSeenNotificationStatus = Message<"teleport.notifications.v1.UserLastSeenNotificationStatus"> & {
  /**
   * last_seen_time is the timestamp of the last notification that the user has seen.
   *
   * @generated from field: google.protobuf.Timestamp last_seen_time = 1;
   */
  lastSeenTime?: Timestamp;
};

/**
 * Describes the message teleport.notifications.v1.UserLastSeenNotificationStatus.
 * Use `create(UserLastSeenNotificationStatusSchema)` to create a new message.
 */
export const UserLastSeenNotificationStatusSchema: GenMessage<UserLastSeenNotificationStatus> = /*@__PURE__*/
  messageDesc(file_teleport_notifications_v1_notifications, 11);

/**
 * NotificationState the state of a notification for a user. This can represent either "clicked" or "dismissed".
 *
 * @generated from enum teleport.notifications.v1.NotificationState
 */
export enum NotificationState {
  /**
   * @generated from enum value: NOTIFICATION_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * NOTIFICATION_STATE_CLICKED marks this notification as having been clicked on by the user.
   *
   * @generated from enum value: NOTIFICATION_STATE_CLICKED = 1;
   */
  CLICKED = 1,

  /**
   * NOTIFICATION_STATE_DISMISSED marks this notification as having been dismissed by the user.
   *
   * @generated from enum value: NOTIFICATION_STATE_DISMISSED = 2;
   */
  DISMISSED = 2,
}

/**
 * Describes the enum teleport.notifications.v1.NotificationState.
 */
export const NotificationStateSchema: GenEnum<NotificationState> = /*@__PURE__*/
  enumDesc(file_teleport_notifications_v1_notifications, 0);

