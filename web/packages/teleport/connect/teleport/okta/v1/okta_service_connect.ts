// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file teleport/okta/v1/okta_service.proto (package teleport.okta.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateIntegrationRequest, CreateIntegrationResponse, CreateOktaAssignmentRequest, CreateOktaImportRuleRequest, DeleteAllOktaAssignmentsRequest, DeleteAllOktaImportRulesRequest, DeleteOktaAssignmentRequest, DeleteOktaImportRuleRequest, GetAppsRequest, GetAppsResponse, GetGroupsRequest, GetGroupsResponse, GetOktaAssignmentRequest, GetOktaImportRuleRequest, ListOktaAssignmentsRequest, ListOktaAssignmentsResponse, ListOktaImportRulesRequest, ListOktaImportRulesResponse, UpdateIntegrationRequest, UpdateIntegrationResponse, UpdateOktaAssignmentRequest, UpdateOktaAssignmentStatusRequest, UpdateOktaImportRuleRequest, ValidateClientCredentialsRequest, ValidateClientCredentialsResponse } from "./okta_service_pb.js";
import { Empty, MethodKind } from "@bufbuild/protobuf";
import { OktaAssignmentV1, OktaImportRuleV1 } from "../../legacy/types/types_pb.js";

/**
 * OktaService provides CRUD methods for Okta resources.
 *
 * @generated from service teleport.okta.v1.OktaService
 */
export const OktaService = {
  typeName: "teleport.okta.v1.OktaService",
  methods: {
    /**
     * ListOktaImportRules returns a paginated list of all Okta import rule resources.
     *
     * @generated from rpc teleport.okta.v1.OktaService.ListOktaImportRules
     */
    listOktaImportRules: {
      name: "ListOktaImportRules",
      I: ListOktaImportRulesRequest,
      O: ListOktaImportRulesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOktaImportRule returns the specified Okta import rule resources.
     *
     * @generated from rpc teleport.okta.v1.OktaService.GetOktaImportRule
     */
    getOktaImportRule: {
      name: "GetOktaImportRule",
      I: GetOktaImportRuleRequest,
      O: OktaImportRuleV1,
      kind: MethodKind.Unary,
    },
    /**
     * CreateOktaImportRule creates a new Okta import rule resource.
     *
     * @generated from rpc teleport.okta.v1.OktaService.CreateOktaImportRule
     */
    createOktaImportRule: {
      name: "CreateOktaImportRule",
      I: CreateOktaImportRuleRequest,
      O: OktaImportRuleV1,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateOktaImportRule updates an existing Okta import rule resource.
     *
     * @generated from rpc teleport.okta.v1.OktaService.UpdateOktaImportRule
     */
    updateOktaImportRule: {
      name: "UpdateOktaImportRule",
      I: UpdateOktaImportRuleRequest,
      O: OktaImportRuleV1,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteOktaImportRule removes the specified Okta import rule resource.
     *
     * @generated from rpc teleport.okta.v1.OktaService.DeleteOktaImportRule
     */
    deleteOktaImportRule: {
      name: "DeleteOktaImportRule",
      I: DeleteOktaImportRuleRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllOktaImportRules removes all Okta import rules.
     *
     * @generated from rpc teleport.okta.v1.OktaService.DeleteAllOktaImportRules
     */
    deleteAllOktaImportRules: {
      name: "DeleteAllOktaImportRules",
      I: DeleteAllOktaImportRulesRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * ListOktaAssignments returns a paginated list of all Okta assignment resources.
     *
     * @generated from rpc teleport.okta.v1.OktaService.ListOktaAssignments
     */
    listOktaAssignments: {
      name: "ListOktaAssignments",
      I: ListOktaAssignmentsRequest,
      O: ListOktaAssignmentsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOktaAssignment returns the specified Okta assignment resources.
     *
     * @generated from rpc teleport.okta.v1.OktaService.GetOktaAssignment
     */
    getOktaAssignment: {
      name: "GetOktaAssignment",
      I: GetOktaAssignmentRequest,
      O: OktaAssignmentV1,
      kind: MethodKind.Unary,
    },
    /**
     * CreateOktaAssignment creates a new Okta assignment resource.
     *
     * @generated from rpc teleport.okta.v1.OktaService.CreateOktaAssignment
     */
    createOktaAssignment: {
      name: "CreateOktaAssignment",
      I: CreateOktaAssignmentRequest,
      O: OktaAssignmentV1,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateOktaAssignment updates an existing Okta assignment resource.
     *
     * @generated from rpc teleport.okta.v1.OktaService.UpdateOktaAssignment
     */
    updateOktaAssignment: {
      name: "UpdateOktaAssignment",
      I: UpdateOktaAssignmentRequest,
      O: OktaAssignmentV1,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateOktaAssignmentStatus will update the status for an Okta assignment.
     *
     * @generated from rpc teleport.okta.v1.OktaService.UpdateOktaAssignmentStatus
     */
    updateOktaAssignmentStatus: {
      name: "UpdateOktaAssignmentStatus",
      I: UpdateOktaAssignmentStatusRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteOktaAssignment removes the specified Okta assignment resource.
     *
     * @generated from rpc teleport.okta.v1.OktaService.DeleteOktaAssignment
     */
    deleteOktaAssignment: {
      name: "DeleteOktaAssignment",
      I: DeleteOktaAssignmentRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllOktaAssignments removes all Okta assignments.
     *
     * @generated from rpc teleport.okta.v1.OktaService.DeleteAllOktaAssignments
     */
    deleteAllOktaAssignments: {
      name: "DeleteAllOktaAssignments",
      I: DeleteAllOktaAssignmentsRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * ValidateClientCredentials checks if the provided client credentials are valid.
     *
     * @generated from rpc teleport.okta.v1.OktaService.ValidateClientCredentials
     */
    validateClientCredentials: {
      name: "ValidateClientCredentials",
      I: ValidateClientCredentialsRequest,
      O: ValidateClientCredentialsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * EnrollIntegration enrolls a new integration with the specified parameters.
     *
     * @generated from rpc teleport.okta.v1.OktaService.CreateIntegration
     */
    createIntegration: {
      name: "CreateIntegration",
      I: CreateIntegrationRequest,
      O: CreateIntegrationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateIntegration updates the settings or properties of an existing integration.
     *
     * @generated from rpc teleport.okta.v1.OktaService.UpdateIntegration
     */
    updateIntegration: {
      name: "UpdateIntegration",
      I: UpdateIntegrationRequest,
      O: UpdateIntegrationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetApps retrieves a list of apps from Okta based on specified filter criteria.
     *
     * @generated from rpc teleport.okta.v1.OktaService.GetApps
     */
    getApps: {
      name: "GetApps",
      I: GetAppsRequest,
      O: GetAppsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetGroups retrieves a list of apps from Okta based on specified filter criteria.
     *
     * @generated from rpc teleport.okta.v1.OktaService.GetGroups
     */
    getGroups: {
      name: "GetGroups",
      I: GetGroupsRequest,
      O: GetGroupsResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

