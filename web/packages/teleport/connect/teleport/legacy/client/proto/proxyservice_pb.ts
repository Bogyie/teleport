// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/legacy/client/proto/proxyservice.proto (package proto, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../../gogoproto/gogo_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/legacy/client/proto/proxyservice.proto.
 */
export const file_teleport_legacy_client_proto_proxyservice: GenFile = /*@__PURE__*/
  fileDesc("Ci90ZWxlcG9ydC9sZWdhY3kvY2xpZW50L3Byb3RvL3Byb3h5c2VydmljZS5wcm90bxIFcHJvdG8imQEKBUZyYW1lEikKC0RpYWxSZXF1ZXN0GAEgASgLMhIucHJvdG8uRGlhbFJlcXVlc3RIABI9ChVDb25uZWN0aW9uRXN0YWJsaXNoZWQYAiABKAsyHC5wcm90by5Db25uZWN0aW9uRXN0YWJsaXNoZWRIABIbCgREYXRhGAMgASgLMgsucHJvdG8uRGF0YUgAQgkKB01lc3NhZ2UisgEKC0RpYWxSZXF1ZXN0Eg4KBk5vZGVJRBgBIAEoCRJOCgpUdW5uZWxUeXBlGAIgASgJQjr63h82Z2l0aHViLmNvbS9ncmF2aXRhdGlvbmFsL3RlbGVwb3J0L2FwaS90eXBlcy5UdW5uZWxUeXBlEh4KBlNvdXJjZRgDIAEoCzIOLnByb3RvLk5ldEFkZHISIwoLRGVzdGluYXRpb24YBCABKAsyDi5wcm90by5OZXRBZGRyIigKB05ldEFkZHISDwoHTmV0d29yaxgBIAEoCRIMCgRBZGRyGAIgASgJIhUKBERhdGESDQoFQnl0ZXMYASABKAwiFwoVQ29ubmVjdGlvbkVzdGFibGlzaGVkMjoKDFByb3h5U2VydmljZRIqCghEaWFsTm9kZRIMLnByb3RvLkZyYW1lGgwucHJvdG8uRnJhbWUoATABQjRaMmdpdGh1Yi5jb20vZ3Jhdml0YXRpb25hbC90ZWxlcG9ydC9hcGkvY2xpZW50L3Byb3RvYgZwcm90bzM", [file_gogoproto_gogo]);

/**
 * Frame wraps different message types to be sent over a stream.
 *
 * @generated from message proto.Frame
 */
export type Frame = Message<"proto.Frame"> & {
  /**
   * @generated from oneof proto.Frame.Message
   */
  Message: {
    /**
     * @generated from field: proto.DialRequest DialRequest = 1;
     */
    value: DialRequest;
    case: "DialRequest";
  } | {
    /**
     * @generated from field: proto.ConnectionEstablished ConnectionEstablished = 2;
     */
    value: ConnectionEstablished;
    case: "ConnectionEstablished";
  } | {
    /**
     * @generated from field: proto.Data Data = 3;
     */
    value: Data;
    case: "Data";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message proto.Frame.
 * Use `create(FrameSchema)` to create a new message.
 */
export const FrameSchema: GenMessage<Frame> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_proxyservice, 0);

/**
 * DialRequest contains details for connecting to a node.
 *
 * @generated from message proto.DialRequest
 */
export type DialRequest = Message<"proto.DialRequest"> & {
  /**
   * NodeID is the {UUID}.{ClusterName} of the node to connect to.
   *
   * @generated from field: string NodeID = 1;
   */
  NodeID: string;

  /**
   * TunnelType is the type of service being accessed. This differentiates agents that
   * create multiple reverse tunnels for different services.
   *
   * @generated from field: string TunnelType = 2;
   */
  TunnelType: string;

  /**
   * Source is the original source address of the client.
   *
   * @generated from field: proto.NetAddr Source = 3;
   */
  Source?: NetAddr;

  /**
   * Destination is the destination address to connect to over the reverse tunnel.
   *
   * @generated from field: proto.NetAddr Destination = 4;
   */
  Destination?: NetAddr;
};

/**
 * Describes the message proto.DialRequest.
 * Use `create(DialRequestSchema)` to create a new message.
 */
export const DialRequestSchema: GenMessage<DialRequest> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_proxyservice, 1);

/**
 * Addr is a network address.
 *
 * @generated from message proto.NetAddr
 */
export type NetAddr = Message<"proto.NetAddr"> & {
  /**
   * Network is the type of network socket. For example tcp or udp.
   *
   * @generated from field: string Network = 1;
   */
  Network: string;

  /**
   * Addr is the host:port address. For example 'localhost:22'
   *
   * @generated from field: string Addr = 2;
   */
  Addr: string;
};

/**
 * Describes the message proto.NetAddr.
 * Use `create(NetAddrSchema)` to create a new message.
 */
export const NetAddrSchema: GenMessage<NetAddr> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_proxyservice, 2);

/**
 * Data contains the raw bytes of a connection.
 *
 * @generated from message proto.Data
 */
export type Data = Message<"proto.Data"> & {
  /**
   * @generated from field: bytes Bytes = 1;
   */
  Bytes: Uint8Array;
};

/**
 * Describes the message proto.Data.
 * Use `create(DataSchema)` to create a new message.
 */
export const DataSchema: GenMessage<Data> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_proxyservice, 3);

/**
 * ConnectionEstablished signals to the client a connection to the node has been established.
 *
 * @generated from message proto.ConnectionEstablished
 */
export type ConnectionEstablished = Message<"proto.ConnectionEstablished"> & {
};

/**
 * Describes the message proto.ConnectionEstablished.
 * Use `create(ConnectionEstablishedSchema)` to create a new message.
 */
export const ConnectionEstablishedSchema: GenMessage<ConnectionEstablished> = /*@__PURE__*/
  messageDesc(file_teleport_legacy_client_proto_proxyservice, 4);

/**
 * ProxyPeerService is a proxy to proxy api.
 *
 * @generated from service proto.ProxyService
 */
export const ProxyService: GenService<{
  /**
   * DialNode opens a bidrectional stream to the requested node.
   *
   * @generated from rpc proto.ProxyService.DialNode
   */
  dialNode: {
    methodKind: "bidi_streaming";
    input: typeof FrameSchema;
    output: typeof FrameSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_teleport_legacy_client_proto_proxyservice, 0);

