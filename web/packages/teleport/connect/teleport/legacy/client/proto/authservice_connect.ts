// Copyright 2021-2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file teleport/legacy/client/proto/authservice.proto (package proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AccessRequestAllowedPromotionRequest, AccessRequestAllowedPromotionResponse, AddMFADeviceRequest, AddMFADeviceResponse, AddMFADeviceSyncRequest, AddMFADeviceSyncResponse, AppendDiagnosticTraceRequest, AuditStreamRequest, CertAuthorityRequest, ChangePasswordRequest, ChangeUserAuthenticationRequest, ChangeUserAuthenticationResponse, ClearAlertAcksRequest, CompleteAccountRecoveryRequest, CreateAccountRecoveryCodesRequest, CreateAppSessionRequest, CreateAppSessionResponse, CreateAuthenticateChallengeRequest, CreateGithubConnectorRequest, CreateOIDCConnectorRequest, CreatePrivilegeTokenRequest, CreateRegisterChallengeRequest, CreateResetPasswordTokenRequest, CreateRoleRequest, CreateSAMLConnectorRequest, CreateSAMLIdPSessionRequest, CreateSAMLIdPSessionResponse, CreateSessionTrackerRequest, CreateSnowflakeSessionRequest, CreateSnowflakeSessionResponse, CreateTokenV2Request, CRL, DatabaseCertRequest, DatabaseCertResponse, DatabaseCSRRequest, DatabaseCSRResponse, DeleteAllApplicationServersRequest, DeleteAllDatabaseServersRequest, DeleteAllDatabaseServicesRequest, DeleteAllKubernetesServersRequest, DeleteApplicationServerRequest, DeleteAppSessionRequest, DeleteDatabaseServerRequest, DeleteKubernetesServerRequest, DeleteLockRequest, DeleteMFADeviceRequest, DeleteMFADeviceResponse, DeleteMFADeviceSyncRequest, DeleteRoleRequest, DeleteSAMLIdPServiceProviderRequest, DeleteSAMLIdPSessionRequest, DeleteSnowflakeSessionRequest, DeleteUserAppSessionsRequest, DeleteUserGroupRequest, DeleteUserRequest, DeleteUserSAMLIdPSessionsRequest, DeleteWindowsDesktopRequest, DeleteWindowsDesktopServiceRequest, DesktopBootstrapScriptResponse, DownstreamInventoryOneOf, Events, ExportUpgradeWindowsRequest, ExportUpgradeWindowsResponse, GenerateAppTokenRequest, GenerateAppTokenResponse, GetAccountRecoveryCodesRequest, GetAccountRecoveryTokenRequest, GetAlertAcksRequest, GetAlertAcksResponse, GetAppSessionRequest, GetAppSessionResponse, GetClusterAlertsResponse, GetClusterCACertResponse, GetConnectionDiagnosticRequest, GetDomainNameResponse, GetEventsRequest, GetGithubAuthRequestRequest, GetHeadlessAuthenticationRequest, GetLicenseRequest, GetLicenseResponse, GetLockRequest, GetLocksRequest, GetLocksResponse, GetMFADevicesRequest, GetMFADevicesResponse, GetOIDCAuthRequestRequest, GetResetPasswordTokenRequest, GetRoleRequest, GetRolesResponse, GetSAMLAuthRequestRequest, GetSAMLIdPServiceProviderRequest, GetSAMLIdPSessionRequest, GetSAMLIdPSessionResponse, GetSessionEventsRequest, GetSessionTrackerRequest, GetSnowflakeSessionRequest, GetSnowflakeSessionResponse, GetSnowflakeSessionsResponse, GetSSHTargetsRequest, GetSSHTargetsResponse, GetSSODiagnosticInfoRequest, GetUserGroupRequest, GetUserRequest, GetUsersRequest, GetWebSessionResponse, GetWebSessionsResponse, GetWebTokenResponse, GetWebTokensResponse, GetWindowsDesktopServiceRequest, GetWindowsDesktopServiceResponse, GetWindowsDesktopServicesResponse, GetWindowsDesktopsResponse, HostCertsRequest, InventoryConnectedServiceCounts, InventoryConnectedServiceCountsRequest, InventoryPingRequest, InventoryPingResponse, InventoryStatusRequest, InventoryStatusSummary, IsMFARequiredRequest, IsMFARequiredResponse, ListAccessRequestsRequest, ListAccessRequestsResponse, ListAppSessionsRequest, ListAppSessionsResponse, ListReleasesRequest, ListReleasesResponse, ListResourcesRequest, ListResourcesResponse, ListRolesRequest, ListRolesResponse, ListSAMLIdPServiceProvidersRequest, ListSAMLIdPServiceProvidersResponse, ListSAMLIdPSessionsRequest, ListSAMLIdPSessionsResponse, ListUnifiedResourcesRequest, ListUnifiedResourcesResponse, ListUserGroupsRequest, ListUserGroupsResponse, MFAAuthenticateChallenge, MFARegisterChallenge, OpenSSHCert, OpenSSHCertRequest, PingRequest, PingResponse, PluginDataSeq, PresenceMFAChallengeSend, RecoveryCodes, RemoveSessionTrackerRequest, ReplaceRemoteLocksRequest, RequestID, RequestStateSetter, Semaphores, SnowflakeJWTRequest, SnowflakeJWTResponse, StartAccountRecoveryRequest, StreamSessionEventsRequest, SubmitUsageEventRequest, SystemRoleAssertion, UpdateGithubConnectorRequest, UpdateHeadlessAuthenticationStateRequest, UpdateOIDCConnectorRequest, UpdateRoleRequest, UpdateSAMLConnectorRequest, UpdateSessionTrackerRequest, UpsertApplicationServerRequest, UpsertClusterAlertRequest, UpsertDatabaseServerRequest, UpsertDatabaseServiceRequest, UpsertGithubConnectorRequest, UpsertKubernetesServerRequest, UpsertOIDCConnectorRequest, UpsertRoleRequest, UpsertSAMLConnectorRequest, UpsertTokenV2Request, UpstreamInventoryOneOf, UserCertsRequest, UserSingleUseCertsRequest, UserSingleUseCertsResponse, VerifyAccountRecoveryRequest, Watch, WindowsDesktopCertRequest, WindowsDesktopCertResponse } from "./authservice_pb.js";
import { Empty, MethodKind } from "@bufbuild/protobuf";
import { AccessCapabilities, AccessCapabilitiesRequest, AccessRequestFilter, AccessRequestV3, AccessReviewSubmission, AcquireSemaphoreRequest, AlertAcknowledgement, AppV3, AppV3List, AuthPreferenceV2, ClusterAuditConfigV2, ClusterMaintenanceConfigV1, ClusterNetworkingConfigV2, ConnectionDiagnosticV1, DatabaseV3, DatabaseV3List, DeleteWebSessionRequest, DeleteWebTokenRequest, GetClusterAlertsRequest, GetWebSessionRequest, GetWebTokenRequest, GithubAuthRequest, GithubConnectorV3, GithubConnectorV3List, HeadlessAuthentication, InstallerV1, InstallerV1List, InstanceFilter, InstanceV1, KeepAlive, KubernetesClusterV3, KubernetesClusterV3List, LockV2, NetworkRestrictionsV4, OIDCAuthRequest, OIDCConnectorV3, OIDCConnectorV3List, PluginDataFilter, PluginDataUpdateParams, ProvisionTokenV2, ProvisionTokenV2List, RemoteClusterV3, ResourceInNamespaceRequest, ResourceRequest, ResourcesInNamespaceRequest, ResourcesWithSecretsRequest, ResourceWithSecretsRequest, RoleV6, SAMLAuthRequest, SAMLConnectorV2, SAMLConnectorV2List, SAMLIdPServiceProviderV1, SemaphoreFilter, SemaphoreLease, ServerInfoV1, ServerV2, SessionRecordingConfigV2, SessionTrackerFilter, SessionTrackerV1, SSODiagnosticInfo, TrustedClusterV2, TrustedClusterV2List, UIConfigV1, UserGroupV1, UserTokenV3, UserV2, WindowsDesktopFilter, WindowsDesktopServiceV3, WindowsDesktopV3 } from "../../types/types_pb.js";
import { Event } from "./event_pb.js";
import { Certs } from "./certs_pb.js";
import { OneOf, StreamStatus } from "../../types/events/events_pb.js";

/**
 * AuthService is authentication/authorization service implementation
 *
 * @generated from service proto.AuthService
 */
export const AuthService = {
  typeName: "proto.AuthService",
  methods: {
    /**
     * InventoryControlStream is the per-instance stream used to advertise teleport instance
     * presence/version/etc to the auth server.
     *
     * @generated from rpc proto.AuthService.InventoryControlStream
     */
    inventoryControlStream: {
      name: "InventoryControlStream",
      I: UpstreamInventoryOneOf,
      O: DownstreamInventoryOneOf,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * GetInventoryStatus gets information about current instance inventory.
     *
     * @generated from rpc proto.AuthService.GetInventoryStatus
     */
    getInventoryStatus: {
      name: "GetInventoryStatus",
      I: InventoryStatusRequest,
      O: InventoryStatusSummary,
      kind: MethodKind.Unary,
    },
    /**
     * GetInventoryConnectedServiceCounts returns the counts of each connected service seen in the inventory.
     *
     * @generated from rpc proto.AuthService.GetInventoryConnectedServiceCounts
     */
    getInventoryConnectedServiceCounts: {
      name: "GetInventoryConnectedServiceCounts",
      I: InventoryConnectedServiceCountsRequest,
      O: InventoryConnectedServiceCounts,
      kind: MethodKind.Unary,
    },
    /**
     * PingInventory attempts to trigger a downstream inventory ping (used in testing/debug).
     *
     * @generated from rpc proto.AuthService.PingInventory
     */
    pingInventory: {
      name: "PingInventory",
      I: InventoryPingRequest,
      O: InventoryPingResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetInstances streams all instances matching the specified filter.
     *
     * @generated from rpc proto.AuthService.GetInstances
     */
    getInstances: {
      name: "GetInstances",
      I: InstanceFilter,
      O: InstanceV1,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * GetClusterAlerts loads cluster-level alert messages.
     *
     * @generated from rpc proto.AuthService.GetClusterAlerts
     */
    getClusterAlerts: {
      name: "GetClusterAlerts",
      I: GetClusterAlertsRequest,
      O: GetClusterAlertsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertClusterAlert creates a cluster alert.
     *
     * @generated from rpc proto.AuthService.UpsertClusterAlert
     */
    upsertClusterAlert: {
      name: "UpsertClusterAlert",
      I: UpsertClusterAlertRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * CreateAlertAck marks a cluster alert as acknowledged.
     *
     * @generated from rpc proto.AuthService.CreateAlertAck
     */
    createAlertAck: {
      name: "CreateAlertAck",
      I: AlertAcknowledgement,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetAlertAcks gets active alert ackowledgements.
     *
     * @generated from rpc proto.AuthService.GetAlertAcks
     */
    getAlertAcks: {
      name: "GetAlertAcks",
      I: GetAlertAcksRequest,
      O: GetAlertAcksResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ClearAlertAcks clears alert acknowledgments.
     *
     * @generated from rpc proto.AuthService.ClearAlertAcks
     */
    clearAlertAcks: {
      name: "ClearAlertAcks",
      I: ClearAlertAcksRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * MaintainSessionPresence establishes a channel used to continously verify the presence for a
     * session.
     *
     * @generated from rpc proto.AuthService.MaintainSessionPresence
     */
    maintainSessionPresence: {
      name: "MaintainSessionPresence",
      I: PresenceMFAChallengeSend,
      O: MFAAuthenticateChallenge,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * CreateSessionTracker creates a new session tracker resource.
     *
     * @generated from rpc proto.AuthService.CreateSessionTracker
     */
    createSessionTracker: {
      name: "CreateSessionTracker",
      I: CreateSessionTrackerRequest,
      O: SessionTrackerV1,
      kind: MethodKind.Unary,
    },
    /**
     * GetSessionTracker fetches a session tracker resource.
     *
     * @generated from rpc proto.AuthService.GetSessionTracker
     */
    getSessionTracker: {
      name: "GetSessionTracker",
      I: GetSessionTrackerRequest,
      O: SessionTrackerV1,
      kind: MethodKind.Unary,
    },
    /**
     * GetActiveSessionTrackers returns a list of active sessions.
     *
     * @generated from rpc proto.AuthService.GetActiveSessionTrackers
     */
    getActiveSessionTrackers: {
      name: "GetActiveSessionTrackers",
      I: Empty,
      O: SessionTrackerV1,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * GetActiveSessionTrackersWithFilter returns a list of active sessions filtered by a filter.
     *
     * @generated from rpc proto.AuthService.GetActiveSessionTrackersWithFilter
     */
    getActiveSessionTrackersWithFilter: {
      name: "GetActiveSessionTrackersWithFilter",
      I: SessionTrackerFilter,
      O: SessionTrackerV1,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * RemoveSessionTracker removes a session tracker resource.
     *
     * @generated from rpc proto.AuthService.RemoveSessionTracker
     */
    removeSessionTracker: {
      name: "RemoveSessionTracker",
      I: RemoveSessionTrackerRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateSessionTracker updates some state of a session tracker.
     *
     * @generated from rpc proto.AuthService.UpdateSessionTracker
     */
    updateSessionTracker: {
      name: "UpdateSessionTracker",
      I: UpdateSessionTrackerRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * SendKeepAlives allows node to send a stream of keep alive requests
     *
     * @generated from rpc proto.AuthService.SendKeepAlives
     */
    sendKeepAlives: {
      name: "SendKeepAlives",
      I: KeepAlive,
      O: Empty,
      kind: MethodKind.ClientStreaming,
    },
    /**
     * WatchEvents returns a new stream of cluster events
     *
     * @generated from rpc proto.AuthService.WatchEvents
     */
    watchEvents: {
      name: "WatchEvents",
      I: Watch,
      O: Event,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * GetNode retrieves a node described by the given request.
     *
     * @generated from rpc proto.AuthService.GetNode
     */
    getNode: {
      name: "GetNode",
      I: ResourceInNamespaceRequest,
      O: ServerV2,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertNode upserts a node in a backend.
     *
     * @generated from rpc proto.AuthService.UpsertNode
     */
    upsertNode: {
      name: "UpsertNode",
      I: ServerV2,
      O: KeepAlive,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteNode deletes an existing node in a backend described by the given request.
     *
     * @generated from rpc proto.AuthService.DeleteNode
     */
    deleteNode: {
      name: "DeleteNode",
      I: ResourceInNamespaceRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllNodes deletes all nodes.
     *
     * @generated from rpc proto.AuthService.DeleteAllNodes
     */
    deleteAllNodes: {
      name: "DeleteAllNodes",
      I: ResourcesInNamespaceRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GenerateUserCerts generates a set of user certificates.
     *
     * @generated from rpc proto.AuthService.GenerateUserCerts
     */
    generateUserCerts: {
      name: "GenerateUserCerts",
      I: UserCertsRequest,
      O: Certs,
      kind: MethodKind.Unary,
    },
    /**
     * GenerateHostCerts generates a set of host certificates.
     *
     * @generated from rpc proto.AuthService.GenerateHostCerts
     */
    generateHostCerts: {
      name: "GenerateHostCerts",
      I: HostCertsRequest,
      O: Certs,
      kind: MethodKind.Unary,
    },
    /**
     * Deprecated: Superseded by GenerateUserCerts.
     *
     * @generated from rpc proto.AuthService.GenerateUserSingleUseCerts
     * @deprecated
     */
    generateUserSingleUseCerts: {
      name: "GenerateUserSingleUseCerts",
      I: UserSingleUseCertsRequest,
      O: UserSingleUseCertsResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * GenerateOpenSSHCert signs a SSH certificate that can be used
     * to connect to Agentless nodes.
     *
     * @generated from rpc proto.AuthService.GenerateOpenSSHCert
     */
    generateOpenSSHCert: {
      name: "GenerateOpenSSHCert",
      I: OpenSSHCertRequest,
      O: OpenSSHCert,
      kind: MethodKind.Unary,
    },
    /**
     * IsMFARequired checks whether MFA is required to access the specified
     * target.
     *
     * @generated from rpc proto.AuthService.IsMFARequired
     */
    isMFARequired: {
      name: "IsMFARequired",
      I: IsMFARequiredRequest,
      O: IsMFARequiredResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetAccessRequestsV2 gets all pending access requests.
     *
     * @generated from rpc proto.AuthService.GetAccessRequestsV2
     */
    getAccessRequestsV2: {
      name: "GetAccessRequestsV2",
      I: AccessRequestFilter,
      O: AccessRequestV3,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * ListAccessRequests gets access requests with pagination and sorting.
     *
     * @generated from rpc proto.AuthService.ListAccessRequests
     */
    listAccessRequests: {
      name: "ListAccessRequests",
      I: ListAccessRequestsRequest,
      O: ListAccessRequestsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateAccessRequest creates a new access request.
     * Deprecated: use CreateAccessRequestV2 instead.
     * DELETE IN v15.0.0.
     *
     * @generated from rpc proto.AuthService.CreateAccessRequest
     */
    createAccessRequest: {
      name: "CreateAccessRequest",
      I: AccessRequestV3,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * CreateAccessRequestV2 creates a new access request.
     *
     * @generated from rpc proto.AuthService.CreateAccessRequestV2
     */
    createAccessRequestV2: {
      name: "CreateAccessRequestV2",
      I: AccessRequestV3,
      O: AccessRequestV3,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAccessRequest deletes an access request.
     *
     * @generated from rpc proto.AuthService.DeleteAccessRequest
     */
    deleteAccessRequest: {
      name: "DeleteAccessRequest",
      I: RequestID,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * SetAccessRequestState sets the state of an access request.
     *
     * @generated from rpc proto.AuthService.SetAccessRequestState
     */
    setAccessRequestState: {
      name: "SetAccessRequestState",
      I: RequestStateSetter,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * SubmitAccessReview applies a review to a request and returns the post-application state.
     *
     * @generated from rpc proto.AuthService.SubmitAccessReview
     */
    submitAccessReview: {
      name: "SubmitAccessReview",
      I: AccessReviewSubmission,
      O: AccessRequestV3,
      kind: MethodKind.Unary,
    },
    /**
     * GetAccessCapabilities requests the access capabilities of a user.
     *
     * @generated from rpc proto.AuthService.GetAccessCapabilities
     */
    getAccessCapabilities: {
      name: "GetAccessCapabilities",
      I: AccessCapabilitiesRequest,
      O: AccessCapabilities,
      kind: MethodKind.Unary,
    },
    /**
     * GetAccessRequestAllowedPromotions returns a list of allowed promotions from an access request to an access list.
     *
     * @generated from rpc proto.AuthService.GetAccessRequestAllowedPromotions
     */
    getAccessRequestAllowedPromotions: {
      name: "GetAccessRequestAllowedPromotions",
      I: AccessRequestAllowedPromotionRequest,
      O: AccessRequestAllowedPromotionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetPluginData gets all plugin data matching the supplied filter.
     *
     * @generated from rpc proto.AuthService.GetPluginData
     */
    getPluginData: {
      name: "GetPluginData",
      I: PluginDataFilter,
      O: PluginDataSeq,
      kind: MethodKind.Unary,
    },
    /**
     * UpdatePluginData updates a plugin's resource-specific datastore.
     *
     * @generated from rpc proto.AuthService.UpdatePluginData
     */
    updatePluginData: {
      name: "UpdatePluginData",
      I: PluginDataUpdateParams,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * Ping gets basic info about the auth server. This method is intended
     * to mimic the behavior of the proxy's Ping method, and may be used by
     * clients for verification or configuration on startup.
     *
     * @generated from rpc proto.AuthService.Ping
     */
    ping: {
      name: "Ping",
      I: PingRequest,
      O: PingResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetResetPasswordToken returns a reset password token.
     *
     * @generated from rpc proto.AuthService.GetResetPasswordToken
     */
    getResetPasswordToken: {
      name: "GetResetPasswordToken",
      I: GetResetPasswordTokenRequest,
      O: UserTokenV3,
      kind: MethodKind.Unary,
    },
    /**
     * CreateResetPasswordToken resets users current password and second factors and creates a reset
     * password token.
     *
     * Only local users may be reset.
     *
     * @generated from rpc proto.AuthService.CreateResetPasswordToken
     */
    createResetPasswordToken: {
      name: "CreateResetPasswordToken",
      I: CreateResetPasswordTokenRequest,
      O: UserTokenV3,
      kind: MethodKind.Unary,
    },
    /**
     * GetUser gets a user resource by name.
     *
     * Deprecated: Use [teleport.users.v1.UsersService] instead.
     *
     * @generated from rpc proto.AuthService.GetUser
     * @deprecated
     */
    getUser: {
      name: "GetUser",
      I: GetUserRequest,
      O: UserV2,
      kind: MethodKind.Unary,
    },
    /**
     * GetCurrentUser returns current user as seen by the server.
     * Useful especially in the context of remote clusters which perform role and trait mapping.
     *
     * Deprecated: Use [teleport.users.v1.UsersService] instead.
     *
     * @generated from rpc proto.AuthService.GetCurrentUser
     * @deprecated
     */
    getCurrentUser: {
      name: "GetCurrentUser",
      I: Empty,
      O: UserV2,
      kind: MethodKind.Unary,
    },
    /**
     * GetCurrentUserRoles returns current user's roles.
     *
     * @generated from rpc proto.AuthService.GetCurrentUserRoles
     */
    getCurrentUserRoles: {
      name: "GetCurrentUserRoles",
      I: Empty,
      O: RoleV6,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * GetUsers gets all current user resources.
     *
     * Deprecated: Use [teleport.users.v1.UsersService] instead.
     *
     * @generated from rpc proto.AuthService.GetUsers
     * @deprecated
     */
    getUsers: {
      name: "GetUsers",
      I: GetUsersRequest,
      O: UserV2,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * CreateUser inserts a new user entry to a backend.
     *
     * Deprecated: Use [teleport.users.v1.UsersService] instead.
     *
     * @generated from rpc proto.AuthService.CreateUser
     * @deprecated
     */
    createUser: {
      name: "CreateUser",
      I: UserV2,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateUser updates an existing user in a backend.
     *
     * Deprecated: Use [teleport.users.v1.UsersService] instead.
     *
     * @generated from rpc proto.AuthService.UpdateUser
     * @deprecated
     */
    updateUser: {
      name: "UpdateUser",
      I: UserV2,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteUser deletes an existing user in a backend by username.
     *
     * Deprecated: Use [teleport.users.v1.UsersService] instead.
     *
     * @generated from rpc proto.AuthService.DeleteUser
     * @deprecated
     */
    deleteUser: {
      name: "DeleteUser",
      I: DeleteUserRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * ChangePassword allows a user to change their own password.
     *
     * Only local users may change their password.
     *
     * @generated from rpc proto.AuthService.ChangePassword
     */
    changePassword: {
      name: "ChangePassword",
      I: ChangePasswordRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * AcquireSemaphore acquires lease with requested resources from semaphore.
     *
     * @generated from rpc proto.AuthService.AcquireSemaphore
     */
    acquireSemaphore: {
      name: "AcquireSemaphore",
      I: AcquireSemaphoreRequest,
      O: SemaphoreLease,
      kind: MethodKind.Unary,
    },
    /**
     * KeepAliveSemaphoreLease updates semaphore lease.
     *
     * @generated from rpc proto.AuthService.KeepAliveSemaphoreLease
     */
    keepAliveSemaphoreLease: {
      name: "KeepAliveSemaphoreLease",
      I: SemaphoreLease,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * CancelSemaphoreLease cancels semaphore lease early.
     *
     * @generated from rpc proto.AuthService.CancelSemaphoreLease
     */
    cancelSemaphoreLease: {
      name: "CancelSemaphoreLease",
      I: SemaphoreLease,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetSemaphores returns a list of all semaphores matching the supplied filter.
     *
     * @generated from rpc proto.AuthService.GetSemaphores
     */
    getSemaphores: {
      name: "GetSemaphores",
      I: SemaphoreFilter,
      O: Semaphores,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteSemaphore deletes a semaphore matching the supplied filter.
     *
     * @generated from rpc proto.AuthService.DeleteSemaphore
     */
    deleteSemaphore: {
      name: "DeleteSemaphore",
      I: SemaphoreFilter,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * EmitAuditEvent emits audit event
     *
     * @generated from rpc proto.AuthService.EmitAuditEvent
     */
    emitAuditEvent: {
      name: "EmitAuditEvent",
      I: OneOf,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * CreateAuditStream creates or resumes audit events streams
     *
     * @generated from rpc proto.AuthService.CreateAuditStream
     */
    createAuditStream: {
      name: "CreateAuditStream",
      I: AuditStreamRequest,
      O: StreamStatus,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * UpsertApplicationServer adds an application server.
     *
     * @generated from rpc proto.AuthService.UpsertApplicationServer
     */
    upsertApplicationServer: {
      name: "UpsertApplicationServer",
      I: UpsertApplicationServerRequest,
      O: KeepAlive,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteApplicationServer removes an application server.
     *
     * @generated from rpc proto.AuthService.DeleteApplicationServer
     */
    deleteApplicationServer: {
      name: "DeleteApplicationServer",
      I: DeleteApplicationServerRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllApplicationServers removes all application servers.
     *
     * @generated from rpc proto.AuthService.DeleteAllApplicationServers
     */
    deleteAllApplicationServers: {
      name: "DeleteAllApplicationServers",
      I: DeleteAllApplicationServersRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GenerateAppToken will generate a JWT token for application access.
     *
     * @generated from rpc proto.AuthService.GenerateAppToken
     */
    generateAppToken: {
      name: "GenerateAppToken",
      I: GenerateAppTokenRequest,
      O: GenerateAppTokenResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetAppSession gets an application web session.
     *
     * @generated from rpc proto.AuthService.GetAppSession
     */
    getAppSession: {
      name: "GetAppSession",
      I: GetAppSessionRequest,
      O: GetAppSessionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListAppSessions gets all application web sessions.
     *
     * @generated from rpc proto.AuthService.ListAppSessions
     */
    listAppSessions: {
      name: "ListAppSessions",
      I: ListAppSessionsRequest,
      O: ListAppSessionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateAppSession creates an application web session. Application web
     * sessions represent a browser session the client holds.
     *
     * @generated from rpc proto.AuthService.CreateAppSession
     */
    createAppSession: {
      name: "CreateAppSession",
      I: CreateAppSessionRequest,
      O: CreateAppSessionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAppSession removes an application web session.
     *
     * @generated from rpc proto.AuthService.DeleteAppSession
     */
    deleteAppSession: {
      name: "DeleteAppSession",
      I: DeleteAppSessionRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllAppSessions removes all application web sessions.
     *
     * @generated from rpc proto.AuthService.DeleteAllAppSessions
     */
    deleteAllAppSessions: {
      name: "DeleteAllAppSessions",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteUserAppSessions deletes all user’s application sessions.
     *
     * @generated from rpc proto.AuthService.DeleteUserAppSessions
     */
    deleteUserAppSessions: {
      name: "DeleteUserAppSessions",
      I: DeleteUserAppSessionsRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * CreateSnowflakeSession creates web session with sub kind Snowflake used by Database access
     * Snowflake integration.
     *
     * @generated from rpc proto.AuthService.CreateSnowflakeSession
     */
    createSnowflakeSession: {
      name: "CreateSnowflakeSession",
      I: CreateSnowflakeSessionRequest,
      O: CreateSnowflakeSessionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSnowflakeSession returns a web session with sub kind Snowflake.
     *
     * @generated from rpc proto.AuthService.GetSnowflakeSession
     */
    getSnowflakeSession: {
      name: "GetSnowflakeSession",
      I: GetSnowflakeSessionRequest,
      O: GetSnowflakeSessionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSnowflakeSessions gets all Snowflake web sessions.
     *
     * @generated from rpc proto.AuthService.GetSnowflakeSessions
     */
    getSnowflakeSessions: {
      name: "GetSnowflakeSessions",
      I: Empty,
      O: GetSnowflakeSessionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteSnowflakeSession removes a Snowflake web session.
     *
     * @generated from rpc proto.AuthService.DeleteSnowflakeSession
     */
    deleteSnowflakeSession: {
      name: "DeleteSnowflakeSession",
      I: DeleteSnowflakeSessionRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllSnowflakeSessions removes all Snowflake web sessions.
     *
     * @generated from rpc proto.AuthService.DeleteAllSnowflakeSessions
     */
    deleteAllSnowflakeSessions: {
      name: "DeleteAllSnowflakeSessions",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * CreateSAMLIdPSession creates web session with sub kind saml_idp used by the SAML IdP.
     *
     * @generated from rpc proto.AuthService.CreateSAMLIdPSession
     * @deprecated
     */
    createSAMLIdPSession: {
      name: "CreateSAMLIdPSession",
      I: CreateSAMLIdPSessionRequest,
      O: CreateSAMLIdPSessionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSAMLIdPSession returns a SAML IdP session with sub kind saml_idp.
     *
     * @generated from rpc proto.AuthService.GetSAMLIdPSession
     * @deprecated
     */
    getSAMLIdPSession: {
      name: "GetSAMLIdPSession",
      I: GetSAMLIdPSessionRequest,
      O: GetSAMLIdPSessionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListSAMLIdPSessions gets all SAML IdP sessions.
     *
     * @generated from rpc proto.AuthService.ListSAMLIdPSessions
     * @deprecated
     */
    listSAMLIdPSessions: {
      name: "ListSAMLIdPSessions",
      I: ListSAMLIdPSessionsRequest,
      O: ListSAMLIdPSessionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteSAMLIdPSession removes a SAML IdP session.
     *
     * @generated from rpc proto.AuthService.DeleteSAMLIdPSession
     * @deprecated
     */
    deleteSAMLIdPSession: {
      name: "DeleteSAMLIdPSession",
      I: DeleteSAMLIdPSessionRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllSAMLIdPSessions removes all SAML IdP sessions.
     *
     * @generated from rpc proto.AuthService.DeleteAllSAMLIdPSessions
     * @deprecated
     */
    deleteAllSAMLIdPSessions: {
      name: "DeleteAllSAMLIdPSessions",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteUserSAMLIdPSessions deletes all user’s SAML IdP sessions.
     *
     * @generated from rpc proto.AuthService.DeleteUserSAMLIdPSessions
     * @deprecated
     */
    deleteUserSAMLIdPSessions: {
      name: "DeleteUserSAMLIdPSessions",
      I: DeleteUserSAMLIdPSessionsRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetWebSession gets a web session.
     *
     * @generated from rpc proto.AuthService.GetWebSession
     */
    getWebSession: {
      name: "GetWebSession",
      I: GetWebSessionRequest,
      O: GetWebSessionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetWebSessions gets all web sessions.
     *
     * @generated from rpc proto.AuthService.GetWebSessions
     */
    getWebSessions: {
      name: "GetWebSessions",
      I: Empty,
      O: GetWebSessionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteWebSession deletes a web session.
     *
     * @generated from rpc proto.AuthService.DeleteWebSession
     */
    deleteWebSession: {
      name: "DeleteWebSession",
      I: DeleteWebSessionRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllWebSessions deletes all web sessions.
     *
     * @generated from rpc proto.AuthService.DeleteAllWebSessions
     */
    deleteAllWebSessions: {
      name: "DeleteAllWebSessions",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetWebToken gets a web token.
     *
     * @generated from rpc proto.AuthService.GetWebToken
     */
    getWebToken: {
      name: "GetWebToken",
      I: GetWebTokenRequest,
      O: GetWebTokenResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetWebTokens gets all web tokens.
     *
     * @generated from rpc proto.AuthService.GetWebTokens
     */
    getWebTokens: {
      name: "GetWebTokens",
      I: Empty,
      O: GetWebTokensResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteWebToken deletes a web token.
     *
     * @generated from rpc proto.AuthService.DeleteWebToken
     */
    deleteWebToken: {
      name: "DeleteWebToken",
      I: DeleteWebTokenRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllWebTokens deletes all web tokens.
     *
     * @generated from rpc proto.AuthService.DeleteAllWebTokens
     */
    deleteAllWebTokens: {
      name: "DeleteAllWebTokens",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateRemoteCluster updates remote cluster
     *
     * @generated from rpc proto.AuthService.UpdateRemoteCluster
     */
    updateRemoteCluster: {
      name: "UpdateRemoteCluster",
      I: RemoteClusterV3,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertKubernetesServer adds or updates a kubernetes server.
     *
     * @generated from rpc proto.AuthService.UpsertKubernetesServer
     */
    upsertKubernetesServer: {
      name: "UpsertKubernetesServer",
      I: UpsertKubernetesServerRequest,
      O: KeepAlive,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteKubernetesServer removes a kubernetes server.
     *
     * @generated from rpc proto.AuthService.DeleteKubernetesServer
     */
    deleteKubernetesServer: {
      name: "DeleteKubernetesServer",
      I: DeleteKubernetesServerRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllKubernetesServers removes all kubernetes servers.
     *
     * @generated from rpc proto.AuthService.DeleteAllKubernetesServers
     */
    deleteAllKubernetesServers: {
      name: "DeleteAllKubernetesServers",
      I: DeleteAllKubernetesServersRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertDatabaseServer registers a new database proxy server.
     *
     * @generated from rpc proto.AuthService.UpsertDatabaseServer
     */
    upsertDatabaseServer: {
      name: "UpsertDatabaseServer",
      I: UpsertDatabaseServerRequest,
      O: KeepAlive,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteDatabaseServer removes the specified database proxy server.
     *
     * @generated from rpc proto.AuthService.DeleteDatabaseServer
     */
    deleteDatabaseServer: {
      name: "DeleteDatabaseServer",
      I: DeleteDatabaseServerRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllDatabaseServers removes all registered database proxy servers.
     *
     * @generated from rpc proto.AuthService.DeleteAllDatabaseServers
     */
    deleteAllDatabaseServers: {
      name: "DeleteAllDatabaseServers",
      I: DeleteAllDatabaseServersRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertDatabaseService registers a new DatabaseService.
     *
     * @generated from rpc proto.AuthService.UpsertDatabaseService
     */
    upsertDatabaseService: {
      name: "UpsertDatabaseService",
      I: UpsertDatabaseServiceRequest,
      O: KeepAlive,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteDatabaseService removes the specified DatabaseService.
     *
     * @generated from rpc proto.AuthService.DeleteDatabaseService
     */
    deleteDatabaseService: {
      name: "DeleteDatabaseService",
      I: ResourceRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllDatabaseServices removes all registered DatabaseServices.
     * If there's an error deleting the resources, there's no guarantee of a rollback.
     * A subset of resources might be deleted while others still exist.
     *
     * @generated from rpc proto.AuthService.DeleteAllDatabaseServices
     */
    deleteAllDatabaseServices: {
      name: "DeleteAllDatabaseServices",
      I: DeleteAllDatabaseServicesRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * SignDatabaseCSR generates client certificate used by proxy to
     * authenticate with a remote database service.
     *
     * @generated from rpc proto.AuthService.SignDatabaseCSR
     */
    signDatabaseCSR: {
      name: "SignDatabaseCSR",
      I: DatabaseCSRRequest,
      O: DatabaseCSRResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GenerateDatabaseCert generates client certificate used by a database
     * service to authenticate with the database instance.
     *
     * @generated from rpc proto.AuthService.GenerateDatabaseCert
     */
    generateDatabaseCert: {
      name: "GenerateDatabaseCert",
      I: DatabaseCertRequest,
      O: DatabaseCertResponse,
      kind: MethodKind.Unary,
    },
    /**
     * / GenerateSnowflakeJWT generates JWT in the format required by Snowflake.
     *
     * @generated from rpc proto.AuthService.GenerateSnowflakeJWT
     */
    generateSnowflakeJWT: {
      name: "GenerateSnowflakeJWT",
      I: SnowflakeJWTRequest,
      O: SnowflakeJWTResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetRole retrieves a role described by the given request.
     *
     * @generated from rpc proto.AuthService.GetRole
     */
    getRole: {
      name: "GetRole",
      I: GetRoleRequest,
      O: RoleV6,
      kind: MethodKind.Unary,
    },
    /**
     * GetRole retrieves all roles.
     *
     * DELETE IN 17.0
     *
     * @generated from rpc proto.AuthService.GetRoles
     */
    getRoles: {
      name: "GetRoles",
      I: Empty,
      O: GetRolesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListRoles is a paginated role getter.
     *
     * @generated from rpc proto.AuthService.ListRoles
     */
    listRoles: {
      name: "ListRoles",
      I: ListRolesRequest,
      O: ListRolesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateRole creates a new role.
     *
     * @generated from rpc proto.AuthService.CreateRole
     */
    createRole: {
      name: "CreateRole",
      I: CreateRoleRequest,
      O: RoleV6,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateRole updates an existing role.
     *
     * @generated from rpc proto.AuthService.UpdateRole
     */
    updateRole: {
      name: "UpdateRole",
      I: UpdateRoleRequest,
      O: RoleV6,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertRoleV2 creates or overwrites an existing role.
     *
     * @generated from rpc proto.AuthService.UpsertRoleV2
     */
    upsertRoleV2: {
      name: "UpsertRoleV2",
      I: UpsertRoleRequest,
      O: RoleV6,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertRole upserts a role in a backend.
     *
     * Deprecated: use UpsertRoleV2 instead.
     *
     * @generated from rpc proto.AuthService.UpsertRole
     * @deprecated
     */
    upsertRole: {
      name: "UpsertRole",
      I: RoleV6,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteRole deletes an existing role in a backend described by the given request.
     *
     * @generated from rpc proto.AuthService.DeleteRole
     */
    deleteRole: {
      name: "DeleteRole",
      I: DeleteRoleRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * AddMFADevice adds an MFA device for the user calling this RPC.
     *
     * The RPC is streaming both ways and the message sequence is:
     * (-> means client-to-server, <- means server-to-client)
     * -> Init
     * <- ExistingMFAChallenge
     * -> ExistingMFAResponse
     * <- NewMFARegisterChallenge
     * -> NewMFARegisterResponse
     * <- Ack
     *
     * Deprecated: Use [AddMFADeviceSync] instead.
     *
     * @generated from rpc proto.AuthService.AddMFADevice
     * @deprecated
     */
    addMFADevice: {
      name: "AddMFADevice",
      I: AddMFADeviceRequest,
      O: AddMFADeviceResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * DeleteMFADevice deletes an MFA device for the user calling this RPC.
     *
     * The RPC is streaming both ways and the message sequence is:
     * (-> means client-to-server, <- means server-to-client)
     * -> Init
     * <- MFAChallenge
     * -> MFAResponse
     * <- Ack
     *
     * Deprecated: Use [DeleteMFADeviceSync] instead.
     *
     * @generated from rpc proto.AuthService.DeleteMFADevice
     * @deprecated
     */
    deleteMFADevice: {
      name: "DeleteMFADevice",
      I: DeleteMFADeviceRequest,
      O: DeleteMFADeviceResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * AddMFADeviceSync adds a new MFA device.
     *
     * A typical MFA registration sequence calls the following RPCs:
     *
     * 1. CreateAuthenticateChallenge (necessary for registration challenge)
     * 2. (optional) CreatePrivilegeToken
     * 3. CreateRegisterChallenge (uses authn challenge and optionally a token)
     * 4. AddMFADeviceSync
     *
     * @generated from rpc proto.AuthService.AddMFADeviceSync
     */
    addMFADeviceSync: {
      name: "AddMFADeviceSync",
      I: AddMFADeviceSyncRequest,
      O: AddMFADeviceSyncResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteMFADeviceSync deletes a users MFA device (nonstream).
     *
     * A typical MFA deletion sequence calls the following RPCs:
     *
     * 1. (optional) CreateAuthenticateChallenge
     *    (may be skipped depending on the token used, but is usually called
     *    regardless)
     * 2. (optional) CreatePrivilegeToken
     * 3. DeleteMFADeviceSync (using either authn challenge or token)
     *
     * @generated from rpc proto.AuthService.DeleteMFADeviceSync
     */
    deleteMFADeviceSync: {
      name: "DeleteMFADeviceSync",
      I: DeleteMFADeviceSyncRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetMFADevices returns all MFA devices registered for the user calling
     * this RPC.
     *
     * @generated from rpc proto.AuthService.GetMFADevices
     */
    getMFADevices: {
      name: "GetMFADevices",
      I: GetMFADevicesRequest,
      O: GetMFADevicesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateAuthenticateChallenge creates and returns MFA challenges for a users registered MFA
     * devices.
     *
     * @generated from rpc proto.AuthService.CreateAuthenticateChallenge
     */
    createAuthenticateChallenge: {
      name: "CreateAuthenticateChallenge",
      I: CreateAuthenticateChallengeRequest,
      O: MFAAuthenticateChallenge,
      kind: MethodKind.Unary,
    },
    /**
     * CreateRegisterChallenge creates and returns MFA register challenge for a new MFA device.
     *
     * @generated from rpc proto.AuthService.CreateRegisterChallenge
     */
    createRegisterChallenge: {
      name: "CreateRegisterChallenge",
      I: CreateRegisterChallengeRequest,
      O: MFARegisterChallenge,
      kind: MethodKind.Unary,
    },
    /**
     * GetOIDCConnector gets an OIDC connector resource by name.
     *
     * @generated from rpc proto.AuthService.GetOIDCConnector
     */
    getOIDCConnector: {
      name: "GetOIDCConnector",
      I: ResourceWithSecretsRequest,
      O: OIDCConnectorV3,
      kind: MethodKind.Unary,
    },
    /**
     * GetOIDCConnectors gets all current OIDC connector resources.
     *
     * @generated from rpc proto.AuthService.GetOIDCConnectors
     */
    getOIDCConnectors: {
      name: "GetOIDCConnectors",
      I: ResourcesWithSecretsRequest,
      O: OIDCConnectorV3List,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertOIDCConnector creates a new OIDC connector in the backend.
     *
     * @generated from rpc proto.AuthService.CreateOIDCConnector
     */
    createOIDCConnector: {
      name: "CreateOIDCConnector",
      I: CreateOIDCConnectorRequest,
      O: OIDCConnectorV3,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertOIDCConnector updates an existing OIDC connector in the backend.
     *
     * @generated from rpc proto.AuthService.UpdateOIDCConnector
     */
    updateOIDCConnector: {
      name: "UpdateOIDCConnector",
      I: UpdateOIDCConnectorRequest,
      O: OIDCConnectorV3,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertOIDCConnector upserts an OIDC connector in a backend.
     *
     * Deprecated: Use UpsertOIDCConnectorV2 instead.
     *
     * @generated from rpc proto.AuthService.UpsertOIDCConnector
     * @deprecated
     */
    upsertOIDCConnector: {
      name: "UpsertOIDCConnector",
      I: OIDCConnectorV3,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertOIDCConnectorV2 upserts an OIDC connector in the backend.
     *
     * @generated from rpc proto.AuthService.UpsertOIDCConnectorV2
     */
    upsertOIDCConnectorV2: {
      name: "UpsertOIDCConnectorV2",
      I: UpsertOIDCConnectorRequest,
      O: OIDCConnectorV3,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteOIDCConnector deletes an existing OIDC connector in a backend by name.
     *
     * @generated from rpc proto.AuthService.DeleteOIDCConnector
     */
    deleteOIDCConnector: {
      name: "DeleteOIDCConnector",
      I: ResourceRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * CreateOIDCAuthRequest creates OIDCAuthRequest.
     *
     * @generated from rpc proto.AuthService.CreateOIDCAuthRequest
     */
    createOIDCAuthRequest: {
      name: "CreateOIDCAuthRequest",
      I: OIDCAuthRequest,
      O: OIDCAuthRequest,
      kind: MethodKind.Unary,
    },
    /**
     * GetOIDCAuthRequest returns OIDC auth request if found.
     *
     * @generated from rpc proto.AuthService.GetOIDCAuthRequest
     */
    getOIDCAuthRequest: {
      name: "GetOIDCAuthRequest",
      I: GetOIDCAuthRequestRequest,
      O: OIDCAuthRequest,
      kind: MethodKind.Unary,
    },
    /**
     * GetSAMLConnector gets a SAML connector resource by name.
     *
     * @generated from rpc proto.AuthService.GetSAMLConnector
     */
    getSAMLConnector: {
      name: "GetSAMLConnector",
      I: ResourceWithSecretsRequest,
      O: SAMLConnectorV2,
      kind: MethodKind.Unary,
    },
    /**
     * GetSAMLConnectors gets all current SAML connector resources.
     *
     * @generated from rpc proto.AuthService.GetSAMLConnectors
     */
    getSAMLConnectors: {
      name: "GetSAMLConnectors",
      I: ResourcesWithSecretsRequest,
      O: SAMLConnectorV2List,
      kind: MethodKind.Unary,
    },
    /**
     * CreateSAMLConnector creates a new SAML connector in the backend.
     *
     * @generated from rpc proto.AuthService.CreateSAMLConnector
     */
    createSAMLConnector: {
      name: "CreateSAMLConnector",
      I: CreateSAMLConnectorRequest,
      O: SAMLConnectorV2,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateSAMLConnector updates an existing SAML connector in the backend.
     *
     * @generated from rpc proto.AuthService.UpdateSAMLConnector
     */
    updateSAMLConnector: {
      name: "UpdateSAMLConnector",
      I: UpdateSAMLConnectorRequest,
      O: SAMLConnectorV2,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertSAMLConnector upserts a SAML connector in a backend.
     *
     * Deprecated: Use UpsertSAMLConnectorV2 instead.
     *
     * @generated from rpc proto.AuthService.UpsertSAMLConnector
     * @deprecated
     */
    upsertSAMLConnector: {
      name: "UpsertSAMLConnector",
      I: SAMLConnectorV2,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertSAMLConnectorV2 upserts a SAML connector in a backend.
     *
     * @generated from rpc proto.AuthService.UpsertSAMLConnectorV2
     */
    upsertSAMLConnectorV2: {
      name: "UpsertSAMLConnectorV2",
      I: UpsertSAMLConnectorRequest,
      O: SAMLConnectorV2,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteSAMLConnector deletes an existing SAML connector in a backend by name.
     *
     * @generated from rpc proto.AuthService.DeleteSAMLConnector
     */
    deleteSAMLConnector: {
      name: "DeleteSAMLConnector",
      I: ResourceRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * CreateSAMLAuthRequest creates SAMLAuthRequest.
     *
     * @generated from rpc proto.AuthService.CreateSAMLAuthRequest
     */
    createSAMLAuthRequest: {
      name: "CreateSAMLAuthRequest",
      I: SAMLAuthRequest,
      O: SAMLAuthRequest,
      kind: MethodKind.Unary,
    },
    /**
     * GetSAMLAuthRequest returns SAML auth request if found.
     *
     * @generated from rpc proto.AuthService.GetSAMLAuthRequest
     */
    getSAMLAuthRequest: {
      name: "GetSAMLAuthRequest",
      I: GetSAMLAuthRequestRequest,
      O: SAMLAuthRequest,
      kind: MethodKind.Unary,
    },
    /**
     * GetGithubConnector gets a Github connector resource by name.
     *
     * @generated from rpc proto.AuthService.GetGithubConnector
     */
    getGithubConnector: {
      name: "GetGithubConnector",
      I: ResourceWithSecretsRequest,
      O: GithubConnectorV3,
      kind: MethodKind.Unary,
    },
    /**
     * GetGithubConnectors gets all current Github connector resources.
     *
     * @generated from rpc proto.AuthService.GetGithubConnectors
     */
    getGithubConnectors: {
      name: "GetGithubConnectors",
      I: ResourcesWithSecretsRequest,
      O: GithubConnectorV3List,
      kind: MethodKind.Unary,
    },
    /**
     * CreateGithubConnector creates a new Github connector in the backend.
     *
     * @generated from rpc proto.AuthService.CreateGithubConnector
     */
    createGithubConnector: {
      name: "CreateGithubConnector",
      I: CreateGithubConnectorRequest,
      O: GithubConnectorV3,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateGithubConnector updates an existing Github connector in the backend.
     *
     * @generated from rpc proto.AuthService.UpdateGithubConnector
     */
    updateGithubConnector: {
      name: "UpdateGithubConnector",
      I: UpdateGithubConnectorRequest,
      O: GithubConnectorV3,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertGithubConnector upserts a Github connector in a backend.
     *
     * Deprecated: Use UpsertGithubConnectorV2 instead.
     *
     * @generated from rpc proto.AuthService.UpsertGithubConnector
     * @deprecated
     */
    upsertGithubConnector: {
      name: "UpsertGithubConnector",
      I: GithubConnectorV3,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertGithubConnectorV2 upserts a Github connector in a backend.
     *
     * @generated from rpc proto.AuthService.UpsertGithubConnectorV2
     */
    upsertGithubConnectorV2: {
      name: "UpsertGithubConnectorV2",
      I: UpsertGithubConnectorRequest,
      O: GithubConnectorV3,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteGithubConnector deletes an existing Github connector in a backend by name.
     *
     * @generated from rpc proto.AuthService.DeleteGithubConnector
     */
    deleteGithubConnector: {
      name: "DeleteGithubConnector",
      I: ResourceRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * CreateGithubAuthRequest creates GithubAuthRequest.
     *
     * @generated from rpc proto.AuthService.CreateGithubAuthRequest
     */
    createGithubAuthRequest: {
      name: "CreateGithubAuthRequest",
      I: GithubAuthRequest,
      O: GithubAuthRequest,
      kind: MethodKind.Unary,
    },
    /**
     * GetGithubAuthRequest returns Github auth request if found.
     *
     * @generated from rpc proto.AuthService.GetGithubAuthRequest
     */
    getGithubAuthRequest: {
      name: "GetGithubAuthRequest",
      I: GetGithubAuthRequestRequest,
      O: GithubAuthRequest,
      kind: MethodKind.Unary,
    },
    /**
     * GetSSODiagnosticInfo returns SSO diagnostic info records.
     *
     * @generated from rpc proto.AuthService.GetSSODiagnosticInfo
     */
    getSSODiagnosticInfo: {
      name: "GetSSODiagnosticInfo",
      I: GetSSODiagnosticInfoRequest,
      O: SSODiagnosticInfo,
      kind: MethodKind.Unary,
    },
    /**
     * GetServerInfos returns a stream of ServerInfos.
     *
     * @generated from rpc proto.AuthService.GetServerInfos
     */
    getServerInfos: {
      name: "GetServerInfos",
      I: Empty,
      O: ServerInfoV1,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * GetServerInfo returns a ServerInfo by name.
     *
     * @generated from rpc proto.AuthService.GetServerInfo
     */
    getServerInfo: {
      name: "GetServerInfo",
      I: ResourceRequest,
      O: ServerInfoV1,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertServerInfo upserts a ServerInfo.
     *
     * @generated from rpc proto.AuthService.UpsertServerInfo
     */
    upsertServerInfo: {
      name: "UpsertServerInfo",
      I: ServerInfoV1,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteServerInfo deletes a ServerInfo by name.
     *
     * @generated from rpc proto.AuthService.DeleteServerInfo
     */
    deleteServerInfo: {
      name: "DeleteServerInfo",
      I: ResourceRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllServerInfos deletes all ServerInfos.
     *
     * @generated from rpc proto.AuthService.DeleteAllServerInfos
     */
    deleteAllServerInfos: {
      name: "DeleteAllServerInfos",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetTrustedCluster gets a Trusted Cluster resource by name.
     *
     * @generated from rpc proto.AuthService.GetTrustedCluster
     */
    getTrustedCluster: {
      name: "GetTrustedCluster",
      I: ResourceRequest,
      O: TrustedClusterV2,
      kind: MethodKind.Unary,
    },
    /**
     * GetTrustedClusters gets all current Trusted Cluster resources.
     *
     * @generated from rpc proto.AuthService.GetTrustedClusters
     */
    getTrustedClusters: {
      name: "GetTrustedClusters",
      I: Empty,
      O: TrustedClusterV2List,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertTrustedCluster upserts a Trusted Cluster in a backend.
     *
     * @generated from rpc proto.AuthService.UpsertTrustedCluster
     */
    upsertTrustedCluster: {
      name: "UpsertTrustedCluster",
      I: TrustedClusterV2,
      O: TrustedClusterV2,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteTrustedCluster deletes an existing Trusted Cluster in a backend by name.
     *
     * @generated from rpc proto.AuthService.DeleteTrustedCluster
     */
    deleteTrustedCluster: {
      name: "DeleteTrustedCluster",
      I: ResourceRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetToken retrieves a token described by the given request.
     *
     * @generated from rpc proto.AuthService.GetToken
     */
    getToken: {
      name: "GetToken",
      I: ResourceRequest,
      O: ProvisionTokenV2,
      kind: MethodKind.Unary,
    },
    /**
     * GetToken retrieves all tokens.
     *
     * @generated from rpc proto.AuthService.GetTokens
     */
    getTokens: {
      name: "GetTokens",
      I: Empty,
      O: ProvisionTokenV2List,
      kind: MethodKind.Unary,
    },
    /**
     * CreateTokenV2 creates a token in a backend.
     *
     * @generated from rpc proto.AuthService.CreateTokenV2
     */
    createTokenV2: {
      name: "CreateTokenV2",
      I: CreateTokenV2Request,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertTokenV2 upserts a token in a backend.
     *
     * @generated from rpc proto.AuthService.UpsertTokenV2
     */
    upsertTokenV2: {
      name: "UpsertTokenV2",
      I: UpsertTokenV2Request,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteToken deletes an existing token in a backend described by the given request.
     *
     * @generated from rpc proto.AuthService.DeleteToken
     */
    deleteToken: {
      name: "DeleteToken",
      I: ResourceRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetClusterAuditConfig gets cluster audit configuration.
     *
     * @generated from rpc proto.AuthService.GetClusterAuditConfig
     */
    getClusterAuditConfig: {
      name: "GetClusterAuditConfig",
      I: Empty,
      O: ClusterAuditConfigV2,
      kind: MethodKind.Unary,
    },
    /**
     * GetClusterNetworkingConfig gets cluster networking configuration.
     * Deprecated: Use clusterconfigv1.Service.GetClusterNetworkingConfig instead.
     *
     * @generated from rpc proto.AuthService.GetClusterNetworkingConfig
     * @deprecated
     */
    getClusterNetworkingConfig: {
      name: "GetClusterNetworkingConfig",
      I: Empty,
      O: ClusterNetworkingConfigV2,
      kind: MethodKind.Unary,
    },
    /**
     * SetClusterNetworkingConfig sets cluster networking configuration.
     * Deprecated: Use clusterconfigv1.Service.Update/UpsertClusterNetworkingConfig instead.
     *
     * @generated from rpc proto.AuthService.SetClusterNetworkingConfig
     * @deprecated
     */
    setClusterNetworkingConfig: {
      name: "SetClusterNetworkingConfig",
      I: ClusterNetworkingConfigV2,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * ResetClusterNetworkingConfig resets cluster networking configuration to defaults.
     * Deprecated: Use clusterconfigv1.Service.ResetClusterNetworkingConfig instead.
     *
     * @generated from rpc proto.AuthService.ResetClusterNetworkingConfig
     * @deprecated
     */
    resetClusterNetworkingConfig: {
      name: "ResetClusterNetworkingConfig",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetSessionRecordingConfig gets session recording configuration.
     * Deprecated: Use clusterconfigv1.Service.GetSessionRecordingConfig instead.
     *
     * @generated from rpc proto.AuthService.GetSessionRecordingConfig
     * @deprecated
     */
    getSessionRecordingConfig: {
      name: "GetSessionRecordingConfig",
      I: Empty,
      O: SessionRecordingConfigV2,
      kind: MethodKind.Unary,
    },
    /**
     * SetSessionRecordingConfig sets session recording configuration.
     * Deprecated: Use clusterconfigv1.Service.Upsert/UpdateSessionRecordingConfig instead.
     *
     * @generated from rpc proto.AuthService.SetSessionRecordingConfig
     * @deprecated
     */
    setSessionRecordingConfig: {
      name: "SetSessionRecordingConfig",
      I: SessionRecordingConfigV2,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * ResetSessionRecordingConfig resets session recording configuration to defaults.
     * Deprecated: Use clusterconfigv1.Service.ResetSessionRecordingConfig instead.
     *
     * @generated from rpc proto.AuthService.ResetSessionRecordingConfig
     * @deprecated
     */
    resetSessionRecordingConfig: {
      name: "ResetSessionRecordingConfig",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetAuthPreference gets cluster auth preference.
     * Deprecated: Use clusterconfigv1.Service.GetAuthPreference instead.
     *
     * @generated from rpc proto.AuthService.GetAuthPreference
     * @deprecated
     */
    getAuthPreference: {
      name: "GetAuthPreference",
      I: Empty,
      O: AuthPreferenceV2,
      kind: MethodKind.Unary,
    },
    /**
     * SetAuthPreference sets cluster auth preference.
     * Deprecated: Use clusterconfigv1.Service.Create/Update/UpsertAuthPreference instead.
     *
     * @generated from rpc proto.AuthService.SetAuthPreference
     * @deprecated
     */
    setAuthPreference: {
      name: "SetAuthPreference",
      I: AuthPreferenceV2,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * ResetAuthPreference resets cluster auth preference to defaults.
     * Deprecated: Use clusterconfigv1.Service.ResetAuthPreference instead.
     *
     * @generated from rpc proto.AuthService.ResetAuthPreference
     * @deprecated
     */
    resetAuthPreference: {
      name: "ResetAuthPreference",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetUIConfig gets the configuration for the UI served by the proxy service
     *
     * @generated from rpc proto.AuthService.GetUIConfig
     */
    getUIConfig: {
      name: "GetUIConfig",
      I: Empty,
      O: UIConfigV1,
      kind: MethodKind.Unary,
    },
    /**
     * SetUIConfig sets the configuration for the UI served by the proxy service
     *
     * @generated from rpc proto.AuthService.SetUIConfig
     */
    setUIConfig: {
      name: "SetUIConfig",
      I: UIConfigV1,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteUIConfig deletes the custom configuration for the UI served by the proxy service
     *
     * @generated from rpc proto.AuthService.DeleteUIConfig
     */
    deleteUIConfig: {
      name: "DeleteUIConfig",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetEvents gets events from the audit log.
     *
     * @generated from rpc proto.AuthService.GetEvents
     */
    getEvents: {
      name: "GetEvents",
      I: GetEventsRequest,
      O: Events,
      kind: MethodKind.Unary,
    },
    /**
     * GetSessionEvents gets completed session events from the audit log.
     *
     * @generated from rpc proto.AuthService.GetSessionEvents
     */
    getSessionEvents: {
      name: "GetSessionEvents",
      I: GetSessionEventsRequest,
      O: Events,
      kind: MethodKind.Unary,
    },
    /**
     * GetLock gets a lock by name.
     *
     * @generated from rpc proto.AuthService.GetLock
     */
    getLock: {
      name: "GetLock",
      I: GetLockRequest,
      O: LockV2,
      kind: MethodKind.Unary,
    },
    /**
     * GetLocks gets all/in-force locks that match at least one of the targets when specified.
     *
     * @generated from rpc proto.AuthService.GetLocks
     */
    getLocks: {
      name: "GetLocks",
      I: GetLocksRequest,
      O: GetLocksResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertLock upserts a lock.
     *
     * @generated from rpc proto.AuthService.UpsertLock
     */
    upsertLock: {
      name: "UpsertLock",
      I: LockV2,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteLock deletes a lock.
     *
     * @generated from rpc proto.AuthService.DeleteLock
     */
    deleteLock: {
      name: "DeleteLock",
      I: DeleteLockRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * ReplaceRemoteLocks replaces the set of locks associated with a remote cluster.
     *
     * @generated from rpc proto.AuthService.ReplaceRemoteLocks
     */
    replaceRemoteLocks: {
      name: "ReplaceRemoteLocks",
      I: ReplaceRemoteLocksRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * StreamSessionEvents streams audit events from a given session recording.
     *
     * @generated from rpc proto.AuthService.StreamSessionEvents
     */
    streamSessionEvents: {
      name: "StreamSessionEvents",
      I: StreamSessionEventsRequest,
      O: OneOf,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * GetNetworkRestrictions retrieves all the network restrictions (allow/deny lists).
     *
     * @generated from rpc proto.AuthService.GetNetworkRestrictions
     */
    getNetworkRestrictions: {
      name: "GetNetworkRestrictions",
      I: Empty,
      O: NetworkRestrictionsV4,
      kind: MethodKind.Unary,
    },
    /**
     * SetNetworkRestrictions updates the network restrictions.
     *
     * @generated from rpc proto.AuthService.SetNetworkRestrictions
     */
    setNetworkRestrictions: {
      name: "SetNetworkRestrictions",
      I: NetworkRestrictionsV4,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteNetworkRestrictions delete the network restrictions.
     *
     * @generated from rpc proto.AuthService.DeleteNetworkRestrictions
     */
    deleteNetworkRestrictions: {
      name: "DeleteNetworkRestrictions",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetApps returns all registered applications.
     *
     * @generated from rpc proto.AuthService.GetApps
     */
    getApps: {
      name: "GetApps",
      I: Empty,
      O: AppV3List,
      kind: MethodKind.Unary,
    },
    /**
     * GetApp returns an application by name.
     *
     * @generated from rpc proto.AuthService.GetApp
     */
    getApp: {
      name: "GetApp",
      I: ResourceRequest,
      O: AppV3,
      kind: MethodKind.Unary,
    },
    /**
     * CreateApp creates a new application resource.
     *
     * @generated from rpc proto.AuthService.CreateApp
     */
    createApp: {
      name: "CreateApp",
      I: AppV3,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateApp updates existing application resource.
     *
     * @generated from rpc proto.AuthService.UpdateApp
     */
    updateApp: {
      name: "UpdateApp",
      I: AppV3,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteApp removes specified application resource.
     *
     * @generated from rpc proto.AuthService.DeleteApp
     */
    deleteApp: {
      name: "DeleteApp",
      I: ResourceRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllApps removes all application resources.
     *
     * @generated from rpc proto.AuthService.DeleteAllApps
     */
    deleteAllApps: {
      name: "DeleteAllApps",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetDatabases returns all registered databases.
     *
     * @generated from rpc proto.AuthService.GetDatabases
     */
    getDatabases: {
      name: "GetDatabases",
      I: Empty,
      O: DatabaseV3List,
      kind: MethodKind.Unary,
    },
    /**
     * GetDatabase returns a database by name.
     *
     * @generated from rpc proto.AuthService.GetDatabase
     */
    getDatabase: {
      name: "GetDatabase",
      I: ResourceRequest,
      O: DatabaseV3,
      kind: MethodKind.Unary,
    },
    /**
     * CreateDatabase creates a new database resource.
     *
     * @generated from rpc proto.AuthService.CreateDatabase
     */
    createDatabase: {
      name: "CreateDatabase",
      I: DatabaseV3,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateDatabase updates existing database resource.
     *
     * @generated from rpc proto.AuthService.UpdateDatabase
     */
    updateDatabase: {
      name: "UpdateDatabase",
      I: DatabaseV3,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteDatabase removes specified database resource.
     *
     * @generated from rpc proto.AuthService.DeleteDatabase
     */
    deleteDatabase: {
      name: "DeleteDatabase",
      I: ResourceRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllDatabases removes all database resources.
     *
     * @generated from rpc proto.AuthService.DeleteAllDatabases
     */
    deleteAllDatabases: {
      name: "DeleteAllDatabases",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetKubernetesClusters returns all registered kubernetes clusters.
     *
     * @generated from rpc proto.AuthService.GetKubernetesClusters
     */
    getKubernetesClusters: {
      name: "GetKubernetesClusters",
      I: Empty,
      O: KubernetesClusterV3List,
      kind: MethodKind.Unary,
    },
    /**
     * GetKubernetesCluster returns a kubernetes cluster by name.
     *
     * @generated from rpc proto.AuthService.GetKubernetesCluster
     */
    getKubernetesCluster: {
      name: "GetKubernetesCluster",
      I: ResourceRequest,
      O: KubernetesClusterV3,
      kind: MethodKind.Unary,
    },
    /**
     * CreateKubernetesCluster creates a new kubernetes cluster resource.
     *
     * @generated from rpc proto.AuthService.CreateKubernetesCluster
     */
    createKubernetesCluster: {
      name: "CreateKubernetesCluster",
      I: KubernetesClusterV3,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateKubernetesCluster updates existing kubernetes cluster resource.
     *
     * @generated from rpc proto.AuthService.UpdateKubernetesCluster
     */
    updateKubernetesCluster: {
      name: "UpdateKubernetesCluster",
      I: KubernetesClusterV3,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteKubernetesCluster removes specified kubernetes cluster resource.
     *
     * @generated from rpc proto.AuthService.DeleteKubernetesCluster
     */
    deleteKubernetesCluster: {
      name: "DeleteKubernetesCluster",
      I: ResourceRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllKubernetesClusters removes all kubernetes cluster resources.
     *
     * @generated from rpc proto.AuthService.DeleteAllKubernetesClusters
     */
    deleteAllKubernetesClusters: {
      name: "DeleteAllKubernetesClusters",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetWindowsDesktopServices returns all registered Windows desktop services.
     *
     * @generated from rpc proto.AuthService.GetWindowsDesktopServices
     */
    getWindowsDesktopServices: {
      name: "GetWindowsDesktopServices",
      I: Empty,
      O: GetWindowsDesktopServicesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetWindowsDesktopService gets a Windows desktop service by name.
     *
     * @generated from rpc proto.AuthService.GetWindowsDesktopService
     */
    getWindowsDesktopService: {
      name: "GetWindowsDesktopService",
      I: GetWindowsDesktopServiceRequest,
      O: GetWindowsDesktopServiceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertWindowsDesktopService registers a new Windows desktop service.
     *
     * @generated from rpc proto.AuthService.UpsertWindowsDesktopService
     */
    upsertWindowsDesktopService: {
      name: "UpsertWindowsDesktopService",
      I: WindowsDesktopServiceV3,
      O: KeepAlive,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteWindowsDesktopService removes the specified Windows desktop service.
     *
     * @generated from rpc proto.AuthService.DeleteWindowsDesktopService
     */
    deleteWindowsDesktopService: {
      name: "DeleteWindowsDesktopService",
      I: DeleteWindowsDesktopServiceRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllWindowsDesktopServices removes all registered Windows desktop services.
     *
     * @generated from rpc proto.AuthService.DeleteAllWindowsDesktopServices
     */
    deleteAllWindowsDesktopServices: {
      name: "DeleteAllWindowsDesktopServices",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetWindowsDesktops returns all registered Windows desktop hosts matching the supplied filter.
     *
     * @generated from rpc proto.AuthService.GetWindowsDesktops
     */
    getWindowsDesktops: {
      name: "GetWindowsDesktops",
      I: WindowsDesktopFilter,
      O: GetWindowsDesktopsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateWindowsDesktop registers a new Windows desktop host.
     *
     * @generated from rpc proto.AuthService.CreateWindowsDesktop
     */
    createWindowsDesktop: {
      name: "CreateWindowsDesktop",
      I: WindowsDesktopV3,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateWindowsDesktop updates an existing Windows desktop host.
     *
     * @generated from rpc proto.AuthService.UpdateWindowsDesktop
     */
    updateWindowsDesktop: {
      name: "UpdateWindowsDesktop",
      I: WindowsDesktopV3,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertWindowsDesktop updates a Windows desktop host, creating it if it doesn't exist.
     *
     * @generated from rpc proto.AuthService.UpsertWindowsDesktop
     */
    upsertWindowsDesktop: {
      name: "UpsertWindowsDesktop",
      I: WindowsDesktopV3,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteWindowsDesktop removes the specified Windows desktop host.
     * Unlike GetWindowsDesktops, this call will delete at-most 1 desktop.
     * To delete all desktops, use DeleteAllWindowsDesktops.
     *
     * @generated from rpc proto.AuthService.DeleteWindowsDesktop
     */
    deleteWindowsDesktop: {
      name: "DeleteWindowsDesktop",
      I: DeleteWindowsDesktopRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllWindowsDesktops removes all registered Windows desktop hosts.
     *
     * @generated from rpc proto.AuthService.DeleteAllWindowsDesktops
     */
    deleteAllWindowsDesktops: {
      name: "DeleteAllWindowsDesktops",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GenerateWindowsDesktopCert generates client smartcard certificate used
     * by an RDP client to authenticate with Windows.
     *
     * @generated from rpc proto.AuthService.GenerateWindowsDesktopCert
     */
    generateWindowsDesktopCert: {
      name: "GenerateWindowsDesktopCert",
      I: WindowsDesktopCertRequest,
      O: WindowsDesktopCertResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GenerateCertAuthorityCRL creates an empty CRL for the specified CA.
     *
     * @generated from rpc proto.AuthService.GenerateCertAuthorityCRL
     */
    generateCertAuthorityCRL: {
      name: "GenerateCertAuthorityCRL",
      I: CertAuthorityRequest,
      O: CRL,
      kind: MethodKind.Unary,
    },
    /**
     * GetDesktopBootstrapScript returns a PowerShell script to bootstrap Active Directory.
     *
     * @generated from rpc proto.AuthService.GetDesktopBootstrapScript
     */
    getDesktopBootstrapScript: {
      name: "GetDesktopBootstrapScript",
      I: Empty,
      O: DesktopBootstrapScriptResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateConnectionDiagnostic creates a new connection diagnostic.
     *
     * @generated from rpc proto.AuthService.CreateConnectionDiagnostic
     */
    createConnectionDiagnostic: {
      name: "CreateConnectionDiagnostic",
      I: ConnectionDiagnosticV1,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateConnectionDiagnostic updates a connection diagnostic.
     *
     * @generated from rpc proto.AuthService.UpdateConnectionDiagnostic
     */
    updateConnectionDiagnostic: {
      name: "UpdateConnectionDiagnostic",
      I: ConnectionDiagnosticV1,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetConnectionDiagnostic reads a connection diagnostic.
     *
     * @generated from rpc proto.AuthService.GetConnectionDiagnostic
     */
    getConnectionDiagnostic: {
      name: "GetConnectionDiagnostic",
      I: GetConnectionDiagnosticRequest,
      O: ConnectionDiagnosticV1,
      kind: MethodKind.Unary,
    },
    /**
     * AppendDiagnosticTrace appends a Trace to the ConnectionDiagnostic.
     *
     * @generated from rpc proto.AuthService.AppendDiagnosticTrace
     */
    appendDiagnosticTrace: {
      name: "AppendDiagnosticTrace",
      I: AppendDiagnosticTraceRequest,
      O: ConnectionDiagnosticV1,
      kind: MethodKind.Unary,
    },
    /**
     * ChangeUserAuthentication allows a user to change their password and if enabled,
     * also adds a new MFA device. After successful invocation, a new web session is created as well
     * as a new set of recovery codes (if user meets the requirements to receive them), invalidating
     * any existing codes the user previously had.
     *
     * Only local users may be targeted by this RPC.
     *
     * @generated from rpc proto.AuthService.ChangeUserAuthentication
     */
    changeUserAuthentication: {
      name: "ChangeUserAuthentication",
      I: ChangeUserAuthenticationRequest,
      O: ChangeUserAuthenticationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * StartAccountRecovery (exclusive to cloud users) is the first out of two step user
     * verification needed to allow a user to recover their account. The first form of verification
     * is a user's username and a recovery code. After successful verification, a recovery start
     * token is created for the user which its ID will be used as part of a URL that will be emailed
     * to the user (not done in this request). The user will be able to finish their second form of
     * verification by clicking on this URL and following the prompts.
     *
     * If a valid user fails to provide correct recovery code for MaxAccountRecoveryAttempts,
     * user account gets temporarily locked from further recovery attempts and from logging in.
     *
     * Start tokens last RecoveryStartTokenTTL.
     *
     * Only local users may perform account recovery
     *
     * @generated from rpc proto.AuthService.StartAccountRecovery
     */
    startAccountRecovery: {
      name: "StartAccountRecovery",
      I: StartAccountRecoveryRequest,
      O: UserTokenV3,
      kind: MethodKind.Unary,
    },
    /**
     * VerifyAccountRecovery (exclusive to cloud users) is the second step of the two step
     * verification needed to allow a user to recover their account, after RPC StartAccountRecovery.
     * The second form of verification is a user's password or their second factor (depending on
     * what authentication they needed to recover). After successful verification, a recovery
     * approved token is created which allows a user to request protected actions while not logged
     * in e.g: setting a new password or a mfa device, viewing their MFA devices, deleting their MFA
     * devices, and generating new recovery codes.
     *
     * The recovery start token to verify this request becomes deleted before
     * creating a recovery approved token, which invalidates the recovery link users received
     * to finish their verification.
     *
     * If user fails to verify themselves for MaxAccountRecoveryAttempts
     * (combined attempts with RPC StartAccountRecovery), users account will be temporarily locked
     * from logging in. If users still have unused recovery codes left, they still have
     * opportunities to recover their account. To allow this, users recovery attempts are also
     * deleted along with all user tokens which will force the user to restart the recovery process
     * from step 1 (RPC StartAccountRecovery).
     *
     * Recovery approved tokens last RecoveryApprovedTokenTTL.
     *
     * @generated from rpc proto.AuthService.VerifyAccountRecovery
     */
    verifyAccountRecovery: {
      name: "VerifyAccountRecovery",
      I: VerifyAccountRecoveryRequest,
      O: UserTokenV3,
      kind: MethodKind.Unary,
    },
    /**
     * CompleteAccountRecovery (exclusive to cloud users) is the last step in account
     * recovery, after RPC's StartAccountRecovery and VerifyAccountRecovery. This step sets a new
     * password or adds a new mfa device, allowing the user to regain access to their account with
     * the new credentials. When the new authentication is successfully set, any user lock is
     * removed so the user can login immediately afterwards.
     *
     * @generated from rpc proto.AuthService.CompleteAccountRecovery
     */
    completeAccountRecovery: {
      name: "CompleteAccountRecovery",
      I: CompleteAccountRecoveryRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * CreateAccountRecoveryCodes (exclusive to cloud users) creates new set of recovery codes for a
     * user, replacing and invalidating any previously owned codes. Users can only get recovery
     * codes if their username is in a valid email format.
     *
     * @generated from rpc proto.AuthService.CreateAccountRecoveryCodes
     */
    createAccountRecoveryCodes: {
      name: "CreateAccountRecoveryCodes",
      I: CreateAccountRecoveryCodesRequest,
      O: RecoveryCodes,
      kind: MethodKind.Unary,
    },
    /**
     * GetAccountRecoveryToken (exclusive to cloud users) returns a user token resource after
     * verifying that the token requested has not expired and is of the correct recovery kind.
     * Besides checking for validity of a token ID, it is also used to get basic information from
     * the token e.g: username, state of recovery (started or approved) and the type of recovery
     * requested (password or second factor).
     *
     * @generated from rpc proto.AuthService.GetAccountRecoveryToken
     */
    getAccountRecoveryToken: {
      name: "GetAccountRecoveryToken",
      I: GetAccountRecoveryTokenRequest,
      O: UserTokenV3,
      kind: MethodKind.Unary,
    },
    /**
     * GetAccountRecoveryCodes (exclusive to cloud users) is a request to return the user in context
     * their recovery codes. This request will not return any secrets (the values of recovery
     * codes), but instead returns non-sensitive data eg. when the recovery codes were created.
     *
     * @generated from rpc proto.AuthService.GetAccountRecoveryCodes
     */
    getAccountRecoveryCodes: {
      name: "GetAccountRecoveryCodes",
      I: GetAccountRecoveryCodesRequest,
      O: RecoveryCodes,
      kind: MethodKind.Unary,
    },
    /**
     * CreatePrivilegeToken returns a new privilege token after a logged in user successfully
     * re-authenticates with their second factor device. Privilege token lasts PrivilegeTokenTTL and
     * is used to gain access to privileged actions eg: deleting/adding a MFA device.
     *
     * @generated from rpc proto.AuthService.CreatePrivilegeToken
     */
    createPrivilegeToken: {
      name: "CreatePrivilegeToken",
      I: CreatePrivilegeTokenRequest,
      O: UserTokenV3,
      kind: MethodKind.Unary,
    },
    /**
     * GetInstaller retrieves the installer script resource
     *
     * @generated from rpc proto.AuthService.GetInstaller
     */
    getInstaller: {
      name: "GetInstaller",
      I: ResourceRequest,
      O: InstallerV1,
      kind: MethodKind.Unary,
    },
    /**
     * GetInstallers retrieves all of installer script resources.
     *
     * @generated from rpc proto.AuthService.GetInstallers
     */
    getInstallers: {
      name: "GetInstallers",
      I: Empty,
      O: InstallerV1List,
      kind: MethodKind.Unary,
    },
    /**
     * SetInstaller sets the installer script resource
     *
     * @generated from rpc proto.AuthService.SetInstaller
     */
    setInstaller: {
      name: "SetInstaller",
      I: InstallerV1,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteInstaller removes the specified installer script resource
     *
     * @generated from rpc proto.AuthService.DeleteInstaller
     */
    deleteInstaller: {
      name: "DeleteInstaller",
      I: ResourceRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllInstallers removes all installer script resources
     *
     * @generated from rpc proto.AuthService.DeleteAllInstallers
     */
    deleteAllInstallers: {
      name: "DeleteAllInstallers",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * ListResources retrieves a paginated list of resources.
     *
     * @generated from rpc proto.AuthService.ListResources
     */
    listResources: {
      name: "ListResources",
      I: ListResourcesRequest,
      O: ListResourcesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListUnifiedResources retrieves a paginated list of all resource types displayable in the UI.
     *
     * @generated from rpc proto.AuthService.ListUnifiedResources
     */
    listUnifiedResources: {
      name: "ListUnifiedResources",
      I: ListUnifiedResourcesRequest,
      O: ListUnifiedResourcesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSSHTargets gets all servers that would match an equivalent ssh dial request. Note that this method
     * returns all resources directly accessible to the user *and* all resources available via 'SearchAsRoles',
     * which is what we want when handling things like ambiguous host errors and resource-based access requests,
     * but may result in confusing behavior if it is used outside of those contexts.
     *
     * @generated from rpc proto.AuthService.GetSSHTargets
     */
    getSSHTargets: {
      name: "GetSSHTargets",
      I: GetSSHTargetsRequest,
      O: GetSSHTargetsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetDomainName returns local auth domain of the current auth server
     *
     * @generated from rpc proto.AuthService.GetDomainName
     */
    getDomainName: {
      name: "GetDomainName",
      I: Empty,
      O: GetDomainNameResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetClusterCACert returns the PEM-encoded TLS certs for the local cluster
     * without signing keys. If the cluster has multiple TLS certs, they will
     * all be appended.
     *
     * @generated from rpc proto.AuthService.GetClusterCACert
     */
    getClusterCACert: {
      name: "GetClusterCACert",
      I: Empty,
      O: GetClusterCACertResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AssertSystemRole is used by agents to prove that they have a given system role when their
     * credentials originate from multiple separate join tokens so that they can be issued an instance
     * certificate that encompasses all of their capabilities. This method will be deprecated once we
     * have a more comprehensive model for join token joining/replacement.
     *
     * @generated from rpc proto.AuthService.AssertSystemRole
     */
    assertSystemRole: {
      name: "AssertSystemRole",
      I: SystemRoleAssertion,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * SubmitUsageEvent submits an external usage event.
     *
     * @generated from rpc proto.AuthService.SubmitUsageEvent
     */
    submitUsageEvent: {
      name: "SubmitUsageEvent",
      I: SubmitUsageEventRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetLicense returns the license used to start the auth server.
     *
     * @generated from rpc proto.AuthService.GetLicense
     */
    getLicense: {
      name: "GetLicense",
      I: GetLicenseRequest,
      O: GetLicenseResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListReleases returns a list of Teleport Enterprise releases.
     *
     * @generated from rpc proto.AuthService.ListReleases
     */
    listReleases: {
      name: "ListReleases",
      I: ListReleasesRequest,
      O: ListReleasesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListSAMLIdPServiceProviders returns a paginated list of SAML IdP service provider resources.
     *
     * @generated from rpc proto.AuthService.ListSAMLIdPServiceProviders
     */
    listSAMLIdPServiceProviders: {
      name: "ListSAMLIdPServiceProviders",
      I: ListSAMLIdPServiceProvidersRequest,
      O: ListSAMLIdPServiceProvidersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSAMLIdPServiceProvider returns the specified SAML IdP service provider resources.
     *
     * @generated from rpc proto.AuthService.GetSAMLIdPServiceProvider
     */
    getSAMLIdPServiceProvider: {
      name: "GetSAMLIdPServiceProvider",
      I: GetSAMLIdPServiceProviderRequest,
      O: SAMLIdPServiceProviderV1,
      kind: MethodKind.Unary,
    },
    /**
     * CreateSAMLIdPServiceProvider creates a new SAML IdP service provider resource.
     *
     * @generated from rpc proto.AuthService.CreateSAMLIdPServiceProvider
     */
    createSAMLIdPServiceProvider: {
      name: "CreateSAMLIdPServiceProvider",
      I: SAMLIdPServiceProviderV1,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateSAMLIdPServiceProvider updates an existing SAML IdP service provider resource.
     *
     * @generated from rpc proto.AuthService.UpdateSAMLIdPServiceProvider
     */
    updateSAMLIdPServiceProvider: {
      name: "UpdateSAMLIdPServiceProvider",
      I: SAMLIdPServiceProviderV1,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteSAMLIdPServiceProvider removes the specified SAML IdP service provider resource.
     *
     * @generated from rpc proto.AuthService.DeleteSAMLIdPServiceProvider
     */
    deleteSAMLIdPServiceProvider: {
      name: "DeleteSAMLIdPServiceProvider",
      I: DeleteSAMLIdPServiceProviderRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllSAMLIdPServiceProviders removes all SAML IdP service providers.
     *
     * @generated from rpc proto.AuthService.DeleteAllSAMLIdPServiceProviders
     */
    deleteAllSAMLIdPServiceProviders: {
      name: "DeleteAllSAMLIdPServiceProviders",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * ListUserGroups returns a paginated list of user group resources.
     *
     * @generated from rpc proto.AuthService.ListUserGroups
     */
    listUserGroups: {
      name: "ListUserGroups",
      I: ListUserGroupsRequest,
      O: ListUserGroupsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetUserGroup returns the specified user group resource.
     *
     * @generated from rpc proto.AuthService.GetUserGroup
     */
    getUserGroup: {
      name: "GetUserGroup",
      I: GetUserGroupRequest,
      O: UserGroupV1,
      kind: MethodKind.Unary,
    },
    /**
     * CreateUserGroup creates a new user group resource.
     *
     * @generated from rpc proto.AuthService.CreateUserGroup
     */
    createUserGroup: {
      name: "CreateUserGroup",
      I: UserGroupV1,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateUserGroup updates an existing user group resource.
     *
     * @generated from rpc proto.AuthService.UpdateUserGroup
     */
    updateUserGroup: {
      name: "UpdateUserGroup",
      I: UserGroupV1,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteUserGroup removes the specified user group resource.
     *
     * @generated from rpc proto.AuthService.DeleteUserGroup
     */
    deleteUserGroup: {
      name: "DeleteUserGroup",
      I: DeleteUserGroupRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAllUserGroups removes all user groups.
     *
     * @generated from rpc proto.AuthService.DeleteAllUserGroups
     */
    deleteAllUserGroups: {
      name: "DeleteAllUserGroups",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetHeadlessAuthentication is a request to retrieve a headless authentication from the backend.
     *
     * @generated from rpc proto.AuthService.GetHeadlessAuthentication
     */
    getHeadlessAuthentication: {
      name: "GetHeadlessAuthentication",
      I: GetHeadlessAuthenticationRequest,
      O: HeadlessAuthentication,
      kind: MethodKind.Unary,
    },
    /**
     * WatchPendingHeadlessAuthentications watches the backend for pending headless authentication requests for the user.
     *
     * @generated from rpc proto.AuthService.WatchPendingHeadlessAuthentications
     */
    watchPendingHeadlessAuthentications: {
      name: "WatchPendingHeadlessAuthentications",
      I: Empty,
      O: Event,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * UpdateHeadlessAuthenticationState is a request to update a headless authentication's state.
     *
     * @generated from rpc proto.AuthService.UpdateHeadlessAuthenticationState
     */
    updateHeadlessAuthenticationState: {
      name: "UpdateHeadlessAuthenticationState",
      I: UpdateHeadlessAuthenticationStateRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * ExportUpgradeWindows is used to load derived maintenance window values for agents that
     * need to export schedules to external upgraders.
     *
     * @generated from rpc proto.AuthService.ExportUpgradeWindows
     */
    exportUpgradeWindows: {
      name: "ExportUpgradeWindows",
      I: ExportUpgradeWindowsRequest,
      O: ExportUpgradeWindowsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetClusterMaintenanceConfig gets the current maintenance window config singleton.
     *
     * @generated from rpc proto.AuthService.GetClusterMaintenanceConfig
     */
    getClusterMaintenanceConfig: {
      name: "GetClusterMaintenanceConfig",
      I: Empty,
      O: ClusterMaintenanceConfigV1,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateClusterMaintenanceConfig updates the current maintenance window config singleton.
     *
     * @generated from rpc proto.AuthService.UpdateClusterMaintenanceConfig
     */
    updateClusterMaintenanceConfig: {
      name: "UpdateClusterMaintenanceConfig",
      I: ClusterMaintenanceConfigV1,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteClusterMaintenanceConfig deletes the current maintenance window config singleton.
     *
     * @generated from rpc proto.AuthService.DeleteClusterMaintenanceConfig
     */
    deleteClusterMaintenanceConfig: {
      name: "DeleteClusterMaintenanceConfig",
      I: Empty,
      O: Empty,
      kind: MethodKind.Unary,
    },
  }
} as const;

