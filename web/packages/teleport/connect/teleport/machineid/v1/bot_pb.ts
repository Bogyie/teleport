// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/machineid/v1/bot.proto (package teleport.machineid.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Metadata } from "../../header/v1/metadata_pb";
import { file_teleport_header_v1_metadata } from "../../header/v1/metadata_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/machineid/v1/bot.proto.
 */
export const file_teleport_machineid_v1_bot: GenFile = /*@__PURE__*/
  fileDesc("Ch90ZWxlcG9ydC9tYWNoaW5laWQvdjEvYm90LnByb3RvEhV0ZWxlcG9ydC5tYWNoaW5laWQudjEixgEKA0JvdBIMCgRraW5kGAEgASgJEhAKCHN1Yl9raW5kGAIgASgJEg8KB3ZlcnNpb24YAyABKAkSLgoIbWV0YWRhdGEYBCABKAsyHC50ZWxlcG9ydC5oZWFkZXIudjEuTWV0YWRhdGESLAoEc3BlYxgFIAEoCzIeLnRlbGVwb3J0Lm1hY2hpbmVpZC52MS5Cb3RTcGVjEjAKBnN0YXR1cxgGIAEoCzIgLnRlbGVwb3J0Lm1hY2hpbmVpZC52MS5Cb3RTdGF0dXMiJQoFVHJhaXQSDAoEbmFtZRgBIAEoCRIOCgZ2YWx1ZXMYAiADKAkiRgoHQm90U3BlYxINCgVyb2xlcxgBIAMoCRIsCgZ0cmFpdHMYAiADKAsyHC50ZWxlcG9ydC5tYWNoaW5laWQudjEuVHJhaXQiQgoJQm90U3RhdHVzEhEKCXVzZXJfbmFtZRgBIAEoCRIRCglyb2xlX25hbWUYAyABKAlKBAgCEANSCXJvbGVfcm9sZUJWWlRnaXRodWIuY29tL2dyYXZpdGF0aW9uYWwvdGVsZXBvcnQvYXBpL2dlbi9wcm90by9nby90ZWxlcG9ydC9tYWNoaW5laWQvdjE7bWFjaGluZWlkdjFiBnByb3RvMw", [file_teleport_header_v1_metadata]);

/**
 * A Bot is a Teleport identity intended to be used by Machines. The Bot
 * resource defines a Bot and configures its properties.
 *
 * @generated from message teleport.machineid.v1.Bot
 */
export type Bot = Message<"teleport.machineid.v1.Bot"> & {
  /**
   * The kind of resource represented.
   *
   * @generated from field: string kind = 1;
   */
  kind: string;

  /**
   * Differentiates variations of the same kind. All resources should
   * contain one, even if it is never populated.
   *
   * @generated from field: string sub_kind = 2;
   */
  subKind: string;

  /**
   * The version of the resource being represented.
   *
   * @generated from field: string version = 3;
   */
  version: string;

  /**
   * Common metadata that all resources share.
   *
   * @generated from field: teleport.header.v1.Metadata metadata = 4;
   */
  metadata?: Metadata;

  /**
   * The configured properties of a Bot.
   *
   * @generated from field: teleport.machineid.v1.BotSpec spec = 5;
   */
  spec?: BotSpec;

  /**
   * Fields that are set by the server as results of operations. These should
   * not be modified by users.
   *
   * @generated from field: teleport.machineid.v1.BotStatus status = 6;
   */
  status?: BotStatus;
};

/**
 * Describes the message teleport.machineid.v1.Bot.
 * Use `create(BotSchema)` to create a new message.
 */
export const BotSchema: GenMessage<Bot> = /*@__PURE__*/
  messageDesc(file_teleport_machineid_v1_bot, 0);

/**
 * Trait is an individual trait that will be applied to the bot user.
 *
 * @generated from message teleport.machineid.v1.Trait
 */
export type Trait = Message<"teleport.machineid.v1.Trait"> & {
  /**
   * The name of the trait. This is what allows the trait to be queried in
   * role templates.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The values associated with the named trait.
   *
   * @generated from field: repeated string values = 2;
   */
  values: string[];
};

/**
 * Describes the message teleport.machineid.v1.Trait.
 * Use `create(TraitSchema)` to create a new message.
 */
export const TraitSchema: GenMessage<Trait> = /*@__PURE__*/
  messageDesc(file_teleport_machineid_v1_bot, 1);

/**
 * The configured properties of a Bot.
 *
 * @generated from message teleport.machineid.v1.BotSpec
 */
export type BotSpec = Message<"teleport.machineid.v1.BotSpec"> & {
  /**
   * The roles that the bot should be able to impersonate.
   *
   * @generated from field: repeated string roles = 1;
   */
  roles: string[];

  /**
   * The traits that will be associated with the bot for the purposes of role
   * templating.
   *
   * Where multiple specified with the same name, these will be merged by the
   * server.
   *
   * @generated from field: repeated teleport.machineid.v1.Trait traits = 2;
   */
  traits: Trait[];
};

/**
 * Describes the message teleport.machineid.v1.BotSpec.
 * Use `create(BotSpecSchema)` to create a new message.
 */
export const BotSpecSchema: GenMessage<BotSpec> = /*@__PURE__*/
  messageDesc(file_teleport_machineid_v1_bot, 2);

/**
 * Fields that are set by the server as results of operations. These should not
 * be modified by users.
 *
 * @generated from message teleport.machineid.v1.BotStatus
 */
export type BotStatus = Message<"teleport.machineid.v1.BotStatus"> & {
  /**
   * The name of the user associated with the bot.
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * The name of the role associated with the bot.
   *
   * @generated from field: string role_name = 3;
   */
  roleName: string;
};

/**
 * Describes the message teleport.machineid.v1.BotStatus.
 * Use `create(BotStatusSchema)` to create a new message.
 */
export const BotStatusSchema: GenMessage<BotStatus> = /*@__PURE__*/
  messageDesc(file_teleport_machineid_v1_bot, 3);

