// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/machineid/v1/bot_service.proto (package teleport.machineid.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { EmptySchema, FieldMask } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask } from "@bufbuild/protobuf/wkt";
import type { Bot, BotSchema } from "./bot_pb";
import { file_teleport_machineid_v1_bot } from "./bot_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/machineid/v1/bot_service.proto.
 */
export const file_teleport_machineid_v1_bot_service: GenFile = /*@__PURE__*/
  fileDesc("Cid0ZWxlcG9ydC9tYWNoaW5laWQvdjEvYm90X3NlcnZpY2UucHJvdG8SFXRlbGVwb3J0Lm1hY2hpbmVpZC52MSI7ChBDcmVhdGVCb3RSZXF1ZXN0EicKA2JvdBgBIAEoCzIaLnRlbGVwb3J0Lm1hY2hpbmVpZC52MS5Cb3QiIQoNR2V0Qm90UmVxdWVzdBIQCghib3RfbmFtZRgBIAEoCSI4Cg9MaXN0Qm90c1JlcXVlc3QSEQoJcGFnZV9zaXplGAEgASgFEhIKCnBhZ2VfdG9rZW4YAiABKAkiVQoQTGlzdEJvdHNSZXNwb25zZRIoCgRib3RzGAEgAygLMhoudGVsZXBvcnQubWFjaGluZWlkLnYxLkJvdBIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkibAoQVXBkYXRlQm90UmVxdWVzdBInCgNib3QYASABKAsyGi50ZWxlcG9ydC5tYWNoaW5laWQudjEuQm90Ei8KC3VwZGF0ZV9tYXNrGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFzayI7ChBVcHNlcnRCb3RSZXF1ZXN0EicKA2JvdBgBIAEoCzIaLnRlbGVwb3J0Lm1hY2hpbmVpZC52MS5Cb3QiJAoQRGVsZXRlQm90UmVxdWVzdBIQCghib3RfbmFtZRgBIAEoCTL5AwoKQm90U2VydmljZRJKCgZHZXRCb3QSJC50ZWxlcG9ydC5tYWNoaW5laWQudjEuR2V0Qm90UmVxdWVzdBoaLnRlbGVwb3J0Lm1hY2hpbmVpZC52MS5Cb3QSWwoITGlzdEJvdHMSJi50ZWxlcG9ydC5tYWNoaW5laWQudjEuTGlzdEJvdHNSZXF1ZXN0GicudGVsZXBvcnQubWFjaGluZWlkLnYxLkxpc3RCb3RzUmVzcG9uc2USUAoJQ3JlYXRlQm90EicudGVsZXBvcnQubWFjaGluZWlkLnYxLkNyZWF0ZUJvdFJlcXVlc3QaGi50ZWxlcG9ydC5tYWNoaW5laWQudjEuQm90ElAKCVVwZGF0ZUJvdBInLnRlbGVwb3J0Lm1hY2hpbmVpZC52MS5VcGRhdGVCb3RSZXF1ZXN0GhoudGVsZXBvcnQubWFjaGluZWlkLnYxLkJvdBJQCglVcHNlcnRCb3QSJy50ZWxlcG9ydC5tYWNoaW5laWQudjEuVXBzZXJ0Qm90UmVxdWVzdBoaLnRlbGVwb3J0Lm1hY2hpbmVpZC52MS5Cb3QSTAoJRGVsZXRlQm90EicudGVsZXBvcnQubWFjaGluZWlkLnYxLkRlbGV0ZUJvdFJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHlCVlpUZ2l0aHViLmNvbS9ncmF2aXRhdGlvbmFsL3RlbGVwb3J0L2FwaS9nZW4vcHJvdG8vZ28vdGVsZXBvcnQvbWFjaGluZWlkL3YxO21hY2hpbmVpZHYxYgZwcm90bzM", [file_google_protobuf_empty, file_google_protobuf_field_mask, file_teleport_machineid_v1_bot]);

/**
 * The request for CreateBot.
 *
 * @generated from message teleport.machineid.v1.CreateBotRequest
 */
export type CreateBotRequest = Message<"teleport.machineid.v1.CreateBotRequest"> & {
  /**
   * The bot to create.
   *
   * @generated from field: teleport.machineid.v1.Bot bot = 1;
   */
  bot?: Bot;
};

/**
 * Describes the message teleport.machineid.v1.CreateBotRequest.
 * Use `create(CreateBotRequestSchema)` to create a new message.
 */
export const CreateBotRequestSchema: GenMessage<CreateBotRequest> = /*@__PURE__*/
  messageDesc(file_teleport_machineid_v1_bot_service, 0);

/**
 * The request for GetBot.
 *
 * @generated from message teleport.machineid.v1.GetBotRequest
 */
export type GetBotRequest = Message<"teleport.machineid.v1.GetBotRequest"> & {
  /**
   * The name of the bot to fetch.
   *
   * @generated from field: string bot_name = 1;
   */
  botName: string;
};

/**
 * Describes the message teleport.machineid.v1.GetBotRequest.
 * Use `create(GetBotRequestSchema)` to create a new message.
 */
export const GetBotRequestSchema: GenMessage<GetBotRequest> = /*@__PURE__*/
  messageDesc(file_teleport_machineid_v1_bot_service, 1);

/**
 * The request for ListBots.
 *
 * @generated from message teleport.machineid.v1.ListBotsRequest
 */
export type ListBotsRequest = Message<"teleport.machineid.v1.ListBotsRequest"> & {
  /**
   * The maximum number of items to return.
   * The server may impose a different page size at its discretion.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * The next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;
};

/**
 * Describes the message teleport.machineid.v1.ListBotsRequest.
 * Use `create(ListBotsRequestSchema)` to create a new message.
 */
export const ListBotsRequestSchema: GenMessage<ListBotsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_machineid_v1_bot_service, 2);

/**
 * The response for ListBots.
 *
 * @generated from message teleport.machineid.v1.ListBotsResponse
 */
export type ListBotsResponse = Message<"teleport.machineid.v1.ListBotsResponse"> & {
  /**
   * The page of Bots that matched the request.
   *
   * @generated from field: repeated teleport.machineid.v1.Bot bots = 1;
   */
  bots: Bot[];

  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message teleport.machineid.v1.ListBotsResponse.
 * Use `create(ListBotsResponseSchema)` to create a new message.
 */
export const ListBotsResponseSchema: GenMessage<ListBotsResponse> = /*@__PURE__*/
  messageDesc(file_teleport_machineid_v1_bot_service, 3);

/**
 * The request for UpdateBot.
 *
 * @generated from message teleport.machineid.v1.UpdateBotRequest
 */
export type UpdateBotRequest = Message<"teleport.machineid.v1.UpdateBotRequest"> & {
  /**
   * The values to apply based on the update mask. The name must be specified.
   *
   * @generated from field: teleport.machineid.v1.Bot bot = 1;
   */
  bot?: Bot;

  /**
   * The update mask applied to a Bot.
   * Fields are masked according to their proto name.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message teleport.machineid.v1.UpdateBotRequest.
 * Use `create(UpdateBotRequestSchema)` to create a new message.
 */
export const UpdateBotRequestSchema: GenMessage<UpdateBotRequest> = /*@__PURE__*/
  messageDesc(file_teleport_machineid_v1_bot_service, 4);

/**
 * The request for UpsertBot.
 *
 * @generated from message teleport.machineid.v1.UpsertBotRequest
 */
export type UpsertBotRequest = Message<"teleport.machineid.v1.UpsertBotRequest"> & {
  /**
   * The bot to create or replace.
   *
   * @generated from field: teleport.machineid.v1.Bot bot = 1;
   */
  bot?: Bot;
};

/**
 * Describes the message teleport.machineid.v1.UpsertBotRequest.
 * Use `create(UpsertBotRequestSchema)` to create a new message.
 */
export const UpsertBotRequestSchema: GenMessage<UpsertBotRequest> = /*@__PURE__*/
  messageDesc(file_teleport_machineid_v1_bot_service, 5);

/**
 * The request for DeleteBot.
 *
 * @generated from message teleport.machineid.v1.DeleteBotRequest
 */
export type DeleteBotRequest = Message<"teleport.machineid.v1.DeleteBotRequest"> & {
  /**
   * The name of the bot to delete.
   *
   * @generated from field: string bot_name = 1;
   */
  botName: string;
};

/**
 * Describes the message teleport.machineid.v1.DeleteBotRequest.
 * Use `create(DeleteBotRequestSchema)` to create a new message.
 */
export const DeleteBotRequestSchema: GenMessage<DeleteBotRequest> = /*@__PURE__*/
  messageDesc(file_teleport_machineid_v1_bot_service, 6);

/**
 * BotService provides methods to manage Teleport Bots
 *
 * @generated from service teleport.machineid.v1.BotService
 */
export const BotService: GenService<{
  /**
   * GetBot is used to query a Bot resource by its name.
   *
   * This will return a NotFound error if the specified Bot does not exist.
   *
   * @generated from rpc teleport.machineid.v1.BotService.GetBot
   */
  getBot: {
    methodKind: "unary";
    input: typeof GetBotRequestSchema;
    output: typeof BotSchema;
  },
  /**
   * ListBots is used to query Bots.
   *
   * Follows the pagination semantics of
   * https://cloud.google.com/apis/design/standard_methods#list.
   *
   * @generated from rpc teleport.machineid.v1.BotService.ListBots
   */
  listBots: {
    methodKind: "unary";
    input: typeof ListBotsRequestSchema;
    output: typeof ListBotsResponseSchema;
  },
  /**
   * CreateBot is used to create a Bot.
   *
   * This will return an error if a Bot by that name already exists.
   *
   * @generated from rpc teleport.machineid.v1.BotService.CreateBot
   */
  createBot: {
    methodKind: "unary";
    input: typeof CreateBotRequestSchema;
    output: typeof BotSchema;
  },
  /**
   * UpdateBot is used to modify an existing Bot.
   *
   * @generated from rpc teleport.machineid.v1.BotService.UpdateBot
   */
  updateBot: {
    methodKind: "unary";
    input: typeof UpdateBotRequestSchema;
    output: typeof BotSchema;
  },
  /**
   * UpsertBot is used to create or replace an existing Bot.
   *
   * Prefer using CreateBot and UpdateBot.
   *
   * @generated from rpc teleport.machineid.v1.BotService.UpsertBot
   */
  upsertBot: {
    methodKind: "unary";
    input: typeof UpsertBotRequestSchema;
    output: typeof BotSchema;
  },
  /**
   * DeleteBot is used to delete a specific Bot.
   *
   * This will return a NotFound error if the specified Bot does not exist.
   *
   * @generated from rpc teleport.machineid.v1.BotService.DeleteBot
   */
  deleteBot: {
    methodKind: "unary";
    input: typeof DeleteBotRequestSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_teleport_machineid_v1_bot_service, 0);

