//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/lib/multiplexer/test/ping.proto (package teleport.lib.multiplexer.test, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/lib/multiplexer/test/ping.proto.
 */
export const file_teleport_lib_multiplexer_test_ping: GenFile = /*@__PURE__*/
  fileDesc("Cih0ZWxlcG9ydC9saWIvbXVsdGlwbGV4ZXIvdGVzdC9waW5nLnByb3RvEh10ZWxlcG9ydC5saWIubXVsdGlwbGV4ZXIudGVzdCIaCgdSZXF1ZXN0Eg8KB1BheWxvYWQYASABKAkiGwoIUmVzcG9uc2USDwoHUGF5bG9hZBgBIAEoCTJhCgZQaW5nZXISVwoEUGluZxImLnRlbGVwb3J0LmxpYi5tdWx0aXBsZXhlci50ZXN0LlJlcXVlc3QaJy50ZWxlcG9ydC5saWIubXVsdGlwbGV4ZXIudGVzdC5SZXNwb25zZUI4WjZnaXRodWIuY29tL2dyYXZpdGF0aW9uYWwvdGVsZXBvcnQvbGliL211bHRpcGxleGVyL3Rlc3RiBnByb3RvMw");

/**
 * @generated from message teleport.lib.multiplexer.test.Request
 */
export type Request = Message<"teleport.lib.multiplexer.test.Request"> & {
  /**
   * @generated from field: string Payload = 1;
   */
  Payload: string;
};

/**
 * Describes the message teleport.lib.multiplexer.test.Request.
 * Use `create(RequestSchema)` to create a new message.
 */
export const RequestSchema: GenMessage<Request> = /*@__PURE__*/
  messageDesc(file_teleport_lib_multiplexer_test_ping, 0);

/**
 * @generated from message teleport.lib.multiplexer.test.Response
 */
export type Response = Message<"teleport.lib.multiplexer.test.Response"> & {
  /**
   * @generated from field: string Payload = 1;
   */
  Payload: string;
};

/**
 * Describes the message teleport.lib.multiplexer.test.Response.
 * Use `create(ResponseSchema)` to create a new message.
 */
export const ResponseSchema: GenMessage<Response> = /*@__PURE__*/
  messageDesc(file_teleport_lib_multiplexer_test_ping, 1);

/**
 * Pinger is a service used in tests
 *
 * @generated from service teleport.lib.multiplexer.test.Pinger
 */
export const Pinger: GenService<{
  /**
   * @generated from rpc teleport.lib.multiplexer.test.Pinger.Ping
   */
  ping: {
    methodKind: "unary";
    input: typeof RequestSchema;
    output: typeof ResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_teleport_lib_multiplexer_test_ping, 0);

