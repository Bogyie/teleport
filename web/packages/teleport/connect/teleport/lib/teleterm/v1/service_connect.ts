//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file teleport/lib/teleterm/v1/service.proto (package teleport.lib.teleterm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AddClusterRequest, AssumeRoleRequest, AuthenticateWebDeviceRequest, AuthenticateWebDeviceResponse, CreateAccessRequestRequest, CreateAccessRequestResponse, CreateConnectMyComputerNodeTokenRequest, CreateConnectMyComputerNodeTokenResponse, CreateConnectMyComputerRoleRequest, CreateConnectMyComputerRoleResponse, CreateGatewayRequest, DeleteAccessRequestRequest, DeleteConnectMyComputerNodeRequest, DeleteConnectMyComputerNodeResponse, EmptyResponse, FileTransferProgress, FileTransferRequest, GetAccessRequestRequest, GetAccessRequestResponse, GetAccessRequestsRequest, GetAccessRequestsResponse, GetAppsRequest, GetAppsResponse, GetAuthSettingsRequest, GetClusterRequest, GetConnectMyComputerNodeNameRequest, GetConnectMyComputerNodeNameResponse, GetDatabasesRequest, GetDatabasesResponse, GetKubesRequest, GetKubesResponse, GetRequestableRolesRequest, GetRequestableRolesResponse, GetServersRequest, GetServersResponse, GetSuggestedAccessListsRequest, GetSuggestedAccessListsResponse, GetUserPreferencesRequest, GetUserPreferencesResponse, ListClustersRequest, ListClustersResponse, ListDatabaseUsersRequest, ListDatabaseUsersResponse, ListGatewaysRequest, ListGatewaysResponse, ListLeafClustersRequest, ListUnifiedResourcesRequest, ListUnifiedResourcesResponse, LoginPasswordlessRequest, LoginPasswordlessResponse, LoginRequest, LogoutRequest, PromoteAccessRequestRequest, PromoteAccessRequestResponse, RemoveClusterRequest, RemoveGatewayRequest, ReviewAccessRequestRequest, ReviewAccessRequestResponse, SetGatewayLocalPortRequest, SetGatewayTargetSubresourceNameRequest, UpdateHeadlessAuthenticationStateRequest, UpdateHeadlessAuthenticationStateResponse, UpdateTshdEventsServerAddressRequest, UpdateTshdEventsServerAddressResponse, UpdateUserPreferencesRequest, UpdateUserPreferencesResponse, WaitForConnectMyComputerNodeJoinRequest, WaitForConnectMyComputerNodeJoinResponse } from "./service_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { Cluster } from "./cluster_pb.js";
import { Gateway } from "./gateway_pb.js";
import { AuthSettings } from "./auth_settings_pb.js";
import { ReportUsageEventRequest } from "./usage_events_pb.js";

/**
 * TerminalService is used by the Electron app to communicate with the tsh daemon.
 *
 * While we aim to preserve backwards compatibility in order to satisfy CI checks and follow the
 * proto practices used within the company, this service is not guaranteed to be stable across
 * versions. The packaging process of Teleport Connect ensures that the server and the client use
 * the same version of the service.
 *
 * @generated from service teleport.lib.teleterm.v1.TerminalService
 */
export const TerminalService = {
  typeName: "teleport.lib.teleterm.v1.TerminalService",
  methods: {
    /**
     * UpdateTshdEventsServerAddress lets the Electron app update the address the tsh daemon is
     * supposed to use when connecting to the tshd events gRPC service. This RPC needs to be made
     * before any other from this service.
     *
     * The service is supposed to return a response from this call only after the client is ready.
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.UpdateTshdEventsServerAddress
     */
    updateTshdEventsServerAddress: {
      name: "UpdateTshdEventsServerAddress",
      I: UpdateTshdEventsServerAddressRequest,
      O: UpdateTshdEventsServerAddressResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListRootClusters lists root clusters
     * Does not include detailed cluster information that would require a network request.
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.ListRootClusters
     */
    listRootClusters: {
      name: "ListRootClusters",
      I: ListClustersRequest,
      O: ListClustersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListLeafClusters lists leaf clusters
     * Does not include detailed cluster information that would require a network request.
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.ListLeafClusters
     */
    listLeafClusters: {
      name: "ListLeafClusters",
      I: ListLeafClustersRequest,
      O: ListClustersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetDatabases returns a filtered and paginated list of databases
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetDatabases
     */
    getDatabases: {
      name: "GetDatabases",
      I: GetDatabasesRequest,
      O: GetDatabasesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListDatabaseUsers lists allowed users for the given database based on the role set.
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.ListDatabaseUsers
     */
    listDatabaseUsers: {
      name: "ListDatabaseUsers",
      I: ListDatabaseUsersRequest,
      O: ListDatabaseUsersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetServers returns filtered, sorted, and paginated servers
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetServers
     */
    getServers: {
      name: "GetServers",
      I: GetServersRequest,
      O: GetServersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetAccessRequests lists filtered AccessRequests
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetAccessRequests
     */
    getAccessRequests: {
      name: "GetAccessRequests",
      I: GetAccessRequestsRequest,
      O: GetAccessRequestsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetAccessRequest retreives a single Access Request
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetAccessRequest
     */
    getAccessRequest: {
      name: "GetAccessRequest",
      I: GetAccessRequestRequest,
      O: GetAccessRequestResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAccessRequest deletes the access request by id
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.DeleteAccessRequest
     */
    deleteAccessRequest: {
      name: "DeleteAccessRequest",
      I: DeleteAccessRequestRequest,
      O: EmptyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateAccessRequest creates an access request
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.CreateAccessRequest
     */
    createAccessRequest: {
      name: "CreateAccessRequest",
      I: CreateAccessRequestRequest,
      O: CreateAccessRequestResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ReviewAccessRequest submits a review for an Access Request
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.ReviewAccessRequest
     */
    reviewAccessRequest: {
      name: "ReviewAccessRequest",
      I: ReviewAccessRequestRequest,
      O: ReviewAccessRequestResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetRequestableRoles gets all requestable roles
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetRequestableRoles
     */
    getRequestableRoles: {
      name: "GetRequestableRoles",
      I: GetRequestableRolesRequest,
      O: GetRequestableRolesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AssumeRole assumes the role of the given access request
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.AssumeRole
     */
    assumeRole: {
      name: "AssumeRole",
      I: AssumeRoleRequest,
      O: EmptyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * PromoteAccessRequest promotes an access request to an access list.
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.PromoteAccessRequest
     */
    promoteAccessRequest: {
      name: "PromoteAccessRequest",
      I: PromoteAccessRequestRequest,
      O: PromoteAccessRequestResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSuggestedAccessLists returns suggested access lists for an access request.
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetSuggestedAccessLists
     */
    getSuggestedAccessLists: {
      name: "GetSuggestedAccessLists",
      I: GetSuggestedAccessListsRequest,
      O: GetSuggestedAccessListsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetKubes returns filtered, sorted, and paginated kubes
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetKubes
     */
    getKubes: {
      name: "GetKubes",
      I: GetKubesRequest,
      O: GetKubesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetApps returns a filtered and paginated list of apps.
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetApps
     */
    getApps: {
      name: "GetApps",
      I: GetAppsRequest,
      O: GetAppsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AddCluster adds a cluster to profile
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.AddCluster
     */
    addCluster: {
      name: "AddCluster",
      I: AddClusterRequest,
      O: Cluster,
      kind: MethodKind.Unary,
    },
    /**
     * RemoveCluster removes a cluster from profile
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.RemoveCluster
     */
    removeCluster: {
      name: "RemoveCluster",
      I: RemoveClusterRequest,
      O: EmptyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListGateways lists gateways
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.ListGateways
     */
    listGateways: {
      name: "ListGateways",
      I: ListGatewaysRequest,
      O: ListGatewaysResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateGateway creates a gateway
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.CreateGateway
     */
    createGateway: {
      name: "CreateGateway",
      I: CreateGatewayRequest,
      O: Gateway,
      kind: MethodKind.Unary,
    },
    /**
     * RemoveGateway removes a gateway
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.RemoveGateway
     */
    removeGateway: {
      name: "RemoveGateway",
      I: RemoveGatewayRequest,
      O: EmptyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SetGatewayTargetSubresourceName changes the TargetSubresourceName field of gateway.Gateway
     * and returns the updated version of gateway.Gateway.
     *
     * In Connect this is used to update the db name of a db connection along with the CLI command.
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.SetGatewayTargetSubresourceName
     */
    setGatewayTargetSubresourceName: {
      name: "SetGatewayTargetSubresourceName",
      I: SetGatewayTargetSubresourceNameRequest,
      O: Gateway,
      kind: MethodKind.Unary,
    },
    /**
     * SetGatewayLocalPort starts a new gateway on the new port, stops the old gateway and then
     * assigns the URI of the old gateway to the new one. It does so without fetching a new db cert.
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.SetGatewayLocalPort
     */
    setGatewayLocalPort: {
      name: "SetGatewayLocalPort",
      I: SetGatewayLocalPortRequest,
      O: Gateway,
      kind: MethodKind.Unary,
    },
    /**
     * GetAuthSettings returns cluster auth settigns
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetAuthSettings
     */
    getAuthSettings: {
      name: "GetAuthSettings",
      I: GetAuthSettingsRequest,
      O: AuthSettings,
      kind: MethodKind.Unary,
    },
    /**
     * GetCluster returns cluster. Makes a network request and includes detailed
     * information about enterprise features availabed on the connected auth server
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetCluster
     */
    getCluster: {
      name: "GetCluster",
      I: GetClusterRequest,
      O: Cluster,
      kind: MethodKind.Unary,
    },
    /**
     * Login logs in a user to a cluster
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.Login
     */
    login: {
      name: "Login",
      I: LoginRequest,
      O: EmptyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * LoginPasswordless logs in a user to a cluster passwordlessly.
     *
     * The RPC is streaming both ways and the message sequence example for hardware keys are:
     * (-> means client-to-server, <- means server-to-client)
     *
     * Hardware keys:
     * -> Init
     * <- Send PasswordlessPrompt enum TAP to choose a device
     * -> Receive TAP device response
     * <- Send PasswordlessPrompt enum PIN
     * -> Receive PIN response
     * <- Send PasswordlessPrompt enum RETAP to confirm
     * -> Receive RETAP device response
     * <- Send list of credentials (e.g. usernames) associated with device
     * -> Receive the index number associated with the selected credential in list
     * <- End
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.LoginPasswordless
     */
    loginPasswordless: {
      name: "LoginPasswordless",
      I: LoginPasswordlessRequest,
      O: LoginPasswordlessResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * ClusterLogin logs out a user from cluster
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.Logout
     */
    logout: {
      name: "Logout",
      I: LogoutRequest,
      O: EmptyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * TransferFile sends a request to download/upload a file
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.TransferFile
     */
    transferFile: {
      name: "TransferFile",
      I: FileTransferRequest,
      O: FileTransferProgress,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * ReportUsageEvent allows to send usage events that are then anonymized and forwarded to prehog
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.ReportUsageEvent
     */
    reportUsageEvent: {
      name: "ReportUsageEvent",
      I: ReportUsageEventRequest,
      O: EmptyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateHeadlessAuthenticationState updates a headless authentication resource's state.
     * An MFA challenge will be prompted when approving a headless authentication.
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.UpdateHeadlessAuthenticationState
     */
    updateHeadlessAuthenticationState: {
      name: "UpdateHeadlessAuthenticationState",
      I: UpdateHeadlessAuthenticationStateRequest,
      O: UpdateHeadlessAuthenticationStateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateConnectMyComputerRole creates a role which allows access to nodes with the label
     * teleport.dev/connect-my-computer/owner: <cluster user> and allows logging in to those nodes as
     * the current system user.
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.CreateConnectMyComputerRole
     */
    createConnectMyComputerRole: {
      name: "CreateConnectMyComputerRole",
      I: CreateConnectMyComputerRoleRequest,
      O: CreateConnectMyComputerRoleResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateConnectMyComputerNodeToken creates a node join token that is valid for 5 minutes
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.CreateConnectMyComputerNodeToken
     */
    createConnectMyComputerNodeToken: {
      name: "CreateConnectMyComputerNodeToken",
      I: CreateConnectMyComputerNodeTokenRequest,
      O: CreateConnectMyComputerNodeTokenResponse,
      kind: MethodKind.Unary,
    },
    /**
     * WaitForConnectMyComputerNodeJoin sets up a watcher and returns a response only after detecting
     * that the Connect My Computer node for the particular cluster has joined the cluster (the
     * OpPut event).
     *
     * This RPC times out by itself after a minute to prevent the request from hanging forever, in
     * case the client didn't set a deadline or doesn't abort the request.
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.WaitForConnectMyComputerNodeJoin
     */
    waitForConnectMyComputerNodeJoin: {
      name: "WaitForConnectMyComputerNodeJoin",
      I: WaitForConnectMyComputerNodeJoinRequest,
      O: WaitForConnectMyComputerNodeJoinResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteConnectMyComputerNode deletes the Connect My Computer node.
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.DeleteConnectMyComputerNode
     */
    deleteConnectMyComputerNode: {
      name: "DeleteConnectMyComputerNode",
      I: DeleteConnectMyComputerNodeRequest,
      O: DeleteConnectMyComputerNodeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetConnectMyComputerNodeName reads the Connect My Computer node name (UUID) from a disk.
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetConnectMyComputerNodeName
     */
    getConnectMyComputerNodeName: {
      name: "GetConnectMyComputerNodeName",
      I: GetConnectMyComputerNodeNameRequest,
      O: GetConnectMyComputerNodeNameResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListUnifiedResources retrieves a paginated list of all resource types displayable in the UI.
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.ListUnifiedResources
     */
    listUnifiedResources: {
      name: "ListUnifiedResources",
      I: ListUnifiedResourcesRequest,
      O: ListUnifiedResourcesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetUserPreferences returns the combined (root + leaf cluster) preferences for a given user.
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.GetUserPreferences
     */
    getUserPreferences: {
      name: "GetUserPreferences",
      I: GetUserPreferencesRequest,
      O: GetUserPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateUserPreferences updates the preferences for a given user in appropriate root and leaf clusters.
     * Only the properties that are set (cluster_preferences, unified_resource_preferences) will be updated.
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.UpdateUserPreferences
     */
    updateUserPreferences: {
      name: "UpdateUserPreferences",
      I: UpdateUserPreferencesRequest,
      O: UpdateUserPreferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AuthenticateWebDevice blesses a web session with device trust by performing
     * the on-behalf-of device authentication ceremony.
     *
     * See
     * https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
     *
     * @generated from rpc teleport.lib.teleterm.v1.TerminalService.AuthenticateWebDevice
     */
    authenticateWebDevice: {
      name: "AuthenticateWebDevice",
      I: AuthenticateWebDeviceRequest,
      O: AuthenticateWebDeviceResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

