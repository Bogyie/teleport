//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/lib/teleterm/v1/auth_settings.proto (package teleport.lib.teleterm.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/lib/teleterm/v1/auth_settings.proto.
 */
export const file_teleport_lib_teleterm_v1_auth_settings: GenFile = /*@__PURE__*/
  fileDesc("Cix0ZWxlcG9ydC9saWIvdGVsZXRlcm0vdjEvYXV0aF9zZXR0aW5ncy5wcm90bxIYdGVsZXBvcnQubGliLnRlbGV0ZXJtLnYxIoUCCgxBdXRoU2V0dGluZ3MSGgoSbG9jYWxfYXV0aF9lbmFibGVkGAEgASgIEhUKDXNlY29uZF9mYWN0b3IYAiABKAkSFQoNcHJlZmVycmVkX21mYRgDIAEoCRI+Cg5hdXRoX3Byb3ZpZGVycxgEIAMoCzImLnRlbGVwb3J0LmxpYi50ZWxldGVybS52MS5BdXRoUHJvdmlkZXISHgoWaGFzX21lc3NhZ2Vfb2ZfdGhlX2RheRgFIAEoCBIRCglhdXRoX3R5cGUYBiABKAkSGgoSYWxsb3dfcGFzc3dvcmRsZXNzGAcgASgIEhwKFGxvY2FsX2Nvbm5lY3Rvcl9uYW1lGAggASgJIkAKDEF1dGhQcm92aWRlchIMCgR0eXBlGAEgASgJEgwKBG5hbWUYAiABKAkSFAoMZGlzcGxheV9uYW1lGAMgASgJQlRaUmdpdGh1Yi5jb20vZ3Jhdml0YXRpb25hbC90ZWxlcG9ydC9nZW4vcHJvdG8vZ28vdGVsZXBvcnQvbGliL3RlbGV0ZXJtL3YxO3RlbGV0ZXJtdjFiBnByb3RvMw");

/**
 * AuthSettings contains the form of authentication the auth server supports.
 *
 * @generated from message teleport.lib.teleterm.v1.AuthSettings
 */
export type AuthSettings = Message<"teleport.lib.teleterm.v1.AuthSettings"> & {
  /**
   * local_auth_enabled is a flag that enables local authentication
   *
   * @generated from field: bool local_auth_enabled = 1;
   */
  localAuthEnabled: boolean;

  /**
   * second_factor is the type of second factor to use in authentication.
   *
   * @generated from field: string second_factor = 2;
   */
  secondFactor: string;

  /**
   * preferred_mfa is the prefered mfa for local logins
   *
   * @generated from field: string preferred_mfa = 3;
   */
  preferredMfa: string;

  /**
   * auth_providers contains a list of auth providers
   *
   * @generated from field: repeated teleport.lib.teleterm.v1.AuthProvider auth_providers = 4;
   */
  authProviders: AuthProvider[];

  /**
   * has_message_of_the_day is a flag indicating that the cluster has MOTD
   * banner text that must be retrieved, displayed and acknowledged by
   * the user.
   *
   * @generated from field: bool has_message_of_the_day = 5;
   */
  hasMessageOfTheDay: boolean;

  /**
   * auth_type is the authentication type e.g. "local", "github", "saml", "oidc"
   *
   * @generated from field: string auth_type = 6;
   */
  authType: string;

  /**
   * allow_passwordless is true if passwordless logins are allowed.
   *
   * @generated from field: bool allow_passwordless = 7;
   */
  allowPasswordless: boolean;

  /**
   * local_connector_name is the name of the local connector.
   *
   * @generated from field: string local_connector_name = 8;
   */
  localConnectorName: string;
};

/**
 * Describes the message teleport.lib.teleterm.v1.AuthSettings.
 * Use `create(AuthSettingsSchema)` to create a new message.
 */
export const AuthSettingsSchema: GenMessage<AuthSettings> = /*@__PURE__*/
  messageDesc(file_teleport_lib_teleterm_v1_auth_settings, 0);

/**
 * AuthProvider describes a way of authentication that is supported by the server. Auth provider is
 * referred to as "auth connector" on the backend.
 *
 * @generated from message teleport.lib.teleterm.v1.AuthProvider
 */
export type AuthProvider = Message<"teleport.lib.teleterm.v1.AuthProvider"> & {
  /**
   * Type is the auth provider type (github|oidc|etc)
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * Name is the internal name of the connector.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Display is the display name for the connector.
   *
   * @generated from field: string display_name = 3;
   */
  displayName: string;
};

/**
 * Describes the message teleport.lib.teleterm.v1.AuthProvider.
 * Use `create(AuthProviderSchema)` to create a new message.
 */
export const AuthProviderSchema: GenMessage<AuthProvider> = /*@__PURE__*/
  messageDesc(file_teleport_lib_teleterm_v1_auth_settings, 1);

