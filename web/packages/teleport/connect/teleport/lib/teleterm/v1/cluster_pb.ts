//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/lib/teleterm/v1/cluster.proto (package teleport.lib.teleterm.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/lib/teleterm/v1/cluster.proto.
 */
export const file_teleport_lib_teleterm_v1_cluster: GenFile = /*@__PURE__*/
  fileDesc("CiZ0ZWxlcG9ydC9saWIvdGVsZXRlcm0vdjEvY2x1c3Rlci5wcm90bxIYdGVsZXBvcnQubGliLnRlbGV0ZXJtLnYxIsACCgdDbHVzdGVyEgsKA3VyaRgBIAEoCRIMCgRuYW1lGAIgASgJEhIKCnByb3h5X2hvc3QYAyABKAkSEQoJY29ubmVjdGVkGAQgASgIEgwKBGxlYWYYBSABKAgSPgoObG9nZ2VkX2luX3VzZXIYByABKAsyJi50ZWxlcG9ydC5saWIudGVsZXRlcm0udjEuTG9nZ2VkSW5Vc2VyEjQKCGZlYXR1cmVzGAggASgLMiIudGVsZXBvcnQubGliLnRlbGV0ZXJtLnYxLkZlYXR1cmVzEhcKD2F1dGhfY2x1c3Rlcl9pZBgJIAEoCRIVCg1wcm94eV92ZXJzaW9uGAogASgJEj8KDnNob3dfcmVzb3VyY2VzGAsgASgOMicudGVsZXBvcnQubGliLnRlbGV0ZXJtLnYxLlNob3dSZXNvdXJjZXMizwIKDExvZ2dlZEluVXNlchIMCgRuYW1lGAEgASgJEg0KBXJvbGVzGAIgAygJEhIKCnNzaF9sb2dpbnMYAyADKAkSKgoDYWNsGAQgASgLMh0udGVsZXBvcnQubGliLnRlbGV0ZXJtLnYxLkFDTBIXCg9hY3RpdmVfcmVxdWVzdHMYBSADKAkSGwoTc3VnZ2VzdGVkX3Jldmlld2VycxgGIAMoCRIZChFyZXF1ZXN0YWJsZV9yb2xlcxgHIAMoCRJCCgl1c2VyX3R5cGUYCCABKA4yLy50ZWxlcG9ydC5saWIudGVsZXRlcm0udjEuTG9nZ2VkSW5Vc2VyLlVzZXJUeXBlIk0KCFVzZXJUeXBlEhkKFVVTRVJfVFlQRV9VTlNQRUNJRklFRBAAEhMKD1VTRVJfVFlQRV9MT0NBTBABEhEKDVVTRVJfVFlQRV9TU08QAiK2BgoDQUNMEkEKD2F1dGhfY29ubmVjdG9ycxgCIAEoCzIoLnRlbGVwb3J0LmxpYi50ZWxldGVybS52MS5SZXNvdXJjZUFjY2VzcxI3CgVyb2xlcxgDIAEoCzIoLnRlbGVwb3J0LmxpYi50ZWxldGVybS52MS5SZXNvdXJjZUFjY2VzcxI3CgV1c2VycxgEIAEoCzIoLnRlbGVwb3J0LmxpYi50ZWxldGVybS52MS5SZXNvdXJjZUFjY2VzcxJCChB0cnVzdGVkX2NsdXN0ZXJzGAUgASgLMigudGVsZXBvcnQubGliLnRlbGV0ZXJtLnYxLlJlc291cmNlQWNjZXNzEjgKBmV2ZW50cxgGIAEoCzIoLnRlbGVwb3J0LmxpYi50ZWxldGVybS52MS5SZXNvdXJjZUFjY2VzcxI4CgZ0b2tlbnMYByABKAsyKC50ZWxlcG9ydC5saWIudGVsZXRlcm0udjEuUmVzb3VyY2VBY2Nlc3MSOQoHc2VydmVycxgIIAEoCzIoLnRlbGVwb3J0LmxpYi50ZWxldGVybS52MS5SZXNvdXJjZUFjY2VzcxI2CgRhcHBzGAkgASgLMigudGVsZXBvcnQubGliLnRlbGV0ZXJtLnYxLlJlc291cmNlQWNjZXNzEjUKA2RicxgKIAEoCzIoLnRlbGVwb3J0LmxpYi50ZWxldGVybS52MS5SZXNvdXJjZUFjY2VzcxI9CgtrdWJlc2VydmVycxgLIAEoCzIoLnRlbGVwb3J0LmxpYi50ZWxldGVybS52MS5SZXNvdXJjZUFjY2VzcxJBCg9hY2Nlc3NfcmVxdWVzdHMYDCABKAsyKC50ZWxlcG9ydC5saWIudGVsZXRlcm0udjEuUmVzb3VyY2VBY2Nlc3MSQwoRcmVjb3JkZWRfc2Vzc2lvbnMYDSABKAsyKC50ZWxlcG9ydC5saWIudGVsZXRlcm0udjEuUmVzb3VyY2VBY2Nlc3MSQQoPYWN0aXZlX3Nlc3Npb25zGA4gASgLMigudGVsZXBvcnQubGliLnRlbGV0ZXJtLnYxLlJlc291cmNlQWNjZXNzSgQIARACUghzZXNzaW9ucyJnCg5SZXNvdXJjZUFjY2VzcxIMCgRsaXN0GAEgASgIEgwKBHJlYWQYAiABKAgSDAoEZWRpdBgDIAEoCBIOCgZjcmVhdGUYBCABKAgSDgoGZGVsZXRlGAUgASgIEgsKA3VzZRgGIAEoCCJNCghGZWF0dXJlcxIhChlhZHZhbmNlZF9hY2Nlc3Nfd29ya2Zsb3dzGAEgASgIEh4KFmlzX3VzYWdlX2Jhc2VkX2JpbGxpbmcYAiABKAgqcwoNU2hvd1Jlc291cmNlcxIeChpTSE9XX1JFU09VUkNFU19VTlNQRUNJRklFRBAAEh4KGlNIT1dfUkVTT1VSQ0VTX1JFUVVFU1RBQkxFEAESIgoeU0hPV19SRVNPVVJDRVNfQUNDRVNTSUJMRV9PTkxZEAJCVFpSZ2l0aHViLmNvbS9ncmF2aXRhdGlvbmFsL3RlbGVwb3J0L2dlbi9wcm90by9nby90ZWxlcG9ydC9saWIvdGVsZXRlcm0vdjE7dGVsZXRlcm12MWIGcHJvdG8z");

/**
 * Cluster describes cluster fields.
 *
 * @generated from message teleport.lib.teleterm.v1.Cluster
 */
export type Cluster = Message<"teleport.lib.teleterm.v1.Cluster"> & {
  /**
   * uri is the cluster resource URI.
   * For root clusters, it has the form of /clusters/:rootClusterId where rootClusterId is the
   * name of the profile, that is the hostname of the proxy used to connect to the root cluster.
   * rootClusterId is not equal to the name of the root cluster.
   *
   * For leaf clusters, it has the form of /clusters/:rootClusterId/leaves/:leafClusterId where
   * leafClusterId is equal to the name property of the cluster.
   *
   * @generated from field: string uri = 1;
   */
  uri: string;

  /**
   * name is used throughout the Teleport Connect codebase as the cluster name.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * proxy_host is address of the proxy used to connect to this cluster.
   * Always includes port number. Present only for root clusters.
   *
   * Example: "teleport-14-ent.example.com:3090"
   *
   * @generated from field: string proxy_host = 3;
   */
  proxyHost: string;

  /**
   * connected indicates if connection to the cluster can be established, that is if we have a
   * cert for the cluster that hasn't expired
   *
   * @generated from field: bool connected = 4;
   */
  connected: boolean;

  /**
   * leaf indicates if this is a leaf cluster
   *
   * @generated from field: bool leaf = 5;
   */
  leaf: boolean;

  /**
   * logged_in_user is present if the user has logged in to the cluster at least once, even
   * if the cert has since expired. If the cluster was added to the app but the
   * user is yet to log in, logged_in_user is not present.
   *
   * @generated from field: teleport.lib.teleterm.v1.LoggedInUser logged_in_user = 7;
   */
  loggedInUser?: LoggedInUser;

  /**
   * features describes the auth servers features.
   * Only present when detailed information is queried from the auth server.
   *
   * @generated from field: teleport.lib.teleterm.v1.Features features = 8;
   */
  features?: Features;

  /**
   * auth_cluster_id is the unique cluster ID that is set once
   * during the first auth server startup.
   * Only present when detailed information is queried from the auth server.
   *
   * @generated from field: string auth_cluster_id = 9;
   */
  authClusterId: string;

  /**
   * ProxyVersion is the cluster proxy's service version.
   * Only present when detailed information is queried from the proxy server.
   *
   * @generated from field: string proxy_version = 10;
   */
  proxyVersion: string;

  /**
   * show_resources tells if the cluster can show requestable resources on the resources page.
   * Controlled by the cluster config.
   *
   * @generated from field: teleport.lib.teleterm.v1.ShowResources show_resources = 11;
   */
  showResources: ShowResources;
};

/**
 * Describes the message teleport.lib.teleterm.v1.Cluster.
 * Use `create(ClusterSchema)` to create a new message.
 */
export const ClusterSchema: GenMessage<Cluster> = /*@__PURE__*/
  messageDesc(file_teleport_lib_teleterm_v1_cluster, 0);

/**
 * LoggedInUser describes a logged-in user
 *
 * @generated from message teleport.lib.teleterm.v1.LoggedInUser
 */
export type LoggedInUser = Message<"teleport.lib.teleterm.v1.LoggedInUser"> & {
  /**
   * name is the user name
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * roles is the user roles
   *
   * @generated from field: repeated string roles = 2;
   */
  roles: string[];

  /**
   * ssh_logins is the user ssh logins
   *
   * @generated from field: repeated string ssh_logins = 3;
   */
  sshLogins: string[];

  /**
   * acl is a user access control list.
   * It is available only after the cluster details are fetched, as it is not stored on disk.
   *
   * @generated from field: teleport.lib.teleterm.v1.ACL acl = 4;
   */
  acl?: ACL;

  /**
   * active_requests is an array of request-id strings of active requests
   *
   * @generated from field: repeated string active_requests = 5;
   */
  activeRequests: string[];

  /**
   * suggested_reviewers for the given user.
   * Only present when detailed information is queried from the auth server.
   *
   * @generated from field: repeated string suggested_reviewers = 6;
   */
  suggestedReviewers: string[];

  /**
   * requestable_roles for the given user.
   * Only present when detailed information is queried from the auth server.
   *
   * @generated from field: repeated string requestable_roles = 7;
   */
  requestableRoles: string[];

  /**
   * @generated from field: teleport.lib.teleterm.v1.LoggedInUser.UserType user_type = 8;
   */
  userType: LoggedInUser_UserType;
};

/**
 * Describes the message teleport.lib.teleterm.v1.LoggedInUser.
 * Use `create(LoggedInUserSchema)` to create a new message.
 */
export const LoggedInUserSchema: GenMessage<LoggedInUser> = /*@__PURE__*/
  messageDesc(file_teleport_lib_teleterm_v1_cluster, 1);

/**
 * UserType indicates whether the user was created through an SSO provider or in Teleport itself.
 * Only present when detailed information is queried from the auth server.
 *
 * @generated from enum teleport.lib.teleterm.v1.LoggedInUser.UserType
 */
export enum LoggedInUser_UserType {
  /**
   * @generated from enum value: USER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: USER_TYPE_LOCAL = 1;
   */
  LOCAL = 1,

  /**
   * @generated from enum value: USER_TYPE_SSO = 2;
   */
  SSO = 2,
}

/**
 * Describes the enum teleport.lib.teleterm.v1.LoggedInUser.UserType.
 */
export const LoggedInUser_UserTypeSchema: GenEnum<LoggedInUser_UserType> = /*@__PURE__*/
  enumDesc(file_teleport_lib_teleterm_v1_cluster, 1, 0);

/**
 * ACL is the access control list of the user
 *
 * @generated from message teleport.lib.teleterm.v1.ACL
 */
export type ACL = Message<"teleport.lib.teleterm.v1.ACL"> & {
  /**
   * auth_connectors defines access to auth.connectors
   *
   * @generated from field: teleport.lib.teleterm.v1.ResourceAccess auth_connectors = 2;
   */
  authConnectors?: ResourceAccess;

  /**
   * Roles defines access to roles
   *
   * @generated from field: teleport.lib.teleterm.v1.ResourceAccess roles = 3;
   */
  roles?: ResourceAccess;

  /**
   * Users defines access to users.
   *
   * @generated from field: teleport.lib.teleterm.v1.ResourceAccess users = 4;
   */
  users?: ResourceAccess;

  /**
   * trusted_clusters defines access to trusted clusters
   *
   * @generated from field: teleport.lib.teleterm.v1.ResourceAccess trusted_clusters = 5;
   */
  trustedClusters?: ResourceAccess;

  /**
   * Events defines access to audit logs
   *
   * @generated from field: teleport.lib.teleterm.v1.ResourceAccess events = 6;
   */
  events?: ResourceAccess;

  /**
   * Tokens defines access to tokens.
   *
   * @generated from field: teleport.lib.teleterm.v1.ResourceAccess tokens = 7;
   */
  tokens?: ResourceAccess;

  /**
   * Servers defines access to servers.
   *
   * @generated from field: teleport.lib.teleterm.v1.ResourceAccess servers = 8;
   */
  servers?: ResourceAccess;

  /**
   * apps defines access to application servers
   *
   * @generated from field: teleport.lib.teleterm.v1.ResourceAccess apps = 9;
   */
  apps?: ResourceAccess;

  /**
   * dbs defines access to database servers.
   *
   * @generated from field: teleport.lib.teleterm.v1.ResourceAccess dbs = 10;
   */
  dbs?: ResourceAccess;

  /**
   * kubeservers defines access to kubernetes servers.
   *
   * @generated from field: teleport.lib.teleterm.v1.ResourceAccess kubeservers = 11;
   */
  kubeservers?: ResourceAccess;

  /**
   * access_requests defines access to access requests
   *
   * @generated from field: teleport.lib.teleterm.v1.ResourceAccess access_requests = 12;
   */
  accessRequests?: ResourceAccess;

  /**
   * recorded_sessions defines access to recorded sessions.
   *
   * @generated from field: teleport.lib.teleterm.v1.ResourceAccess recorded_sessions = 13;
   */
  recordedSessions?: ResourceAccess;

  /**
   * active_sessions defines access to active sessions.
   *
   * @generated from field: teleport.lib.teleterm.v1.ResourceAccess active_sessions = 14;
   */
  activeSessions?: ResourceAccess;
};

/**
 * Describes the message teleport.lib.teleterm.v1.ACL.
 * Use `create(ACLSchema)` to create a new message.
 */
export const ACLSchema: GenMessage<ACL> = /*@__PURE__*/
  messageDesc(file_teleport_lib_teleterm_v1_cluster, 2);

/**
 * ResourceAccess describes access verbs
 *
 * @generated from message teleport.lib.teleterm.v1.ResourceAccess
 */
export type ResourceAccess = Message<"teleport.lib.teleterm.v1.ResourceAccess"> & {
  /**
   * list determines "list" access
   *
   * @generated from field: bool list = 1;
   */
  list: boolean;

  /**
   * read determines "read" access
   *
   * @generated from field: bool read = 2;
   */
  read: boolean;

  /**
   * edit determines "edit" access
   *
   * @generated from field: bool edit = 3;
   */
  edit: boolean;

  /**
   * create determines "create" access
   *
   * @generated from field: bool create = 4;
   */
  create: boolean;

  /**
   * delete determines "delete" access
   *
   * @generated from field: bool delete = 5;
   */
  delete: boolean;

  /**
   * use determines "use" access
   *
   * @generated from field: bool use = 6;
   */
  use: boolean;
};

/**
 * Describes the message teleport.lib.teleterm.v1.ResourceAccess.
 * Use `create(ResourceAccessSchema)` to create a new message.
 */
export const ResourceAccessSchema: GenMessage<ResourceAccess> = /*@__PURE__*/
  messageDesc(file_teleport_lib_teleterm_v1_cluster, 3);

/**
 * Features describes the auth servers features
 *
 * @generated from message teleport.lib.teleterm.v1.Features
 */
export type Features = Message<"teleport.lib.teleterm.v1.Features"> & {
  /**
   * advanced_access_workflows enables search-based access requests
   *
   * @generated from field: bool advanced_access_workflows = 1;
   */
  advancedAccessWorkflows: boolean;

  /**
   * is_usage_based_billing determines if the cloud user subscription is usage-based (pay-as-you-go).
   *
   * @generated from field: bool is_usage_based_billing = 2;
   */
  isUsageBasedBilling: boolean;
};

/**
 * Describes the message teleport.lib.teleterm.v1.Features.
 * Use `create(FeaturesSchema)` to create a new message.
 */
export const FeaturesSchema: GenMessage<Features> = /*@__PURE__*/
  messageDesc(file_teleport_lib_teleterm_v1_cluster, 4);

/**
 * ShowResources tells if the cluster can show requestable resources on the resources page.
 *
 * @generated from enum teleport.lib.teleterm.v1.ShowResources
 */
export enum ShowResources {
  /**
   * @generated from enum value: SHOW_RESOURCES_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SHOW_RESOURCES_REQUESTABLE = 1;
   */
  REQUESTABLE = 1,

  /**
   * @generated from enum value: SHOW_RESOURCES_ACCESSIBLE_ONLY = 2;
   */
  ACCESSIBLE_ONLY = 2,
}

/**
 * Describes the enum teleport.lib.teleterm.v1.ShowResources.
 */
export const ShowResourcesSchema: GenEnum<ShowResources> = /*@__PURE__*/
  enumDesc(file_teleport_lib_teleterm_v1_cluster, 0);

