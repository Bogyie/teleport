// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/auditlog/v1/auditlog.proto (package teleport.auditlog.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_struct, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/auditlog/v1/auditlog.proto.
 */
export const file_teleport_auditlog_v1_auditlog: GenFile = /*@__PURE__*/
  fileDesc("CiN0ZWxlcG9ydC9hdWRpdGxvZy92MS9hdWRpdGxvZy5wcm90bxIUdGVsZXBvcnQuYXVkaXRsb2cudjEiUQomU3RyZWFtVW5zdHJ1Y3R1cmVkU2Vzc2lvbkV2ZW50c1JlcXVlc3QSEgoKc2Vzc2lvbl9pZBgBIAEoCRITCgtzdGFydF9pbmRleBgCIAEoBSLyAQocR2V0VW5zdHJ1Y3R1cmVkRXZlbnRzUmVxdWVzdBIRCgluYW1lc3BhY2UYASABKAkSLgoKc3RhcnRfZGF0ZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLAoIZW5kX2RhdGUYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhMKC2V2ZW50X3R5cGVzGAQgAygJEg0KBWxpbWl0GAUgASgFEhEKCXN0YXJ0X2tleRgGIAEoCRIqCgVvcmRlchgHIAEoDjIbLnRlbGVwb3J0LmF1ZGl0bG9nLnYxLk9yZGVyIl4KEkV2ZW50c1Vuc3RydWN0dXJlZBI2CgVpdGVtcxgBIAMoCzInLnRlbGVwb3J0LmF1ZGl0bG9nLnYxLkV2ZW50VW5zdHJ1Y3R1cmVkEhAKCGxhc3Rfa2V5GAIgASgJImoKH0V4cG9ydFVuc3RydWN0dXJlZEV2ZW50c1JlcXVlc3QSKAoEZGF0ZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASDQoFY2h1bmsYAiABKAkSDgoGY3Vyc29yGAMgASgJImEKF0V4cG9ydEV2ZW50VW5zdHJ1Y3R1cmVkEjYKBWV2ZW50GAEgASgLMicudGVsZXBvcnQuYXVkaXRsb2cudjEuRXZlbnRVbnN0cnVjdHVyZWQSDgoGY3Vyc29yGAIgASgJIpUBChFFdmVudFVuc3RydWN0dXJlZBIMCgR0eXBlGAEgASgJEgoKAmlkGAIgASgJEigKBHRpbWUYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEg0KBWluZGV4GAQgASgDEi0KDHVuc3RydWN0dXJlZBgFIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3QiRwobR2V0RXZlbnRFeHBvcnRDaHVua3NSZXF1ZXN0EigKBGRhdGUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wIiEKEEV2ZW50RXhwb3J0Q2h1bmsSDQoFY2h1bmsYASABKAkqPgoFT3JkZXISIAocT1JERVJfREVTQ0VORElOR19VTlNQRUNJRklFRBAAEhMKD09SREVSX0FTQ0VORElORxABMo8ECg9BdWRpdExvZ1NlcnZpY2USigEKH1N0cmVhbVVuc3RydWN0dXJlZFNlc3Npb25FdmVudHMSPC50ZWxlcG9ydC5hdWRpdGxvZy52MS5TdHJlYW1VbnN0cnVjdHVyZWRTZXNzaW9uRXZlbnRzUmVxdWVzdBonLnRlbGVwb3J0LmF1ZGl0bG9nLnYxLkV2ZW50VW5zdHJ1Y3R1cmVkMAESdQoVR2V0VW5zdHJ1Y3R1cmVkRXZlbnRzEjIudGVsZXBvcnQuYXVkaXRsb2cudjEuR2V0VW5zdHJ1Y3R1cmVkRXZlbnRzUmVxdWVzdBooLnRlbGVwb3J0LmF1ZGl0bG9nLnYxLkV2ZW50c1Vuc3RydWN0dXJlZBKCAQoYRXhwb3J0VW5zdHJ1Y3R1cmVkRXZlbnRzEjUudGVsZXBvcnQuYXVkaXRsb2cudjEuRXhwb3J0VW5zdHJ1Y3R1cmVkRXZlbnRzUmVxdWVzdBotLnRlbGVwb3J0LmF1ZGl0bG9nLnYxLkV4cG9ydEV2ZW50VW5zdHJ1Y3R1cmVkMAEScwoUR2V0RXZlbnRFeHBvcnRDaHVua3MSMS50ZWxlcG9ydC5hdWRpdGxvZy52MS5HZXRFdmVudEV4cG9ydENodW5rc1JlcXVlc3QaJi50ZWxlcG9ydC5hdWRpdGxvZy52MS5FdmVudEV4cG9ydENodW5rMAFCVFpSZ2l0aHViLmNvbS9ncmF2aXRhdGlvbmFsL3RlbGVwb3J0L2FwaS9nZW4vcHJvdG8vZ28vdGVsZXBvcnQvYXVkaXRsb2cvdjE7YXVkaXRsb2d2MWIGcHJvdG8z", [file_google_protobuf_struct, file_google_protobuf_timestamp]);

/**
 * StreamUnstructuredSessionEventsRequest is a request containing data needed to fetch a session recording.
 *
 * @generated from message teleport.auditlog.v1.StreamUnstructuredSessionEventsRequest
 */
export type StreamUnstructuredSessionEventsRequest = Message<"teleport.auditlog.v1.StreamUnstructuredSessionEventsRequest"> & {
  /**
   * session_id is the ID for a given session in an UUIDv4 format.
   *
   * @generated from field: string session_id = 1;
   */
  sessionId: string;

  /**
   * start_index is the index of the event to resume the stream after.
   * A start_index of 0 creates a new stream.
   *
   * @generated from field: int32 start_index = 2;
   */
  startIndex: number;
};

/**
 * Describes the message teleport.auditlog.v1.StreamUnstructuredSessionEventsRequest.
 * Use `create(StreamUnstructuredSessionEventsRequestSchema)` to create a new message.
 */
export const StreamUnstructuredSessionEventsRequestSchema: GenMessage<StreamUnstructuredSessionEventsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_auditlog_v1_auditlog, 0);

/**
 * GetUnstructuredEventsRequest is a request with the needed data to fetch events.
 *
 * @generated from message teleport.auditlog.v1.GetUnstructuredEventsRequest
 */
export type GetUnstructuredEventsRequest = Message<"teleport.auditlog.v1.GetUnstructuredEventsRequest"> & {
  /**
   * namespace, if not set, defaults to 'default'.
   *
   * @generated from field: string namespace = 1;
   */
  namespace: string;

  /**
   * start_date is the oldest date of returned events.
   *
   * @generated from field: google.protobuf.Timestamp start_date = 2;
   */
  startDate?: Timestamp;

  /**
   * end_date is the newest date of returned events.
   *
   * @generated from field: google.protobuf.Timestamp end_date = 3;
   */
  endDate?: Timestamp;

  /**
   * event_types is optional, if not set, returns all events.
   *
   * @generated from field: repeated string event_types = 4;
   */
  eventTypes: string[];

  /**
   * limit is the maximum amount of events returned.
   *
   * @generated from field: int32 limit = 5;
   */
  limit: number;

  /**
   * start_key is used to resume a query in order to enable pagination.
   * If the previous response had LastKey set then this should be
   * set to its value. Otherwise leave empty.
   *
   * @generated from field: string start_key = 6;
   */
  startKey: string;

  /**
   * order specifies an ascending or descending order of events.
   * A value of 0 means a descending order and a value of 1 means an ascending order.
   *
   * @generated from field: teleport.auditlog.v1.Order order = 7;
   */
  order: Order;
};

/**
 * Describes the message teleport.auditlog.v1.GetUnstructuredEventsRequest.
 * Use `create(GetUnstructuredEventsRequestSchema)` to create a new message.
 */
export const GetUnstructuredEventsRequestSchema: GenMessage<GetUnstructuredEventsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_auditlog_v1_auditlog, 1);

/**
 * EventsUnstructured represents a list of events.AuditEvent in an unstructured format.
 *
 * @generated from message teleport.auditlog.v1.EventsUnstructured
 */
export type EventsUnstructured = Message<"teleport.auditlog.v1.EventsUnstructured"> & {
  /**
   * items is a list of unstructured formatted audit events.
   *
   * @generated from field: repeated teleport.auditlog.v1.EventUnstructured items = 1;
   */
  items: EventUnstructured[];

  /**
   * last_key is the key of the last event if the returned set did not contain all events found i.e limit <
   * actual amount. this is the key clients can supply in another API request to continue fetching
   * events from the previous last position.
   *
   * @generated from field: string last_key = 2;
   */
  lastKey: string;
};

/**
 * Describes the message teleport.auditlog.v1.EventsUnstructured.
 * Use `create(EventsUnstructuredSchema)` to create a new message.
 */
export const EventsUnstructuredSchema: GenMessage<EventsUnstructured> = /*@__PURE__*/
  messageDesc(file_teleport_auditlog_v1_auditlog, 2);

/**
 * ExportUnstructuredEventsRequest is a request with the needed data to export events.
 *
 * @generated from message teleport.auditlog.v1.ExportUnstructuredEventsRequest
 */
export type ExportUnstructuredEventsRequest = Message<"teleport.auditlog.v1.ExportUnstructuredEventsRequest"> & {
  /**
   * date is the target date from which to export events. note that only the UTC date of the
   * timestamp value is used. use of a specific local timestamp may produce confusing results.
   *
   * @generated from field: google.protobuf.Timestamp date = 1;
   */
  date?: Timestamp;

  /**
   * chunk is the chunk to export events from.
   *
   * @generated from field: string chunk = 2;
   */
  chunk: string;

  /**
   * cursor is an optional mechanism to resume interrupted streams for a given chunk.
   *
   * @generated from field: string cursor = 3;
   */
  cursor: string;
};

/**
 * Describes the message teleport.auditlog.v1.ExportUnstructuredEventsRequest.
 * Use `create(ExportUnstructuredEventsRequestSchema)` to create a new message.
 */
export const ExportUnstructuredEventsRequestSchema: GenMessage<ExportUnstructuredEventsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_auditlog_v1_auditlog, 3);

/**
 * ExportEventUnstructured is the stream item of the ExportUnstructuredEvents method.
 *
 * @generated from message teleport.auditlog.v1.ExportEventUnstructured
 */
export type ExportEventUnstructured = Message<"teleport.auditlog.v1.ExportEventUnstructured"> & {
  /**
   * event is the unstructured representation of the event payload.
   *
   * @generated from field: teleport.auditlog.v1.EventUnstructured event = 1;
   */
  event?: EventUnstructured;

  /**
   * cursor is the cursor to resume the stream after this point.
   *
   * @generated from field: string cursor = 2;
   */
  cursor: string;
};

/**
 * Describes the message teleport.auditlog.v1.ExportEventUnstructured.
 * Use `create(ExportEventUnstructuredSchema)` to create a new message.
 */
export const ExportEventUnstructuredSchema: GenMessage<ExportEventUnstructured> = /*@__PURE__*/
  messageDesc(file_teleport_auditlog_v1_auditlog, 4);

/**
 * EventUnstructured represents a single events.AuditEvent in an unstructured format.
 *
 * @generated from message teleport.auditlog.v1.EventUnstructured
 */
export type EventUnstructured = Message<"teleport.auditlog.v1.EventUnstructured"> & {
  /**
   * type is the type of the event.
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * id is the unique ID of the event.
   * If the underlying event defines an ID, it will be used, otherwise
   * it is a SHA256 hash of the event payload.
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * time is the time when the event was generated.
   *
   * @generated from field: google.protobuf.Timestamp time = 3;
   */
  time?: Timestamp;

  /**
   * index is the index of the event.
   *
   * @generated from field: int64 index = 4;
   */
  index: bigint;

  /**
   * unstructured is the unstructured representation of the event payload.
   *
   * @generated from field: google.protobuf.Struct unstructured = 5;
   */
  unstructured?: JsonObject;
};

/**
 * Describes the message teleport.auditlog.v1.EventUnstructured.
 * Use `create(EventUnstructuredSchema)` to create a new message.
 */
export const EventUnstructuredSchema: GenMessage<EventUnstructured> = /*@__PURE__*/
  messageDesc(file_teleport_auditlog_v1_auditlog, 5);

/**
 * GetEventExportChunksRequest is used to request the next set of event chunks to export.
 *
 * @generated from message teleport.auditlog.v1.GetEventExportChunksRequest
 */
export type GetEventExportChunksRequest = Message<"teleport.auditlog.v1.GetEventExportChunksRequest"> & {
  /**
   * date is the date for which to list export shards.
   *
   * @generated from field: google.protobuf.Timestamp date = 1;
   */
  date?: Timestamp;
};

/**
 * Describes the message teleport.auditlog.v1.GetEventExportChunksRequest.
 * Use `create(GetEventExportChunksRequestSchema)` to create a new message.
 */
export const GetEventExportChunksRequestSchema: GenMessage<GetEventExportChunksRequest> = /*@__PURE__*/
  messageDesc(file_teleport_auditlog_v1_auditlog, 6);

/**
 * EventExportChunk represents a chunk of events to export.
 *
 * @generated from message teleport.auditlog.v1.EventExportChunk
 */
export type EventExportChunk = Message<"teleport.auditlog.v1.EventExportChunk"> & {
  /**
   * chunk is the chunk to export.
   *
   * @generated from field: string chunk = 1;
   */
  chunk: string;
};

/**
 * Describes the message teleport.auditlog.v1.EventExportChunk.
 * Use `create(EventExportChunkSchema)` to create a new message.
 */
export const EventExportChunkSchema: GenMessage<EventExportChunk> = /*@__PURE__*/
  messageDesc(file_teleport_auditlog_v1_auditlog, 7);

/**
 * Order controls the ordering of objects returned based on the timestamp field.
 *
 * @generated from enum teleport.auditlog.v1.Order
 */
export enum Order {
  /**
   * @generated from enum value: ORDER_DESCENDING_UNSPECIFIED = 0;
   */
  DESCENDING_UNSPECIFIED = 0,

  /**
   * @generated from enum value: ORDER_ASCENDING = 1;
   */
  ASCENDING = 1,
}

/**
 * Describes the enum teleport.auditlog.v1.Order.
 */
export const OrderSchema: GenEnum<Order> = /*@__PURE__*/
  enumDesc(file_teleport_auditlog_v1_auditlog, 0);

/**
 * AuditLogService provides methods to access audit log.
 *
 * @generated from service teleport.auditlog.v1.AuditLogService
 */
export const AuditLogService: GenService<{
  /**
   * StreamUnstructuredSessionEvents streams audit events from a given session recording in an unstructured format.
   * This endpoint is used by the event handler to retrieve the session events as JSON.
   *
   * @generated from rpc teleport.auditlog.v1.AuditLogService.StreamUnstructuredSessionEvents
   */
  streamUnstructuredSessionEvents: {
    methodKind: "server_streaming";
    input: typeof StreamUnstructuredSessionEventsRequestSchema;
    output: typeof EventUnstructuredSchema;
  },
  /**
   * GetUnstructuredEvents gets events from the audit log in an unstructured format.
   * This endpoint is used by the event handler to retrieve the events as JSON.
   *
   * @generated from rpc teleport.auditlog.v1.AuditLogService.GetUnstructuredEvents
   */
  getUnstructuredEvents: {
    methodKind: "unary";
    input: typeof GetUnstructuredEventsRequestSchema;
    output: typeof EventsUnstructuredSchema;
  },
  /**
   * ExportUnstructuredEvents exports events from a given event chunk returned by GetEventExportChunks. This API prioritizes
   * performance over ordering and filtering, and is intended for bulk export of events.
   *
   * @generated from rpc teleport.auditlog.v1.AuditLogService.ExportUnstructuredEvents
   */
  exportUnstructuredEvents: {
    methodKind: "server_streaming";
    input: typeof ExportUnstructuredEventsRequestSchema;
    output: typeof ExportEventUnstructuredSchema;
  },
  /**
   * GetEventExportChunks returns a stream of event chunks that can be exported via ExportUnstructuredEvents. The returned
   * list isn't ordered and polling for new chunks requires re-consuming the entire stream from the beginning.
   *
   * @generated from rpc teleport.auditlog.v1.AuditLogService.GetEventExportChunks
   */
  getEventExportChunks: {
    methodKind: "server_streaming";
    input: typeof GetEventExportChunksRequestSchema;
    output: typeof EventExportChunkSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_teleport_auditlog_v1_auditlog, 0);

