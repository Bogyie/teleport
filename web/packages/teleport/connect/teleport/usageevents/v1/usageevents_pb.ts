// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/usageevents/v1/usageevents.proto (package teleport.usageevents.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/usageevents/v1/usageevents.proto.
 */
export const file_teleport_usageevents_v1_usageevents: GenFile = /*@__PURE__*/
  fileDesc("");

/**
 * UIBannerClickEvent is a usage event sent by the UI when the upgrade
 * banner is clicked.
 *
 * @generated from message teleport.usageevents.v1.UIBannerClickEvent
 */
export type UIBannerClickEvent = Message<"teleport.usageevents.v1.UIBannerClickEvent"> & {
  /**
   * The cluster alert name.
   *
   * @generated from field: string alert = 1;
   */
  alert: string;
};

/**
 * Describes the message teleport.usageevents.v1.UIBannerClickEvent.
 * Use `create(UIBannerClickEventSchema)` to create a new message.
 */
export const UIBannerClickEventSchema: GenMessage<UIBannerClickEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 0);

/**
 * UIOnboardCompleteGoToDashboardClickEvent is a UI event sent when initial
 * registration is complete.
 *
 * @generated from message teleport.usageevents.v1.UIOnboardCompleteGoToDashboardClickEvent
 */
export type UIOnboardCompleteGoToDashboardClickEvent = Message<"teleport.usageevents.v1.UIOnboardCompleteGoToDashboardClickEvent"> & {
  /**
   * The event username. Not extracted from identity as this is pre-registration.
   *
   * @generated from field: string username = 1;
   */
  username: string;
};

/**
 * Describes the message teleport.usageevents.v1.UIOnboardCompleteGoToDashboardClickEvent.
 * Use `create(UIOnboardCompleteGoToDashboardClickEventSchema)` to create a new message.
 */
export const UIOnboardCompleteGoToDashboardClickEventSchema: GenMessage<UIOnboardCompleteGoToDashboardClickEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 1);

/**
 * UIOnboardAddFirstResourceClickEvent is a UI event sent when a user clicks the
 * "add first resource" button.
 *
 * @generated from message teleport.usageevents.v1.UIOnboardAddFirstResourceClickEvent
 */
export type UIOnboardAddFirstResourceClickEvent = Message<"teleport.usageevents.v1.UIOnboardAddFirstResourceClickEvent"> & {
};

/**
 * Describes the message teleport.usageevents.v1.UIOnboardAddFirstResourceClickEvent.
 * Use `create(UIOnboardAddFirstResourceClickEventSchema)` to create a new message.
 */
export const UIOnboardAddFirstResourceClickEventSchema: GenMessage<UIOnboardAddFirstResourceClickEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 2);

/**
 * UIOnboardAddFirstResourceLaterClickEvent is a UI event sent when a user
 * clicks the "add first resource later" button.
 *
 * @generated from message teleport.usageevents.v1.UIOnboardAddFirstResourceLaterClickEvent
 */
export type UIOnboardAddFirstResourceLaterClickEvent = Message<"teleport.usageevents.v1.UIOnboardAddFirstResourceLaterClickEvent"> & {
};

/**
 * Describes the message teleport.usageevents.v1.UIOnboardAddFirstResourceLaterClickEvent.
 * Use `create(UIOnboardAddFirstResourceLaterClickEventSchema)` to create a new message.
 */
export const UIOnboardAddFirstResourceLaterClickEventSchema: GenMessage<UIOnboardAddFirstResourceLaterClickEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 3);

/**
 * UIOnboardSetCredentialSubmitEvent is a UI event sent during registration when
 * users configure their credentials.
 *
 * @generated from message teleport.usageevents.v1.UIOnboardSetCredentialSubmitEvent
 */
export type UIOnboardSetCredentialSubmitEvent = Message<"teleport.usageevents.v1.UIOnboardSetCredentialSubmitEvent"> & {
  /**
   * The event username. Not extracted from identity as this is pre-registration.
   *
   * @generated from field: string username = 1;
   */
  username: string;
};

/**
 * Describes the message teleport.usageevents.v1.UIOnboardSetCredentialSubmitEvent.
 * Use `create(UIOnboardSetCredentialSubmitEventSchema)` to create a new message.
 */
export const UIOnboardSetCredentialSubmitEventSchema: GenMessage<UIOnboardSetCredentialSubmitEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 4);

/**
 * UIOnboardQuestionnaireSubmitEvent is a UI event sent during registration when
 * the user submits their onboarding questionnaire.
 *
 * @generated from message teleport.usageevents.v1.UIOnboardQuestionnaireSubmitEvent
 */
export type UIOnboardQuestionnaireSubmitEvent = Message<"teleport.usageevents.v1.UIOnboardQuestionnaireSubmitEvent"> & {
  /**
   * The event username. Not extracted from identity as this is pre-registration.
   *
   * @generated from field: string username = 1;
   */
  username: string;
};

/**
 * Describes the message teleport.usageevents.v1.UIOnboardQuestionnaireSubmitEvent.
 * Use `create(UIOnboardQuestionnaireSubmitEventSchema)` to create a new message.
 */
export const UIOnboardQuestionnaireSubmitEventSchema: GenMessage<UIOnboardQuestionnaireSubmitEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 5);

/**
 * UIOnboardRegisterChallengeSubmitEvent is a UI event sent during registration
 * when the MFA challenge is completed.
 *
 * @generated from message teleport.usageevents.v1.UIOnboardRegisterChallengeSubmitEvent
 */
export type UIOnboardRegisterChallengeSubmitEvent = Message<"teleport.usageevents.v1.UIOnboardRegisterChallengeSubmitEvent"> & {
  /**
   * The event username. Not extracted from identity as this is pre-registration.
   *
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * The type of MFA used.
   *
   * @generated from field: string mfa_type = 2;
   */
  mfaType: string;

  /**
   * The type of login used.
   *
   * @generated from field: string login_flow = 3;
   */
  loginFlow: string;
};

/**
 * Describes the message teleport.usageevents.v1.UIOnboardRegisterChallengeSubmitEvent.
 * Use `create(UIOnboardRegisterChallengeSubmitEventSchema)` to create a new message.
 */
export const UIOnboardRegisterChallengeSubmitEventSchema: GenMessage<UIOnboardRegisterChallengeSubmitEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 6);

/**
 * UIRecoveryCodesContinueClickEvent is a UI event sent during
 * registration when the user configures cluster recovery codes.
 *
 * @generated from message teleport.usageevents.v1.UIRecoveryCodesContinueClickEvent
 */
export type UIRecoveryCodesContinueClickEvent = Message<"teleport.usageevents.v1.UIRecoveryCodesContinueClickEvent"> & {
  /**
   * The event username. Not extracted from identity as this is pre-registration.
   *
   * @generated from field: string username = 1;
   */
  username: string;
};

/**
 * Describes the message teleport.usageevents.v1.UIRecoveryCodesContinueClickEvent.
 * Use `create(UIRecoveryCodesContinueClickEventSchema)` to create a new message.
 */
export const UIRecoveryCodesContinueClickEventSchema: GenMessage<UIRecoveryCodesContinueClickEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 7);

/**
 * UIRecoveryCodesCopyClickEvent is a UI event sent during
 * registration when the user copies recovery codes.
 *
 * @generated from message teleport.usageevents.v1.UIRecoveryCodesCopyClickEvent
 */
export type UIRecoveryCodesCopyClickEvent = Message<"teleport.usageevents.v1.UIRecoveryCodesCopyClickEvent"> & {
  /**
   * The event username. Not extracted from identity as this is pre-registration.
   *
   * @generated from field: string username = 1;
   */
  username: string;
};

/**
 * Describes the message teleport.usageevents.v1.UIRecoveryCodesCopyClickEvent.
 * Use `create(UIRecoveryCodesCopyClickEventSchema)` to create a new message.
 */
export const UIRecoveryCodesCopyClickEventSchema: GenMessage<UIRecoveryCodesCopyClickEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 8);

/**
 * UIRecoveryCodesPrintClickEvent is a UI event sent during
 * registration when the user prints recovery codes.
 *
 * @generated from message teleport.usageevents.v1.UIRecoveryCodesPrintClickEvent
 */
export type UIRecoveryCodesPrintClickEvent = Message<"teleport.usageevents.v1.UIRecoveryCodesPrintClickEvent"> & {
  /**
   * The event username. Not extracted from identity as this is pre-registration.
   *
   * @generated from field: string username = 1;
   */
  username: string;
};

/**
 * Describes the message teleport.usageevents.v1.UIRecoveryCodesPrintClickEvent.
 * Use `create(UIRecoveryCodesPrintClickEventSchema)` to create a new message.
 */
export const UIRecoveryCodesPrintClickEventSchema: GenMessage<UIRecoveryCodesPrintClickEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 9);

/**
 * DiscoverMetadata contains common metadata for Discover related events.
 *
 * @generated from message teleport.usageevents.v1.DiscoverMetadata
 */
export type DiscoverMetadata = Message<"teleport.usageevents.v1.DiscoverMetadata"> & {
  /**
   * Uniquely identifies Discover wizard "session". Will allow to correlate
   * events within the same Discover wizard run.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message teleport.usageevents.v1.DiscoverMetadata.
 * Use `create(DiscoverMetadataSchema)` to create a new message.
 */
export const DiscoverMetadataSchema: GenMessage<DiscoverMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 10);

/**
 * DiscoverResourceMetadata contains common metadata identifying resource type being added.
 *
 * @generated from message teleport.usageevents.v1.DiscoverResourceMetadata
 */
export type DiscoverResourceMetadata = Message<"teleport.usageevents.v1.DiscoverResourceMetadata"> & {
  /**
   * Resource type that is being added.
   *
   * @generated from field: teleport.usageevents.v1.DiscoverResource resource = 1;
   */
  resource: DiscoverResource;
};

/**
 * Describes the message teleport.usageevents.v1.DiscoverResourceMetadata.
 * Use `create(DiscoverResourceMetadataSchema)` to create a new message.
 */
export const DiscoverResourceMetadataSchema: GenMessage<DiscoverResourceMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 11);

/**
 * DiscoverStepStatus contains fields that track a particular step outcome,
 * for example connection test failed or succeeded, or user aborted the step.
 *
 * @generated from message teleport.usageevents.v1.DiscoverStepStatus
 */
export type DiscoverStepStatus = Message<"teleport.usageevents.v1.DiscoverStepStatus"> & {
  /**
   * Indicates the step outcome.
   *
   * @generated from field: teleport.usageevents.v1.DiscoverStatus status = 1;
   */
  status: DiscoverStatus;

  /**
   * Contains error details in case of Error Status.
   * We have to be careful to not include any identifyable infomation like server addresses here.
   *
   * @generated from field: string error = 2;
   */
  error: string;
};

/**
 * Describes the message teleport.usageevents.v1.DiscoverStepStatus.
 * Use `create(DiscoverStepStatusSchema)` to create a new message.
 */
export const DiscoverStepStatusSchema: GenMessage<DiscoverStepStatus> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 12);

/**
 * UIDiscoverStartedEvent is emitted when the wizard opens.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverStartedEvent
 */
export type UIDiscoverStartedEvent = Message<"teleport.usageevents.v1.UIDiscoverStartedEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 2;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverStartedEvent.
 * Use `create(UIDiscoverStartedEventSchema)` to create a new message.
 */
export const UIDiscoverStartedEventSchema: GenMessage<UIDiscoverStartedEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 13);

/**
 * UIDiscoverResourceSelectionEvent is emitted when user selected resource type to add
 * and proceeded to the next step.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverResourceSelectionEvent
 */
export type UIDiscoverResourceSelectionEvent = Message<"teleport.usageevents.v1.UIDiscoverResourceSelectionEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverResourceSelectionEvent.
 * Use `create(UIDiscoverResourceSelectionEventSchema)` to create a new message.
 */
export const UIDiscoverResourceSelectionEventSchema: GenMessage<UIDiscoverResourceSelectionEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 14);

/**
 * UIDiscoverIntegrationAWSOIDCConnectEvent is emitted when a user is finished with the step
 * that asks user to setup aws integration or select from a list of existing
 * aws integrations.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverIntegrationAWSOIDCConnectEvent
 */
export type UIDiscoverIntegrationAWSOIDCConnectEvent = Message<"teleport.usageevents.v1.UIDiscoverIntegrationAWSOIDCConnectEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverIntegrationAWSOIDCConnectEvent.
 * Use `create(UIDiscoverIntegrationAWSOIDCConnectEventSchema)` to create a new message.
 */
export const UIDiscoverIntegrationAWSOIDCConnectEventSchema: GenMessage<UIDiscoverIntegrationAWSOIDCConnectEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 15);

/**
 * UIDiscoverDatabaseRDSEnrollEvent is emitted when a user is finished with
 * the step that asks user to select from a list of RDS databases.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverDatabaseRDSEnrollEvent
 */
export type UIDiscoverDatabaseRDSEnrollEvent = Message<"teleport.usageevents.v1.UIDiscoverDatabaseRDSEnrollEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  /**
   * @generated from field: int64 selected_resources_count = 4;
   */
  selectedResourcesCount: bigint;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverDatabaseRDSEnrollEvent.
 * Use `create(UIDiscoverDatabaseRDSEnrollEventSchema)` to create a new message.
 */
export const UIDiscoverDatabaseRDSEnrollEventSchema: GenMessage<UIDiscoverDatabaseRDSEnrollEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 16);

/**
 * UIDiscoverKubeEKSEnrollEvent is emitted when a user is finished with
 * the step that asks user to select from a list of EKS clusters.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverKubeEKSEnrollEvent
 */
export type UIDiscoverKubeEKSEnrollEvent = Message<"teleport.usageevents.v1.UIDiscoverKubeEKSEnrollEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverKubeEKSEnrollEvent.
 * Use `create(UIDiscoverKubeEKSEnrollEventSchema)` to create a new message.
 */
export const UIDiscoverKubeEKSEnrollEventSchema: GenMessage<UIDiscoverKubeEKSEnrollEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 17);

/**
 * UICallToActionClickEvent is emmited when a user clicks a Teleport Web UI's CTA.
 *
 * @generated from message teleport.usageevents.v1.UICallToActionClickEvent
 */
export type UICallToActionClickEvent = Message<"teleport.usageevents.v1.UICallToActionClickEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.CTA cta = 1;
   */
  cta: CTA;
};

/**
 * Describes the message teleport.usageevents.v1.UICallToActionClickEvent.
 * Use `create(UICallToActionClickEventSchema)` to create a new message.
 */
export const UICallToActionClickEventSchema: GenMessage<UICallToActionClickEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 18);

/**
 * UIDiscoverDeployServiceEvent is emitted after the user installs a Teleport Agent.
 * For SSH this is the Teleport 'install-node' script.
 *
 * For Kubernetes this is the teleport-agent helm chart installation.
 *
 * For Database Access this step is the installation of the teleport 'install-db' script.
 * It can be skipped if the cluster already has a Database Service capable of proxying the database.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverDeployServiceEvent
 */
export type UIDiscoverDeployServiceEvent = Message<"teleport.usageevents.v1.UIDiscoverDeployServiceEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  /**
   * @generated from field: teleport.usageevents.v1.UIDiscoverDeployServiceEvent.DeployMethod deploy_method = 4;
   */
  deployMethod: UIDiscoverDeployServiceEvent_DeployMethod;

  /**
   * @generated from field: teleport.usageevents.v1.UIDiscoverDeployServiceEvent.DeployType deploy_type = 5;
   */
  deployType: UIDiscoverDeployServiceEvent_DeployType;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverDeployServiceEvent.
 * Use `create(UIDiscoverDeployServiceEventSchema)` to create a new message.
 */
export const UIDiscoverDeployServiceEventSchema: GenMessage<UIDiscoverDeployServiceEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 19);

/**
 * DeployMethod describes the method used to deploy a service.
 *
 * @generated from enum teleport.usageevents.v1.UIDiscoverDeployServiceEvent.DeployMethod
 */
export enum UIDiscoverDeployServiceEvent_DeployMethod {
  /**
   * DEPLOY_METHOD_UNSPECIFIED means there was an existing service
   * so deploying step got skipped.
   *
   * @generated from enum value: DEPLOY_METHOD_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * DEPLOY_METHOD_AUTO means Teleport deployed a service for the user.
   *
   * @generated from enum value: DEPLOY_METHOD_AUTO = 1;
   */
  AUTO = 1,

  /**
   * DEPLOY_METHOD_MANUAL means a user deployed a service by themselves.
   *
   * @generated from enum value: DEPLOY_METHOD_MANUAL = 2;
   */
  MANUAL = 2,
}

/**
 * Describes the enum teleport.usageevents.v1.UIDiscoverDeployServiceEvent.DeployMethod.
 */
export const UIDiscoverDeployServiceEvent_DeployMethodSchema: GenEnum<UIDiscoverDeployServiceEvent_DeployMethod> = /*@__PURE__*/
  enumDesc(file_teleport_usageevents_v1_usageevents, 19, 0);

/**
 * DeployType describes the type of deployment.
 *
 * @generated from enum teleport.usageevents.v1.UIDiscoverDeployServiceEvent.DeployType
 */
export enum UIDiscoverDeployServiceEvent_DeployType {
  /**
   * DEPLOY_METHOD_UNSPECIFIED means there was an existing service
   * so deploying step got skipped.
   *
   * @generated from enum value: DEPLOY_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * DEPLOY_TYPE_INSTALL_SCRIPT means service was deployed using an
   * install script.
   *
   * @generated from enum value: DEPLOY_TYPE_INSTALL_SCRIPT = 1;
   */
  INSTALL_SCRIPT = 1,

  /**
   * DEPLOY_TYPE_AMAZON_ECS means service was deployed using amazon's
   * elastic container service.
   *
   * @generated from enum value: DEPLOY_TYPE_AMAZON_ECS = 2;
   */
  AMAZON_ECS = 2,
}

/**
 * Describes the enum teleport.usageevents.v1.UIDiscoverDeployServiceEvent.DeployType.
 */
export const UIDiscoverDeployServiceEvent_DeployTypeSchema: GenEnum<UIDiscoverDeployServiceEvent_DeployType> = /*@__PURE__*/
  enumDesc(file_teleport_usageevents_v1_usageevents, 19, 1);

/**
 * UIDiscoverCreateDiscoveryConfigEvent is emitted when a discovery config is successfully created.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverCreateDiscoveryConfigEvent
 */
export type UIDiscoverCreateDiscoveryConfigEvent = Message<"teleport.usageevents.v1.UIDiscoverCreateDiscoveryConfigEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  /**
   * @generated from field: teleport.usageevents.v1.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod config_method = 4;
   */
  configMethod: UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverCreateDiscoveryConfigEvent.
 * Use `create(UIDiscoverCreateDiscoveryConfigEventSchema)` to create a new message.
 */
export const UIDiscoverCreateDiscoveryConfigEventSchema: GenMessage<UIDiscoverCreateDiscoveryConfigEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 20);

/**
 * ConfigMethod describes how the discovery config is configured.
 *
 * @generated from enum teleport.usageevents.v1.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod
 */
export enum UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod {
  /**
   * CONFIG_METHOD_UNSPECIFIED means config method unspecified/unset.
   *
   * @generated from enum value: CONFIG_METHOD_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * CONFIG_METHOD_SSM means EC2 auto discovery configured with ssm.
   *
   * @generated from enum value: CONFIG_METHOD_AWS_EC2_SSM = 1;
   */
  AWS_EC2_SSM = 1,

  /**
   * CONFIG_METHOD_SSM means auto discovery configured for EC2 using EICE.
   *
   * @generated from enum value: CONFIG_METHOD_AWS_EC2_EICE = 2;
   */
  AWS_EC2_EICE = 2,

  /**
   * CONFIG_METHOD_SSM means auto discovery configured for RDS using ECS.
   *
   * @generated from enum value: CONFIG_METHOD_AWS_RDS_ECS = 3;
   */
  AWS_RDS_ECS = 3,

  /**
   * CONFIG_METHOD_SSM means auto discovery configured for EKS.
   *
   * @generated from enum value: CONFIG_METHOD_AWS_EKS = 4;
   */
  AWS_EKS = 4,
}

/**
 * Describes the enum teleport.usageevents.v1.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod.
 */
export const UIDiscoverCreateDiscoveryConfigEvent_ConfigMethodSchema: GenEnum<UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod> = /*@__PURE__*/
  enumDesc(file_teleport_usageevents_v1_usageevents, 20, 0);

/**
 * UIDiscoverDatabaseRegisterEvent is emitted when a user is finished with the step that registers a database resource.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverDatabaseRegisterEvent
 */
export type UIDiscoverDatabaseRegisterEvent = Message<"teleport.usageevents.v1.UIDiscoverDatabaseRegisterEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverDatabaseRegisterEvent.
 * Use `create(UIDiscoverDatabaseRegisterEventSchema)` to create a new message.
 */
export const UIDiscoverDatabaseRegisterEventSchema: GenMessage<UIDiscoverDatabaseRegisterEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 21);

/**
 * UIDiscoverDatabaseConfigureMTLSEvent is emitted when a user is finished with the step that configures mutual TLS for a self-hosted database.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverDatabaseConfigureMTLSEvent
 */
export type UIDiscoverDatabaseConfigureMTLSEvent = Message<"teleport.usageevents.v1.UIDiscoverDatabaseConfigureMTLSEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverDatabaseConfigureMTLSEvent.
 * Use `create(UIDiscoverDatabaseConfigureMTLSEventSchema)` to create a new message.
 */
export const UIDiscoverDatabaseConfigureMTLSEventSchema: GenMessage<UIDiscoverDatabaseConfigureMTLSEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 22);

/**
 * UIDiscoverDesktopActiveDirectoryToolsInstallEvent is emitted when the user is finished with the step that asks user to run the install Active Directory tools script for the Desktop flow.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverDesktopActiveDirectoryToolsInstallEvent
 */
export type UIDiscoverDesktopActiveDirectoryToolsInstallEvent = Message<"teleport.usageevents.v1.UIDiscoverDesktopActiveDirectoryToolsInstallEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverDesktopActiveDirectoryToolsInstallEvent.
 * Use `create(UIDiscoverDesktopActiveDirectoryToolsInstallEventSchema)` to create a new message.
 */
export const UIDiscoverDesktopActiveDirectoryToolsInstallEventSchema: GenMessage<UIDiscoverDesktopActiveDirectoryToolsInstallEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 23);

/**
 * UIDiscoverDesktopActiveDirectoryConfigureEvent is emitted when the user is finished with the step that asks user to run the Configure Active Directory script for the Desktop flow.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverDesktopActiveDirectoryConfigureEvent
 */
export type UIDiscoverDesktopActiveDirectoryConfigureEvent = Message<"teleport.usageevents.v1.UIDiscoverDesktopActiveDirectoryConfigureEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverDesktopActiveDirectoryConfigureEvent.
 * Use `create(UIDiscoverDesktopActiveDirectoryConfigureEventSchema)` to create a new message.
 */
export const UIDiscoverDesktopActiveDirectoryConfigureEventSchema: GenMessage<UIDiscoverDesktopActiveDirectoryConfigureEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 24);

/**
 * UIDiscoverAutoDiscoveredResourcesEvent is emitted when the user is finished with the step that auto discovers resources (waiting until resources show up).
 * resources_count field must reflect the latest amount of discovered resources (get the number after user is finished with this step).
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverAutoDiscoveredResourcesEvent
 */
export type UIDiscoverAutoDiscoveredResourcesEvent = Message<"teleport.usageevents.v1.UIDiscoverAutoDiscoveredResourcesEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;

  /**
   * @generated from field: int64 resources_count = 4;
   */
  resourcesCount: bigint;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverAutoDiscoveredResourcesEvent.
 * Use `create(UIDiscoverAutoDiscoveredResourcesEventSchema)` to create a new message.
 */
export const UIDiscoverAutoDiscoveredResourcesEventSchema: GenMessage<UIDiscoverAutoDiscoveredResourcesEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 25);

/**
 * UIDiscoverEC2InstanceSelectionEvent is emitted when the user is finished with the step that asks the user to select an EC2 Instance to enroll.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverEC2InstanceSelectionEvent
 */
export type UIDiscoverEC2InstanceSelectionEvent = Message<"teleport.usageevents.v1.UIDiscoverEC2InstanceSelectionEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverEC2InstanceSelectionEvent.
 * Use `create(UIDiscoverEC2InstanceSelectionEventSchema)` to create a new message.
 */
export const UIDiscoverEC2InstanceSelectionEventSchema: GenMessage<UIDiscoverEC2InstanceSelectionEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 26);

/**
 * UIDiscoverDeployEICEEvent is emitted when the user deploys an EC2 Instance Connect Endpoint.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverDeployEICEEvent
 */
export type UIDiscoverDeployEICEEvent = Message<"teleport.usageevents.v1.UIDiscoverDeployEICEEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverDeployEICEEvent.
 * Use `create(UIDiscoverDeployEICEEventSchema)` to create a new message.
 */
export const UIDiscoverDeployEICEEventSchema: GenMessage<UIDiscoverDeployEICEEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 27);

/**
 * UIDiscoverCreateNodeEvent is emitted when the node is created in Teleport.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverCreateNodeEvent
 */
export type UIDiscoverCreateNodeEvent = Message<"teleport.usageevents.v1.UIDiscoverCreateNodeEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverCreateNodeEvent.
 * Use `create(UIDiscoverCreateNodeEventSchema)` to create a new message.
 */
export const UIDiscoverCreateNodeEventSchema: GenMessage<UIDiscoverCreateNodeEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 28);

/**
 * UIDiscoverCreateAppServerEvent is emitted when an app server is created.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverCreateAppServerEvent
 */
export type UIDiscoverCreateAppServerEvent = Message<"teleport.usageevents.v1.UIDiscoverCreateAppServerEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverCreateAppServerEvent.
 * Use `create(UIDiscoverCreateAppServerEventSchema)` to create a new message.
 */
export const UIDiscoverCreateAppServerEventSchema: GenMessage<UIDiscoverCreateAppServerEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 29);

/**
 * UIDiscoverDatabaseConfigureIAMPolicyEvent is emitted when a user is finished with the step that configures IAM policy for an RDS database.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverDatabaseConfigureIAMPolicyEvent
 */
export type UIDiscoverDatabaseConfigureIAMPolicyEvent = Message<"teleport.usageevents.v1.UIDiscoverDatabaseConfigureIAMPolicyEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverDatabaseConfigureIAMPolicyEvent.
 * Use `create(UIDiscoverDatabaseConfigureIAMPolicyEventSchema)` to create a new message.
 */
export const UIDiscoverDatabaseConfigureIAMPolicyEventSchema: GenMessage<UIDiscoverDatabaseConfigureIAMPolicyEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 30);

/**
 * UIDiscoverPrincipalsConfigureEvent is emitted when a user is finished with the step that allows user to update their principals (setting up access).
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverPrincipalsConfigureEvent
 */
export type UIDiscoverPrincipalsConfigureEvent = Message<"teleport.usageevents.v1.UIDiscoverPrincipalsConfigureEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverPrincipalsConfigureEvent.
 * Use `create(UIDiscoverPrincipalsConfigureEventSchema)` to create a new message.
 */
export const UIDiscoverPrincipalsConfigureEventSchema: GenMessage<UIDiscoverPrincipalsConfigureEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 31);

/**
 * UIDiscoverTestConnectionEvent emitted on the "Test Connection" screen
 * when the user clicked tested connection to their resource.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverTestConnectionEvent
 */
export type UIDiscoverTestConnectionEvent = Message<"teleport.usageevents.v1.UIDiscoverTestConnectionEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverTestConnectionEvent.
 * Use `create(UIDiscoverTestConnectionEventSchema)` to create a new message.
 */
export const UIDiscoverTestConnectionEventSchema: GenMessage<UIDiscoverTestConnectionEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 32);

/**
 * UIDiscoverCompletedEvent is emitted when user completes the Discover wizard.
 *
 * @generated from message teleport.usageevents.v1.UIDiscoverCompletedEvent
 */
export type UIDiscoverCompletedEvent = Message<"teleport.usageevents.v1.UIDiscoverCompletedEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.DiscoverMetadata metadata = 1;
   */
  metadata?: DiscoverMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverResourceMetadata resource = 2;
   */
  resource?: DiscoverResourceMetadata;

  /**
   * @generated from field: teleport.usageevents.v1.DiscoverStepStatus status = 3;
   */
  status?: DiscoverStepStatus;
};

/**
 * Describes the message teleport.usageevents.v1.UIDiscoverCompletedEvent.
 * Use `create(UIDiscoverCompletedEventSchema)` to create a new message.
 */
export const UIDiscoverCompletedEventSchema: GenMessage<UIDiscoverCompletedEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 33);

/**
 * UICreateNewRoleClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from message teleport.usageevents.v1.UICreateNewRoleClickEvent
 */
export type UICreateNewRoleClickEvent = Message<"teleport.usageevents.v1.UICreateNewRoleClickEvent"> & {
};

/**
 * Describes the message teleport.usageevents.v1.UICreateNewRoleClickEvent.
 * Use `create(UICreateNewRoleClickEventSchema)` to create a new message.
 */
export const UICreateNewRoleClickEventSchema: GenMessage<UICreateNewRoleClickEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 34);

/**
 * UICreateNewRoleSaveClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from message teleport.usageevents.v1.UICreateNewRoleSaveClickEvent
 */
export type UICreateNewRoleSaveClickEvent = Message<"teleport.usageevents.v1.UICreateNewRoleSaveClickEvent"> & {
};

/**
 * Describes the message teleport.usageevents.v1.UICreateNewRoleSaveClickEvent.
 * Use `create(UICreateNewRoleSaveClickEventSchema)` to create a new message.
 */
export const UICreateNewRoleSaveClickEventSchema: GenMessage<UICreateNewRoleSaveClickEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 35);

/**
 * UICreateNewRoleCancelClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from message teleport.usageevents.v1.UICreateNewRoleCancelClickEvent
 */
export type UICreateNewRoleCancelClickEvent = Message<"teleport.usageevents.v1.UICreateNewRoleCancelClickEvent"> & {
};

/**
 * Describes the message teleport.usageevents.v1.UICreateNewRoleCancelClickEvent.
 * Use `create(UICreateNewRoleCancelClickEventSchema)` to create a new message.
 */
export const UICreateNewRoleCancelClickEventSchema: GenMessage<UICreateNewRoleCancelClickEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 36);

/**
 * UICreateNewRoleViewDocumentationClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from message teleport.usageevents.v1.UICreateNewRoleViewDocumentationClickEvent
 */
export type UICreateNewRoleViewDocumentationClickEvent = Message<"teleport.usageevents.v1.UICreateNewRoleViewDocumentationClickEvent"> & {
};

/**
 * Describes the message teleport.usageevents.v1.UICreateNewRoleViewDocumentationClickEvent.
 * Use `create(UICreateNewRoleViewDocumentationClickEventSchema)` to create a new message.
 */
export const UICreateNewRoleViewDocumentationClickEventSchema: GenMessage<UICreateNewRoleViewDocumentationClickEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 37);

/**
 * AssistCompletionEvent is an event that is emitted when a completion occurs in the Assistant
 *
 * @generated from message teleport.usageevents.v1.AssistCompletionEvent
 */
export type AssistCompletionEvent = Message<"teleport.usageevents.v1.AssistCompletionEvent"> & {
  /**
   * ConversationId is the UUID that identifies a single Assist conversation
   *
   * @generated from field: string conversation_id = 1;
   */
  conversationId: string;

  /**
   * TotalTokens is the total amount of token used to satisfy this request
   *
   * @generated from field: int64 total_tokens = 2;
   */
  totalTokens: bigint;

  /**
   * PromptTokens is the amount of estimated tokens used by the prompt
   *
   * @generated from field: int64 prompt_tokens = 3;
   */
  promptTokens: bigint;

  /**
   * CompletionTokens is the amount of tokens that the completion response consists of
   *
   * @generated from field: int64 completion_tokens = 4;
   */
  completionTokens: bigint;
};

/**
 * Describes the message teleport.usageevents.v1.AssistCompletionEvent.
 * Use `create(AssistCompletionEventSchema)` to create a new message.
 */
export const AssistCompletionEventSchema: GenMessage<AssistCompletionEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 38);

/**
 * AssistExecutionEvent is an event that is emitted when an Assist command
 * execution is triggered by the user.
 *
 * @generated from message teleport.usageevents.v1.AssistExecutionEvent
 */
export type AssistExecutionEvent = Message<"teleport.usageevents.v1.AssistExecutionEvent"> & {
  /**
   * ConversationId is the UUID that identifies a single Assist conversation
   *
   * @generated from field: string conversation_id = 1;
   */
  conversationId: string;

  /**
   * NodeCount is the number of nodes the command was executed on
   *
   * @generated from field: int64 node_count = 2;
   */
  nodeCount: bigint;

  /**
   * TotalTokens is the total amount of token used to satisfy this request
   *
   * @generated from field: int64 total_tokens = 3;
   */
  totalTokens: bigint;

  /**
   * PromptTokens is the amount of estimated tokens used by the prompt
   *
   * @generated from field: int64 prompt_tokens = 4;
   */
  promptTokens: bigint;

  /**
   * CompletionTokens is the amount of tokens that the completion response consists of
   *
   * @generated from field: int64 completion_tokens = 5;
   */
  completionTokens: bigint;
};

/**
 * Describes the message teleport.usageevents.v1.AssistExecutionEvent.
 * Use `create(AssistExecutionEventSchema)` to create a new message.
 */
export const AssistExecutionEventSchema: GenMessage<AssistExecutionEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 39);

/**
 * AssistNewConversationEvent is an event that is emitted for each new Assist
 * conversation and contains the conversation category.
 *
 * @generated from message teleport.usageevents.v1.AssistNewConversationEvent
 */
export type AssistNewConversationEvent = Message<"teleport.usageevents.v1.AssistNewConversationEvent"> & {
  /**
   * Category is the conversation category. This represents what kind of request
   * the user is asking Assist.
   *
   * @generated from field: string category = 1;
   */
  category: string;
};

/**
 * Describes the message teleport.usageevents.v1.AssistNewConversationEvent.
 * Use `create(AssistNewConversationEventSchema)` to create a new message.
 */
export const AssistNewConversationEventSchema: GenMessage<AssistNewConversationEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 40);

/**
 * AssistAccessRequest is an event that is emitted when a user requests access
 * to a resource via Assist.
 *
 * @generated from message teleport.usageevents.v1.AssistAccessRequest
 */
export type AssistAccessRequest = Message<"teleport.usageevents.v1.AssistAccessRequest"> & {
  /**
   * ResourceType describes the type of resource the user is requesting access to, e.g. "node", "db", "k8s" or "role".
   *
   * @generated from field: string resource_type = 1;
   */
  resourceType: string;

  /**
   * TotalTokens is the total amount of token used to generate the command summary
   *
   * @generated from field: int64 total_tokens = 2;
   */
  totalTokens: bigint;

  /**
   * PromptTokens is the amount of estimated tokens used by the prompt to generate the command summary
   *
   * @generated from field: int64 prompt_tokens = 3;
   */
  promptTokens: bigint;

  /**
   * CompletionTokens is the amount of tokens that the summary completion response consists of
   *
   * @generated from field: int64 completion_tokens = 4;
   */
  completionTokens: bigint;
};

/**
 * Describes the message teleport.usageevents.v1.AssistAccessRequest.
 * Use `create(AssistAccessRequestSchema)` to create a new message.
 */
export const AssistAccessRequestSchema: GenMessage<AssistAccessRequest> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 41);

/**
 * AssistAction is an event that is emitted when a user triggers an action (SSH command generation, output explain, etc.)
 * via Assist.
 *
 * @generated from message teleport.usageevents.v1.AssistAction
 */
export type AssistAction = Message<"teleport.usageevents.v1.AssistAction"> & {
  /**
   * Action is the action that was triggered, e.g. "ssh-explain", "ssh-command-generate", etc.
   *
   * @generated from field: string action = 1;
   */
  action: string;

  /**
   * TotalTokens is the total amount of token used to generate the command summary
   *
   * @generated from field: int64 total_tokens = 2;
   */
  totalTokens: bigint;

  /**
   * PromptTokens is the amount of estimated tokens used by the prompt to generate the command summary
   *
   * @generated from field: int64 prompt_tokens = 3;
   */
  promptTokens: bigint;

  /**
   * CompletionTokens is the amount of tokens that the summary completion response consists of
   *
   * @generated from field: int64 completion_tokens = 4;
   */
  completionTokens: bigint;
};

/**
 * Describes the message teleport.usageevents.v1.AssistAction.
 * Use `create(AssistActionSchema)` to create a new message.
 */
export const AssistActionSchema: GenMessage<AssistAction> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 42);

/**
 * AccessListMetadata contains common metadata for Access List related events.
 *
 * @generated from message teleport.usageevents.v1.AccessListMetadata
 */
export type AccessListMetadata = Message<"teleport.usageevents.v1.AccessListMetadata"> & {
  /**
   * Uniquely identifies an Access List. Will allow correlation of events within an access list.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message teleport.usageevents.v1.AccessListMetadata.
 * Use `create(AccessListMetadataSchema)` to create a new message.
 */
export const AccessListMetadataSchema: GenMessage<AccessListMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 43);

/**
 * AccessListCreate is an event that is emitted when an access list is created.
 *
 * @generated from message teleport.usageevents.v1.AccessListCreate
 */
export type AccessListCreate = Message<"teleport.usageevents.v1.AccessListCreate"> & {
  /**
   * @generated from field: teleport.usageevents.v1.AccessListMetadata metadata = 1;
   */
  metadata?: AccessListMetadata;
};

/**
 * Describes the message teleport.usageevents.v1.AccessListCreate.
 * Use `create(AccessListCreateSchema)` to create a new message.
 */
export const AccessListCreateSchema: GenMessage<AccessListCreate> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 44);

/**
 * AccessListUpdate is an event that is emitted when an access list is updated.
 *
 * @generated from message teleport.usageevents.v1.AccessListUpdate
 */
export type AccessListUpdate = Message<"teleport.usageevents.v1.AccessListUpdate"> & {
  /**
   * @generated from field: teleport.usageevents.v1.AccessListMetadata metadata = 1;
   */
  metadata?: AccessListMetadata;
};

/**
 * Describes the message teleport.usageevents.v1.AccessListUpdate.
 * Use `create(AccessListUpdateSchema)` to create a new message.
 */
export const AccessListUpdateSchema: GenMessage<AccessListUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 45);

/**
 * AccessListDelete is an event that is emitted when an access list is deleted.
 *
 * @generated from message teleport.usageevents.v1.AccessListDelete
 */
export type AccessListDelete = Message<"teleport.usageevents.v1.AccessListDelete"> & {
  /**
   * @generated from field: teleport.usageevents.v1.AccessListMetadata metadata = 1;
   */
  metadata?: AccessListMetadata;
};

/**
 * Describes the message teleport.usageevents.v1.AccessListDelete.
 * Use `create(AccessListDeleteSchema)` to create a new message.
 */
export const AccessListDeleteSchema: GenMessage<AccessListDelete> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 46);

/**
 * AccessListMemberCreate is an event that is emitted when a member is added to an access list.
 *
 * @generated from message teleport.usageevents.v1.AccessListMemberCreate
 */
export type AccessListMemberCreate = Message<"teleport.usageevents.v1.AccessListMemberCreate"> & {
  /**
   * @generated from field: teleport.usageevents.v1.AccessListMetadata metadata = 1;
   */
  metadata?: AccessListMetadata;
};

/**
 * Describes the message teleport.usageevents.v1.AccessListMemberCreate.
 * Use `create(AccessListMemberCreateSchema)` to create a new message.
 */
export const AccessListMemberCreateSchema: GenMessage<AccessListMemberCreate> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 47);

/**
 * AccessListMemberCreate is an event that is emitted when a member is updated in an access list.
 *
 * @generated from message teleport.usageevents.v1.AccessListMemberUpdate
 */
export type AccessListMemberUpdate = Message<"teleport.usageevents.v1.AccessListMemberUpdate"> & {
  /**
   * @generated from field: teleport.usageevents.v1.AccessListMetadata metadata = 1;
   */
  metadata?: AccessListMetadata;
};

/**
 * Describes the message teleport.usageevents.v1.AccessListMemberUpdate.
 * Use `create(AccessListMemberUpdateSchema)` to create a new message.
 */
export const AccessListMemberUpdateSchema: GenMessage<AccessListMemberUpdate> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 48);

/**
 * AccessListMemberDelete is an event that is emitted when a member is removed from an access list.
 *
 * @generated from message teleport.usageevents.v1.AccessListMemberDelete
 */
export type AccessListMemberDelete = Message<"teleport.usageevents.v1.AccessListMemberDelete"> & {
  /**
   * @generated from field: teleport.usageevents.v1.AccessListMetadata metadata = 1;
   */
  metadata?: AccessListMetadata;
};

/**
 * Describes the message teleport.usageevents.v1.AccessListMemberDelete.
 * Use `create(AccessListMemberDeleteSchema)` to create a new message.
 */
export const AccessListMemberDeleteSchema: GenMessage<AccessListMemberDelete> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 49);

/**
 * AccessListGrantsToUser is an event that is emitted when access list permissions are granted to a user
 * on login.
 *
 * @generated from message teleport.usageevents.v1.AccessListGrantsToUser
 */
export type AccessListGrantsToUser = Message<"teleport.usageevents.v1.AccessListGrantsToUser"> & {
  /**
   * count_roles_granted is the number of roles granted to a user.
   *
   * @generated from field: int32 count_roles_granted = 1;
   */
  countRolesGranted: number;

  /**
   * count_traits_granted is the number of traits granted to a user.
   *
   * @generated from field: int32 count_traits_granted = 2;
   */
  countTraitsGranted: number;
};

/**
 * Describes the message teleport.usageevents.v1.AccessListGrantsToUser.
 * Use `create(AccessListGrantsToUserSchema)` to create a new message.
 */
export const AccessListGrantsToUserSchema: GenMessage<AccessListGrantsToUser> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 50);

/**
 * AccessListReviewCreate is an event that is emitted when an access list review is created.
 *
 * @generated from message teleport.usageevents.v1.AccessListReviewCreate
 */
export type AccessListReviewCreate = Message<"teleport.usageevents.v1.AccessListReviewCreate"> & {
  /**
   * @generated from field: teleport.usageevents.v1.AccessListMetadata metadata = 1;
   */
  metadata?: AccessListMetadata;

  /**
   * days_past_next_audit_date is how many days past the next audit date the review came in. Can be negative.
   *
   * @generated from field: int32 days_past_next_audit_date = 2;
   */
  daysPastNextAuditDate: number;

  /**
   * membership_requirements_changed indicates that the membership requirements were changed.
   *
   * @generated from field: bool membership_requirements_changed = 3;
   */
  membershipRequirementsChanged: boolean;

  /**
   * review_frequency_changed indicates that the review frequency was changed.
   *
   * @generated from field: bool review_frequency_changed = 4;
   */
  reviewFrequencyChanged: boolean;

  /**
   * review_day_of_month_changed indicates that the review day of month was changed.
   *
   * @generated from field: bool review_day_of_month_changed = 5;
   */
  reviewDayOfMonthChanged: boolean;

  /**
   * number_of_removed_members is how many members were removed as part of this review.
   *
   * @generated from field: int32 number_of_removed_members = 6;
   */
  numberOfRemovedMembers: number;
};

/**
 * Describes the message teleport.usageevents.v1.AccessListReviewCreate.
 * Use `create(AccessListReviewCreateSchema)` to create a new message.
 */
export const AccessListReviewCreateSchema: GenMessage<AccessListReviewCreate> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 51);

/**
 * AccessListReviewDelete is an event that is emitted when an access list review is deleted.
 *
 * @generated from message teleport.usageevents.v1.AccessListReviewDelete
 */
export type AccessListReviewDelete = Message<"teleport.usageevents.v1.AccessListReviewDelete"> & {
  /**
   * @generated from field: teleport.usageevents.v1.AccessListMetadata metadata = 1;
   */
  metadata?: AccessListMetadata;

  /**
   * access_list_review_id is the unique identifier for the access list review.
   *
   * @generated from field: string access_list_review_id = 2;
   */
  accessListReviewId: string;
};

/**
 * Describes the message teleport.usageevents.v1.AccessListReviewDelete.
 * Use `create(AccessListReviewDeleteSchema)` to create a new message.
 */
export const AccessListReviewDeleteSchema: GenMessage<AccessListReviewDelete> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 52);

/**
 * IntegrationEnrollMetadata contains common metadata
 * for Integration Enroll related events.
 *
 * @generated from message teleport.usageevents.v1.IntegrationEnrollMetadata
 */
export type IntegrationEnrollMetadata = Message<"teleport.usageevents.v1.IntegrationEnrollMetadata"> & {
  /**
   * id is used as a unique identifier to correlate events within the
   * same enroll wizard run.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * kind identifies what type of integration the user clicked on to enroll.
   *
   * @generated from field: teleport.usageevents.v1.IntegrationEnrollKind kind = 2;
   */
  kind: IntegrationEnrollKind;

  /**
   * user_name is anonymized.
   *
   * @generated from field: string user_name = 3;
   */
  userName: string;
};

/**
 * Describes the message teleport.usageevents.v1.IntegrationEnrollMetadata.
 * Use `create(IntegrationEnrollMetadataSchema)` to create a new message.
 */
export const IntegrationEnrollMetadataSchema: GenMessage<IntegrationEnrollMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 53);

/**
 * UIIntegrationEnrollEvent is an event that is emitted when a user
 * clicks on a integration to enroll.
 *
 * @generated from message teleport.usageevents.v1.UIIntegrationEnrollStartEvent
 */
export type UIIntegrationEnrollStartEvent = Message<"teleport.usageevents.v1.UIIntegrationEnrollStartEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.IntegrationEnrollMetadata metadata = 1;
   */
  metadata?: IntegrationEnrollMetadata;
};

/**
 * Describes the message teleport.usageevents.v1.UIIntegrationEnrollStartEvent.
 * Use `create(UIIntegrationEnrollStartEventSchema)` to create a new message.
 */
export const UIIntegrationEnrollStartEventSchema: GenMessage<UIIntegrationEnrollStartEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 54);

/**
 * UIIntegrationEnrollEvent is an event that is emitted when a user
 * completed enrolling an integration.
 *
 * @generated from message teleport.usageevents.v1.UIIntegrationEnrollCompleteEvent
 */
export type UIIntegrationEnrollCompleteEvent = Message<"teleport.usageevents.v1.UIIntegrationEnrollCompleteEvent"> & {
  /**
   * @generated from field: teleport.usageevents.v1.IntegrationEnrollMetadata metadata = 1;
   */
  metadata?: IntegrationEnrollMetadata;
};

/**
 * Describes the message teleport.usageevents.v1.UIIntegrationEnrollCompleteEvent.
 * Use `create(UIIntegrationEnrollCompleteEventSchema)` to create a new message.
 */
export const UIIntegrationEnrollCompleteEventSchema: GenMessage<UIIntegrationEnrollCompleteEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 55);

/**
 * ResourceCreateEvent is emitted when a resource is created.
 *
 * @generated from message teleport.usageevents.v1.ResourceCreateEvent
 */
export type ResourceCreateEvent = Message<"teleport.usageevents.v1.ResourceCreateEvent"> & {
  /**
   * resource_type is the type of resource ("node", "node.openssh", "db", "k8s", "app").
   *
   * @generated from field: string resource_type = 1;
   */
  resourceType: string;

  /**
   * resource_origin is the origin of the resource ("cloud", "kubernetes").
   *
   * @generated from field: string resource_origin = 2;
   */
  resourceOrigin: string;

  /**
   * cloud_provider is the cloud provider the resource came from ("AWS", "Azure", "GCP")
   * if resource_origin == "cloud".
   *
   * @generated from field: string cloud_provider = 3;
   */
  cloudProvider: string;

  /**
   * database contains additional database information if resource_type == "db".
   *
   * @generated from field: teleport.usageevents.v1.DiscoveredDatabaseMetadata database = 4;
   */
  database?: DiscoveredDatabaseMetadata;
};

/**
 * Describes the message teleport.usageevents.v1.ResourceCreateEvent.
 * Use `create(ResourceCreateEventSchema)` to create a new message.
 */
export const ResourceCreateEventSchema: GenMessage<ResourceCreateEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 56);

/**
 * DiscoveredDatabaseMetadata contains additional database information.
 *
 * @generated from message teleport.usageevents.v1.DiscoveredDatabaseMetadata
 */
export type DiscoveredDatabaseMetadata = Message<"teleport.usageevents.v1.DiscoveredDatabaseMetadata"> & {
  /**
   * database type.
   *
   * @generated from field: string db_type = 1;
   */
  dbType: string;

  /**
   * database protocol.
   *
   * @generated from field: string db_protocol = 2;
   */
  dbProtocol: string;
};

/**
 * Describes the message teleport.usageevents.v1.DiscoveredDatabaseMetadata.
 * Use `create(DiscoveredDatabaseMetadataSchema)` to create a new message.
 */
export const DiscoveredDatabaseMetadataSchema: GenMessage<DiscoveredDatabaseMetadata> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 57);

/**
 * FeatureRecommendationEvent captures event emitted when a feature is recommended to user or
 * when user completes the desired CTA for the feature.
 *
 * PostHost event: tp.ui.feature.recommendation
 *
 * @generated from message teleport.usageevents.v1.FeatureRecommendationEvent
 */
export type FeatureRecommendationEvent = Message<"teleport.usageevents.v1.FeatureRecommendationEvent"> & {
  /**
   * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
   *
   * PostHog property: tp.user_name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * feature is name of the Teleport feature.
   *
   * PostHost property: tp.feature
   *
   * @generated from field: teleport.usageevents.v1.Feature feature = 2;
   */
  feature: Feature;

  /**
   * feature_recommendation_status records recommendation state, which can be 'NOTIFIED' (feature is recommended)
   * OR 'DONE' (user completes desired CTA)
   *
   * PostHost property: tp.feature_recommendation_status
   *
   * @generated from field: teleport.usageevents.v1.FeatureRecommendationStatus feature_recommendation_status = 3;
   */
  featureRecommendationStatus: FeatureRecommendationStatus;
};

/**
 * Describes the message teleport.usageevents.v1.FeatureRecommendationEvent.
 * Use `create(FeatureRecommendationEventSchema)` to create a new message.
 */
export const FeatureRecommendationEventSchema: GenMessage<FeatureRecommendationEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 58);

/**
 * TAGExecuteQueryEvent is an event that is emitted
 * when a single query is executed in the Teleport Access Graph.
 * This event is emitted for both successful and failed queries and for
 * successful queries, the total number of nodes and edges is reported.
 *
 * @generated from message teleport.usageevents.v1.TAGExecuteQueryEvent
 */
export type TAGExecuteQueryEvent = Message<"teleport.usageevents.v1.TAGExecuteQueryEvent"> & {
  /**
   * total_nodes is the total amount of nodes returned by the query.
   *
   * @generated from field: int64 total_nodes = 1;
   */
  totalNodes: bigint;

  /**
   * total_edges is the total amount of edges returned by the query.
   *
   * @generated from field: int64 total_edges = 2;
   */
  totalEdges: bigint;

  /**
   * is_success is true if the query was successful and false it if failed.
   *
   * @generated from field: bool is_success = 3;
   */
  isSuccess: boolean;
};

/**
 * Describes the message teleport.usageevents.v1.TAGExecuteQueryEvent.
 * Use `create(TAGExecuteQueryEventSchema)` to create a new message.
 */
export const TAGExecuteQueryEventSchema: GenMessage<TAGExecuteQueryEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 59);

/**
 * AccessGraphAWSScanEvent is emitted when the Access Graph
 * AWS scan is enabled.
 *
 * @generated from message teleport.usageevents.v1.AccessGraphAWSScanEvent
 */
export type AccessGraphAWSScanEvent = Message<"teleport.usageevents.v1.AccessGraphAWSScanEvent"> & {
  /**
   * total_ec2_instances is the total amount of EC2 instances found in the AWS scan.
   *
   * @generated from field: uint64 total_ec2_instances = 1;
   */
  totalEc2Instances: bigint;

  /**
   * total_users is the total amount of users found in the AWS scan.
   *
   * @generated from field: uint64 total_users = 2;
   */
  totalUsers: bigint;

  /**
   * total_groups is the total amount of groups found in the AWS scan.
   *
   * @generated from field: uint64 total_groups = 3;
   */
  totalGroups: bigint;

  /**
   * total_roles is the total amount of roles found in the AWS scan.
   *
   * @generated from field: uint64 total_roles = 4;
   */
  totalRoles: bigint;

  /**
   * total_policies is the total amount of policies found in the AWS scan.
   *
   * @generated from field: uint64 total_policies = 5;
   */
  totalPolicies: bigint;

  /**
   * total_eks_clusters is the total amount of EKS clusters found in the AWS scan.
   *
   * @generated from field: uint64 total_eks_clusters = 6;
   */
  totalEksClusters: bigint;

  /**
   * total_rds_instances is the total amount of RDS instances found in the AWS scan.
   *
   * @generated from field: uint64 total_rds_instances = 7;
   */
  totalRdsInstances: bigint;

  /**
   * total_s3_buckets is the total amount of S3 buckets found in the AWS scan.
   *
   * @generated from field: uint64 total_s3_buckets = 8;
   */
  totalS3Buckets: bigint;

  /**
   * total_saml_providers is the total amount of SAML providers found in the AWS scan.
   *
   * @generated from field: uint64 total_saml_providers = 9;
   */
  totalSamlProviders: bigint;

  /**
   * total_oidc_providers is the total amount of OIDC providers found in the AWS scan.
   *
   * @generated from field: uint64 total_oidc_providers = 10;
   */
  totalOidcProviders: bigint;

  /**
   * total_accounts is the total amount of accounts synchronized in the AWS scan.
   *
   * @generated from field: uint64 total_accounts = 11;
   */
  totalAccounts: bigint;
};

/**
 * Describes the message teleport.usageevents.v1.AccessGraphAWSScanEvent.
 * Use `create(AccessGraphAWSScanEventSchema)` to create a new message.
 */
export const AccessGraphAWSScanEventSchema: GenMessage<AccessGraphAWSScanEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 60);

/**
 * UIAccessGraphCrownJewelDiffViewEvent is emitted when a user reviews the output of a Crown Jewel access path dff.
 *
 * @generated from message teleport.usageevents.v1.UIAccessGraphCrownJewelDiffViewEvent
 */
export type UIAccessGraphCrownJewelDiffViewEvent = Message<"teleport.usageevents.v1.UIAccessGraphCrownJewelDiffViewEvent"> & {
  /**
   * affected_resource_source is the source of the affected resource.
   *
   * @generated from field: string affected_resource_source = 1;
   */
  affectedResourceSource: string;

  /**
   * affected_resource_type is the type of the affected resource.
   *
   * @generated from field: string affected_resource_type = 2;
   */
  affectedResourceType: string;
};

/**
 * Describes the message teleport.usageevents.v1.UIAccessGraphCrownJewelDiffViewEvent.
 * Use `create(UIAccessGraphCrownJewelDiffViewEventSchema)` to create a new message.
 */
export const UIAccessGraphCrownJewelDiffViewEventSchema: GenMessage<UIAccessGraphCrownJewelDiffViewEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 61);

/**
 * SecurityReportGetResultEvent is emitted when the user requests a security report.
 *
 * @generated from message teleport.usageevents.v1.SecurityReportGetResultEvent
 */
export type SecurityReportGetResultEvent = Message<"teleport.usageevents.v1.SecurityReportGetResultEvent"> & {
  /**
   * name is the name of the security report.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * days is the time range of the security reports in days.
   *
   * @generated from field: int32 days = 2;
   */
  days: number;
};

/**
 * Describes the message teleport.usageevents.v1.SecurityReportGetResultEvent.
 * Use `create(SecurityReportGetResultEventSchema)` to create a new message.
 */
export const SecurityReportGetResultEventSchema: GenMessage<SecurityReportGetResultEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 62);

/**
 * DiscoveryFetchEvent is emitted when a DiscoveryService polls for new resources of a given type
 *
 * @generated from message teleport.usageevents.v1.DiscoveryFetchEvent
 */
export type DiscoveryFetchEvent = Message<"teleport.usageevents.v1.DiscoveryFetchEvent"> & {
  /**
   * cloud_provider is the cloud provider used to fetch resources
   * Eg, AWS, Azure, GCP, Kubernetes
   *
   * @generated from field: string cloud_provider = 1;
   */
  cloudProvider: string;

  /**
   * resource_type is the type of resource that this fetch is polling.
   * It depends on the Cloud Provider (defined above).
   * Eg, rds, ec2, vm, aks, gce, app
   *
   * @generated from field: string resource_type = 2;
   */
  resourceType: string;
};

/**
 * Describes the message teleport.usageevents.v1.DiscoveryFetchEvent.
 * Use `create(DiscoveryFetchEventSchema)` to create a new message.
 */
export const DiscoveryFetchEventSchema: GenMessage<DiscoveryFetchEvent> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 63);

/**
 * UsageEventOneOf is a message that can accept a oneof of any supported
 * external usage event.
 *
 * @generated from message teleport.usageevents.v1.UsageEventOneOf
 */
export type UsageEventOneOf = Message<"teleport.usageevents.v1.UsageEventOneOf"> & {
  /**
   * @generated from oneof teleport.usageevents.v1.UsageEventOneOf.event
   */
  event: {
    /**
     * @generated from field: teleport.usageevents.v1.UIBannerClickEvent ui_banner_click = 1;
     */
    value: UIBannerClickEvent;
    case: "uiBannerClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIOnboardCompleteGoToDashboardClickEvent ui_onboard_complete_go_to_dashboard_click = 3;
     */
    value: UIOnboardCompleteGoToDashboardClickEvent;
    case: "uiOnboardCompleteGoToDashboardClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIOnboardAddFirstResourceClickEvent ui_onboard_add_first_resource_click = 4;
     */
    value: UIOnboardAddFirstResourceClickEvent;
    case: "uiOnboardAddFirstResourceClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIOnboardAddFirstResourceLaterClickEvent ui_onboard_add_first_resource_later_click = 5;
     */
    value: UIOnboardAddFirstResourceLaterClickEvent;
    case: "uiOnboardAddFirstResourceLaterClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIOnboardSetCredentialSubmitEvent ui_onboard_set_credential_submit = 6;
     */
    value: UIOnboardSetCredentialSubmitEvent;
    case: "uiOnboardSetCredentialSubmit";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIOnboardRegisterChallengeSubmitEvent ui_onboard_register_challenge_submit = 7;
     */
    value: UIOnboardRegisterChallengeSubmitEvent;
    case: "uiOnboardRegisterChallengeSubmit";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIRecoveryCodesContinueClickEvent ui_recovery_codes_continue_click = 8;
     */
    value: UIRecoveryCodesContinueClickEvent;
    case: "uiRecoveryCodesContinueClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIRecoveryCodesCopyClickEvent ui_recovery_codes_copy_click = 9;
     */
    value: UIRecoveryCodesCopyClickEvent;
    case: "uiRecoveryCodesCopyClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIRecoveryCodesPrintClickEvent ui_recovery_codes_print_click = 10;
     */
    value: UIRecoveryCodesPrintClickEvent;
    case: "uiRecoveryCodesPrintClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverStartedEvent ui_discover_started_event = 11;
     */
    value: UIDiscoverStartedEvent;
    case: "uiDiscoverStartedEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverResourceSelectionEvent ui_discover_resource_selection_event = 12;
     */
    value: UIDiscoverResourceSelectionEvent;
    case: "uiDiscoverResourceSelectionEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverDeployServiceEvent ui_discover_deploy_service_event = 13;
     */
    value: UIDiscoverDeployServiceEvent;
    case: "uiDiscoverDeployServiceEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverDatabaseRegisterEvent ui_discover_database_register_event = 14;
     */
    value: UIDiscoverDatabaseRegisterEvent;
    case: "uiDiscoverDatabaseRegisterEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverDatabaseConfigureMTLSEvent ui_discover_database_configure_mtls_event = 15;
     */
    value: UIDiscoverDatabaseConfigureMTLSEvent;
    case: "uiDiscoverDatabaseConfigureMtlsEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverDesktopActiveDirectoryToolsInstallEvent ui_discover_desktop_active_directory_tools_install_event = 16;
     */
    value: UIDiscoverDesktopActiveDirectoryToolsInstallEvent;
    case: "uiDiscoverDesktopActiveDirectoryToolsInstallEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverDesktopActiveDirectoryConfigureEvent ui_discover_desktop_active_directory_configure_event = 17;
     */
    value: UIDiscoverDesktopActiveDirectoryConfigureEvent;
    case: "uiDiscoverDesktopActiveDirectoryConfigureEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverAutoDiscoveredResourcesEvent ui_discover_auto_discovered_resources_event = 18;
     */
    value: UIDiscoverAutoDiscoveredResourcesEvent;
    case: "uiDiscoverAutoDiscoveredResourcesEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverDatabaseConfigureIAMPolicyEvent ui_discover_database_configure_iam_policy_event = 19;
     */
    value: UIDiscoverDatabaseConfigureIAMPolicyEvent;
    case: "uiDiscoverDatabaseConfigureIamPolicyEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverPrincipalsConfigureEvent ui_discover_principals_configure_event = 20;
     */
    value: UIDiscoverPrincipalsConfigureEvent;
    case: "uiDiscoverPrincipalsConfigureEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverTestConnectionEvent ui_discover_test_connection_event = 21;
     */
    value: UIDiscoverTestConnectionEvent;
    case: "uiDiscoverTestConnectionEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverCompletedEvent ui_discover_completed_event = 22;
     */
    value: UIDiscoverCompletedEvent;
    case: "uiDiscoverCompletedEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UICreateNewRoleClickEvent ui_create_new_role_click = 23;
     */
    value: UICreateNewRoleClickEvent;
    case: "uiCreateNewRoleClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UICreateNewRoleSaveClickEvent ui_create_new_role_save_click = 24;
     */
    value: UICreateNewRoleSaveClickEvent;
    case: "uiCreateNewRoleSaveClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UICreateNewRoleCancelClickEvent ui_create_new_role_cancel_click = 25;
     */
    value: UICreateNewRoleCancelClickEvent;
    case: "uiCreateNewRoleCancelClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UICreateNewRoleViewDocumentationClickEvent ui_create_new_role_view_documentation_click = 26;
     */
    value: UICreateNewRoleViewDocumentationClickEvent;
    case: "uiCreateNewRoleViewDocumentationClick";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverIntegrationAWSOIDCConnectEvent ui_discover_integration_aws_oidc_connect_event = 27;
     */
    value: UIDiscoverIntegrationAWSOIDCConnectEvent;
    case: "uiDiscoverIntegrationAwsOidcConnectEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverDatabaseRDSEnrollEvent ui_discover_database_rds_enroll_event = 28;
     */
    value: UIDiscoverDatabaseRDSEnrollEvent;
    case: "uiDiscoverDatabaseRdsEnrollEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UICallToActionClickEvent ui_call_to_action_click_event = 29;
     */
    value: UICallToActionClickEvent;
    case: "uiCallToActionClickEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AssistCompletionEvent assist_completion = 30;
     */
    value: AssistCompletionEvent;
    case: "assistCompletion";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIIntegrationEnrollStartEvent ui_integration_enroll_start_event = 31;
     */
    value: UIIntegrationEnrollStartEvent;
    case: "uiIntegrationEnrollStartEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIIntegrationEnrollCompleteEvent ui_integration_enroll_complete_event = 32;
     */
    value: UIIntegrationEnrollCompleteEvent;
    case: "uiIntegrationEnrollCompleteEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIOnboardQuestionnaireSubmitEvent ui_onboard_questionnaire_submit = 33;
     */
    value: UIOnboardQuestionnaireSubmitEvent;
    case: "uiOnboardQuestionnaireSubmit";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AssistExecutionEvent assist_execution = 34;
     */
    value: AssistExecutionEvent;
    case: "assistExecution";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AssistNewConversationEvent assist_new_conversation = 35;
     */
    value: AssistNewConversationEvent;
    case: "assistNewConversation";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.ResourceCreateEvent resource_create_event = 36;
     */
    value: ResourceCreateEvent;
    case: "resourceCreateEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.FeatureRecommendationEvent feature_recommendation_event = 37;
     */
    value: FeatureRecommendationEvent;
    case: "featureRecommendationEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AssistAccessRequest assist_access_request = 38;
     */
    value: AssistAccessRequest;
    case: "assistAccessRequest";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AssistAction assist_action = 39;
     */
    value: AssistAction;
    case: "assistAction";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessListCreate access_list_create = 40;
     */
    value: AccessListCreate;
    case: "accessListCreate";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessListUpdate access_list_update = 41;
     */
    value: AccessListUpdate;
    case: "accessListUpdate";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessListDelete access_list_delete = 42;
     */
    value: AccessListDelete;
    case: "accessListDelete";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessListMemberCreate access_list_member_create = 43;
     */
    value: AccessListMemberCreate;
    case: "accessListMemberCreate";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessListMemberUpdate access_list_member_update = 44;
     */
    value: AccessListMemberUpdate;
    case: "accessListMemberUpdate";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessListMemberDelete access_list_member_delete = 45;
     */
    value: AccessListMemberDelete;
    case: "accessListMemberDelete";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessListGrantsToUser access_list_grants_to_user = 46;
     */
    value: AccessListGrantsToUser;
    case: "accessListGrantsToUser";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverEC2InstanceSelectionEvent ui_discover_ec2_instance_selection = 47;
     */
    value: UIDiscoverEC2InstanceSelectionEvent;
    case: "uiDiscoverEc2InstanceSelection";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverDeployEICEEvent ui_discover_deploy_eice = 48;
     */
    value: UIDiscoverDeployEICEEvent;
    case: "uiDiscoverDeployEice";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverCreateNodeEvent ui_discover_create_node = 49;
     */
    value: UIDiscoverCreateNodeEvent;
    case: "uiDiscoverCreateNode";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.TAGExecuteQueryEvent tag_execute_query = 50;
     */
    value: TAGExecuteQueryEvent;
    case: "tagExecuteQuery";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.SecurityReportGetResultEvent security_report_get_result = 51;
     */
    value: SecurityReportGetResultEvent;
    case: "securityReportGetResult";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessListReviewCreate access_list_review_create = 52;
     */
    value: AccessListReviewCreate;
    case: "accessListReviewCreate";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessListReviewDelete access_list_review_delete = 53;
     */
    value: AccessListReviewDelete;
    case: "accessListReviewDelete";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.DiscoveryFetchEvent discovery_fetch_event = 54;
     */
    value: DiscoveryFetchEvent;
    case: "discoveryFetchEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverCreateDiscoveryConfigEvent ui_discover_create_discovery_config = 55;
     */
    value: UIDiscoverCreateDiscoveryConfigEvent;
    case: "uiDiscoverCreateDiscoveryConfig";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverKubeEKSEnrollEvent ui_discover_kube_eks_enroll_event = 56;
     */
    value: UIDiscoverKubeEKSEnrollEvent;
    case: "uiDiscoverKubeEksEnrollEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIDiscoverCreateAppServerEvent ui_discover_create_app_server_event = 57;
     */
    value: UIDiscoverCreateAppServerEvent;
    case: "uiDiscoverCreateAppServerEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.AccessGraphAWSScanEvent access_graph_aws_scan_event = 58;
     */
    value: AccessGraphAWSScanEvent;
    case: "accessGraphAwsScanEvent";
  } | {
    /**
     * @generated from field: teleport.usageevents.v1.UIAccessGraphCrownJewelDiffViewEvent ui_access_graph_crown_jewel_diff_view = 59;
     */
    value: UIAccessGraphCrownJewelDiffViewEvent;
    case: "uiAccessGraphCrownJewelDiffView";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message teleport.usageevents.v1.UsageEventOneOf.
 * Use `create(UsageEventOneOfSchema)` to create a new message.
 */
export const UsageEventOneOfSchema: GenMessage<UsageEventOneOf> = /*@__PURE__*/
  messageDesc(file_teleport_usageevents_v1_usageevents, 64);

/**
 * DiscoverResource represents a resource type.
 *
 * @generated from enum teleport.usageevents.v1.DiscoverResource
 */
export enum DiscoverResource {
  /**
   * @generated from enum value: DISCOVER_RESOURCE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_SERVER = 1;
   */
  SERVER = 1,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_KUBERNETES = 2;
   */
  KUBERNETES = 2,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_SELF_HOSTED = 3;
   */
  DATABASE_POSTGRES_SELF_HOSTED = 3,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_SELF_HOSTED = 4;
   */
  DATABASE_MYSQL_SELF_HOSTED = 4,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MONGODB_SELF_HOSTED = 5;
   */
  DATABASE_MONGODB_SELF_HOSTED = 5,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_RDS = 6;
   */
  DATABASE_POSTGRES_RDS = 6,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_RDS = 7;
   */
  DATABASE_MYSQL_RDS = 7,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_APPLICATION_HTTP = 8;
   */
  APPLICATION_HTTP = 8,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_APPLICATION_TCP = 9;
   */
  APPLICATION_TCP = 9,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_WINDOWS_DESKTOP = 10;
   */
  WINDOWS_DESKTOP = 10,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_RDS = 11;
   */
  DATABASE_SQLSERVER_RDS = 11,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT = 12;
   */
  DATABASE_POSTGRES_REDSHIFT = 12,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_SELF_HOSTED = 13;
   */
  DATABASE_SQLSERVER_SELF_HOSTED = 13,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_SELF_HOSTED = 14;
   */
  DATABASE_REDIS_SELF_HOSTED = 14,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_GCP = 15;
   */
  DATABASE_POSTGRES_GCP = 15,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_GCP = 16;
   */
  DATABASE_MYSQL_GCP = 16,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_GCP = 17;
   */
  DATABASE_SQLSERVER_GCP = 17,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT_SERVERLESS = 18;
   */
  DATABASE_POSTGRES_REDSHIFT_SERVERLESS = 18,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_AZURE = 19;
   */
  DATABASE_POSTGRES_AZURE = 19,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_DYNAMODB = 20;
   */
  DATABASE_DYNAMODB = 20,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_CASSANDRA_KEYSPACES = 21;
   */
  DATABASE_CASSANDRA_KEYSPACES = 21,

  /**
   * Cassandra & ScyllaDb
   *
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_CASSANDRA_SELF_HOSTED = 22;
   */
  DATABASE_CASSANDRA_SELF_HOSTED = 22,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_ELASTICSEARCH_SELF_HOSTED = 23;
   */
  DATABASE_ELASTICSEARCH_SELF_HOSTED = 23,

  /**
   * Elasticache & MemoryDb
   *
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_ELASTICACHE = 24;
   */
  DATABASE_REDIS_ELASTICACHE = 24,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_MEMORYDB = 25;
   */
  DATABASE_REDIS_MEMORYDB = 25,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_AZURE_CACHE = 26;
   */
  DATABASE_REDIS_AZURE_CACHE = 26,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_REDIS_CLUSTER_SELF_HOSTED = 27;
   */
  DATABASE_REDIS_CLUSTER_SELF_HOSTED = 27,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_AZURE = 28;
   */
  DATABASE_MYSQL_AZURE = 28,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_AZURE = 29;
   */
  DATABASE_SQLSERVER_AZURE = 29,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_MICROSOFT = 30;
   */
  DATABASE_SQLSERVER_MICROSOFT = 30,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_COCKROACHDB_SELF_HOSTED = 31;
   */
  DATABASE_COCKROACHDB_SELF_HOSTED = 31,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_MONGODB_ATLAS = 32;
   */
  DATABASE_MONGODB_ATLAS = 32,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DATABASE_SNOWFLAKE = 33;
   */
  DATABASE_SNOWFLAKE = 33,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DOC_DATABASE_RDS_PROXY = 34;
   */
  DOC_DATABASE_RDS_PROXY = 34,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DOC_DATABASE_HIGH_AVAILABILITY = 35;
   */
  DOC_DATABASE_HIGH_AVAILABILITY = 35,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DOC_DATABASE_DYNAMIC_REGISTRATION = 36;
   */
  DOC_DATABASE_DYNAMIC_REGISTRATION = 36,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_SAML_APPLICATION = 37;
   */
  SAML_APPLICATION = 37,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_EC2_INSTANCE = 38;
   */
  EC2_INSTANCE = 38,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_DOC_WINDOWS_DESKTOP_NON_AD = 39;
   */
  DOC_WINDOWS_DESKTOP_NON_AD = 39,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_KUBERNETES_EKS = 40;
   */
  KUBERNETES_EKS = 40,

  /**
   * @generated from enum value: DISCOVER_RESOURCE_APPLICATION_AWS_CONSOLE = 41;
   */
  APPLICATION_AWS_CONSOLE = 41,
}

/**
 * Describes the enum teleport.usageevents.v1.DiscoverResource.
 */
export const DiscoverResourceSchema: GenEnum<DiscoverResource> = /*@__PURE__*/
  enumDesc(file_teleport_usageevents_v1_usageevents, 0);

/**
 * DiscoverStatus represents a Discover Step outcome.
 *
 * @generated from enum teleport.usageevents.v1.DiscoverStatus
 */
export enum DiscoverStatus {
  /**
   * @generated from enum value: DISCOVER_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The user tried to complete the action and it succeeded.
   *
   * @generated from enum value: DISCOVER_STATUS_SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * The system skipped the step.
   * For example:
   * When setting up a Database and there's already a Database Service proxying the DB.
   * In this case the Database Agent installation is skipped.
   *
   * @generated from enum value: DISCOVER_STATUS_SKIPPED = 2;
   */
  SKIPPED = 2,

  /**
   * The user tried to complete the action and it failed.
   *
   * @generated from enum value: DISCOVER_STATUS_ERROR = 3;
   */
  ERROR = 3,

  /**
   * The user did not complete the action and left the wizard.
   *
   * @generated from enum value: DISCOVER_STATUS_ABORTED = 4;
   */
  ABORTED = 4,
}

/**
 * Describes the enum teleport.usageevents.v1.DiscoverStatus.
 */
export const DiscoverStatusSchema: GenEnum<DiscoverStatus> = /*@__PURE__*/
  enumDesc(file_teleport_usageevents_v1_usageevents, 1);

/**
 * CTA represents teleport web UI's call to action buttons.
 * We can't use prehog.v1alpha.CTA here because AuthService (and thus this file)
 * is generated with gogofast, so we just copy the enum definition here instead.
 * Make sure you update both.
 *
 * @generated from enum teleport.usageevents.v1.CTA
 */
export enum CTA {
  /**
   * @generated from enum value: CTA_UNSPECIFIED = 0;
   */
  CTA_UNSPECIFIED = 0,

  /**
   * @generated from enum value: CTA_AUTH_CONNECTOR = 1;
   */
  CTA_AUTH_CONNECTOR = 1,

  /**
   * @generated from enum value: CTA_ACTIVE_SESSIONS = 2;
   */
  CTA_ACTIVE_SESSIONS = 2,

  /**
   * @generated from enum value: CTA_ACCESS_REQUESTS = 3;
   */
  CTA_ACCESS_REQUESTS = 3,

  /**
   * @generated from enum value: CTA_PREMIUM_SUPPORT = 4;
   */
  CTA_PREMIUM_SUPPORT = 4,

  /**
   * @generated from enum value: CTA_TRUSTED_DEVICES = 5;
   */
  CTA_TRUSTED_DEVICES = 5,

  /**
   * @generated from enum value: CTA_UPGRADE_BANNER = 6;
   */
  CTA_UPGRADE_BANNER = 6,

  /**
   * @generated from enum value: CTA_BILLING_SUMMARY = 7;
   */
  CTA_BILLING_SUMMARY = 7,

  /**
   * @generated from enum value: CTA_ACCESS_LIST = 8;
   */
  CTA_ACCESS_LIST = 8,

  /**
   * @generated from enum value: CTA_ACCESS_MONITORING = 9;
   */
  CTA_ACCESS_MONITORING = 9,

  /**
   * @generated from enum value: CTA_EXTERNAL_AUDIT_STORAGE = 10;
   */
  CTA_EXTERNAL_AUDIT_STORAGE = 10,

  /**
   * @generated from enum value: CTA_OKTA_USER_SYNC = 11;
   */
  CTA_OKTA_USER_SYNC = 11,

  /**
   * @generated from enum value: CTA_ENTRA_ID = 12;
   */
  CTA_ENTRA_ID = 12,
}

/**
 * Describes the enum teleport.usageevents.v1.CTA.
 */
export const CTASchema: GenEnum<CTA> = /*@__PURE__*/
  enumDesc(file_teleport_usageevents_v1_usageevents, 2);

/**
 * IntegrationEnrollKind represents the types of integration that
 * can be enrolled.
 *
 * @generated from enum teleport.usageevents.v1.IntegrationEnrollKind
 */
export enum IntegrationEnrollKind {
  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_SLACK = 1;
   */
  SLACK = 1,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_AWS_OIDC = 2;
   */
  AWS_OIDC = 2,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_PAGERDUTY = 3;
   */
  PAGERDUTY = 3,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_EMAIL = 4;
   */
  EMAIL = 4,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_JIRA = 5;
   */
  JIRA = 5,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_DISCORD = 6;
   */
  DISCORD = 6,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MATTERMOST = 7;
   */
  MATTERMOST = 7,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MS_TEAMS = 8;
   */
  MS_TEAMS = 8,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_OPSGENIE = 9;
   */
  OPSGENIE = 9,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_OKTA = 10;
   */
  OKTA = 10,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_JAMF = 11;
   */
  JAMF = 11,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID = 12;
   */
  MACHINE_ID = 12,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_GITHUB_ACTIONS = 13;
   */
  MACHINE_ID_GITHUB_ACTIONS = 13,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_CIRCLECI = 14;
   */
  MACHINE_ID_CIRCLECI = 14,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_GITLAB = 15;
   */
  MACHINE_ID_GITLAB = 15,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_JENKINS = 16;
   */
  MACHINE_ID_JENKINS = 16,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_ANSIBLE = 17;
   */
  MACHINE_ID_ANSIBLE = 17,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_SERVICENOW = 18;
   */
  SERVICENOW = 18,

  /**
   * @generated from enum value: INTEGRATION_ENROLL_KIND_ENTRA_ID = 19;
   */
  ENTRA_ID = 19,
}

/**
 * Describes the enum teleport.usageevents.v1.IntegrationEnrollKind.
 */
export const IntegrationEnrollKindSchema: GenEnum<IntegrationEnrollKind> = /*@__PURE__*/
  enumDesc(file_teleport_usageevents_v1_usageevents, 3);

/**
 * Feature is name of Teleport feature
 *
 * @generated from enum teleport.usageevents.v1.Feature
 */
export enum Feature {
  /**
   * @generated from enum value: FEATURE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FEATURE_TRUSTED_DEVICES = 1;
   */
  TRUSTED_DEVICES = 1,
}

/**
 * Describes the enum teleport.usageevents.v1.Feature.
 */
export const FeatureSchema: GenEnum<Feature> = /*@__PURE__*/
  enumDesc(file_teleport_usageevents_v1_usageevents, 4);

/**
 * FeatureRecommendationStatus is feature recommendation status.
 *
 * @generated from enum teleport.usageevents.v1.FeatureRecommendationStatus
 */
export enum FeatureRecommendationStatus {
  /**
   * @generated from enum value: FEATURE_RECOMMENDATION_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * FEATURE_RECOMMENDATION_STATUS_NOTIFIED is emitted when a feature is recommended (notified in UI) to user.
   *
   * @generated from enum value: FEATURE_RECOMMENDATION_STATUS_NOTIFIED = 1;
   */
  NOTIFIED = 1,

  /**
   * FEATURE_RECOMMENDATION_STATUS_DONE is emitted when user completes the desired CTA.
   *
   * @generated from enum value: FEATURE_RECOMMENDATION_STATUS_DONE = 2;
   */
  DONE = 2,
}

/**
 * Describes the enum teleport.usageevents.v1.FeatureRecommendationStatus.
 */
export const FeatureRecommendationStatusSchema: GenEnum<FeatureRecommendationStatus> = /*@__PURE__*/
  enumDesc(file_teleport_usageevents_v1_usageevents, 5);

