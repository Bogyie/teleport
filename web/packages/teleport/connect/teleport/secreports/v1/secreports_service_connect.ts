// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file teleport/secreports/v1/secreports_service.proto (package teleport.secreports.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { DeleteAuditQueryRequest, DeleteReportRequest, GetAuditQueryRequest, GetAuditQueryResultRequest, GetAuditQueryResultResponse, GetReportRequest, GetReportResultRequest, GetReportResultResponse, GetReportStateRequest, GetSchemaRequest, GetSchemaResponse, ListAuditQueriesRequest, ListAuditQueriesResponse, ListReportsRequest, ListReportsResponse, RunAuditQueryRequest, RunAuditQueryResponse, RunReportRequest, UpsertAuditQueryRequest, UpsertReportRequest } from "./secreports_service_pb.js";
import { Empty, MethodKind } from "@bufbuild/protobuf";
import { AuditQuery, Report, ReportState } from "./secreports_pb.js";

/**
 * SecReportsService is a service that manages security reports.
 *
 * @generated from service teleport.secreports.v1.SecReportsService
 */
export const SecReportsService = {
  typeName: "teleport.secreports.v1.SecReportsService",
  methods: {
    /**
     * UpsertAuditQuery upsets an audit query.
     *
     * @generated from rpc teleport.secreports.v1.SecReportsService.UpsertAuditQuery
     */
    upsertAuditQuery: {
      name: "UpsertAuditQuery",
      I: UpsertAuditQueryRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetAuditQuery returns an audit query.
     *
     * @generated from rpc teleport.secreports.v1.SecReportsService.GetAuditQuery
     */
    getAuditQuery: {
      name: "GetAuditQuery",
      I: GetAuditQueryRequest,
      O: AuditQuery,
      kind: MethodKind.Unary,
    },
    /**
     * ListAuditQueries returns a paginated list of all Okta import rule resources.
     *
     * @generated from rpc teleport.secreports.v1.SecReportsService.ListAuditQueries
     */
    listAuditQueries: {
      name: "ListAuditQueries",
      I: ListAuditQueriesRequest,
      O: ListAuditQueriesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAuditQuery deletes an audit query.
     *
     * @generated from rpc teleport.secreports.v1.SecReportsService.DeleteAuditQuery
     */
    deleteAuditQuery: {
      name: "DeleteAuditQuery",
      I: DeleteAuditQueryRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertReport upsets a report.
     *
     * @generated from rpc teleport.secreports.v1.SecReportsService.UpsertReport
     */
    upsertReport: {
      name: "UpsertReport",
      I: UpsertReportRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetReport returns a report.
     *
     * @generated from rpc teleport.secreports.v1.SecReportsService.GetReport
     */
    getReport: {
      name: "GetReport",
      I: GetReportRequest,
      O: Report,
      kind: MethodKind.Unary,
    },
    /**
     * ListReports returns a paginated list of all Okta import rule resources.
     *
     * @generated from rpc teleport.secreports.v1.SecReportsService.ListReports
     */
    listReports: {
      name: "ListReports",
      I: ListReportsRequest,
      O: ListReportsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteReport deletes a security report.
     *
     * @generated from rpc teleport.secreports.v1.SecReportsService.DeleteReport
     */
    deleteReport: {
      name: "DeleteReport",
      I: DeleteReportRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * RunAuditQuery runs an audit query.
     *
     * @generated from rpc teleport.secreports.v1.SecReportsService.RunAuditQuery
     */
    runAuditQuery: {
      name: "RunAuditQuery",
      I: RunAuditQueryRequest,
      O: RunAuditQueryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetAuditQueryResult returns an audit query result.
     *
     * @generated from rpc teleport.secreports.v1.SecReportsService.GetAuditQueryResult
     */
    getAuditQueryResult: {
      name: "GetAuditQueryResult",
      I: GetAuditQueryResultRequest,
      O: GetAuditQueryResultResponse,
      kind: MethodKind.Unary,
    },
    /**
     * RunReport runs a security report.
     *
     * @generated from rpc teleport.secreports.v1.SecReportsService.RunReport
     */
    runReport: {
      name: "RunReport",
      I: RunReportRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetReportResult returns a security report result.
     *
     * @generated from rpc teleport.secreports.v1.SecReportsService.GetReportResult
     */
    getReportResult: {
      name: "GetReportResult",
      I: GetReportResultRequest,
      O: GetReportResultResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetReportState returns a security report state.
     *
     * @generated from rpc teleport.secreports.v1.SecReportsService.GetReportState
     */
    getReportState: {
      name: "GetReportState",
      I: GetReportStateRequest,
      O: ReportState,
      kind: MethodKind.Unary,
    },
    /**
     * GetSchema returns a schema of audit query.
     *
     * @generated from rpc teleport.secreports.v1.SecReportsService.GetSchema
     */
    getSchema: {
      name: "GetSchema",
      I: GetSchemaRequest,
      O: GetSchemaResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

