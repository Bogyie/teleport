// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/access_graph/v1/authorized_key.proto (package teleport.access_graph.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Metadata } from "../../header/v1/metadata_pb";
import { file_teleport_header_v1_metadata } from "../../header/v1/metadata_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/access_graph/v1/authorized_key.proto.
 */
export const file_teleport_access_graph_v1_authorized_key: GenFile = /*@__PURE__*/
  fileDesc("Ci10ZWxlcG9ydC9hY2Nlc3NfZ3JhcGgvdjEvYXV0aG9yaXplZF9rZXkucHJvdG8SGHRlbGVwb3J0LmFjY2Vzc19ncmFwaC52MSKrAQoNQXV0aG9yaXplZEtleRIuCghtZXRhZGF0YRgBIAEoCzIcLnRlbGVwb3J0LmhlYWRlci52MS5NZXRhZGF0YRIMCgRraW5kGAIgASgJEhAKCHN1Yl9raW5kGAMgASgJEg8KB3ZlcnNpb24YBCABKAkSOQoEc3BlYxgFIAEoCzIrLnRlbGVwb3J0LmFjY2Vzc19ncmFwaC52MS5BdXRob3JpemVkS2V5U3BlYyJ3ChFBdXRob3JpemVkS2V5U3BlYxIPCgdob3N0X2lkGAEgASgJEhcKD2tleV9maW5nZXJwcmludBgCIAEoCRIRCglob3N0X3VzZXIYAyABKAkSEwoLa2V5X2NvbW1lbnQYBCABKAkSEAoIa2V5X3R5cGUYBSABKAlCWlpYZ2l0aHViLmNvbS9ncmF2aXRhdGlvbmFsL3RlbGVwb3J0L2FwaS9nZW4vcHJvdG8vZ28vdGVsZXBvcnQvYWNjZXNzZ3JhcGgvdjE7YWNjZXNzZ3JhcGh2MWIGcHJvdG8z", [file_teleport_header_v1_metadata]);

/**
 * The `AuthorizedKey` message represents an authorized key entry for a specific local user.
 * These authorized keys are generated by the server when a particular SSH AuthorizedKey is granted access to a user on the node.
 *
 * @generated from message teleport.access_graph.v1.AuthorizedKey
 */
export type AuthorizedKey = Message<"teleport.access_graph.v1.AuthorizedKey"> & {
  /**
   * metadata is the AuthorizedKey's metadata.
   *
   * @generated from field: teleport.header.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * kind is a resource kind.
   *
   * @generated from field: string kind = 2;
   */
  kind: string;

  /**
   * sub_kind is an optional resource sub kind, used in some resources.
   *
   * @generated from field: string sub_kind = 3;
   */
  subKind: string;

  /**
   * version is version.
   *
   * @generated from field: string version = 4;
   */
  version: string;

  /**
   * Spec is an AuthorizedKey specification.
   *
   * @generated from field: teleport.access_graph.v1.AuthorizedKeySpec spec = 5;
   */
  spec?: AuthorizedKeySpec;
};

/**
 * Describes the message teleport.access_graph.v1.AuthorizedKey.
 * Use `create(AuthorizedKeySchema)` to create a new message.
 */
export const AuthorizedKeySchema: GenMessage<AuthorizedKey> = /*@__PURE__*/
  messageDesc(file_teleport_access_graph_v1_authorized_key, 0);

/**
 * AuthorizedKeySpec is the authorized key spec.
 *
 * @generated from message teleport.access_graph.v1.AuthorizedKeySpec
 */
export type AuthorizedKeySpec = Message<"teleport.access_graph.v1.AuthorizedKeySpec"> & {
  /**
   * host_id is the node identifier and must match the credentials used.
   *
   * @generated from field: string host_id = 1;
   */
  hostId: string;

  /**
   * key_fingerprint is the SHA256 SSH public key fingerprint.
   *
   * @generated from field: string key_fingerprint = 2;
   */
  keyFingerprint: string;

  /**
   * host_user is the user who can be accessed using the fingerprint above.
   *
   * @generated from field: string host_user = 3;
   */
  hostUser: string;

  /**
   * key_comment is the authorized key's comment.
   * Authorized keys consist of the following space-separated fields:
   * options, keytype, base64-encoded key, comment.  The options field is optional.
   *
   * @generated from field: string key_comment = 4;
   */
  keyComment: string;

  /**
   * key_type is the ssh's key type.
   *
   * @generated from field: string key_type = 5;
   */
  keyType: string;
};

/**
 * Describes the message teleport.access_graph.v1.AuthorizedKeySpec.
 * Use `create(AuthorizedKeySpecSchema)` to create a new message.
 */
export const AuthorizedKeySpecSchema: GenMessage<AuthorizedKeySpec> = /*@__PURE__*/
  messageDesc(file_teleport_access_graph_v1_authorized_key, 1);

