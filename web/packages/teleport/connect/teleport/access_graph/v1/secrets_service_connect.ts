// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file teleport/access_graph/v1/secrets_service.proto (package teleport.access_graph.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ReportAuthorizedKeysRequest, ReportAuthorizedKeysResponse, ReportSecretsRequest, ReportSecretsResponse } from "./secrets_service_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * SecretsScannerService provides methods for Access Graph Secret Scanner functionality.
 *
 * @generated from service teleport.access_graph.v1.SecretsScannerService
 */
export const SecretsScannerService = {
  typeName: "teleport.access_graph.v1.SecretsScannerService",
  methods: {
    /**
     * ReportAuthorizedKeys is used by Teleport SSH nodes to report authorized keys
     * that could be used to bypass Teleport.
     * The client (Teleport SSH Node) should authenticate using the certificate-key pair signed by Teleport HostCA.
     *
     * @generated from rpc teleport.access_graph.v1.SecretsScannerService.ReportAuthorizedKeys
     */
    reportAuthorizedKeys: {
      name: "ReportAuthorizedKeys",
      I: ReportAuthorizedKeysRequest,
      O: ReportAuthorizedKeysResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * ReportSecrets is used by trusted devices to report secrets found on the host that could be used to bypass Teleport.
     * The client (device) should first authenticate using the [ReportSecretsRequest.device_assertion] flow. Please refer to
     * the [teleport.devicetrust.v1.AssertDeviceRequest] and [teleport.devicetrust.v1.AssertDeviceResponse] messages for more details.
     *
     * Once the device is asserted, the client can send the secrets using the [ReportSecretsRequest.private_keys] field
     * and then close the client side of the stream.
     *
     * -> ReportSecrets (client) [1 or more]
     * -> CloseStream (client)
     * <- TerminateStream (server)
     *
     * Any failure in the assertion ceremony will result in the stream being terminated by the server. All secrets
     * reported by the client before the assertion terminates will be ignored and result in the stream being terminated.
     *
     * @generated from rpc teleport.access_graph.v1.SecretsScannerService.ReportSecrets
     */
    reportSecrets: {
      name: "ReportSecrets",
      I: ReportSecretsRequest,
      O: ReportSecretsResponse,
      kind: MethodKind.BiDiStreaming,
    },
  }
} as const;

