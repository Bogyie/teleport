// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file teleport/users/v1/users_service.proto (package teleport.users.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateUserRequest, CreateUserResponse, DeleteUserRequest, GetUserRequest, GetUserResponse, ListUsersRequest, ListUsersResponse, UpdateUserRequest, UpdateUserResponse, UpsertUserRequest, UpsertUserResponse } from "./users_service_pb.js";
import { Empty, MethodKind } from "@bufbuild/protobuf";

/**
 * UsersService provides methods to manage Teleport users.
 *
 * @generated from service teleport.users.v1.UsersService
 */
export const UsersService = {
  typeName: "teleport.users.v1.UsersService",
  methods: {
    /**
     * GetUser retrieves a user by name or looks up the current user if requested.
     *
     * @generated from rpc teleport.users.v1.UsersService.GetUser
     */
    getUser: {
      name: "GetUser",
      I: GetUserRequest,
      O: GetUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListUsers gets all existing users.
     *
     * @generated from rpc teleport.users.v1.UsersService.ListUsers
     */
    listUsers: {
      name: "ListUsers",
      I: ListUsersRequest,
      O: ListUsersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateUser creates a user if one does not already exist.
     *
     * @generated from rpc teleport.users.v1.UsersService.CreateUser
     */
    createUser: {
      name: "CreateUser",
      I: CreateUserRequest,
      O: CreateUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateUser updates an existing user.
     *
     * @generated from rpc teleport.users.v1.UsersService.UpdateUser
     */
    updateUser: {
      name: "UpdateUser",
      I: UpdateUserRequest,
      O: UpdateUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertUser creates a new user or forcefully updates an existing user.
     *
     * @generated from rpc teleport.users.v1.UsersService.UpsertUser
     */
    upsertUser: {
      name: "UpsertUser",
      I: UpsertUserRequest,
      O: UpsertUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteUser removes an existing user by name.
     *
     * @generated from rpc teleport.users.v1.UsersService.DeleteUser
     */
    deleteUser: {
      name: "DeleteUser",
      I: DeleteUserRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
  }
} as const;

