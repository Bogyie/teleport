// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/integration/v1/awsoidc_service.proto (package teleport.integration.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { DatabaseV3, ServerV2 } from "../../legacy/types/types_pb";
import { file_teleport_legacy_types_types } from "../../legacy/types/types_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/integration/v1/awsoidc_service.proto.
 */
export const file_teleport_integration_v1_awsoidc_service: GenFile = /*@__PURE__*/
  fileDesc("Ci10ZWxlcG9ydC9pbnRlZ3JhdGlvbi92MS9hd3NvaWRjX3NlcnZpY2UucHJvdG8SF3RlbGVwb3J0LmludGVncmF0aW9uLnYxIlsKD0xpc3RFSUNFUmVxdWVzdBITCgtpbnRlZ3JhdGlvbhgBIAEoCRIOCgZyZWdpb24YAiABKAkSDwoHdnBjX2lkcxgDIAMoCRISCgpuZXh0X3Rva2VuGAQgASgJIosBChpFQzJJbnN0YW5jZUNvbm5lY3RFbmRwb2ludBIMCgRuYW1lGAEgASgJEg0KBXN0YXRlGAIgASgJEhUKDXN0YXRlX21lc3NhZ2UYAyABKAkSFgoOZGFzaGJvYXJkX2xpbmsYBCABKAkSEQoJc3VibmV0X2lkGAUgASgJEg4KBnZwY19pZBgGIAEoCSKEAQoQTGlzdEVJQ0VSZXNwb25zZRJECgdlYzJpY2VzGAEgAygLMjMudGVsZXBvcnQuaW50ZWdyYXRpb24udjEuRUMySW5zdGFuY2VDb25uZWN0RW5kcG9pbnQSFgoOZGFzaGJvYXJkX2xpbmsYAiABKAkSEgoKbmV4dF90b2tlbhgDIAEoCSJzChFDcmVhdGVFSUNFUmVxdWVzdBITCgtpbnRlZ3JhdGlvbhgBIAEoCRIOCgZyZWdpb24YAiABKAkSOQoJZW5kcG9pbnRzGAMgAygLMiYudGVsZXBvcnQuaW50ZWdyYXRpb24udjEuRUMySUNFbmRwb2ludCJMCg1FQzJJQ0VuZHBvaW50EgwKBG5hbWUYASABKAkSEQoJc3VibmV0X2lkGAIgASgJEhoKEnNlY3VyaXR5X2dyb3VwX2lkcxgDIAMoCSJlChJDcmVhdGVFSUNFUmVzcG9uc2USDAoEbmFtZRgBIAEoCRJBChFjcmVhdGVkX2VuZHBvaW50cxgCIAMoCzImLnRlbGVwb3J0LmludGVncmF0aW9uLnYxLkVDMklDRW5kcG9pbnQiggEKFExpc3REYXRhYmFzZXNSZXF1ZXN0EhMKC2ludGVncmF0aW9uGAEgASgJEg4KBnJlZ2lvbhgCIAEoCRIQCghyZHNfdHlwZRgDIAEoCRIPCgdlbmdpbmVzGAQgAygJEhIKCm5leHRfdG9rZW4YBSABKAkSDgoGdnBjX2lkGAYgASgJIlEKFUxpc3REYXRhYmFzZXNSZXNwb25zZRIkCglkYXRhYmFzZXMYASADKAsyES50eXBlcy5EYXRhYmFzZVYzEhIKCm5leHRfdG9rZW4YAiABKAkiZAoZTGlzdFNlY3VyaXR5R3JvdXBzUmVxdWVzdBITCgtpbnRlZ3JhdGlvbhgBIAEoCRIOCgZyZWdpb24YAiABKAkSDgoGdnBjX2lkGAMgASgJEhIKCm5leHRfdG9rZW4YBCABKAkiOgoVU2VjdXJpdHlHcm91cFJ1bGVDSURSEgwKBGNpZHIYASABKAkSEwoLZGVzY3JpcHRpb24YAiABKAkiiwEKEVNlY3VyaXR5R3JvdXBSdWxlEhMKC2lwX3Byb3RvY29sGAEgASgJEhEKCWZyb21fcG9ydBgCIAEoBRIPCgd0b19wb3J0GAMgASgFEj0KBWNpZHJzGAQgAygLMi4udGVsZXBvcnQuaW50ZWdyYXRpb24udjEuU2VjdXJpdHlHcm91cFJ1bGVDSURSIsUBCg1TZWN1cml0eUdyb3VwEgwKBG5hbWUYASABKAkSCgoCaWQYAiABKAkSEwoLZGVzY3JpcHRpb24YAyABKAkSQQoNaW5ib3VuZF9ydWxlcxgEIAMoCzIqLnRlbGVwb3J0LmludGVncmF0aW9uLnYxLlNlY3VyaXR5R3JvdXBSdWxlEkIKDm91dGJvdW5kX3J1bGVzGAUgAygLMioudGVsZXBvcnQuaW50ZWdyYXRpb24udjEuU2VjdXJpdHlHcm91cFJ1bGUicQoaTGlzdFNlY3VyaXR5R3JvdXBzUmVzcG9uc2USPwoPc2VjdXJpdHlfZ3JvdXBzGAEgAygLMiYudGVsZXBvcnQuaW50ZWdyYXRpb24udjEuU2VjdXJpdHlHcm91cBISCgpuZXh0X3Rva2VuGAIgASgJIl0KEkxpc3RTdWJuZXRzUmVxdWVzdBITCgtpbnRlZ3JhdGlvbhgBIAEoCRIOCgZyZWdpb24YAiABKAkSDgoGdnBjX2lkGAMgASgJEhIKCm5leHRfdG9rZW4YBCABKAkiPQoGU3VibmV0EgwKBG5hbWUYASABKAkSCgoCaWQYAiABKAkSGQoRYXZhaWxhYmlsaXR5X3pvbmUYAyABKAkiWwoTTGlzdFN1Ym5ldHNSZXNwb25zZRIwCgdzdWJuZXRzGAEgAygLMh8udGVsZXBvcnQuaW50ZWdyYXRpb24udjEuU3VibmV0EhIKCm5leHRfdG9rZW4YAiABKAkiSgoPTGlzdFZQQ3NSZXF1ZXN0EhMKC2ludGVncmF0aW9uGAEgASgJEg4KBnJlZ2lvbhgCIAEoCRISCgpuZXh0X3Rva2VuGAMgASgJIh8KA1ZQQxIMCgRuYW1lGAEgASgJEgoKAmlkGAIgASgJIlIKEExpc3RWUENzUmVzcG9uc2USKgoEdnBjcxgBIAMoCzIcLnRlbGVwb3J0LmludGVncmF0aW9uLnYxLlZQQxISCgpuZXh0X3Rva2VuGAIgASgJIucBChxEZXBsb3lEYXRhYmFzZVNlcnZpY2VSZXF1ZXN0EhMKC2ludGVncmF0aW9uGAEgASgJEg4KBnJlZ2lvbhgCIAEoCRIVCg10YXNrX3JvbGVfYXJuGAMgASgJEhgKEHRlbGVwb3J0X3ZlcnNpb24YBCABKAkSIgoaZGVwbG95bWVudF9qb2luX3Rva2VuX25hbWUYBSABKAkSTQoLZGVwbG95bWVudHMYBiADKAsyOC50ZWxlcG9ydC5pbnRlZ3JhdGlvbi52MS5EZXBsb3lEYXRhYmFzZVNlcnZpY2VEZXBsb3ltZW50In4KH0RlcGxveURhdGFiYXNlU2VydmljZURlcGxveW1lbnQSHgoWdGVsZXBvcnRfY29uZmlnX3N0cmluZxgBIAEoCRIOCgZ2cGNfaWQYAiABKAkSEgoKc3VibmV0X2lkcxgDIAMoCRIXCg9zZWN1cml0eV9ncm91cHMYBCADKAkiUwodRGVwbG95RGF0YWJhc2VTZXJ2aWNlUmVzcG9uc2USEwoLY2x1c3Rlcl9hcm4YASABKAkSHQoVY2x1c3Rlcl9kYXNoYm9hcmRfdXJsGAIgASgJIvYBChREZXBsb3lTZXJ2aWNlUmVxdWVzdBITCgtpbnRlZ3JhdGlvbhgBIAEoCRIOCgZyZWdpb24YAiABKAkSFwoPZGVwbG95bWVudF9tb2RlGAMgASgJEhcKD3NlY3VyaXR5X2dyb3VwcxgEIAMoCRISCgpzdWJuZXRfaWRzGAUgAygJEhUKDXRhc2tfcm9sZV9hcm4YBiABKAkSGAoQdGVsZXBvcnRfdmVyc2lvbhgHIAEoCRIiChpkZXBsb3ltZW50X2pvaW5fdG9rZW5fbmFtZRgIIAEoCRIeChZ0ZWxlcG9ydF9jb25maWdfc3RyaW5nGAkgASgJIn0KFURlcGxveVNlcnZpY2VSZXNwb25zZRITCgtjbHVzdGVyX2FybhgBIAEoCRITCgtzZXJ2aWNlX2FybhgCIAEoCRIbChN0YXNrX2RlZmluaXRpb25fYXJuGAMgASgJEh0KFXNlcnZpY2VfZGFzaGJvYXJkX3VybBgEIAEoCSKPAQoYRW5yb2xsRUtTQ2x1c3RlcnNSZXF1ZXN0EhMKC2ludGVncmF0aW9uGAEgASgJEg4KBnJlZ2lvbhgCIAEoCRIZChFla3NfY2x1c3Rlcl9uYW1lcxgDIAMoCRIcChRlbmFibGVfYXBwX2Rpc2NvdmVyeRgEIAEoCBIVCg1hZ2VudF92ZXJzaW9uGAUgASgJIlYKFkVucm9sbEVLU0NsdXN0ZXJSZXN1bHQSGAoQZWtzX2NsdXN0ZXJfbmFtZRgBIAEoCRITCgtyZXNvdXJjZV9pZBgCIAEoCRINCgVlcnJvchgDIAEoCSJdChlFbnJvbGxFS1NDbHVzdGVyc1Jlc3BvbnNlEkAKB3Jlc3VsdHMYASADKAsyLy50ZWxlcG9ydC5pbnRlZ3JhdGlvbi52MS5FbnJvbGxFS1NDbHVzdGVyUmVzdWx0IkkKDkxpc3RFQzJSZXF1ZXN0EhMKC2ludGVncmF0aW9uGAEgASgJEg4KBnJlZ2lvbhgCIAEoCRISCgpuZXh0X3Rva2VuGAMgASgJIkcKD0xpc3RFQzJSZXNwb25zZRIgCgdzZXJ2ZXJzGAEgAygLMg8udHlwZXMuU2VydmVyVjISEgoKbmV4dF90b2tlbhgCIAEoCSJRChZMaXN0RUtTQ2x1c3RlcnNSZXF1ZXN0EhMKC2ludGVncmF0aW9uGAEgASgJEg4KBnJlZ2lvbhgCIAEoCRISCgpuZXh0X3Rva2VuGAMgASgJIrQCCgpFS1NDbHVzdGVyEgwKBG5hbWUYASABKAkSDgoGcmVnaW9uGAIgASgJEgsKA2FybhgDIAEoCRI/CgZsYWJlbHMYBCADKAsyLy50ZWxlcG9ydC5pbnRlZ3JhdGlvbi52MS5FS1NDbHVzdGVyLkxhYmVsc0VudHJ5EkgKC2pvaW5fbGFiZWxzGAUgAygLMjMudGVsZXBvcnQuaW50ZWdyYXRpb24udjEuRUtTQ2x1c3Rlci5Kb2luTGFiZWxzRW50cnkSDgoGc3RhdHVzGAYgASgJGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaMQoPSm9pbkxhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiZAoXTGlzdEVLU0NsdXN0ZXJzUmVzcG9uc2USNQoIY2x1c3RlcnMYASADKAsyIy50ZWxlcG9ydC5pbnRlZ3JhdGlvbi52MS5FS1NDbHVzdGVyEhIKCm5leHRfdG9rZW4YAiABKAkiIgoLUGluZ1JlcXVlc3QSEwoLaW50ZWdyYXRpb24YASABKAkiQAoMUGluZ1Jlc3BvbnNlEhIKCmFjY291bnRfaWQYASABKAkSCwoDYXJuGAIgASgJEg8KB3VzZXJfaWQYAyABKAkysAoKDkFXU09JRENTZXJ2aWNlEl8KCExpc3RFSUNFEigudGVsZXBvcnQuaW50ZWdyYXRpb24udjEuTGlzdEVJQ0VSZXF1ZXN0GikudGVsZXBvcnQuaW50ZWdyYXRpb24udjEuTGlzdEVJQ0VSZXNwb25zZRJlCgpDcmVhdGVFSUNFEioudGVsZXBvcnQuaW50ZWdyYXRpb24udjEuQ3JlYXRlRUlDRVJlcXVlc3QaKy50ZWxlcG9ydC5pbnRlZ3JhdGlvbi52MS5DcmVhdGVFSUNFUmVzcG9uc2USbgoNTGlzdERhdGFiYXNlcxItLnRlbGVwb3J0LmludGVncmF0aW9uLnYxLkxpc3REYXRhYmFzZXNSZXF1ZXN0Gi4udGVsZXBvcnQuaW50ZWdyYXRpb24udjEuTGlzdERhdGFiYXNlc1Jlc3BvbnNlEn0KEkxpc3RTZWN1cml0eUdyb3VwcxIyLnRlbGVwb3J0LmludGVncmF0aW9uLnYxLkxpc3RTZWN1cml0eUdyb3Vwc1JlcXVlc3QaMy50ZWxlcG9ydC5pbnRlZ3JhdGlvbi52MS5MaXN0U2VjdXJpdHlHcm91cHNSZXNwb25zZRJoCgtMaXN0U3VibmV0cxIrLnRlbGVwb3J0LmludGVncmF0aW9uLnYxLkxpc3RTdWJuZXRzUmVxdWVzdBosLnRlbGVwb3J0LmludGVncmF0aW9uLnYxLkxpc3RTdWJuZXRzUmVzcG9uc2USXwoITGlzdFZQQ3MSKC50ZWxlcG9ydC5pbnRlZ3JhdGlvbi52MS5MaXN0VlBDc1JlcXVlc3QaKS50ZWxlcG9ydC5pbnRlZ3JhdGlvbi52MS5MaXN0VlBDc1Jlc3BvbnNlEoYBChVEZXBsb3lEYXRhYmFzZVNlcnZpY2USNS50ZWxlcG9ydC5pbnRlZ3JhdGlvbi52MS5EZXBsb3lEYXRhYmFzZVNlcnZpY2VSZXF1ZXN0GjYudGVsZXBvcnQuaW50ZWdyYXRpb24udjEuRGVwbG95RGF0YWJhc2VTZXJ2aWNlUmVzcG9uc2USbgoNRGVwbG95U2VydmljZRItLnRlbGVwb3J0LmludGVncmF0aW9uLnYxLkRlcGxveVNlcnZpY2VSZXF1ZXN0Gi4udGVsZXBvcnQuaW50ZWdyYXRpb24udjEuRGVwbG95U2VydmljZVJlc3BvbnNlEnoKEUVucm9sbEVLU0NsdXN0ZXJzEjEudGVsZXBvcnQuaW50ZWdyYXRpb24udjEuRW5yb2xsRUtTQ2x1c3RlcnNSZXF1ZXN0GjIudGVsZXBvcnQuaW50ZWdyYXRpb24udjEuRW5yb2xsRUtTQ2x1c3RlcnNSZXNwb25zZRJcCgdMaXN0RUMyEicudGVsZXBvcnQuaW50ZWdyYXRpb24udjEuTGlzdEVDMlJlcXVlc3QaKC50ZWxlcG9ydC5pbnRlZ3JhdGlvbi52MS5MaXN0RUMyUmVzcG9uc2USdAoPTGlzdEVLU0NsdXN0ZXJzEi8udGVsZXBvcnQuaW50ZWdyYXRpb24udjEuTGlzdEVLU0NsdXN0ZXJzUmVxdWVzdBowLnRlbGVwb3J0LmludGVncmF0aW9uLnYxLkxpc3RFS1NDbHVzdGVyc1Jlc3BvbnNlElMKBFBpbmcSJC50ZWxlcG9ydC5pbnRlZ3JhdGlvbi52MS5QaW5nUmVxdWVzdBolLnRlbGVwb3J0LmludGVncmF0aW9uLnYxLlBpbmdSZXNwb25zZUJaWlhnaXRodWIuY29tL2dyYXZpdGF0aW9uYWwvdGVsZXBvcnQvYXBpL2dlbi9wcm90by9nby90ZWxlcG9ydC9pbnRlZ3JhdGlvbi92MTtpbnRlZ3JhdGlvbnYxYgZwcm90bzM", [file_teleport_legacy_types_types]);

/**
 * ListEICERequest is a request for a paginated list of AWS EC2 Instance Connect Endpoints.
 *
 * @generated from message teleport.integration.v1.ListEICERequest
 */
export type ListEICERequest = Message<"teleport.integration.v1.ListEICERequest"> & {
  /**
   * Integration is the AWS OIDC Integration name.
   * Required.
   *
   * @generated from field: string integration = 1;
   */
  integration: string;

  /**
   * Region is the AWS Region
   * Required.
   *
   * @generated from field: string region = 2;
   */
  region: string;

  /**
   * VPCIDs is used to filter for EICEs of those VPCs.
   * Required.
   *
   * @generated from field: repeated string vpc_ids = 3;
   */
  vpcIds: string[];

  /**
   * NextToken is the token to be used to fetch the next page.
   * If empty, the first page is fetched.
   *
   * @generated from field: string next_token = 4;
   */
  nextToken: string;
};

/**
 * Describes the message teleport.integration.v1.ListEICERequest.
 * Use `create(ListEICERequestSchema)` to create a new message.
 */
export const ListEICERequestSchema: GenMessage<ListEICERequest> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 0);

/**
 * EC2InstanceConnectEndpoint is a representation of a Amazon VPC EC2 Instance Connect Endpoint.
 *
 * @generated from message teleport.integration.v1.EC2InstanceConnectEndpoint
 */
export type EC2InstanceConnectEndpoint = Message<"teleport.integration.v1.EC2InstanceConnectEndpoint"> & {
  /**
   * Name is the endpoint name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * State is the endpoint state.
   * Known values:
   * create-in-progress | create-complete | create-failed | delete-in-progress | delete-complete | delete-failed
   *
   * @generated from field: string state = 2;
   */
  state: string;

  /**
   * StateMessage contains a message describing the state of the EICE.
   *
   * @generated from field: string state_message = 3;
   */
  stateMessage: string;

  /**
   * DashboardLink is a URL to AWS Console where the user can see the EC2 Instance Connect Endpoint.
   *
   * @generated from field: string dashboard_link = 4;
   */
  dashboardLink: string;

  /**
   * SubnetID is the subnet used by the endpoint.
   *
   * @generated from field: string subnet_id = 5;
   */
  subnetId: string;

  /**
   * VPCID is the VPC ID where the Endpoint is created.
   *
   * @generated from field: string vpc_id = 6;
   */
  vpcId: string;
};

/**
 * Describes the message teleport.integration.v1.EC2InstanceConnectEndpoint.
 * Use `create(EC2InstanceConnectEndpointSchema)` to create a new message.
 */
export const EC2InstanceConnectEndpointSchema: GenMessage<EC2InstanceConnectEndpoint> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 1);

/**
 * ListEICEResponse contains a page of AWS EC2 Instance Connect Endpoints.
 *
 * @generated from message teleport.integration.v1.ListEICEResponse
 */
export type ListEICEResponse = Message<"teleport.integration.v1.ListEICEResponse"> & {
  /**
   * EC2ICEs contains the page of EC2 Instance Connect Endpoints.
   *
   * @generated from field: repeated teleport.integration.v1.EC2InstanceConnectEndpoint ec2ices = 1;
   */
  ec2ices: EC2InstanceConnectEndpoint[];

  /**
   * DashboardLink is the URL for AWS Web Console that lists all the Endpoints for the queries VPCs.
   *
   * @generated from field: string dashboard_link = 2;
   */
  dashboardLink: string;

  /**
   * NextToken is used for pagination.
   * If non-empty, it can be used to request the next page.
   *
   * @generated from field: string next_token = 3;
   */
  nextToken: string;
};

/**
 * Describes the message teleport.integration.v1.ListEICEResponse.
 * Use `create(ListEICEResponseSchema)` to create a new message.
 */
export const ListEICEResponseSchema: GenMessage<ListEICEResponse> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 2);

/**
 * CreateEICERequest contains the required fields to create an AWS EC2 Instance Connect Endpoint.
 *
 * @generated from message teleport.integration.v1.CreateEICERequest
 */
export type CreateEICERequest = Message<"teleport.integration.v1.CreateEICERequest"> & {
  /**
   * Integration is the AWS OIDC Integration name.
   * Required.
   *
   * @generated from field: string integration = 1;
   */
  integration: string;

  /**
   * Region is the AWS Region
   * Required.
   *
   * @generated from field: string region = 2;
   */
  region: string;

  /**
   * Endpoints is is a list of EC2 Instance Connect Endpoints to be created.
   * Required.
   *
   * @generated from field: repeated teleport.integration.v1.EC2ICEndpoint endpoints = 3;
   */
  endpoints: EC2ICEndpoint[];
};

/**
 * Describes the message teleport.integration.v1.CreateEICERequest.
 * Use `create(CreateEICERequestSchema)` to create a new message.
 */
export const CreateEICERequestSchema: GenMessage<CreateEICERequest> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 3);

/**
 * EC2ICEndpoint contains the information for a single Endpoint to be created.
 *
 * @generated from message teleport.integration.v1.EC2ICEndpoint
 */
export type EC2ICEndpoint = Message<"teleport.integration.v1.EC2ICEndpoint"> & {
  /**
   * Name is the endpoint name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * SubnetID is the Subnet where the Endpoint will be created.
   *
   * @generated from field: string subnet_id = 2;
   */
  subnetId: string;

  /**
   * SecurityGroupIDs is a list of SecurityGroups to assign to the Endpoint.
   * If not specified, the Endpoint will receive the default SG for the Subnet's VPC.
   *
   * @generated from field: repeated string security_group_ids = 3;
   */
  securityGroupIds: string[];
};

/**
 * Describes the message teleport.integration.v1.EC2ICEndpoint.
 * Use `create(EC2ICEndpointSchema)` to create a new message.
 */
export const EC2ICEndpointSchema: GenMessage<EC2ICEndpoint> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 4);

/**
 * CreateEICEResponse is a request to create a VPC Endpoint of EC2 Instance Connect Endpoint type.
 *
 * @generated from message teleport.integration.v1.CreateEICEResponse
 */
export type CreateEICEResponse = Message<"teleport.integration.v1.CreateEICEResponse"> & {
  /**
   * Name is the Endpoint ID.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * CreatedEndpoints contains the name of created endpoints and their Subnet.
   *
   * @generated from field: repeated teleport.integration.v1.EC2ICEndpoint created_endpoints = 2;
   */
  createdEndpoints: EC2ICEndpoint[];
};

/**
 * Describes the message teleport.integration.v1.CreateEICEResponse.
 * Use `create(CreateEICEResponseSchema)` to create a new message.
 */
export const CreateEICEResponseSchema: GenMessage<CreateEICEResponse> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 5);

/**
 * ListDatabasesRequest is a request for a paginated list of AWS Databases.
 *
 * @generated from message teleport.integration.v1.ListDatabasesRequest
 */
export type ListDatabasesRequest = Message<"teleport.integration.v1.ListDatabasesRequest"> & {
  /**
   * Integration is the AWS OIDC Integration name.
   * Required.
   *
   * @generated from field: string integration = 1;
   */
  integration: string;

  /**
   * Region is the AWS Region
   * Required.
   *
   * @generated from field: string region = 2;
   */
  region: string;

  /**
   * RDSType is either instance or cluster (for Aurora DBs).
   * Required.
   *
   * @generated from field: string rds_type = 3;
   */
  rdsType: string;

  /**
   * Engines filters the returned Databases based on their engine.
   * Eg, mysql, postgres, mariadb, aurora, aurora-mysql, aurora-postgresql
   * Required.
   *
   * @generated from field: repeated string engines = 4;
   */
  engines: string[];

  /**
   * NextToken is the token to be used to fetch the next page.
   * If empty, the first page is fetched.
   *
   * @generated from field: string next_token = 5;
   */
  nextToken: string;

  /**
   * VPCID filters databases to only include those deployed in the VPC.
   * If empty, no filtering is done.
   *
   * @generated from field: string vpc_id = 6;
   */
  vpcId: string;
};

/**
 * Describes the message teleport.integration.v1.ListDatabasesRequest.
 * Use `create(ListDatabasesRequestSchema)` to create a new message.
 */
export const ListDatabasesRequestSchema: GenMessage<ListDatabasesRequest> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 6);

/**
 * ListDatabasesResponse contains a page of AWS Databases.
 *
 * @generated from message teleport.integration.v1.ListDatabasesResponse
 */
export type ListDatabasesResponse = Message<"teleport.integration.v1.ListDatabasesResponse"> & {
  /**
   * Databases contains the page of Databases.
   *
   * @generated from field: repeated types.DatabaseV3 databases = 1;
   */
  databases: DatabaseV3[];

  /**
   * NextToken is used for pagination.
   * If non-empty, it can be used to request the next page.
   *
   * @generated from field: string next_token = 2;
   */
  nextToken: string;
};

/**
 * Describes the message teleport.integration.v1.ListDatabasesResponse.
 * Use `create(ListDatabasesResponseSchema)` to create a new message.
 */
export const ListDatabasesResponseSchema: GenMessage<ListDatabasesResponse> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 7);

/**
 * ListSecurityGroupsRequest is a request for a paginated list of AWS SecurityGroups.
 *
 * @generated from message teleport.integration.v1.ListSecurityGroupsRequest
 */
export type ListSecurityGroupsRequest = Message<"teleport.integration.v1.ListSecurityGroupsRequest"> & {
  /**
   * Integration is the AWS OIDC Integration name.
   * Required.
   *
   * @generated from field: string integration = 1;
   */
  integration: string;

  /**
   * Region is the AWS Region
   * Required.
   *
   * @generated from field: string region = 2;
   */
  region: string;

  /**
   * VPCID is the VPC ID for listing SecurityGroups.
   * Required.
   *
   * @generated from field: string vpc_id = 3;
   */
  vpcId: string;

  /**
   * NextToken is the token to be used to fetch the next page.
   * If empty, the first page is fetched.
   *
   * @generated from field: string next_token = 4;
   */
  nextToken: string;
};

/**
 * Describes the message teleport.integration.v1.ListSecurityGroupsRequest.
 * Use `create(ListSecurityGroupsRequestSchema)` to create a new message.
 */
export const ListSecurityGroupsRequestSchema: GenMessage<ListSecurityGroupsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 8);

/**
 * CIDR has a CIDR (IP Range) and a description for the value.
 *
 * @generated from message teleport.integration.v1.SecurityGroupRuleCIDR
 */
export type SecurityGroupRuleCIDR = Message<"teleport.integration.v1.SecurityGroupRuleCIDR"> & {
  /**
   * CIDR is the IP range using CIDR notation.
   *
   * @generated from field: string cidr = 1;
   */
  cidr: string;

  /**
   * Description contains a small text describing the CIDR.
   *
   * @generated from field: string description = 2;
   */
  description: string;
};

/**
 * Describes the message teleport.integration.v1.SecurityGroupRuleCIDR.
 * Use `create(SecurityGroupRuleCIDRSchema)` to create a new message.
 */
export const SecurityGroupRuleCIDRSchema: GenMessage<SecurityGroupRuleCIDR> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 9);

/**
 * SecurityGroupRule is a representation of a SecurityGroupRule.
 * Either for Inbound or Outbound rules.
 *
 * @generated from message teleport.integration.v1.SecurityGroupRule
 */
export type SecurityGroupRule = Message<"teleport.integration.v1.SecurityGroupRule"> & {
  /**
   * IPProtocol is the protocol used to describe the rule.
   * If the rule applies to all protocols, the "all" value is used.
   * The IP protocol name ( tcp , udp , icmp , icmpv6 ) or number (see Protocol
   * Numbers (http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)).
   *
   * @generated from field: string ip_protocol = 1;
   */
  ipProtocol: string;

  /**
   * FromPort is the inclusive start of the Port range for the Rule.
   *
   * @generated from field: int32 from_port = 2;
   */
  fromPort: number;

  /**
   * ToPort is the inclusive end of the Port range for the Rule.
   *
   * @generated from field: int32 to_port = 3;
   */
  toPort: number;

  /**
   * CIDRs contains a list of IP ranges that this rule applies to and a description for the value.
   *
   * @generated from field: repeated teleport.integration.v1.SecurityGroupRuleCIDR cidrs = 4;
   */
  cidrs: SecurityGroupRuleCIDR[];
};

/**
 * Describes the message teleport.integration.v1.SecurityGroupRule.
 * Use `create(SecurityGroupRuleSchema)` to create a new message.
 */
export const SecurityGroupRuleSchema: GenMessage<SecurityGroupRule> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 10);

/**
 * SecurityGroup is a representation of a SecurityGroup
 *
 * @generated from message teleport.integration.v1.SecurityGroup
 */
export type SecurityGroup = Message<"teleport.integration.v1.SecurityGroup"> & {
  /**
   * Name is the SecurityGroup name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * ID is the SecurityGroup ID.
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * Description is a small description of the SecurityGroup.
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * InboundRules describe the Security Group Inbound Rules.
   * The CIDR of each rule represents the source IP that the rule applies to.
   *
   * @generated from field: repeated teleport.integration.v1.SecurityGroupRule inbound_rules = 4;
   */
  inboundRules: SecurityGroupRule[];

  /**
   * OutboundRules describe the Security Group Outbound Rules.
   * The CIDR of each rule represents the destination IP that the rule applies to.
   *
   * @generated from field: repeated teleport.integration.v1.SecurityGroupRule outbound_rules = 5;
   */
  outboundRules: SecurityGroupRule[];
};

/**
 * Describes the message teleport.integration.v1.SecurityGroup.
 * Use `create(SecurityGroupSchema)` to create a new message.
 */
export const SecurityGroupSchema: GenMessage<SecurityGroup> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 11);

/**
 * ListSecurityGroupsResponse contains a page of AWS SecurityGroups.
 *
 * @generated from message teleport.integration.v1.ListSecurityGroupsResponse
 */
export type ListSecurityGroupsResponse = Message<"teleport.integration.v1.ListSecurityGroupsResponse"> & {
  /**
   * SecurityGroups contains the page of SecurityGroups.
   *
   * @generated from field: repeated teleport.integration.v1.SecurityGroup security_groups = 1;
   */
  securityGroups: SecurityGroup[];

  /**
   * NextToken is used for pagination.
   * If non-empty, it can be used to request the next page.
   *
   * @generated from field: string next_token = 2;
   */
  nextToken: string;
};

/**
 * Describes the message teleport.integration.v1.ListSecurityGroupsResponse.
 * Use `create(ListSecurityGroupsResponseSchema)` to create a new message.
 */
export const ListSecurityGroupsResponseSchema: GenMessage<ListSecurityGroupsResponse> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 12);

/**
 * ListSubnetsRequest is a request for a paginated list of AWS VPC subnets.
 *
 * @generated from message teleport.integration.v1.ListSubnetsRequest
 */
export type ListSubnetsRequest = Message<"teleport.integration.v1.ListSubnetsRequest"> & {
  /**
   * Integration is the AWS OIDC Integration name.
   * Required.
   *
   * @generated from field: string integration = 1;
   */
  integration: string;

  /**
   * Region is the AWS Region
   * Required.
   *
   * @generated from field: string region = 2;
   */
  region: string;

  /**
   * VPCID is the VPC ID for listing subnets.
   * Required.
   *
   * @generated from field: string vpc_id = 3;
   */
  vpcId: string;

  /**
   * NextToken is the token to be used to fetch the next page.
   * If empty, the first page is fetched.
   *
   * @generated from field: string next_token = 4;
   */
  nextToken: string;
};

/**
 * Describes the message teleport.integration.v1.ListSubnetsRequest.
 * Use `create(ListSubnetsRequestSchema)` to create a new message.
 */
export const ListSubnetsRequestSchema: GenMessage<ListSubnetsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 13);

/**
 * Subnet is a representation of an AWS VPC subnet.
 *
 * @generated from message teleport.integration.v1.Subnet
 */
export type Subnet = Message<"teleport.integration.v1.Subnet"> & {
  /**
   * Name is the subnet name. Can be empty.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * ID is the subnet ID.
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * AvailabilityZone is the availability zone of the subnet.
   *
   * @generated from field: string availability_zone = 3;
   */
  availabilityZone: string;
};

/**
 * Describes the message teleport.integration.v1.Subnet.
 * Use `create(SubnetSchema)` to create a new message.
 */
export const SubnetSchema: GenMessage<Subnet> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 14);

/**
 * ListSubnetsResponse contains a page of AWS VPC subnets.
 *
 * @generated from message teleport.integration.v1.ListSubnetsResponse
 */
export type ListSubnetsResponse = Message<"teleport.integration.v1.ListSubnetsResponse"> & {
  /**
   * Subnets contains the page of subnets.
   *
   * @generated from field: repeated teleport.integration.v1.Subnet subnets = 1;
   */
  subnets: Subnet[];

  /**
   * NextToken is used for pagination.
   * If non-empty, it can be used to request the next page.
   *
   * @generated from field: string next_token = 2;
   */
  nextToken: string;
};

/**
 * Describes the message teleport.integration.v1.ListSubnetsResponse.
 * Use `create(ListSubnetsResponseSchema)` to create a new message.
 */
export const ListSubnetsResponseSchema: GenMessage<ListSubnetsResponse> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 15);

/**
 * ListVPCsRequest is a request for a paginated list of AWS VPCs.
 *
 * @generated from message teleport.integration.v1.ListVPCsRequest
 */
export type ListVPCsRequest = Message<"teleport.integration.v1.ListVPCsRequest"> & {
  /**
   * Integration is the AWS OIDC Integration name.
   * Required.
   *
   * @generated from field: string integration = 1;
   */
  integration: string;

  /**
   * Region is the AWS Region
   * Required.
   *
   * @generated from field: string region = 2;
   */
  region: string;

  /**
   * NextToken is the token to be used to fetch the next page.
   * If empty, the first page is fetched.
   *
   * @generated from field: string next_token = 3;
   */
  nextToken: string;
};

/**
 * Describes the message teleport.integration.v1.ListVPCsRequest.
 * Use `create(ListVPCsRequestSchema)` to create a new message.
 */
export const ListVPCsRequestSchema: GenMessage<ListVPCsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 16);

/**
 * VPC is a representation of an AWS VPC.
 *
 * @generated from message teleport.integration.v1.VPC
 */
export type VPC = Message<"teleport.integration.v1.VPC"> & {
  /**
   * Name is the VPC name. Can be empty.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * ID is the VPC ID.
   *
   * @generated from field: string id = 2;
   */
  id: string;
};

/**
 * Describes the message teleport.integration.v1.VPC.
 * Use `create(VPCSchema)` to create a new message.
 */
export const VPCSchema: GenMessage<VPC> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 17);

/**
 * ListVPCsResponse contains a page of AWS VPCs.
 *
 * @generated from message teleport.integration.v1.ListVPCsResponse
 */
export type ListVPCsResponse = Message<"teleport.integration.v1.ListVPCsResponse"> & {
  /**
   * VPCs contains the page of VPCs.
   *
   * @generated from field: repeated teleport.integration.v1.VPC vpcs = 1;
   */
  vpcs: VPC[];

  /**
   * NextToken is used for pagination.
   * If non-empty, it can be used to request the next page.
   *
   * @generated from field: string next_token = 2;
   */
  nextToken: string;
};

/**
 * Describes the message teleport.integration.v1.ListVPCsResponse.
 * Use `create(ListVPCsResponseSchema)` to create a new message.
 */
export const ListVPCsResponseSchema: GenMessage<ListVPCsResponse> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 18);

/**
 * DeployDatabaseServiceRequest is a request to deploy .
 *
 * @generated from message teleport.integration.v1.DeployDatabaseServiceRequest
 */
export type DeployDatabaseServiceRequest = Message<"teleport.integration.v1.DeployDatabaseServiceRequest"> & {
  /**
   * Integration is the AWS OIDC Integration name.
   * Required.
   *
   * @generated from field: string integration = 1;
   */
  integration: string;

  /**
   * Region is the AWS Region
   * Required.
   *
   * @generated from field: string region = 2;
   */
  region: string;

  /**
   * TaskRoleARN is the AWS IAM Role received by the deployed service.
   * Required.
   *
   * @generated from field: string task_role_arn = 3;
   */
  taskRoleArn: string;

  /**
   * TeleportVersion is the teleport version to be deployed.
   * This is used to fetch the correct tag for the teleport container image.
   * Eg, 14.3.4 (no "v" prefix)
   * Required.
   *
   * @generated from field: string teleport_version = 4;
   */
  teleportVersion: string;

  /**
   * DeploymentJoinTokenName is the Teleport IAM Join Token to be used by the deployed
   * service to join the cluster.
   * Required.
   *
   * @generated from field: string deployment_join_token_name = 5;
   */
  deploymentJoinTokenName: string;

  /**
   * Deployments is a list of services that will be deployed.
   *
   * @generated from field: repeated teleport.integration.v1.DeployDatabaseServiceDeployment deployments = 6;
   */
  deployments: DeployDatabaseServiceDeployment[];
};

/**
 * Describes the message teleport.integration.v1.DeployDatabaseServiceRequest.
 * Use `create(DeployDatabaseServiceRequestSchema)` to create a new message.
 */
export const DeployDatabaseServiceRequestSchema: GenMessage<DeployDatabaseServiceRequest> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 19);

/**
 * DeployDatabaseServiceDeployment represents a single deployment.
 *
 * @generated from message teleport.integration.v1.DeployDatabaseServiceDeployment
 */
export type DeployDatabaseServiceDeployment = Message<"teleport.integration.v1.DeployDatabaseServiceDeployment"> & {
  /**
   * TeleportConfigString is the teleport.yaml configuration (base64 encoded) used by teleport.
   * Required.
   *
   * @generated from field: string teleport_config_string = 1;
   */
  teleportConfigString: string;

  /**
   * VpcId is the VPCID where the service is going to be deployed.
   * Required.
   *
   * @generated from field: string vpc_id = 2;
   */
  vpcId: string;

  /**
   * SubnetIds are the subnets for the network configuration.
   * They must belong to the VpcId above.
   * Required.
   *
   * @generated from field: repeated string subnet_ids = 3;
   */
  subnetIds: string[];

  /**
   * SecurityGroups are the SecurityGroup IDs to associate with this particular deployment.
   * If empty, the default security group for the VPC is going to be used.
   *
   * @generated from field: repeated string security_groups = 4;
   */
  securityGroups: string[];
};

/**
 * Describes the message teleport.integration.v1.DeployDatabaseServiceDeployment.
 * Use `create(DeployDatabaseServiceDeploymentSchema)` to create a new message.
 */
export const DeployDatabaseServiceDeploymentSchema: GenMessage<DeployDatabaseServiceDeployment> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 20);

/**
 * DeployDatabaseServiceResponse contains information about the deployed service.
 *
 * @generated from message teleport.integration.v1.DeployDatabaseServiceResponse
 */
export type DeployDatabaseServiceResponse = Message<"teleport.integration.v1.DeployDatabaseServiceResponse"> & {
  /**
   * ClusterArn identifies the cluster where the deployment was made.
   *
   * @generated from field: string cluster_arn = 1;
   */
  clusterArn: string;

  /**
   * ClusterDashboardURL is a link to the Amazon ECS cluster dashboard or a
   * specific cluster service if a single deployment was requested.
   *
   * @generated from field: string cluster_dashboard_url = 2;
   */
  clusterDashboardUrl: string;
};

/**
 * Describes the message teleport.integration.v1.DeployDatabaseServiceResponse.
 * Use `create(DeployDatabaseServiceResponseSchema)` to create a new message.
 */
export const DeployDatabaseServiceResponseSchema: GenMessage<DeployDatabaseServiceResponse> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 21);

/**
 * DeployServiceRequest is a request to deploy .
 *
 * @generated from message teleport.integration.v1.DeployServiceRequest
 */
export type DeployServiceRequest = Message<"teleport.integration.v1.DeployServiceRequest"> & {
  /**
   * Integration is the AWS OIDC Integration name.
   * Required.
   *
   * @generated from field: string integration = 1;
   */
  integration: string;

  /**
   * Region is the AWS Region
   * Required.
   *
   * @generated from field: string region = 2;
   */
  region: string;

  /**
   * DeploymentMode is the deployment name that should be applied when creating the ECS Service.
   * Allowed modes: database-service
   * Required.
   *
   * @generated from field: string deployment_mode = 3;
   */
  deploymentMode: string;

  /**
   * SecurityGroups to apply to the service's network configuration.
   * If empty, the default security group for the VPC is going to be used.
   *
   * @generated from field: repeated string security_groups = 4;
   */
  securityGroups: string[];

  /**
   * SubnetIds are the subnets for the network configuration.
   * Required.
   *
   * @generated from field: repeated string subnet_ids = 5;
   */
  subnetIds: string[];

  /**
   * TaskRoleARN is the AWS IAM Role received by the deployed service.
   * Required.
   *
   * @generated from field: string task_role_arn = 6;
   */
  taskRoleArn: string;

  /**
   * TeleportVersion is the teleport version to be deployed.
   * This is used to fetch the correct tag for the teleport container image.
   * Eg, 14.3.4 (no "v" prefix)
   * Required.
   *
   * @generated from field: string teleport_version = 7;
   */
  teleportVersion: string;

  /**
   * DeploymentJoinTokenName is the Teleport IAM Join Token to be used by the deployed
   * service to join the cluster.
   * Required.
   *
   * @generated from field: string deployment_join_token_name = 8;
   */
  deploymentJoinTokenName: string;

  /**
   * TeleportConfigString is the teleport.yaml configuration (base64 encoded) used by teleport.
   * Required.
   *
   * @generated from field: string teleport_config_string = 9;
   */
  teleportConfigString: string;
};

/**
 * Describes the message teleport.integration.v1.DeployServiceRequest.
 * Use `create(DeployServiceRequestSchema)` to create a new message.
 */
export const DeployServiceRequestSchema: GenMessage<DeployServiceRequest> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 22);

/**
 * DeployServiceResponse contains information about the deployed service.
 *
 * @generated from message teleport.integration.v1.DeployServiceResponse
 */
export type DeployServiceResponse = Message<"teleport.integration.v1.DeployServiceResponse"> & {
  /**
   * ClusterArn identifies the cluster where the deployment was made.
   *
   * @generated from field: string cluster_arn = 1;
   */
  clusterArn: string;

  /**
   * ServiceARN is the Amazon ECS Cluster Service ARN created to run the task.
   *
   * @generated from field: string service_arn = 2;
   */
  serviceArn: string;

  /**
   * TaskDefinitionARN is the Amazon ECS Task Definition ARN created to run the Service.
   *
   * @generated from field: string task_definition_arn = 3;
   */
  taskDefinitionArn: string;

  /**
   * ServiceDashboardURL is a link to the service's Dashboard URL in Amazon Console.
   *
   * @generated from field: string service_dashboard_url = 4;
   */
  serviceDashboardUrl: string;
};

/**
 * Describes the message teleport.integration.v1.DeployServiceResponse.
 * Use `create(DeployServiceResponseSchema)` to create a new message.
 */
export const DeployServiceResponseSchema: GenMessage<DeployServiceResponse> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 23);

/**
 * EnrollEKSClustersRequest is request to enroll EKS clusters.
 *
 * @generated from message teleport.integration.v1.EnrollEKSClustersRequest
 */
export type EnrollEKSClustersRequest = Message<"teleport.integration.v1.EnrollEKSClustersRequest"> & {
  /**
   * Integration is the AWS OIDC Integration name.
   * Required.
   *
   * @generated from field: string integration = 1;
   */
  integration: string;

  /**
   * Region is the AWS Region
   * Required.
   *
   * @generated from field: string region = 2;
   */
  region: string;

  /**
   * ClusterNames is names of EKS clusters to enroll.
   * Required.
   *
   * @generated from field: repeated string eks_cluster_names = 3;
   */
  eksClusterNames: string[];

  /**
   * EnableAppDiscovery specifies if we should enable Kubernetes App Discovery inside the enrolled EKS cluster.
   *
   * @generated from field: bool enable_app_discovery = 4;
   */
  enableAppDiscovery: boolean;

  /**
   * AgentVersion is version of agent Helm chart to install on the EKS cluster.
   * Required.
   *
   * @generated from field: string agent_version = 5;
   */
  agentVersion: string;
};

/**
 * Describes the message teleport.integration.v1.EnrollEKSClustersRequest.
 * Use `create(EnrollEKSClustersRequestSchema)` to create a new message.
 */
export const EnrollEKSClustersRequestSchema: GenMessage<EnrollEKSClustersRequest> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 24);

/**
 * EnrollEKSClusterResult contains result for a single cluster enrollment.
 *
 * @generated from message teleport.integration.v1.EnrollEKSClusterResult
 */
export type EnrollEKSClusterResult = Message<"teleport.integration.v1.EnrollEKSClusterResult"> & {
  /**
   * ClusterName identifies what EKS cluster this result is for.
   *
   * @generated from field: string eks_cluster_name = 1;
   */
  eksClusterName: string;

  /**
   * ResourceID shows what internal resource ID label was used by the Helm chart.
   *
   * @generated from field: string resource_id = 2;
   */
  resourceId: string;

  /**
   * Error show what error happened during enrollment. Empty if no error happened.
   *
   * @generated from field: string error = 3;
   */
  error: string;
};

/**
 * Describes the message teleport.integration.v1.EnrollEKSClusterResult.
 * Use `create(EnrollEKSClusterResultSchema)` to create a new message.
 */
export const EnrollEKSClusterResultSchema: GenMessage<EnrollEKSClusterResult> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 25);

/**
 * EnrollEKSClustersResponse is a response to enrolling EKS clusters.
 *
 * @generated from message teleport.integration.v1.EnrollEKSClustersResponse
 */
export type EnrollEKSClustersResponse = Message<"teleport.integration.v1.EnrollEKSClustersResponse"> & {
  /**
   * Results shows result of enrollment for each requested EKS cluster.
   *
   * @generated from field: repeated teleport.integration.v1.EnrollEKSClusterResult results = 1;
   */
  results: EnrollEKSClusterResult[];
};

/**
 * Describes the message teleport.integration.v1.EnrollEKSClustersResponse.
 * Use `create(EnrollEKSClustersResponseSchema)` to create a new message.
 */
export const EnrollEKSClustersResponseSchema: GenMessage<EnrollEKSClustersResponse> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 26);

/**
 * ListEC2Request is a request for a paginated list of AWS EC2 instances.
 *
 * @generated from message teleport.integration.v1.ListEC2Request
 */
export type ListEC2Request = Message<"teleport.integration.v1.ListEC2Request"> & {
  /**
   * Integration is the AWS OIDC Integration name.
   * Required.
   *
   * @generated from field: string integration = 1;
   */
  integration: string;

  /**
   * Region is the AWS Region
   * Required.
   *
   * @generated from field: string region = 2;
   */
  region: string;

  /**
   * NextToken is the token to be used to fetch the next page.
   * If empty, the first page is fetched.
   *
   * @generated from field: string next_token = 3;
   */
  nextToken: string;
};

/**
 * Describes the message teleport.integration.v1.ListEC2Request.
 * Use `create(ListEC2RequestSchema)` to create a new message.
 */
export const ListEC2RequestSchema: GenMessage<ListEC2Request> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 27);

/**
 * ListEC2Response contains a page of AWS EC2 instances represented as Nodes.
 *
 * @generated from message teleport.integration.v1.ListEC2Response
 */
export type ListEC2Response = Message<"teleport.integration.v1.ListEC2Response"> & {
  /**
   * Servers contains the page of EC2.
   *
   * @generated from field: repeated types.ServerV2 servers = 1;
   */
  servers: ServerV2[];

  /**
   * NextToken is used for pagination.
   * If non-empty, it can be used to request the next page.
   *
   * @generated from field: string next_token = 2;
   */
  nextToken: string;
};

/**
 * Describes the message teleport.integration.v1.ListEC2Response.
 * Use `create(ListEC2ResponseSchema)` to create a new message.
 */
export const ListEC2ResponseSchema: GenMessage<ListEC2Response> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 28);

/**
 * ListEKSClustersRequest is a request for a paginated list of AWS EKS Clusters.
 *
 * @generated from message teleport.integration.v1.ListEKSClustersRequest
 */
export type ListEKSClustersRequest = Message<"teleport.integration.v1.ListEKSClustersRequest"> & {
  /**
   * Integration is the AWS OIDC Integration name.
   * Required.
   *
   * @generated from field: string integration = 1;
   */
  integration: string;

  /**
   * Region is the AWS Region
   * Required.
   *
   * @generated from field: string region = 2;
   */
  region: string;

  /**
   * NextToken is the token to be used to fetch the next page.
   * If empty, the first page is fetched.
   *
   * @generated from field: string next_token = 3;
   */
  nextToken: string;
};

/**
 * Describes the message teleport.integration.v1.ListEKSClustersRequest.
 * Use `create(ListEKSClustersRequestSchema)` to create a new message.
 */
export const ListEKSClustersRequestSchema: GenMessage<ListEKSClustersRequest> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 29);

/**
 * EKSCluster represents an Amazon EKS Cluster.
 *
 * @generated from message teleport.integration.v1.EKSCluster
 */
export type EKSCluster = Message<"teleport.integration.v1.EKSCluster"> & {
  /**
   * Name is the name of AWS EKS cluster.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Region is an AWS region.
   *
   * @generated from field: string region = 2;
   */
  region: string;

  /**
   * Arn is an AWS ARN identification of the EKS cluster.
   *
   * @generated from field: string arn = 3;
   */
  arn: string;

  /**
   * Labels are labels of a EKS cluster.
   *
   * @generated from field: map<string, string> labels = 4;
   */
  labels: { [key: string]: string };

  /**
   * JoinLabels are Teleport labels that should be injected into kube agent
   * if the cluster will be enrolled into Teleport (agent installed on it).
   *
   * @generated from field: map<string, string> join_labels = 5;
   */
  joinLabels: { [key: string]: string };

  /**
   * Status is a current status of an EKS cluster in AWS.
   * Known values are:
   * CREATING | ACTIVE | DELETING | FAILED | UPDATING | PENDING
   *
   * @generated from field: string status = 6;
   */
  status: string;
};

/**
 * Describes the message teleport.integration.v1.EKSCluster.
 * Use `create(EKSClusterSchema)` to create a new message.
 */
export const EKSClusterSchema: GenMessage<EKSCluster> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 30);

/**
 * ListEKSClustersResponse contains a page of AWS EKS Clusters.
 *
 * @generated from message teleport.integration.v1.ListEKSClustersResponse
 */
export type ListEKSClustersResponse = Message<"teleport.integration.v1.ListEKSClustersResponse"> & {
  /**
   * Clusters contains the page of EKS Clusters.
   *
   * @generated from field: repeated teleport.integration.v1.EKSCluster clusters = 1;
   */
  clusters: EKSCluster[];

  /**
   * NextToken is used for pagination.
   * If non-empty, it can be used to request the next page.
   *
   * @generated from field: string next_token = 2;
   */
  nextToken: string;
};

/**
 * Describes the message teleport.integration.v1.ListEKSClustersResponse.
 * Use `create(ListEKSClustersResponseSchema)` to create a new message.
 */
export const ListEKSClustersResponseSchema: GenMessage<ListEKSClustersResponse> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 31);

/**
 * PingRequest is a request for doing an health check against the configured integration.
 *
 * @generated from message teleport.integration.v1.PingRequest
 */
export type PingRequest = Message<"teleport.integration.v1.PingRequest"> & {
  /**
   * Integration is the AWS OIDC Integration name.
   * Required.
   *
   * @generated from field: string integration = 1;
   */
  integration: string;
};

/**
 * Describes the message teleport.integration.v1.PingRequest.
 * Use `create(PingRequestSchema)` to create a new message.
 */
export const PingRequestSchema: GenMessage<PingRequest> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 32);

/**
 * PingResponse contains the response for the Ping operation.
 *
 * @generated from message teleport.integration.v1.PingResponse
 */
export type PingResponse = Message<"teleport.integration.v1.PingResponse"> & {
  /**
   * The AWS account ID number of the account that owns or contains the calling entity.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The AWS ARN associated with the calling entity.
   *
   * @generated from field: string arn = 2;
   */
  arn: string;

  /**
   * The unique identifier of the calling entity.
   *
   * @generated from field: string user_id = 3;
   */
  userId: string;
};

/**
 * Describes the message teleport.integration.v1.PingResponse.
 * Use `create(PingResponseSchema)` to create a new message.
 */
export const PingResponseSchema: GenMessage<PingResponse> = /*@__PURE__*/
  messageDesc(file_teleport_integration_v1_awsoidc_service, 33);

/**
 * AWSOIDCService provides access to AWS APIs using the AWS OIDC Integration.
 *
 * @generated from service teleport.integration.v1.AWSOIDCService
 */
export const AWSOIDCService: GenService<{
  /**
   * ListEICE returns a list of EC2 Instance Connect Endpoints.
   * An optional NextToken that can be used to fetch the next page.
   * It uses the following API:
   * https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstanceConnectEndpoints.html
   *
   * @generated from rpc teleport.integration.v1.AWSOIDCService.ListEICE
   */
  listEICE: {
    methodKind: "unary";
    input: typeof ListEICERequestSchema;
    output: typeof ListEICEResponseSchema;
  },
  /**
   * CreateEICE creates multiple EC2 Instance Connect Endpoint using the provided Subnets and Security Group IDs.
   * It uses the following API:
   * https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateInstanceConnectEndpoint.html
   *
   * @generated from rpc teleport.integration.v1.AWSOIDCService.CreateEICE
   */
  createEICE: {
    methodKind: "unary";
    input: typeof CreateEICERequestSchema;
    output: typeof CreateEICEResponseSchema;
  },
  /**
   * ListDatabases calls the following AWS API:
   * https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBClusters.html
   * https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBInstances.html
   * It returns a list of Databases and an optional NextToken that can be used to fetch the next page
   *
   * @generated from rpc teleport.integration.v1.AWSOIDCService.ListDatabases
   */
  listDatabases: {
    methodKind: "unary";
    input: typeof ListDatabasesRequestSchema;
    output: typeof ListDatabasesResponseSchema;
  },
  /**
   * ListSecurityGroups returns a list of AWS VPC SecurityGroups.
   * It uses the following API:
   * https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html
   *
   * @generated from rpc teleport.integration.v1.AWSOIDCService.ListSecurityGroups
   */
  listSecurityGroups: {
    methodKind: "unary";
    input: typeof ListSecurityGroupsRequestSchema;
    output: typeof ListSecurityGroupsResponseSchema;
  },
  /**
   * ListSubnets returns a list of AWS VPC subnets.
   * It uses the following API:
   * https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSubnets.html
   *
   * @generated from rpc teleport.integration.v1.AWSOIDCService.ListSubnets
   */
  listSubnets: {
    methodKind: "unary";
    input: typeof ListSubnetsRequestSchema;
    output: typeof ListSubnetsResponseSchema;
  },
  /**
   * ListVPCs returns a list of AWS VPCs.
   * It uses the following API:
   * https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcs.html
   *
   * @generated from rpc teleport.integration.v1.AWSOIDCService.ListVPCs
   */
  listVPCs: {
    methodKind: "unary";
    input: typeof ListVPCsRequestSchema;
    output: typeof ListVPCsResponseSchema;
  },
  /**
   * DeployDatabaseService deploys a Database Services to Amazon ECS.
   *
   * @generated from rpc teleport.integration.v1.AWSOIDCService.DeployDatabaseService
   */
  deployDatabaseService: {
    methodKind: "unary";
    input: typeof DeployDatabaseServiceRequestSchema;
    output: typeof DeployDatabaseServiceResponseSchema;
  },
  /**
   * DeployService deploys an ECS Service to Amazon ECS.
   *
   * @generated from rpc teleport.integration.v1.AWSOIDCService.DeployService
   */
  deployService: {
    methodKind: "unary";
    input: typeof DeployServiceRequestSchema;
    output: typeof DeployServiceResponseSchema;
  },
  /**
   * EnrollEKSClusters enrolls EKS clusters by installing kube agent Helm chart.
   *
   * @generated from rpc teleport.integration.v1.AWSOIDCService.EnrollEKSClusters
   */
  enrollEKSClusters: {
    methodKind: "unary";
    input: typeof EnrollEKSClustersRequestSchema;
    output: typeof EnrollEKSClustersResponseSchema;
  },
  /**
   * ListEC2 lists the EC2 instances of the AWS account per region.
   * It uses the following API:
   * https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html
   *
   * @generated from rpc teleport.integration.v1.AWSOIDCService.ListEC2
   */
  listEC2: {
    methodKind: "unary";
    input: typeof ListEC2RequestSchema;
    output: typeof ListEC2ResponseSchema;
  },
  /**
   * ListEKSClusters retrieves a paginated list of EKS clusters in the specified AWS region for a specific account.
   * It uses the following APIs:
   * https://docs.aws.amazon.com/eks/latest/APIReference/API_ListClusters.html
   * https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeCluster.html
   *
   * @generated from rpc teleport.integration.v1.AWSOIDCService.ListEKSClusters
   */
  listEKSClusters: {
    methodKind: "unary";
    input: typeof ListEKSClustersRequestSchema;
    output: typeof ListEKSClustersResponseSchema;
  },
  /**
   * Ping does an health check for the integration.
   * Returns the caller identity.
   * It uses the following APIs:
   * https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity.html
   *
   * @generated from rpc teleport.integration.v1.AWSOIDCService.Ping
   */
  ping: {
    methodKind: "unary";
    input: typeof PingRequestSchema;
    output: typeof PingResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_teleport_integration_v1_awsoidc_service, 0);

