// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file teleport/devicetrust/v1/devicetrust_service.proto (package teleport.devicetrust.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AuthenticateDeviceRequest, AuthenticateDeviceResponse, BulkCreateDevicesRequest, BulkCreateDevicesResponse, ConfirmDeviceWebAuthenticationRequest, ConfirmDeviceWebAuthenticationResponse, CreateDeviceEnrollTokenRequest, CreateDeviceRequest, DeleteDeviceRequest, EnrollDeviceRequest, EnrollDeviceResponse, FindDevicesRequest, FindDevicesResponse, GetDeviceRequest, GetDevicesUsageRequest, ListDevicesRequest, ListDevicesResponse, SyncInventoryRequest, SyncInventoryResponse, UpdateDeviceRequest, UpsertDeviceRequest } from "./devicetrust_service_pb.js";
import { Device } from "./device_pb.js";
import { Empty, MethodKind } from "@bufbuild/protobuf";
import { DeviceEnrollToken } from "./device_enroll_token_pb.js";
import { DevicesUsage } from "./usage_pb.js";

/**
 * DeviceTrustService provides methods to manage, enroll and authenticate
 * trusted devices.
 *
 * A trusted device is a device that is registered and enrolled with Teleport,
 * thus allowing the system to provide some guarantees about its provenance and
 * state.
 *
 * Managing devices requires the corresponding CRUD "device" permission.
 * Additionally, creating enrollment tokens requires the "create_enroll_token"
 * permission and enrolling devices requires the "enroll" permission. See
 * CreateDevice, CreateDeviceEnrollToken and EnrollDevice for reference.
 *
 * An authenticated, trusted device allows its user to perform device-aware
 * actions. Such actions include accessing an SSH node, managing sensitive
 * resources via `tctl`, etc. The enforcement mode is defined via cluster-wide
 * and/or per-role toggles. Device authentication is automatic for enrolled
 * devices communicating with Enterprise clusters. See AuthenticateDevice for
 * reference.
 *
 * Device Trust is a Teleport Enterprise feature. Open Source Teleport clusters
 * treat all Device RPCs as unimplemented (which, in fact, they are for OSS.)
 *
 * @generated from service teleport.devicetrust.v1.DeviceTrustService
 */
export const DeviceTrustService = {
  typeName: "teleport.devicetrust.v1.DeviceTrustService",
  methods: {
    /**
     * CreateDevice creates a device, effectively registering it on Teleport.
     * Devices need to be registered before they can be enrolled.
     *
     * It is possible to create both a Device and a DeviceEnrollToken in a
     * single invocation, see CreateDeviceRequest.create_enroll_token.
     *
     * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.CreateDevice
     */
    createDevice: {
      name: "CreateDevice",
      I: CreateDeviceRequest,
      O: Device,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateDevice is a masked device update.
     *
     * Only certain fields may be updated, see Device for details.
     *
     * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.UpdateDevice
     */
    updateDevice: {
      name: "UpdateDevice",
      I: UpdateDeviceRequest,
      O: Device,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertDevice creates or updates a device.
     *
     * UpsertDevice attempts a write of all mutable fields on updates, therefore
     * reading a fresh copy of the device is recommended. Update semantics still
     * apply.
     *
     * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.UpsertDevice
     */
    upsertDevice: {
      name: "UpsertDevice",
      I: UpsertDeviceRequest,
      O: Device,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteDevice hard-deletes a device, removing it and all collected data
     * history from the system.
     *
     * Prefer locking the device instead (see the `tctl lock` command). Deleting a
     * device doesn't invalidate existing device certificates, but does prevent
     * new device authentication ceremonies from occurring.
     *
     * Use with caution.
     *
     * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.DeleteDevice
     */
    deleteDevice: {
      name: "DeleteDevice",
      I: DeleteDeviceRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * FindDevices retrieves devices by device ID and/or asset tag.
     *
     * It provides an in-between search between fetching a device by ID and
     * listing all devices.
     *
     * ID matches are guaranteed to be present in the response.
     *
     * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.FindDevices
     */
    findDevices: {
      name: "FindDevices",
      I: FindDevicesRequest,
      O: FindDevicesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetDevice retrieves a device by ID.
     *
     * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.GetDevice
     */
    getDevice: {
      name: "GetDevice",
      I: GetDeviceRequest,
      O: Device,
      kind: MethodKind.Unary,
    },
    /**
     * ListDevices lists all registered devices.
     *
     * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.ListDevices
     */
    listDevices: {
      name: "ListDevices",
      I: ListDevicesRequest,
      O: ListDevicesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * BulkCreateDevices is a bulk variant of CreateDevice.
     *
     * Unlike CreateDevice, it does not support creation of enrollment tokens, as
     * it is meant for bulk inventory registration.
     *
     * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.BulkCreateDevices
     */
    bulkCreateDevices: {
      name: "BulkCreateDevices",
      I: BulkCreateDevicesRequest,
      O: BulkCreateDevicesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateDeviceEnrollToken creates a DeviceEnrollToken for a Device.
     * An enrollment token is required for the enrollment ceremony. See
     * EnrollDevice.
     *
     * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.CreateDeviceEnrollToken
     */
    createDeviceEnrollToken: {
      name: "CreateDeviceEnrollToken",
      I: CreateDeviceEnrollTokenRequest,
      O: DeviceEnrollToken,
      kind: MethodKind.Unary,
    },
    /**
     * EnrollDevice performs the device enrollment ceremony.
     *
     * Enrollment requires a previously-registered Device and a DeviceEnrollToken,
     * see CreateDevice and CreateDeviceEnrollToken.
     *
     * An enrolled device is allowed, via AuthenticateDevice, to acquire
     * certificates containing device extensions, thus gaining access to
     * device-aware actions.
     *
     * macOS enrollment flow:
     * -> EnrollDeviceInit (client)
     * <- MacOSEnrollChallenge (server)
     * -> MacOSEnrollChallengeResponse
     * <- EnrollDeviceSuccess
     *
     * TPM enrollment flow:
     * -> EnrollDeviceInit (client)
     * <- TPMEnrollChallenge (server)
     * -> TPMEnrollChallengeResponse
     * <- EnrollDeviceSuccess
     *
     * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.EnrollDevice
     */
    enrollDevice: {
      name: "EnrollDevice",
      I: EnrollDeviceRequest,
      O: EnrollDeviceResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * AuthenticateDevice performs the device authentication ceremony.
     *
     * Device authentication exchanges existing user certificates without device
     * extensions for certificates augmented with device extensions. The new
     * certificates allow the user to perform device-aware actions.
     *
     * Only registered and enrolled devices may perform device authentication.
     *
     * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.AuthenticateDevice
     */
    authenticateDevice: {
      name: "AuthenticateDevice",
      I: AuthenticateDeviceRequest,
      O: AuthenticateDeviceResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * ConfirmDeviceWebAuthentication finalizes the device web authentication
     * ceremony started by the creation of a DeviceWebToken and subsequent
     * AuthenticateDevice call.
     *
     * The DeviceConfirmationToken issued by AuthenticateDevice is spent in this
     * method, which consequently augments the corresponding Web Session
     * certificates with device extensions.
     *
     * This method must be called by the Teleport Proxy, and the Proxy itself must
     * be called by the same browser that started the on-behalf-of authentication
     * attempt. See the /webapi/device/webconfirm endpoint.
     *
     * See
     * https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
     *
     * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.ConfirmDeviceWebAuthentication
     */
    confirmDeviceWebAuthentication: {
      name: "ConfirmDeviceWebAuthentication",
      I: ConfirmDeviceWebAuthenticationRequest,
      O: ConfirmDeviceWebAuthenticationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Syncs device inventory from a source exterior to Teleport, for example an
     * MDM.
     * Allows both partial and full syncs; for the latter, devices missing from
     * the external inventory are handled as specified.
     * Authorized either by a valid MDM service certificate or the appropriate
     * "device" permissions (create/update/delete).
     *
     * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.SyncInventory
     */
    syncInventory: {
      name: "SyncInventory",
      I: SyncInventoryRequest,
      O: SyncInventoryResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * Superseded by ResourceUsageService.GetUsage.
     *
     * @generated from rpc teleport.devicetrust.v1.DeviceTrustService.GetDevicesUsage
     * @deprecated
     */
    getDevicesUsage: {
      name: "GetDevicesUsage",
      I: GetDevicesUsageRequest,
      O: DevicesUsage,
      kind: MethodKind.Unary,
    },
  }
} as const;

