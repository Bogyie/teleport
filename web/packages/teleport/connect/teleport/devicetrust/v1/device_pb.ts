// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/devicetrust/v1/device.proto (package teleport.devicetrust.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { DeviceCollectedData } from "./device_collected_data_pb";
import { file_teleport_devicetrust_v1_device_collected_data } from "./device_collected_data_pb";
import type { DeviceEnrollToken } from "./device_enroll_token_pb";
import { file_teleport_devicetrust_v1_device_enroll_token } from "./device_enroll_token_pb";
import type { DeviceProfile } from "./device_profile_pb";
import { file_teleport_devicetrust_v1_device_profile } from "./device_profile_pb";
import type { DeviceSource } from "./device_source_pb";
import { file_teleport_devicetrust_v1_device_source } from "./device_source_pb";
import type { OSType } from "./os_type_pb";
import { file_teleport_devicetrust_v1_os_type } from "./os_type_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/devicetrust/v1/device.proto.
 */
export const file_teleport_devicetrust_v1_device: GenFile = /*@__PURE__*/
  fileDesc("CiR0ZWxlcG9ydC9kZXZpY2V0cnVzdC92MS9kZXZpY2UucHJvdG8SF3RlbGVwb3J0LmRldmljZXRydXN0LnYxItoECgZEZXZpY2USEwoLYXBpX3ZlcnNpb24YASABKAkSCgoCaWQYAiABKAkSMAoHb3NfdHlwZRgDIAEoDjIfLnRlbGVwb3J0LmRldmljZXRydXN0LnYxLk9TVHlwZRIRCglhc3NldF90YWcYBCABKAkSLwoLY3JlYXRlX3RpbWUYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi8KC3VwZGF0ZV90aW1lGAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBJACgxlbnJvbGxfdG9rZW4YByABKAsyKi50ZWxlcG9ydC5kZXZpY2V0cnVzdC52MS5EZXZpY2VFbnJvbGxUb2tlbhJCCg1lbnJvbGxfc3RhdHVzGAggASgOMisudGVsZXBvcnQuZGV2aWNldHJ1c3QudjEuRGV2aWNlRW5yb2xsU3RhdHVzEj0KCmNyZWRlbnRpYWwYCSABKAsyKS50ZWxlcG9ydC5kZXZpY2V0cnVzdC52MS5EZXZpY2VDcmVkZW50aWFsEkQKDmNvbGxlY3RlZF9kYXRhGAogAygLMiwudGVsZXBvcnQuZGV2aWNldHJ1c3QudjEuRGV2aWNlQ29sbGVjdGVkRGF0YRI1CgZzb3VyY2UYCyABKAsyJS50ZWxlcG9ydC5kZXZpY2V0cnVzdC52MS5EZXZpY2VTb3VyY2USNwoHcHJvZmlsZRgMIAEoCzImLnRlbGVwb3J0LmRldmljZXRydXN0LnYxLkRldmljZVByb2ZpbGUSDQoFb3duZXIYDSABKAkiuQEKEERldmljZUNyZWRlbnRpYWwSCgoCaWQYASABKAkSFgoOcHVibGljX2tleV9kZXIYAiABKAwSTwoXZGV2aWNlX2F0dGVzdGF0aW9uX3R5cGUYAyABKA4yLi50ZWxlcG9ydC5kZXZpY2V0cnVzdC52MS5EZXZpY2VBdHRlc3RhdGlvblR5cGUSGQoRdHBtX2VrY2VydF9zZXJpYWwYBCABKAkSFQoNdHBtX2FrX3B1YmxpYxgFIAEoDCq/AQoVRGV2aWNlQXR0ZXN0YXRpb25UeXBlEicKI0RFVklDRV9BVFRFU1RBVElPTl9UWVBFX1VOU1BFQ0lGSUVEEAASJQohREVWSUNFX0FUVEVTVEFUSU9OX1RZUEVfVFBNX0VLUFVCEAESJgoiREVWSUNFX0FUVEVTVEFUSU9OX1RZUEVfVFBNX0VLQ0VSVBACEi4KKkRFVklDRV9BVFRFU1RBVElPTl9UWVBFX1RQTV9FS0NFUlRfVFJVU1RFRBADKoQBChJEZXZpY2VFbnJvbGxTdGF0dXMSJAogREVWSUNFX0VOUk9MTF9TVEFUVVNfVU5TUEVDSUZJRUQQABIlCiFERVZJQ0VfRU5ST0xMX1NUQVRVU19OT1RfRU5ST0xMRUQQARIhCh1ERVZJQ0VfRU5ST0xMX1NUQVRVU19FTlJPTExFRBACQlpaWGdpdGh1Yi5jb20vZ3Jhdml0YXRpb25hbC90ZWxlcG9ydC9hcGkvZ2VuL3Byb3RvL2dvL3RlbGVwb3J0L2RldmljZXRydXN0L3YxO2RldmljZXRydXN0djFiBnByb3RvMw", [file_google_protobuf_timestamp, file_teleport_devicetrust_v1_device_collected_data, file_teleport_devicetrust_v1_device_enroll_token, file_teleport_devicetrust_v1_device_profile, file_teleport_devicetrust_v1_device_source, file_teleport_devicetrust_v1_os_type]);

/**
 * Device represents a registered device.
 * Registered devices may be enrolled. Enrolled devices are allowed to perform
 * device-aware actions.
 *
 * @generated from message teleport.devicetrust.v1.Device
 */
export type Device = Message<"teleport.devicetrust.v1.Device"> & {
  /**
   * API version of the Device definition, present for compatibility with
   * types.DeviceV1.
   * Always "v1".
   *
   * @generated from field: string api_version = 1;
   */
  apiVersion: string;

  /**
   * Unique device identifier.
   * System managed.
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * Device operating system.
   * Required.
   *
   * @generated from field: teleport.devicetrust.v1.OSType os_type = 3;
   */
  osType: OSType;

  /**
   * Device inventory identifier.
   * Takes different meanings depending on the device and operating system.
   * For macOS devices it is the device serial number.
   * Required.
   *
   * @generated from field: string asset_tag = 4;
   */
  assetTag: string;

  /**
   * Create time.
   * System managed.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 5;
   */
  createTime?: Timestamp;

  /**
   * Last update time.
   * System managed.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 6;
   */
  updateTime?: Timestamp;

  /**
   * Enrollment token for the device.
   * Only present in situations where device creation and enrollment are rolled
   * into a single operation.
   * Transient.
   *
   * @generated from field: teleport.devicetrust.v1.DeviceEnrollToken enroll_token = 7;
   */
  enrollToken?: DeviceEnrollToken;

  /**
   * Enrollment status of the device.
   * May be changed to DEVICE_ENROLL_STATUS_NOT_ENROLLED at any time to
   * forcefully unenroll a device (server-side only).
   * System managed.
   *
   * @generated from field: teleport.devicetrust.v1.DeviceEnrollStatus enroll_status = 8;
   */
  enrollStatus: DeviceEnrollStatus;

  /**
   * Currently enrolled device credential.
   * Manually unenrolling a device clears the credential.
   * System managed.
   *
   * @generated from field: teleport.devicetrust.v1.DeviceCredential credential = 9;
   */
  credential?: DeviceCredential;

  /**
   * Device data collected during enrollment and device authentication.
   * Enrollment data is always present, while authentication data is capped at N
   * most recent events.
   * Only present in certain read modes.
   * Transient.
   *
   * @generated from field: repeated teleport.devicetrust.v1.DeviceCollectedData collected_data = 10;
   */
  collectedData: DeviceCollectedData[];

  /**
   * Source of the device.
   * Devices managed directly via Teleport (`tctl`, Web UI, etc) have no
   * assigned source.
   *
   * @generated from field: teleport.devicetrust.v1.DeviceSource source = 11;
   */
  source?: DeviceSource;

  /**
   * Device information acquired from an external source.
   *
   * @generated from field: teleport.devicetrust.v1.DeviceProfile profile = 12;
   */
  profile?: DeviceProfile;

  /**
   * Device owner.
   * Usually the owner is the same user who performed the enrollment ceremony.
   * May be empty for legacy devices (Teleport v13.2 and older).
   * Manually unenrolling a device clears the owner.
   * System-managed.
   *
   * @generated from field: string owner = 13;
   */
  owner: string;
};

/**
 * Describes the message teleport.devicetrust.v1.Device.
 * Use `create(DeviceSchema)` to create a new message.
 */
export const DeviceSchema: GenMessage<Device> = /*@__PURE__*/
  messageDesc(file_teleport_devicetrust_v1_device, 0);

/**
 * DeviceCredential represents the current enrolled public key of a device.
 *
 * @generated from message teleport.devicetrust.v1.DeviceCredential
 */
export type DeviceCredential = Message<"teleport.devicetrust.v1.DeviceCredential"> & {
  /**
   * Unique identifier of the credential, defined client-side.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Device public key marshaled as a PKIX, ASN.1 DER. Used only on MacOS.
   *
   * @generated from field: bytes public_key_der = 2;
   */
  publicKeyDer: Uint8Array;

  /**
   * The degree to which the device credential is attested.
   *
   * @generated from field: teleport.devicetrust.v1.DeviceAttestationType device_attestation_type = 3;
   */
  deviceAttestationType: DeviceAttestationType;

  /**
   * For TPM devices, the serial number of the TPM endorsement certificate.
   *
   * @generated from field: string tpm_ekcert_serial = 4;
   */
  tpmEkcertSerial: string;

  /**
   * For TPM devices, the encoded TPMT_PUBLIC structure containing the
   * attestation public key and signing parameters.
   *
   * @generated from field: bytes tpm_ak_public = 5;
   */
  tpmAkPublic: Uint8Array;
};

/**
 * Describes the message teleport.devicetrust.v1.DeviceCredential.
 * Use `create(DeviceCredentialSchema)` to create a new message.
 */
export const DeviceCredentialSchema: GenMessage<DeviceCredential> = /*@__PURE__*/
  messageDesc(file_teleport_devicetrust_v1_device, 1);

/**
 * AttestationType indicates the degree to which the device credential has
 * been attested.
 *
 * @generated from enum teleport.devicetrust.v1.DeviceAttestationType
 */
export enum DeviceAttestationType {
  /**
   * Bare public key which has only verified with proof of ownership.
   * Used on macOS.
   *
   * @generated from enum value: DEVICE_ATTESTATION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Credential was verified through a TPM EK->AK chain on enrollment.
   *
   * @generated from enum value: DEVICE_ATTESTATION_TYPE_TPM_EKPUB = 1;
   */
  TPM_EKPUB = 1,

  /**
   * Credential was verified through a TPM EKCert->AK chain on enrollment,
   * but no allow-listed CAs were configured to validate this EKCert against.
   *
   * @generated from enum value: DEVICE_ATTESTATION_TYPE_TPM_EKCERT = 2;
   */
  TPM_EKCERT = 2,

  /**
   * Credential was verified through a TPM EKCert->AK chain on enrollment, and
   * the EKCert was signed by a configured allow-listed CA.
   *
   * @generated from enum value: DEVICE_ATTESTATION_TYPE_TPM_EKCERT_TRUSTED = 3;
   */
  TPM_EKCERT_TRUSTED = 3,
}

/**
 * Describes the enum teleport.devicetrust.v1.DeviceAttestationType.
 */
export const DeviceAttestationTypeSchema: GenEnum<DeviceAttestationType> = /*@__PURE__*/
  enumDesc(file_teleport_devicetrust_v1_device, 0);

/**
 * DeviceEnrollStatus represents the enrollment status of a device.
 *
 * @generated from enum teleport.devicetrust.v1.DeviceEnrollStatus
 */
export enum DeviceEnrollStatus {
  /**
   * @generated from enum value: DEVICE_ENROLL_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Device is registered but not enrolled.
   *
   * @generated from enum value: DEVICE_ENROLL_STATUS_NOT_ENROLLED = 1;
   */
  NOT_ENROLLED = 1,

  /**
   * Device is registered and enrolled.
   *
   * @generated from enum value: DEVICE_ENROLL_STATUS_ENROLLED = 2;
   */
  ENROLLED = 2,
}

/**
 * Describes the enum teleport.devicetrust.v1.DeviceEnrollStatus.
 */
export const DeviceEnrollStatusSchema: GenEnum<DeviceEnrollStatus> = /*@__PURE__*/
  enumDesc(file_teleport_devicetrust_v1_device, 1);

