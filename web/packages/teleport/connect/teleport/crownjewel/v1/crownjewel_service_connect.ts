// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file teleport/crownjewel/v1/crownjewel_service.proto (package teleport.crownjewel.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateCrownJewelRequest, DeleteCrownJewelRequest, GetCrownJewelRequest, ListCrownJewelsRequest, ListCrownJewelsResponse, UpdateCrownJewelRequest, UpsertCrownJewelRequest } from "./crownjewel_service_pb.js";
import { CrownJewel } from "./crownjewel_pb.js";
import { Empty, MethodKind } from "@bufbuild/protobuf";

/**
 * CrownJewelService is a service that provides methods to manage CrownJewels.
 *
 * @generated from service teleport.crownjewel.v1.CrownJewelService
 */
export const CrownJewelService = {
  typeName: "teleport.crownjewel.v1.CrownJewelService",
  methods: {
    /**
     * CreateCrownJewel creates a new CrownJewel.
     *
     * @generated from rpc teleport.crownjewel.v1.CrownJewelService.CreateCrownJewel
     */
    createCrownJewel: {
      name: "CreateCrownJewel",
      I: CreateCrownJewelRequest,
      O: CrownJewel,
      kind: MethodKind.Unary,
    },
    /**
     * GetCrownJewel gets a CrownJewel by name.
     *
     * @generated from rpc teleport.crownjewel.v1.CrownJewelService.GetCrownJewel
     */
    getCrownJewel: {
      name: "GetCrownJewel",
      I: GetCrownJewelRequest,
      O: CrownJewel,
      kind: MethodKind.Unary,
    },
    /**
     * ListCrownJewels returns a list of CrownJewels. It supports pagination.
     *
     * @generated from rpc teleport.crownjewel.v1.CrownJewelService.ListCrownJewels
     */
    listCrownJewels: {
      name: "ListCrownJewels",
      I: ListCrownJewelsRequest,
      O: ListCrownJewelsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateCrownJewel updates an existing CrownJewel.
     *
     * @generated from rpc teleport.crownjewel.v1.CrownJewelService.UpdateCrownJewel
     */
    updateCrownJewel: {
      name: "UpdateCrownJewel",
      I: UpdateCrownJewelRequest,
      O: CrownJewel,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertCrownJewel upserts a CrownJewel.
     *
     * @generated from rpc teleport.crownjewel.v1.CrownJewelService.UpsertCrownJewel
     */
    upsertCrownJewel: {
      name: "UpsertCrownJewel",
      I: UpsertCrownJewelRequest,
      O: CrownJewel,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteCrownJewel deletes a CrownJewel.
     *
     * @generated from rpc teleport.crownjewel.v1.CrownJewelService.DeleteCrownJewel
     */
    deleteCrownJewel: {
      name: "DeleteCrownJewel",
      I: DeleteCrownJewelRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
  }
} as const;

