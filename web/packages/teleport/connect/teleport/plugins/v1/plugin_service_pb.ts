// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file teleport/plugins/v1/plugin_service.proto (package teleport.plugins.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty } from "@bufbuild/protobuf/wkt";
import type { PluginBootstrapCredentialsV1, PluginCredentialsV1, PluginStaticCredentialsV1, PluginStatusV1, PluginV1, PluginV1Schema, ResourceID } from "../../legacy/types/types_pb";
import { file_teleport_legacy_types_types } from "../../legacy/types/types_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file teleport/plugins/v1/plugin_service.proto.
 */
export const file_teleport_plugins_v1_plugin_service: GenFile = /*@__PURE__*/
  fileDesc("Cih0ZWxlcG9ydC9wbHVnaW5zL3YxL3BsdWdpbl9zZXJ2aWNlLnByb3RvEhN0ZWxlcG9ydC5wbHVnaW5zLnYxIjMKClBsdWdpblR5cGUSDAoEdHlwZRgBIAEoCRIXCg9vYXV0aF9jbGllbnRfaWQYAiABKAkijwMKE0NyZWF0ZVBsdWdpblJlcXVlc3QSHwoGcGx1Z2luGAEgASgLMg8udHlwZXMuUGx1Z2luVjESQgoVYm9vdHN0cmFwX2NyZWRlbnRpYWxzGAIgASgLMiMudHlwZXMuUGx1Z2luQm9vdHN0cmFwQ3JlZGVudGlhbHNWMRI8ChJzdGF0aWNfY3JlZGVudGlhbHMYAyABKAsyIC50eXBlcy5QbHVnaW5TdGF0aWNDcmVkZW50aWFsc1YxEkEKF3N0YXRpY19jcmVkZW50aWFsc19saXN0GAQgAygLMiAudHlwZXMuUGx1Z2luU3RhdGljQ3JlZGVudGlhbHNWMRJZChFjcmVkZW50aWFsX2xhYmVscxgFIAMoCzI+LnRlbGVwb3J0LnBsdWdpbnMudjEuQ3JlYXRlUGx1Z2luUmVxdWVzdC5DcmVkZW50aWFsTGFiZWxzRW50cnkaNwoVQ3JlZGVudGlhbExhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiNgoQR2V0UGx1Z2luUmVxdWVzdBIMCgRuYW1lGAEgASgJEhQKDHdpdGhfc2VjcmV0cxgCIAEoCCI2ChNVcGRhdGVQbHVnaW5SZXF1ZXN0Eh8KBnBsdWdpbhgBIAEoCzIPLnR5cGVzLlBsdWdpblYxIlAKEkxpc3RQbHVnaW5zUmVxdWVzdBIRCglwYWdlX3NpemUYASABKAUSEQoJc3RhcnRfa2V5GAIgASgJEhQKDHdpdGhfc2VjcmV0cxgDIAEoCCJJChNMaXN0UGx1Z2luc1Jlc3BvbnNlEiAKB3BsdWdpbnMYASADKAsyDy50eXBlcy5QbHVnaW5WMRIQCghuZXh0X2tleRgCIAEoCSIjChNEZWxldGVQbHVnaW5SZXF1ZXN0EgwKBG5hbWUYASABKAkiXAobU2V0UGx1Z2luQ3JlZGVudGlhbHNSZXF1ZXN0EgwKBG5hbWUYASABKAkSLwoLY3JlZGVudGlhbHMYAiABKAsyGi50eXBlcy5QbHVnaW5DcmVkZW50aWFsc1YxIk0KFlNldFBsdWdpblN0YXR1c1JlcXVlc3QSDAoEbmFtZRgBIAEoCRIlCgZzdGF0dXMYAiABKAsyFS50eXBlcy5QbHVnaW5TdGF0dXNWMSIgCh5HZXRBdmFpbGFibGVQbHVnaW5UeXBlc1JlcXVlc3QiWAofR2V0QXZhaWxhYmxlUGx1Z2luVHlwZXNSZXNwb25zZRI1CgxwbHVnaW5fdHlwZXMYASADKAsyHy50ZWxlcG9ydC5wbHVnaW5zLnYxLlBsdWdpblR5cGUirAEKJFNlYXJjaFBsdWdpblN0YXRpY0NyZWRlbnRpYWxzUmVxdWVzdBJVCgZsYWJlbHMYASADKAsyRS50ZWxlcG9ydC5wbHVnaW5zLnYxLlNlYXJjaFBsdWdpblN0YXRpY0NyZWRlbnRpYWxzUmVxdWVzdC5MYWJlbHNFbnRyeRotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIl4KJVNlYXJjaFBsdWdpblN0YXRpY0NyZWRlbnRpYWxzUmVzcG9uc2USNQoLY3JlZGVudGlhbHMYASADKAsyIC50eXBlcy5QbHVnaW5TdGF0aWNDcmVkZW50aWFsc1YxIiMKE05lZWRzQ2xlYW51cFJlcXVlc3QSDAoEdHlwZRgBIAEoCSJ1ChROZWVkc0NsZWFudXBSZXNwb25zZRIVCg1uZWVkc19jbGVhbnVwGAEgASgIEi8KFHJlc291cmNlc190b19jbGVhbnVwGAIgAygLMhEudHlwZXMuUmVzb3VyY2VJRBIVCg1wbHVnaW5fYWN0aXZlGAMgASgIIh4KDkNsZWFudXBSZXF1ZXN0EgwKBHR5cGUYASABKAkyrAgKDVBsdWdpblNlcnZpY2USUAoMQ3JlYXRlUGx1Z2luEigudGVsZXBvcnQucGx1Z2lucy52MS5DcmVhdGVQbHVnaW5SZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5EkMKCUdldFBsdWdpbhIlLnRlbGVwb3J0LnBsdWdpbnMudjEuR2V0UGx1Z2luUmVxdWVzdBoPLnR5cGVzLlBsdWdpblYxEkkKDFVwZGF0ZVBsdWdpbhIoLnRlbGVwb3J0LnBsdWdpbnMudjEuVXBkYXRlUGx1Z2luUmVxdWVzdBoPLnR5cGVzLlBsdWdpblYxElAKDERlbGV0ZVBsdWdpbhIoLnRlbGVwb3J0LnBsdWdpbnMudjEuRGVsZXRlUGx1Z2luUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRJgCgtMaXN0UGx1Z2lucxInLnRlbGVwb3J0LnBsdWdpbnMudjEuTGlzdFBsdWdpbnNSZXF1ZXN0GigudGVsZXBvcnQucGx1Z2lucy52MS5MaXN0UGx1Z2luc1Jlc3BvbnNlEmAKFFNldFBsdWdpbkNyZWRlbnRpYWxzEjAudGVsZXBvcnQucGx1Z2lucy52MS5TZXRQbHVnaW5DcmVkZW50aWFsc1JlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkSVgoPU2V0UGx1Z2luU3RhdHVzEisudGVsZXBvcnQucGx1Z2lucy52MS5TZXRQbHVnaW5TdGF0dXNSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5EoQBChdHZXRBdmFpbGFibGVQbHVnaW5UeXBlcxIzLnRlbGVwb3J0LnBsdWdpbnMudjEuR2V0QXZhaWxhYmxlUGx1Z2luVHlwZXNSZXF1ZXN0GjQudGVsZXBvcnQucGx1Z2lucy52MS5HZXRBdmFpbGFibGVQbHVnaW5UeXBlc1Jlc3BvbnNlEpYBCh1TZWFyY2hQbHVnaW5TdGF0aWNDcmVkZW50aWFscxI5LnRlbGVwb3J0LnBsdWdpbnMudjEuU2VhcmNoUGx1Z2luU3RhdGljQ3JlZGVudGlhbHNSZXF1ZXN0GjoudGVsZXBvcnQucGx1Z2lucy52MS5TZWFyY2hQbHVnaW5TdGF0aWNDcmVkZW50aWFsc1Jlc3BvbnNlEmMKDE5lZWRzQ2xlYW51cBIoLnRlbGVwb3J0LnBsdWdpbnMudjEuTmVlZHNDbGVhbnVwUmVxdWVzdBopLnRlbGVwb3J0LnBsdWdpbnMudjEuTmVlZHNDbGVhbnVwUmVzcG9uc2USRgoHQ2xlYW51cBIjLnRlbGVwb3J0LnBsdWdpbnMudjEuQ2xlYW51cFJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHlCUlpQZ2l0aHViLmNvbS9ncmF2aXRhdGlvbmFsL3RlbGVwb3J0L2FwaS9nZW4vcHJvdG8vZ28vdGVsZXBvcnQvcGx1Z2lucy92MTtwbHVnaW5zdjFiBnByb3RvMw", [file_google_protobuf_empty, file_teleport_legacy_types_types]);

/**
 * PluginType represents a single type of hosted plugin
 * that can be onboarded.
 *
 * @generated from message teleport.plugins.v1.PluginType
 */
export type PluginType = Message<"teleport.plugins.v1.PluginType"> & {
  /**
   * Type is a string corresponding to api.PluginTypeXXX constants
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * OAuthClientID contains the client ID of the OAuth application
   * that is used with this plugin's API provider.
   * For plugins that are not authenticated via OAuth,
   * this will be empty.
   *
   * @generated from field: string oauth_client_id = 2;
   */
  oauthClientId: string;
};

/**
 * Describes the message teleport.plugins.v1.PluginType.
 * Use `create(PluginTypeSchema)` to create a new message.
 */
export const PluginTypeSchema: GenMessage<PluginType> = /*@__PURE__*/
  messageDesc(file_teleport_plugins_v1_plugin_service, 0);

/**
 * CreatePluginRequest creates a new plugin from the given spec and initial
 * credentials.
 *
 * @generated from message teleport.plugins.v1.CreatePluginRequest
 */
export type CreatePluginRequest = Message<"teleport.plugins.v1.CreatePluginRequest"> & {
  /**
   * Plugin is the plugin object without live credentials.
   *
   * @generated from field: types.PluginV1 plugin = 1;
   */
  plugin?: PluginV1;

  /**
   * BootstrapCredentials are the initial credentials
   * issued by e.g. OAuth2 authorization code flow.
   * In the scope of processing this request, these are exchanged for
   * short-lived renewable credentials, which are stored in the Plugin.
   *
   * @generated from field: types.PluginBootstrapCredentialsV1 bootstrap_credentials = 2;
   */
  bootstrapCredentials?: PluginBootstrapCredentialsV1;

  /**
   * StaticCredentials are an optional static credential to supply to the
   * plugin.
   *
   * @generated from field: types.PluginStaticCredentialsV1 static_credentials = 3;
   */
  staticCredentials?: PluginStaticCredentialsV1;

  /**
   * StaticCredentials are an optional collection of static credentials
   * to supply to the plugin. Ignored if `StaticCredentials` is set.
   *
   * @generated from field: repeated types.PluginStaticCredentialsV1 static_credentials_list = 4;
   */
  staticCredentialsList: PluginStaticCredentialsV1[];

  /**
   * CredentialLabels are a collection of labels used to identify the
   * credentials secified in the StaticCredentialsList. Ignored if
   * StaticCredentials is used
   *
   * @generated from field: map<string, string> credential_labels = 5;
   */
  credentialLabels: { [key: string]: string };
};

/**
 * Describes the message teleport.plugins.v1.CreatePluginRequest.
 * Use `create(CreatePluginRequestSchema)` to create a new message.
 */
export const CreatePluginRequestSchema: GenMessage<CreatePluginRequest> = /*@__PURE__*/
  messageDesc(file_teleport_plugins_v1_plugin_service, 1);

/**
 * GetPluginRequest is a request to return a plugin instance by name.
 *
 * @generated from message teleport.plugins.v1.GetPluginRequest
 */
export type GetPluginRequest = Message<"teleport.plugins.v1.GetPluginRequest"> & {
  /**
   * Name is the name of the plugin instance.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * WithSecrets indicates whether plugin secrets (credentials) are requested
   *
   * @generated from field: bool with_secrets = 2;
   */
  withSecrets: boolean;
};

/**
 * Describes the message teleport.plugins.v1.GetPluginRequest.
 * Use `create(GetPluginRequestSchema)` to create a new message.
 */
export const GetPluginRequestSchema: GenMessage<GetPluginRequest> = /*@__PURE__*/
  messageDesc(file_teleport_plugins_v1_plugin_service, 2);

/**
 * UpdatePluginRequest is a request to update a plugin instance.
 *
 * @generated from message teleport.plugins.v1.UpdatePluginRequest
 */
export type UpdatePluginRequest = Message<"teleport.plugins.v1.UpdatePluginRequest"> & {
  /**
   * Plugin is the plugin object to update.
   *
   * @generated from field: types.PluginV1 plugin = 1;
   */
  plugin?: PluginV1;
};

/**
 * Describes the message teleport.plugins.v1.UpdatePluginRequest.
 * Use `create(UpdatePluginRequestSchema)` to create a new message.
 */
export const UpdatePluginRequestSchema: GenMessage<UpdatePluginRequest> = /*@__PURE__*/
  messageDesc(file_teleport_plugins_v1_plugin_service, 3);

/**
 * ListPluginsRequest is a paginated request to list all plugin instances.
 *
 * @generated from message teleport.plugins.v1.ListPluginsRequest
 */
export type ListPluginsRequest = Message<"teleport.plugins.v1.ListPluginsRequest"> & {
  /**
   * PageSize is the maximum number of plugins to return in a single response.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * StartKey is the value of NextKey received in the last ListPluginsResponse.
   * When making the initial request, this should be left empty.
   *
   * @generated from field: string start_key = 2;
   */
  startKey: string;

  /**
   * WithSecrets indicates whether plugin secrets (credentials) are requested
   *
   * @generated from field: bool with_secrets = 3;
   */
  withSecrets: boolean;
};

/**
 * Describes the message teleport.plugins.v1.ListPluginsRequest.
 * Use `create(ListPluginsRequestSchema)` to create a new message.
 */
export const ListPluginsRequestSchema: GenMessage<ListPluginsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_plugins_v1_plugin_service, 4);

/**
 * ListPluginsResponse is a paginated response to a ListPluginsRequest.
 *
 * @generated from message teleport.plugins.v1.ListPluginsResponse
 */
export type ListPluginsResponse = Message<"teleport.plugins.v1.ListPluginsResponse"> & {
  /**
   * Plugins is the list of plugins.
   *
   * @generated from field: repeated types.PluginV1 plugins = 1;
   */
  plugins: PluginV1[];

  /**
   * NextKey is a token to retrieve the next page of results, or empty
   * if there are no more results.
   *
   * @generated from field: string next_key = 2;
   */
  nextKey: string;
};

/**
 * Describes the message teleport.plugins.v1.ListPluginsResponse.
 * Use `create(ListPluginsResponseSchema)` to create a new message.
 */
export const ListPluginsResponseSchema: GenMessage<ListPluginsResponse> = /*@__PURE__*/
  messageDesc(file_teleport_plugins_v1_plugin_service, 5);

/**
 * DeletePluginRequest is a request to delete a plugin instance by name.
 *
 * @generated from message teleport.plugins.v1.DeletePluginRequest
 */
export type DeletePluginRequest = Message<"teleport.plugins.v1.DeletePluginRequest"> & {
  /**
   * Name is the name of the plugin instance.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message teleport.plugins.v1.DeletePluginRequest.
 * Use `create(DeletePluginRequestSchema)` to create a new message.
 */
export const DeletePluginRequestSchema: GenMessage<DeletePluginRequest> = /*@__PURE__*/
  messageDesc(file_teleport_plugins_v1_plugin_service, 6);

/**
 * SetPluginCredentialsRequest is a request to set credentials for an existing
 * plugin
 *
 * @generated from message teleport.plugins.v1.SetPluginCredentialsRequest
 */
export type SetPluginCredentialsRequest = Message<"teleport.plugins.v1.SetPluginCredentialsRequest"> & {
  /**
   * Name is the name of the plugin instance.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Credentials are the credentials obtained after exchanging the initial
   * credentials, and after successive credential renewals.
   *
   * @generated from field: types.PluginCredentialsV1 credentials = 2;
   */
  credentials?: PluginCredentialsV1;
};

/**
 * Describes the message teleport.plugins.v1.SetPluginCredentialsRequest.
 * Use `create(SetPluginCredentialsRequestSchema)` to create a new message.
 */
export const SetPluginCredentialsRequestSchema: GenMessage<SetPluginCredentialsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_plugins_v1_plugin_service, 7);

/**
 * SetPluginStatusRequest is a request to set the status for an existing plugin
 *
 * @generated from message teleport.plugins.v1.SetPluginStatusRequest
 */
export type SetPluginStatusRequest = Message<"teleport.plugins.v1.SetPluginStatusRequest"> & {
  /**
   * Name is the name of the plugin instance.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Status is the plugin status.
   *
   * @generated from field: types.PluginStatusV1 status = 2;
   */
  status?: PluginStatusV1;
};

/**
 * Describes the message teleport.plugins.v1.SetPluginStatusRequest.
 * Use `create(SetPluginStatusRequestSchema)` to create a new message.
 */
export const SetPluginStatusRequestSchema: GenMessage<SetPluginStatusRequest> = /*@__PURE__*/
  messageDesc(file_teleport_plugins_v1_plugin_service, 8);

/**
 * GetAvailablePluginTypesRequest is the request type for
 * GetAvailablePluginTypes
 *
 * @generated from message teleport.plugins.v1.GetAvailablePluginTypesRequest
 */
export type GetAvailablePluginTypesRequest = Message<"teleport.plugins.v1.GetAvailablePluginTypesRequest"> & {
};

/**
 * Describes the message teleport.plugins.v1.GetAvailablePluginTypesRequest.
 * Use `create(GetAvailablePluginTypesRequestSchema)` to create a new message.
 */
export const GetAvailablePluginTypesRequestSchema: GenMessage<GetAvailablePluginTypesRequest> = /*@__PURE__*/
  messageDesc(file_teleport_plugins_v1_plugin_service, 9);

/**
 * GetAvailablePluginTypesResponse is a response to for GetAvailablePluginTypes
 *
 * @generated from message teleport.plugins.v1.GetAvailablePluginTypesResponse
 */
export type GetAvailablePluginTypesResponse = Message<"teleport.plugins.v1.GetAvailablePluginTypesResponse"> & {
  /**
   * PluginTypes is a list of hosted plugins
   * that the auth service supports.
   *
   * @generated from field: repeated teleport.plugins.v1.PluginType plugin_types = 1;
   */
  pluginTypes: PluginType[];
};

/**
 * Describes the message teleport.plugins.v1.GetAvailablePluginTypesResponse.
 * Use `create(GetAvailablePluginTypesResponseSchema)` to create a new message.
 */
export const GetAvailablePluginTypesResponseSchema: GenMessage<GetAvailablePluginTypesResponse> = /*@__PURE__*/
  messageDesc(file_teleport_plugins_v1_plugin_service, 10);

/**
 * SearchPluginStaticCredentialsRequest is the request type for
 * SearchPluginStaticCredentials. The labels here are attached to a plugin and
 * search credential object at creation time. Labels can be provided to the
 * plugin credentials object and then, during plugin creation, a reference to
 * those labels augmented along with a uniquely identifying ID will ensure a
 * unique mapping between credentials and plugins.
 *
 * @generated from message teleport.plugins.v1.SearchPluginStaticCredentialsRequest
 */
export type SearchPluginStaticCredentialsRequest = Message<"teleport.plugins.v1.SearchPluginStaticCredentialsRequest"> & {
  /**
   * Labels are matched against static credentials objects and returned.
   *
   * @generated from field: map<string, string> labels = 1;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message teleport.plugins.v1.SearchPluginStaticCredentialsRequest.
 * Use `create(SearchPluginStaticCredentialsRequestSchema)` to create a new message.
 */
export const SearchPluginStaticCredentialsRequestSchema: GenMessage<SearchPluginStaticCredentialsRequest> = /*@__PURE__*/
  messageDesc(file_teleport_plugins_v1_plugin_service, 11);

/**
 * SearchPluginStaticCredentialsResponse is the response type for
 * SearchPluginStaticCredentials
 *
 * @generated from message teleport.plugins.v1.SearchPluginStaticCredentialsResponse
 */
export type SearchPluginStaticCredentialsResponse = Message<"teleport.plugins.v1.SearchPluginStaticCredentialsResponse"> & {
  /**
   * Credentials are the list of credentials matching the requested labels.
   *
   * @generated from field: repeated types.PluginStaticCredentialsV1 credentials = 1;
   */
  credentials: PluginStaticCredentialsV1[];
};

/**
 * Describes the message teleport.plugins.v1.SearchPluginStaticCredentialsResponse.
 * Use `create(SearchPluginStaticCredentialsResponseSchema)` to create a new message.
 */
export const SearchPluginStaticCredentialsResponseSchema: GenMessage<SearchPluginStaticCredentialsResponse> = /*@__PURE__*/
  messageDesc(file_teleport_plugins_v1_plugin_service, 12);

/**
 * NeedsCleanupRequest is the request type for NeedsCleanup.
 *
 * @generated from message teleport.plugins.v1.NeedsCleanupRequest
 */
export type NeedsCleanupRequest = Message<"teleport.plugins.v1.NeedsCleanupRequest"> & {
  /**
   * Type is the plugin type. We only need the string representation of the
   * plugin type and not the PluginType message, as we don't want the oauth
   * client ID here.
   *
   * @generated from field: string type = 1;
   */
  type: string;
};

/**
 * Describes the message teleport.plugins.v1.NeedsCleanupRequest.
 * Use `create(NeedsCleanupRequestSchema)` to create a new message.
 */
export const NeedsCleanupRequestSchema: GenMessage<NeedsCleanupRequest> = /*@__PURE__*/
  messageDesc(file_teleport_plugins_v1_plugin_service, 13);

/**
 * NeedsCleanupResponse is the response type for NeedsCleanup.
 *
 * @generated from message teleport.plugins.v1.NeedsCleanupResponse
 */
export type NeedsCleanupResponse = Message<"teleport.plugins.v1.NeedsCleanupResponse"> & {
  /**
   * NeedsCleanup will be set to true if the plugin needs cleanup.
   *
   * @generated from field: bool needs_cleanup = 1;
   */
  needsCleanup: boolean;

  /**
   * ResourcesToCleanup are the resources that need to be cleaned up.
   *
   * @generated from field: repeated types.ResourceID resources_to_cleanup = 2;
   */
  resourcesToCleanup: ResourceID[];

  /**
   * PluginActive returns true if the plugin is currently active.
   *
   * @generated from field: bool plugin_active = 3;
   */
  pluginActive: boolean;
};

/**
 * Describes the message teleport.plugins.v1.NeedsCleanupResponse.
 * Use `create(NeedsCleanupResponseSchema)` to create a new message.
 */
export const NeedsCleanupResponseSchema: GenMessage<NeedsCleanupResponse> = /*@__PURE__*/
  messageDesc(file_teleport_plugins_v1_plugin_service, 14);

/**
 * CleanupRequest is the request type for NeedsCleanup.
 *
 * @generated from message teleport.plugins.v1.CleanupRequest
 */
export type CleanupRequest = Message<"teleport.plugins.v1.CleanupRequest"> & {
  /**
   * Type is the plugin type. We only need the string representation of the
   * plugin type and not the PluginType message, as we don't want the oauth
   * client ID here.
   *
   * @generated from field: string type = 1;
   */
  type: string;
};

/**
 * Describes the message teleport.plugins.v1.CleanupRequest.
 * Use `create(CleanupRequestSchema)` to create a new message.
 */
export const CleanupRequestSchema: GenMessage<CleanupRequest> = /*@__PURE__*/
  messageDesc(file_teleport_plugins_v1_plugin_service, 15);

/**
 * PluginService provides CRUD operations for Plugin resources.
 *
 * @generated from service teleport.plugins.v1.PluginService
 */
export const PluginService: GenService<{
  /**
   * CreatePlugin creates a new plugin instance.
   *
   * @generated from rpc teleport.plugins.v1.PluginService.CreatePlugin
   */
  createPlugin: {
    methodKind: "unary";
    input: typeof CreatePluginRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * GetPlugin returns a plugin instance by name.
   *
   * @generated from rpc teleport.plugins.v1.PluginService.GetPlugin
   */
  getPlugin: {
    methodKind: "unary";
    input: typeof GetPluginRequestSchema;
    output: typeof PluginV1Schema;
  },
  /**
   * UpdatePlugin updates a plugin instance.
   *
   * @generated from rpc teleport.plugins.v1.PluginService.UpdatePlugin
   */
  updatePlugin: {
    methodKind: "unary";
    input: typeof UpdatePluginRequestSchema;
    output: typeof PluginV1Schema;
  },
  /**
   * DeletePlugin removes the specified plugin instance.
   *
   * @generated from rpc teleport.plugins.v1.PluginService.DeletePlugin
   */
  deletePlugin: {
    methodKind: "unary";
    input: typeof DeletePluginRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * ListPlugins returns a paginated view of plugin instances.
   *
   * @generated from rpc teleport.plugins.v1.PluginService.ListPlugins
   */
  listPlugins: {
    methodKind: "unary";
    input: typeof ListPluginsRequestSchema;
    output: typeof ListPluginsResponseSchema;
  },
  /**
   * SetPluginCredentials sets the credentials for the given plugin.
   *
   * @generated from rpc teleport.plugins.v1.PluginService.SetPluginCredentials
   */
  setPluginCredentials: {
    methodKind: "unary";
    input: typeof SetPluginCredentialsRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * SetPluginCredentials sets the status for the given plugin.
   *
   * @generated from rpc teleport.plugins.v1.PluginService.SetPluginStatus
   */
  setPluginStatus: {
    methodKind: "unary";
    input: typeof SetPluginStatusRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * GetAvailablePluginTypes returns the types of plugins
   * that the auth server supports onboarding.
   *
   * @generated from rpc teleport.plugins.v1.PluginService.GetAvailablePluginTypes
   */
  getAvailablePluginTypes: {
    methodKind: "unary";
    input: typeof GetAvailablePluginTypesRequestSchema;
    output: typeof GetAvailablePluginTypesResponseSchema;
  },
  /**
   * SearchPluginStaticCredentials returns static credentials that are searched
   * for. Only accessible by RoleAdmin and, in the case of Teleport Assist,
   * RoleProxy.
   *
   * @generated from rpc teleport.plugins.v1.PluginService.SearchPluginStaticCredentials
   */
  searchPluginStaticCredentials: {
    methodKind: "unary";
    input: typeof SearchPluginStaticCredentialsRequestSchema;
    output: typeof SearchPluginStaticCredentialsResponseSchema;
  },
  /**
   * NeedsCleanup will indicate whether a plugin of the given type needs cleanup
   * before it can be created.
   *
   * @generated from rpc teleport.plugins.v1.PluginService.NeedsCleanup
   */
  needsCleanup: {
    methodKind: "unary";
    input: typeof NeedsCleanupRequestSchema;
    output: typeof NeedsCleanupResponseSchema;
  },
  /**
   * Cleanup will clean up the resources for the given plugin type.
   *
   * @generated from rpc teleport.plugins.v1.PluginService.Cleanup
   */
  cleanup: {
    methodKind: "unary";
    input: typeof CleanupRequestSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_teleport_plugins_v1_plugin_service, 0);

