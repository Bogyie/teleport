// Copyright 2024 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file teleport/vnet/v1/vnet_config_service.proto (package teleport.vnet.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateVnetConfigRequest, DeleteVnetConfigRequest, GetVnetConfigRequest, UpdateVnetConfigRequest, UpsertVnetConfigRequest } from "./vnet_config_service_pb.js";
import { VnetConfig } from "./vnet_config_pb.js";
import { Empty, MethodKind } from "@bufbuild/protobuf";

/**
 * VnetConfigService provides an API to manage the singleton VnetConfig.
 *
 * @generated from service teleport.vnet.v1.VnetConfigService
 */
export const VnetConfigService = {
  typeName: "teleport.vnet.v1.VnetConfigService",
  methods: {
    /**
     * GetVnetConfig returns the specified VnetConfig.
     *
     * @generated from rpc teleport.vnet.v1.VnetConfigService.GetVnetConfig
     */
    getVnetConfig: {
      name: "GetVnetConfig",
      I: GetVnetConfigRequest,
      O: VnetConfig,
      kind: MethodKind.Unary,
    },
    /**
     * CreateVnetConfig creates a new VnetConfig.
     *
     * @generated from rpc teleport.vnet.v1.VnetConfigService.CreateVnetConfig
     */
    createVnetConfig: {
      name: "CreateVnetConfig",
      I: CreateVnetConfigRequest,
      O: VnetConfig,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateVnetConfig updates an existing VnetConfig.
     *
     * @generated from rpc teleport.vnet.v1.VnetConfigService.UpdateVnetConfig
     */
    updateVnetConfig: {
      name: "UpdateVnetConfig",
      I: UpdateVnetConfigRequest,
      O: VnetConfig,
      kind: MethodKind.Unary,
    },
    /**
     * UpsertVnetConfig creates a new VnetConfig or replaces an existing VnetConfig.
     *
     * @generated from rpc teleport.vnet.v1.VnetConfigService.UpsertVnetConfig
     */
    upsertVnetConfig: {
      name: "UpsertVnetConfig",
      I: UpsertVnetConfigRequest,
      O: VnetConfig,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteVnetConfig hard deletes the specified VnetConfig.
     *
     * @generated from rpc teleport.vnet.v1.VnetConfigService.DeleteVnetConfig
     */
    deleteVnetConfig: {
      name: "DeleteVnetConfig",
      I: DeleteVnetConfigRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
  }
} as const;

