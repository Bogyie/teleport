//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file prehog/v1/teleport.proto (package prehog.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file prehog/v1/teleport.proto.
 */
export const file_prehog_v1_teleport: GenFile = /*@__PURE__*/
  fileDesc("ChhwcmVob2cvdjEvdGVsZXBvcnQucHJvdG8SCXByZWhvZy52MSK4AQoSVXNlckFjdGl2aXR5UmVwb3J0EhMKC3JlcG9ydF91dWlkGAEgASgMEhQKDGNsdXN0ZXJfbmFtZRgCIAEoDBIXCg9yZXBvcnRlcl9ob3N0aWQYAyABKAwSLgoKc3RhcnRfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoHcmVjb3JkcxgFIAMoCzIdLnByZWhvZy52MS5Vc2VyQWN0aXZpdHlSZWNvcmQivQMKElVzZXJBY3Rpdml0eVJlY29yZBIRCgl1c2VyX25hbWUYASABKAwSJgoJdXNlcl9raW5kGA4gASgOMhMucHJlaG9nLnYxLlVzZXJLaW5kEg4KBmxvZ2lucxgCIAEoBBIUCgxzc2hfc2Vzc2lvbnMYAyABKAQSFAoMYXBwX3Nlc3Npb25zGAQgASgEEhUKDWt1YmVfc2Vzc2lvbnMYBSABKAQSEwoLZGJfc2Vzc2lvbnMYBiABKAQSGAoQZGVza3RvcF9zZXNzaW9ucxgHIAEoBBIYChBhcHBfdGNwX3Nlc3Npb25zGAggASgEEh0KEXNzaF9wb3J0X3Nlc3Npb25zGAkgASgEQgIYARIVCg1rdWJlX3JlcXVlc3RzGAogASgEEhMKC3NmdHBfZXZlbnRzGAsgASgEEhwKFHNzaF9wb3J0X3YyX3Nlc3Npb25zGAwgASgEEhoKEmt1YmVfcG9ydF9zZXNzaW9ucxgNIAEoBBIbChNzcGlmZmVfc3ZpZHNfaXNzdWVkGA8gASgEEhEKCWJvdF9qb2lucxgQIAEoBBIbChNjZXJ0aWZpY2F0ZXNfaXNzdWVkGBEgASgEItIBChZSZXNvdXJjZVByZXNlbmNlUmVwb3J0EhMKC3JlcG9ydF91dWlkGAEgASgMEhQKDGNsdXN0ZXJfbmFtZRgCIAEoDBIXCg9yZXBvcnRlcl9ob3N0aWQYAyABKAwSLgoKc3RhcnRfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASRAoVcmVzb3VyY2Vfa2luZF9yZXBvcnRzGAUgAygLMiUucHJlaG9nLnYxLlJlc291cmNlS2luZFByZXNlbmNlUmVwb3J0ImIKGlJlc291cmNlS2luZFByZXNlbmNlUmVwb3J0Ei4KDXJlc291cmNlX2tpbmQYASABKA4yFy5wcmVob2cudjEuUmVzb3VyY2VLaW5kEhQKDHJlc291cmNlX2lkcxgCIAMoBiKPAQoZU3VibWl0VXNhZ2VSZXBvcnRzUmVxdWVzdBI0Cg11c2VyX2FjdGl2aXR5GAEgAygLMh0ucHJlaG9nLnYxLlVzZXJBY3Rpdml0eVJlcG9ydBI8ChFyZXNvdXJjZV9wcmVzZW5jZRgCIAMoCzIhLnByZWhvZy52MS5SZXNvdXJjZVByZXNlbmNlUmVwb3J0IjAKGlN1Ym1pdFVzYWdlUmVwb3J0c1Jlc3BvbnNlEhIKCmJhdGNoX3V1aWQYASABKAwqTQoIVXNlcktpbmQSGQoVVVNFUl9LSU5EX1VOU1BFQ0lGSUVEEAASEwoPVVNFUl9LSU5EX0hVTUFOEAESEQoNVVNFUl9LSU5EX0JPVBACKocCCgxSZXNvdXJjZUtpbmQSHQoZUkVTT1VSQ0VfS0lORF9VTlNQRUNJRklFRBAAEhYKElJFU09VUkNFX0tJTkRfTk9ERRABEhwKGFJFU09VUkNFX0tJTkRfQVBQX1NFUlZFUhACEh0KGVJFU09VUkNFX0tJTkRfS1VCRV9TRVJWRVIQAxIbChdSRVNPVVJDRV9LSU5EX0RCX1NFUlZFUhAEEiEKHVJFU09VUkNFX0tJTkRfV0lORE9XU19ERVNLVE9QEAUSHgoaUkVTT1VSQ0VfS0lORF9OT0RFX09QRU5TU0gQBhIjCh9SRVNPVVJDRV9LSU5EX05PREVfT1BFTlNTSF9FSUNFEAcyfwoYVGVsZXBvcnRSZXBvcnRpbmdTZXJ2aWNlEmMKElN1Ym1pdFVzYWdlUmVwb3J0cxIkLnByZWhvZy52MS5TdWJtaXRVc2FnZVJlcG9ydHNSZXF1ZXN0GiUucHJlaG9nLnYxLlN1Ym1pdFVzYWdlUmVwb3J0c1Jlc3BvbnNlIgBiBnByb3RvMw", [file_google_protobuf_timestamp]);

/**
 * counters for user activity coming from a specific auth server from a specific
 * cluster, for a time window of up to 15 minutes
 *
 * PostHog event: tp.user.activity
 *
 * @generated from message prehog.v1.UserActivityReport
 */
export type UserActivityReport = Message<"prehog.v1.UserActivityReport"> & {
  /**
   * randomly generated UUID for this specific report, 16 bytes (in string order)
   *
   * PostHog property: tp.report_uuid (in 8-4-4-4-12 string form)
   *
   * @generated from field: bytes report_uuid = 1;
   */
  reportUuid: Uint8Array;

  /**
   * cluster name, anonymized, 32 bytes (HMAC-SHA-256)
   *
   * PostHog property: tp.cluster_name (in base64)
   *
   * @generated from field: bytes cluster_name = 2;
   */
  clusterName: Uint8Array;

  /**
   * hostid of the auth that collected this report, anonymized, 32 bytes (HMAC-SHA-256)
   *
   * PostHog property: tp.reporter_hostid (in base64)
   *
   * @generated from field: bytes reporter_hostid = 3;
   */
  reporterHostid: Uint8Array;

  /**
   * beginning of the time window for this data; ending is not specified but is
   * intended to be at most 15 minutes
   *
   * PostHog timestamp (not a property, the ingest time is tp.report_time instead)
   *
   * @generated from field: google.protobuf.Timestamp start_time = 4;
   */
  startTime?: Timestamp;

  /**
   * one set of counters for each user
   *
   * PostHog property: tp.records (encoded as a map keyed by username, not as a list)
   *
   * @generated from field: repeated prehog.v1.UserActivityRecord records = 5;
   */
  records: UserActivityRecord[];
};

/**
 * Describes the message prehog.v1.UserActivityReport.
 * Use `create(UserActivityReportSchema)` to create a new message.
 */
export const UserActivityReportSchema: GenMessage<UserActivityReport> = /*@__PURE__*/
  messageDesc(file_prehog_v1_teleport, 0);

/**
 * a set of activity counters for a single user; some old versions report
 * "ssh_port_sessions", counting both SSH port forwards and kubectl port-forward
 * connections in a single counter
 *
 * fields other than user_name are encoded as the same field name in PostHog
 *
 * @generated from message prehog.v1.UserActivityRecord
 */
export type UserActivityRecord = Message<"prehog.v1.UserActivityRecord"> & {
  /**
   * anonymized, 32 bytes (HMAC-SHA-256)
   *
   * key of the tp.records map in tp.user.activity (in base64)
   *
   * @generated from field: bytes user_name = 1;
   */
  userName: Uint8Array;

  /**
   * Indicates the type of user, e.g. bot or human, if known.
   *
   * @generated from field: prehog.v1.UserKind user_kind = 14;
   */
  userKind: UserKind;

  /**
   * counter of user.login events
   *
   * @generated from field: uint64 logins = 2;
   */
  logins: bigint;

  /**
   * counter of session.start events (non-Kube)
   *
   * @generated from field: uint64 ssh_sessions = 3;
   */
  sshSessions: bigint;

  /**
   * counter of app.session.start events (non-TCP)
   *
   * @generated from field: uint64 app_sessions = 4;
   */
  appSessions: bigint;

  /**
   * counter of session.start events (only Kube)
   *
   * @generated from field: uint64 kube_sessions = 5;
   */
  kubeSessions: bigint;

  /**
   * counter of db.session.start events
   *
   * @generated from field: uint64 db_sessions = 6;
   */
  dbSessions: bigint;

  /**
   * counter of windows.desktop.session.start events
   *
   * @generated from field: uint64 desktop_sessions = 7;
   */
  desktopSessions: bigint;

  /**
   * counter of app.session.start events (only TCP)
   *
   * @generated from field: uint64 app_tcp_sessions = 8;
   */
  appTcpSessions: bigint;

  /**
   * counter of port events (both SSH and Kube)
   *
   * @generated from field: uint64 ssh_port_sessions = 9 [deprecated = true];
   * @deprecated
   */
  sshPortSessions: bigint;

  /**
   * counter of kube.request events
   *
   * @generated from field: uint64 kube_requests = 10;
   */
  kubeRequests: bigint;

  /**
   * counter of sftp events
   *
   * @generated from field: uint64 sftp_events = 11;
   */
  sftpEvents: bigint;

  /**
   * counter of port events (only SSH)
   *
   * @generated from field: uint64 ssh_port_v2_sessions = 12;
   */
  sshPortV2Sessions: bigint;

  /**
   * counter of port events (only Kube)
   *
   * @generated from field: uint64 kube_port_sessions = 13;
   */
  kubePortSessions: bigint;

  /**
   * counter of SPIFFE SVIDs issued
   *
   * @generated from field: uint64 spiffe_svids_issued = 15;
   */
  spiffeSvidsIssued: bigint;

  /**
   * counter of bot joins
   *
   * @generated from field: uint64 bot_joins = 16;
   */
  botJoins: bigint;

  /**
   * counter of certificates issued for this user
   *
   * @generated from field: uint64 certificates_issued = 17;
   */
  certificatesIssued: bigint;
};

/**
 * Describes the message prehog.v1.UserActivityRecord.
 * Use `create(UserActivityRecordSchema)` to create a new message.
 */
export const UserActivityRecordSchema: GenMessage<UserActivityRecord> = /*@__PURE__*/
  messageDesc(file_prehog_v1_teleport, 1);

/**
 * @generated from message prehog.v1.ResourcePresenceReport
 */
export type ResourcePresenceReport = Message<"prehog.v1.ResourcePresenceReport"> & {
  /**
   * randomly generated UUID for this specific report, 16 bytes (in string order)
   *
   * @generated from field: bytes report_uuid = 1;
   */
  reportUuid: Uint8Array;

  /**
   * anonymized, 32 bytes (HMAC-SHA-256)
   *
   * @generated from field: bytes cluster_name = 2;
   */
  clusterName: Uint8Array;

  /**
   * anonymized, 32 bytes (HMAC-SHA-256)
   *
   * @generated from field: bytes reporter_hostid = 3;
   */
  reporterHostid: Uint8Array;

  /**
   * beginning of the time window for this data; ending is not specified but is
   * intended to be at most one hour
   *
   * @generated from field: google.protobuf.Timestamp start_time = 4;
   */
  startTime?: Timestamp;

  /**
   * @generated from field: repeated prehog.v1.ResourceKindPresenceReport resource_kind_reports = 5;
   */
  resourceKindReports: ResourceKindPresenceReport[];
};

/**
 * Describes the message prehog.v1.ResourcePresenceReport.
 * Use `create(ResourcePresenceReportSchema)` to create a new message.
 */
export const ResourcePresenceReportSchema: GenMessage<ResourcePresenceReport> = /*@__PURE__*/
  messageDesc(file_prehog_v1_teleport, 2);

/**
 * Counts all resources of one kind that were active during the time window
 * to track the number of active resources in a cluster over time.
 *
 * @generated from message prehog.v1.ResourceKindPresenceReport
 */
export type ResourceKindPresenceReport = Message<"prehog.v1.ResourceKindPresenceReport"> & {
  /**
   * the kind of resource
   *
   * @generated from field: prehog.v1.ResourceKind resource_kind = 1;
   */
  resourceKind: ResourceKind;

  /**
   * first 8 bytes of anonymized resource name
   *
   * @generated from field: repeated fixed64 resource_ids = 2;
   */
  resourceIds: bigint[];
};

/**
 * Describes the message prehog.v1.ResourceKindPresenceReport.
 * Use `create(ResourceKindPresenceReportSchema)` to create a new message.
 */
export const ResourceKindPresenceReportSchema: GenMessage<ResourceKindPresenceReport> = /*@__PURE__*/
  messageDesc(file_prehog_v1_teleport, 3);

/**
 * @generated from message prehog.v1.SubmitUsageReportsRequest
 */
export type SubmitUsageReportsRequest = Message<"prehog.v1.SubmitUsageReportsRequest"> & {
  /**
   * at most 10 reports of all kinds in a single RPC, each shouldn't exceed 128KiB or so
   *
   * each report is encoded as a separate tp.user.activity PostHog event
   *
   * @generated from field: repeated prehog.v1.UserActivityReport user_activity = 1;
   */
  userActivity: UserActivityReport[];

  /**
   * encoded as a separate tp.resource.counts PostHog event
   *
   * @generated from field: repeated prehog.v1.ResourcePresenceReport resource_presence = 2;
   */
  resourcePresence: ResourcePresenceReport[];
};

/**
 * Describes the message prehog.v1.SubmitUsageReportsRequest.
 * Use `create(SubmitUsageReportsRequestSchema)` to create a new message.
 */
export const SubmitUsageReportsRequestSchema: GenMessage<SubmitUsageReportsRequest> = /*@__PURE__*/
  messageDesc(file_prehog_v1_teleport, 4);

/**
 * @generated from message prehog.v1.SubmitUsageReportsResponse
 */
export type SubmitUsageReportsResponse = Message<"prehog.v1.SubmitUsageReportsResponse"> & {
  /**
   * randomly generated UUID for this specific batch, 16 bytes (in string order)
   *
   * PostHog property: tp.batch_uuid (in each report of the batch)
   *
   * @generated from field: bytes batch_uuid = 1;
   */
  batchUuid: Uint8Array;
};

/**
 * Describes the message prehog.v1.SubmitUsageReportsResponse.
 * Use `create(SubmitUsageReportsResponseSchema)` to create a new message.
 */
export const SubmitUsageReportsResponseSchema: GenMessage<SubmitUsageReportsResponse> = /*@__PURE__*/
  messageDesc(file_prehog_v1_teleport, 5);

/**
 * The kind of user a given username refers to. Usernames should always refer to
 * a valid cluster user (even if temporary, e.g. SSO), but may be Machine ID
 * bot users.
 *
 * @generated from enum prehog.v1.UserKind
 */
export enum UserKind {
  /**
   * Indicates a legacy cluster emitting events without a defined user kind.
   * Note that users (from PostHog's perspective) can be identified via future
   * events if the cluster is upgraded to specify this field.
   *
   * PostHog property value: ""
   *
   * @generated from enum value: USER_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Indicates the user associated with this event is human, either created
   * locally or via SSO.
   *
   * PostHog property value: "human"
   *
   * @generated from enum value: USER_KIND_HUMAN = 1;
   */
  HUMAN = 1,

  /**
   * Indicates the user associated with this event is a Machine ID bot user.
   *
   * PostHog property value: "bot"
   *
   * @generated from enum value: USER_KIND_BOT = 2;
   */
  BOT = 2,
}

/**
 * Describes the enum prehog.v1.UserKind.
 */
export const UserKindSchema: GenEnum<UserKind> = /*@__PURE__*/
  enumDesc(file_prehog_v1_teleport, 0);

/**
 * the kind of a "resource" (e.g. a node, a database, a desktop, etc.)
 * Keep in sync with prehog/v1alpha/teleport.proto
 *
 * @generated from enum prehog.v1.ResourceKind
 */
export enum ResourceKind {
  /**
   * @generated from enum value: RESOURCE_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * PostHog property value: "node"
   *
   * @generated from enum value: RESOURCE_KIND_NODE = 1;
   */
  NODE = 1,

  /**
   * PostHog property value: "app_server"
   *
   * @generated from enum value: RESOURCE_KIND_APP_SERVER = 2;
   */
  APP_SERVER = 2,

  /**
   * PostHog property value: "kube_server"
   *
   * @generated from enum value: RESOURCE_KIND_KUBE_SERVER = 3;
   */
  KUBE_SERVER = 3,

  /**
   * PostHog property value: "db_server"
   *
   * @generated from enum value: RESOURCE_KIND_DB_SERVER = 4;
   */
  DB_SERVER = 4,

  /**
   * PostHog property value: "windows_desktop"
   *
   * @generated from enum value: RESOURCE_KIND_WINDOWS_DESKTOP = 5;
   */
  WINDOWS_DESKTOP = 5,

  /**
   * ServerV3 ("node") heartbeat with a subkind of "openssh" (as opposed to
   * empty or "teleport"); not used in keepalives
   *
   * PostHog property value: "node.openssh"
   *
   * @generated from enum value: RESOURCE_KIND_NODE_OPENSSH = 6;
   */
  NODE_OPENSSH = 6,

  /**
   * ServerV3 ("node") heartbeat with a subkind of "openssh-ec2-ice".
   * Nodes that map EC2 instances and are accessed using EC2 Instance Connect Endpoint.
   * Not used in keepalives.
   * This is the SubKind SubKindOpenSSHEICENode in teleport repo.
   *
   * PostHog property value: "node.openssh_ec2_ice"
   *
   * @generated from enum value: RESOURCE_KIND_NODE_OPENSSH_EICE = 7;
   */
  NODE_OPENSSH_EICE = 7,
}

/**
 * Describes the enum prehog.v1.ResourceKind.
 */
export const ResourceKindSchema: GenEnum<ResourceKind> = /*@__PURE__*/
  enumDesc(file_prehog_v1_teleport, 1);

/**
 * @generated from service prehog.v1.TeleportReportingService
 */
export const TeleportReportingService: GenService<{
  /**
   * encodes and forwards usage reports to the PostHog event database; each
   * event is annotated with some properties that depend on the identity of the
   * caller:
   * - tp.account_id (UUID in string form, can be empty if missing from the
   *   license)
   * - tp.license_name (should always be a UUID)
   * - tp.license_authority (name of the authority that signed the license file
   *   used for authentication)
   * - tp.is_cloud (boolean)
   *
   * @generated from rpc prehog.v1.TeleportReportingService.SubmitUsageReports
   */
  submitUsageReports: {
    methodKind: "unary";
    input: typeof SubmitUsageReportsRequestSchema;
    output: typeof SubmitUsageReportsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_prehog_v1_teleport, 0);

